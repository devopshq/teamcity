{
  "swagger": "2.0",
  "info": {
    "version": "2018.1",
    "title": "TeamCity REST API"
  },
  "host": "",
  "tags": [
    {
      "name": "Agent"
    },
    {
      "name": "AgentPool"
    },
    {
      "name": "Audit"
    },
    {
      "name": "Avatar"
    },
    {
      "name": "Build"
    },
    {
      "name": "BuildQueue"
    },
    {
      "name": "BuildType"
    },
    {
      "name": "Change"
    },
    {
      "name": "CloudInstance"
    },
    {
      "name": "Global Server Settings"
    },
    {
      "name": "Group"
    },
    {
      "name": "Investigation"
    },
    {
      "name": "Mute"
    },
    {
      "name": "Node"
    },
    {
      "name": "Problem"
    },
    {
      "name": "ProblemOccurrence"
    },
    {
      "name": "Project"
    },
    {
      "name": "Role"
    },
    {
      "name": "Root"
    },
    {
      "name": "Server"
    },
    {
      "name": "Server Authentication Settings"
    },
    {
      "name": "Test"
    },
    {
      "name": "TestOccurrence"
    },
    {
      "name": "User"
    },
    {
      "name": "VcsRoot"
    },
    {
      "name": "VcsRootInstance"
    },
    {
      "name": "VersionedSettings"
    },
    {
      "name": "health"
    }
  ],
  "paths": {
    "/app/rest": {
      "get": {
        "tags": [
          "Root"
        ],
        "summary": "Get root endpoints.",
        "description": "",
        "operationId": "getRootEndpointsOfRoot",
        "produces": [
          "text/plain"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "text/plain": ""
            },
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/app/rest/agentPools": {
      "get": {
        "tags": [
          "AgentPool"
        ],
        "summary": "Get all agent pools.",
        "description": "",
        "operationId": "getAllAgentPools",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "locator",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "AgentPoolLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/agentPools"
            }
          }
        }
      },
      "post": {
        "tags": [
          "AgentPool"
        ],
        "summary": "Create a new agent pool.",
        "description": "",
        "operationId": "createAgentPool",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/agentPool"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/agentPool"
            }
          }
        }
      }
    },
    "/app/rest/agentPools/{agentPoolLocator}": {
      "get": {
        "tags": [
          "AgentPool"
        ],
        "summary": "Get the agent pool matching the locator.",
        "description": "",
        "operationId": "getAgentPoolOfAgentPool",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "agentPoolLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "AgentPoolLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/agentPool"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "AgentPool"
        ],
        "summary": "Delete the agent pool matching the locator.",
        "description": "",
        "operationId": "deleteAgentPool",
        "parameters": [
          {
            "name": "agentPoolLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "AgentPoolLocator"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/app/rest/agentPools/{agentPoolLocator}/agents": {
      "get": {
        "tags": [
          "AgentPool"
        ],
        "summary": "Get the agent of the matching agent pool.",
        "description": "",
        "operationId": "getAllAgentsFromAgentPool",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "agentPoolLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "AgentPoolLocator"
          },
          {
            "name": "locator",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "AgentLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/agents"
            }
          }
        }
      },
      "post": {
        "tags": [
          "AgentPool"
        ],
        "summary": "Assign the agent to the matching agent pool.",
        "description": "",
        "operationId": "addAgentToAgentPool",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "agentPoolLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "AgentPoolLocator"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/agent"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/agent"
            }
          }
        }
      }
    },
    "/app/rest/agentPools/{agentPoolLocator}/projects": {
      "get": {
        "tags": [
          "AgentPool"
        ],
        "summary": "Get all projects of the matching agent pool.",
        "description": "",
        "operationId": "getAllProjectsFromAgentPool",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "agentPoolLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "AgentPoolLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/projects"
            }
          }
        }
      },
      "post": {
        "tags": [
          "AgentPool"
        ],
        "summary": "Assign the project to the matching agent pool.",
        "description": "",
        "operationId": "addProjectToAgentPool",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "agentPoolLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "AgentPoolLocator"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/project"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/project"
            }
          }
        }
      },
      "put": {
        "tags": [
          "AgentPool"
        ],
        "summary": "Update projects of the matching agent pool.",
        "description": "",
        "operationId": "setAgentPoolProjects",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "agentPoolLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "AgentPoolLocator"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/projects"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/projects"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "AgentPool"
        ],
        "summary": "Unassign all projects from the matching agent pool.",
        "description": "",
        "operationId": "deleteAllProjectsFromAgentPool",
        "parameters": [
          {
            "name": "agentPoolLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "AgentPoolLocator"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/app/rest/agentPools/{agentPoolLocator}/projects/{projectLocator}": {
      "delete": {
        "tags": [
          "AgentPool"
        ],
        "summary": "Unassign the project from the matching agent pool.",
        "description": "",
        "operationId": "deleteProjectFromAgentPool",
        "parameters": [
          {
            "name": "agentPoolLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "AgentPoolLocator"
          },
          {
            "name": "projectLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "ProjectLocator"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/app/rest/agentPools/{agentPoolLocator}/{field}": {
      "get": {
        "tags": [
          "AgentPool"
        ],
        "summary": "Get a field of the matching agent pool.",
        "description": "",
        "operationId": "getFieldFromAgentPool",
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "agentPoolLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "AgentPoolLocator"
          },
          {
            "name": "field",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "text/plain": ""
            },
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "put": {
        "tags": [
          "AgentPool"
        ],
        "summary": "Update a field of the matching agent pool.",
        "description": "",
        "operationId": "setAgentPoolField",
        "consumes": [
          "text/plain"
        ],
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "agentPoolLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "AgentPoolLocator"
          },
          {
            "name": "field",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "text/plain": ""
            },
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/app/rest/agents": {
      "get": {
        "tags": [
          "Agent"
        ],
        "summary": "Get all known agents.",
        "description": "",
        "operationId": "getAllAgents",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "locator",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "AgentLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/agents"
            }
          }
        }
      }
    },
    "/app/rest/agents/{agentLocator}": {
      "get": {
        "tags": [
          "Agent"
        ],
        "summary": "Get agent matching the locator.",
        "description": "",
        "operationId": "getAgent",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "agentLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "AgentLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/agent"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Agent"
        ],
        "summary": "Delete an inactive agent.",
        "description": "",
        "operationId": "deleteAgent",
        "parameters": [
          {
            "name": "agentLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "AgentLocator"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/app/rest/agents/{agentLocator}/authorizedInfo": {
      "get": {
        "tags": [
          "Agent"
        ],
        "summary": "Get the authorization info of the matching agent.",
        "description": "",
        "operationId": "getAuthorizedInfo",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "agentLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "AgentLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/authorizedInfo"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Agent"
        ],
        "summary": "Update the authorization info of the matching agent.",
        "description": "",
        "operationId": "setAuthorizedInfo",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "agentLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "AgentLocator"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/authorizedInfo"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/authorizedInfo"
            }
          }
        }
      }
    },
    "/app/rest/agents/{agentLocator}/compatibilityPolicy": {
      "get": {
        "tags": [
          "Agent"
        ],
        "summary": "Get the build configuration run policy of the matching agent.",
        "description": "",
        "operationId": "getBuildConfigurationRunPolicy",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "agentLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "AgentLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/compatibilityPolicy"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Agent"
        ],
        "summary": "Update build configuration run policy of agent matching locator.",
        "description": "",
        "operationId": "setBuildConfigurationRunPolicy",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "agentLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "AgentLocator"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/compatibilityPolicy"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/compatibilityPolicy"
            }
          }
        }
      }
    },
    "/app/rest/agents/{agentLocator}/compatibleBuildTypes": {
      "get": {
        "tags": [
          "Agent"
        ],
        "summary": "Get build types compatible with the matching agent.",
        "description": "",
        "operationId": "getCompatibleBuildTypes",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "agentLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "AgentLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/buildTypes"
            }
          }
        }
      }
    },
    "/app/rest/agents/{agentLocator}/enabledInfo": {
      "get": {
        "tags": [
          "Agent"
        ],
        "summary": "Check if the matching agent is enabled.",
        "description": "",
        "operationId": "getEnabledInfo",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "agentLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "AgentLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/enabledInfo"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Agent"
        ],
        "summary": "Update the enablement status of the matching agent.",
        "description": "",
        "operationId": "setEnabledInfo",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "agentLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "AgentLocator"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/enabledInfo"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/enabledInfo"
            }
          }
        }
      }
    },
    "/app/rest/agents/{agentLocator}/incompatibleBuildTypes": {
      "get": {
        "tags": [
          "Agent"
        ],
        "summary": "Get build types incompatible with the matching agent.",
        "description": "",
        "operationId": "getIncompatibleBuildTypes",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "agentLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "AgentLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/compatibilities"
            }
          }
        }
      }
    },
    "/app/rest/agents/{agentLocator}/pool": {
      "get": {
        "tags": [
          "Agent"
        ],
        "summary": "Get the agent pool of the matching agent.",
        "description": "",
        "operationId": "getAgentPool",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "agentLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "AgentLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/agentPool"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Agent"
        ],
        "summary": "Assign the matching agent to the specified agent pool.",
        "description": "",
        "operationId": "setAgentPool",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "agentLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "AgentLocator"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/agentPool"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/agentPool"
            }
          }
        }
      }
    },
    "/app/rest/agents/{agentLocator}/{field}": {
      "get": {
        "tags": [
          "Agent"
        ],
        "summary": "Get a field of the matching agent.",
        "description": "",
        "operationId": "getAgentField",
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "agentLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "AgentLocator"
          },
          {
            "name": "field",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "text/plain": ""
            },
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Agent"
        ],
        "summary": "Update a field of the matching agent.",
        "description": "",
        "operationId": "setAgentField",
        "consumes": [
          "text/plain"
        ],
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "agentLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "AgentLocator"
          },
          {
            "name": "field",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "text/plain": ""
            },
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/app/rest/apiVersion": {
      "get": {
        "tags": [
          "Root"
        ],
        "summary": "Get the API version.",
        "description": "",
        "operationId": "getApiVersion",
        "produces": [
          "text/plain"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "text/plain": ""
            },
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/app/rest/audit": {
      "get": {
        "tags": [
          "Audit"
        ],
        "summary": "Get all audit events.",
        "description": "",
        "operationId": "getAllAuditEvents",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "locator",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "AuditLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/auditEvents"
            }
          }
        }
      }
    },
    "/app/rest/audit/{auditEventLocator}": {
      "get": {
        "tags": [
          "Audit"
        ],
        "summary": "Get audit event matching the locator.",
        "description": "",
        "operationId": "getAuditEvent",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "auditEventLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "AuditLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/auditEvent"
            }
          }
        }
      }
    },
    "/app/rest/avatars/{userLocator}": {
      "put": {
        "tags": [
          "Avatar"
        ],
        "summary": "Update a users avatar",
        "description": "",
        "operationId": "putAvatar",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "avatar",
            "in": "formData",
            "required": false,
            "type": "file"
          },
          {
            "name": "userLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "UserLocator"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "delete": {
        "tags": [
          "Avatar"
        ],
        "summary": "Delete a users avatar",
        "description": "",
        "operationId": "deleteAvatar",
        "parameters": [
          {
            "name": "userLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "UserLocator"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/app/rest/avatars/{userLocator}/{size}/avatar.png": {
      "get": {
        "tags": [
          "Avatar"
        ],
        "summary": "Get a users avatar",
        "description": "",
        "operationId": "getAvatar",
        "produces": [
          "image/png"
        ],
        "parameters": [
          {
            "name": "userLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "UserLocator"
          },
          {
            "name": "size",
            "in": "path",
            "description": "avatar's size",
            "required": true,
            "type": "integer",
            "maximum": 300,
            "minimum": 2,
            "format": "int32"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation",
            "examples": {
              "image/png": ""
            }
          }
        }
      }
    },
    "/app/rest/avatars/{userLocator}/{size}/avatar.{hash}.png": {
      "get": {
        "tags": [
          "Avatar"
        ],
        "summary": "Get a users avatar",
        "description": "",
        "operationId": "getAvatarWithHash",
        "produces": [
          "image/png"
        ],
        "parameters": [
          {
            "name": "userLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "UserLocator"
          },
          {
            "name": "size",
            "in": "path",
            "description": "avatar's size",
            "required": true,
            "type": "integer",
            "maximum": 300,
            "minimum": 2,
            "format": "int32"
          },
          {
            "name": "hash",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation",
            "examples": {
              "image/png": ""
            }
          }
        }
      }
    },
    "/app/rest/buildQueue": {
      "get": {
        "tags": [
          "BuildQueue"
        ],
        "summary": "Get all queued builds.",
        "description": "",
        "operationId": "getAllQueuedBuilds",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "locator",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "BuildQueueLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/builds"
            }
          }
        }
      },
      "post": {
        "tags": [
          "BuildQueue"
        ],
        "summary": "Add a new build to the queue.",
        "description": "",
        "operationId": "addBuildToQueue",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/build"
            }
          },
          {
            "name": "moveToTop",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/build"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "BuildQueue"
        ],
        "summary": "Delete all queued builds.",
        "description": "",
        "operationId": "deleteAllQueuedBuilds",
        "parameters": [
          {
            "name": "locator",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "BuildQueueLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/app/rest/buildQueue/order": {
      "put": {
        "tags": [
          "BuildQueue"
        ],
        "summary": "Update the build queue order.",
        "description": "",
        "operationId": "setQueuedBuildsOrder",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/builds"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/builds"
            }
          }
        }
      }
    },
    "/app/rest/buildQueue/order/{queuePosition}": {
      "get": {
        "tags": [
          "BuildQueue"
        ],
        "summary": "Get the queue position of a queued matching build.",
        "description": "",
        "operationId": "getQueuedBuildPosition",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "queuePosition",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/build"
            }
          }
        }
      },
      "put": {
        "tags": [
          "BuildQueue"
        ],
        "summary": "Update the queue position of a queued matching build.",
        "description": "",
        "operationId": "setQueuedBuildPosition",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/build"
            }
          },
          {
            "name": "queuePosition",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/build"
            }
          }
        }
      }
    },
    "/app/rest/buildQueue/{buildLocator}/approvalInfo": {
      "get": {
        "tags": [
          "BuildQueue"
        ],
        "summary": "Get approval info of a queued matching build.",
        "description": "",
        "operationId": "getApprovalInfo",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "buildLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/approvalInfo"
            }
          }
        }
      }
    },
    "/app/rest/buildQueue/{buildLocator}/approve": {
      "post": {
        "tags": [
          "BuildQueue"
        ],
        "summary": "Approve queued build with approval feature enabled.",
        "description": "",
        "operationId": "approveQueuedBuild",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "buildLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildLocator"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/approvalInfo"
            }
          }
        }
      }
    },
    "/app/rest/buildQueue/{buildLocator}/tags": {
      "get": {
        "tags": [
          "BuildQueue"
        ],
        "summary": "Get tags of the queued matching build.",
        "description": "",
        "operationId": "getQueuedBuildTags",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "buildLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildQueueLocator"
          },
          {
            "name": "locator",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/tags"
            }
          }
        }
      },
      "post": {
        "tags": [
          "BuildQueue"
        ],
        "summary": "Add tags to the matching build.",
        "description": "",
        "operationId": "addTagsToBuildOfBuildQueue",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "buildLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildLocator"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/tags"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/app/rest/buildQueue/{queuedBuildLocator}": {
      "get": {
        "tags": [
          "BuildQueue"
        ],
        "summary": "Get a queued matching build.",
        "description": "",
        "operationId": "getQueuedBuild",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "queuedBuildLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildQueueLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/build"
            }
          }
        }
      },
      "post": {
        "tags": [
          "BuildQueue"
        ],
        "summary": "Cancel a queued matching build.",
        "description": "",
        "operationId": "cancelQueuedBuild",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "queuedBuildLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildQueueLocator"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/buildCancelRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/build"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "BuildQueue"
        ],
        "summary": "Delete a queued matching build.",
        "description": "",
        "operationId": "deleteQueuedBuild",
        "parameters": [
          {
            "name": "queuedBuildLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildQueueLocator"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/app/rest/buildQueue/{queuedBuildLocator}/compatibleAgents": {
      "get": {
        "tags": [
          "BuildQueue"
        ],
        "summary": "Get compatible agents for a queued matching build.",
        "description": "",
        "operationId": "getCompatibleAgentsForBuild",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "queuedBuildLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildQueueLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/agents"
            }
          }
        }
      }
    },
    "/app/rest/buildTypes": {
      "get": {
        "tags": [
          "BuildType"
        ],
        "summary": "Get all build configurations.",
        "description": "",
        "operationId": "getAllBuildTypes",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "locator",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "BuildTypeLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/buildTypes"
            }
          }
        }
      },
      "post": {
        "tags": [
          "BuildType"
        ],
        "summary": "Create a new build configuration.",
        "description": "",
        "operationId": "createBuildType",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/buildType"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/buildType"
            }
          }
        }
      }
    },
    "/app/rest/buildTypes/{btLocator}": {
      "get": {
        "tags": [
          "BuildType"
        ],
        "summary": "Get build configuration matching the locator.",
        "description": "",
        "operationId": "getBuildType",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "btLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildTypeLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/buildType"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "BuildType"
        ],
        "summary": "Delete build configuration matching the locator.",
        "description": "",
        "operationId": "deleteBuildType",
        "parameters": [
          {
            "name": "btLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildTypeLocator"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/app/rest/buildTypes/{btLocator}/agent-requirements": {
      "get": {
        "tags": [
          "BuildType"
        ],
        "summary": "Get all agent requirements of the matching build configuration.",
        "description": "",
        "operationId": "getAllAgentRequirements",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "btLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildTypeLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/agent-requirements"
            }
          }
        }
      },
      "post": {
        "tags": [
          "BuildType"
        ],
        "summary": "Add an agent requirement to the matching build configuration.",
        "description": "",
        "operationId": "addAgentRequirementToBuildType",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "btLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildTypeLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/agent-requirement"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/agent-requirement"
            }
          }
        }
      },
      "put": {
        "tags": [
          "BuildType"
        ],
        "summary": "Update all agent requirements of the matching build configuration.",
        "description": "",
        "operationId": "replaceAllAgentRequirements",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "btLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildTypeLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/agent-requirements"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/agent-requirements"
            }
          }
        }
      }
    },
    "/app/rest/buildTypes/{btLocator}/agent-requirements/{agentRequirementLocator}": {
      "get": {
        "tags": [
          "BuildType"
        ],
        "summary": "Get an agent requirement of the matching build configuration.",
        "description": "",
        "operationId": "getAgentRequirement",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "btLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildTypeLocator"
          },
          {
            "name": "agentRequirementLocator",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/agent-requirement"
            }
          }
        }
      },
      "put": {
        "tags": [
          "BuildType"
        ],
        "summary": "Update an agent requirement of the matching build configuration.",
        "description": "",
        "operationId": "replaceAgentRequirement",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "btLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildTypeLocator"
          },
          {
            "name": "agentRequirementLocator",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/agent-requirement"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/agent-requirement"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "BuildType"
        ],
        "summary": "Remove an agent requirement of the matching build configuration.",
        "description": "",
        "operationId": "deleteAgentRequirement",
        "parameters": [
          {
            "name": "btLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildTypeLocator"
          },
          {
            "name": "agentRequirementLocator",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/app/rest/buildTypes/{btLocator}/agent-requirements/{agentRequirementLocator}/{fieldName}": {
      "get": {
        "tags": [
          "BuildType"
        ],
        "summary": "Get a setting of an agent requirement of the matching build configuration.",
        "description": "",
        "operationId": "getAgentRequirementParameter",
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "btLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildTypeLocator"
          },
          {
            "name": "agentRequirementLocator",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fieldName",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "text/plain": ""
            },
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "put": {
        "tags": [
          "BuildType"
        ],
        "summary": "Update a parameter of an agent requirement of the matching build configuration.",
        "description": "",
        "operationId": "setAgentRequirementParameter",
        "consumes": [
          "text/plain"
        ],
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "btLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildTypeLocator"
          },
          {
            "name": "agentRequirementLocator",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fieldName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "text/plain": ""
            },
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/app/rest/buildTypes/{btLocator}/aliases": {
      "get": {
        "tags": [
          "BuildType"
        ],
        "summary": "Get external IDs of the matching build configuration.",
        "description": "",
        "operationId": "getAliases",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "btLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildTypeLocator"
          },
          {
            "name": "field",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/items"
            }
          }
        }
      }
    },
    "/app/rest/buildTypes/{btLocator}/artifact-dependencies": {
      "get": {
        "tags": [
          "BuildType"
        ],
        "summary": "Get all artifact dependencies of the matching build configuration.",
        "description": "",
        "operationId": "getAllArtifactDependencies",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "btLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildTypeLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/artifact-dependencies"
            }
          }
        }
      },
      "post": {
        "tags": [
          "BuildType"
        ],
        "summary": "Add an artifact dependency to the matching build configuration.",
        "description": "",
        "operationId": "addArtifactDependencyToBuildType",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "btLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildTypeLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/artifact-dependency"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/artifact-dependency"
            }
          }
        }
      },
      "put": {
        "tags": [
          "BuildType"
        ],
        "summary": "Update all artifact dependencies of the matching build configuration.",
        "description": "",
        "operationId": "replaceAllArtifactDependencies",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "btLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildTypeLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/artifact-dependencies"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/artifact-dependencies"
            }
          }
        }
      }
    },
    "/app/rest/buildTypes/{btLocator}/artifact-dependencies/{artifactDepLocator}": {
      "get": {
        "tags": [
          "BuildType"
        ],
        "summary": "Get an artifact dependency of the matching build configuration.",
        "description": "",
        "operationId": "getArtifactDependency",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "btLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildTypeLocator"
          },
          {
            "name": "artifactDepLocator",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/artifact-dependency"
            }
          }
        }
      },
      "put": {
        "tags": [
          "BuildType"
        ],
        "summary": "Update an artifact dependency of the matching build configuration.",
        "description": "",
        "operationId": "replaceArtifactDependency",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "btLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildTypeLocator"
          },
          {
            "name": "artifactDepLocator",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/artifact-dependency"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/artifact-dependency"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "BuildType"
        ],
        "summary": "Remove an artifact dependency from the matching build configuration.",
        "description": "",
        "operationId": "deleteArtifactDependency",
        "parameters": [
          {
            "name": "btLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildTypeLocator"
          },
          {
            "name": "artifactDepLocator",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/app/rest/buildTypes/{btLocator}/artifact-dependencies/{artifactDepLocator}/{fieldName}": {
      "get": {
        "tags": [
          "BuildType"
        ],
        "summary": "Get a parameter of an artifact dependency of the matching build configuration.",
        "description": "",
        "operationId": "getArtifactDependencyParameter",
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "btLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildTypeLocator"
          },
          {
            "name": "artifactDepLocator",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fieldName",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "text/plain": ""
            },
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "put": {
        "tags": [
          "BuildType"
        ],
        "summary": "Update a parameter of an artifact dependency of the matching build configuration.",
        "description": "",
        "operationId": "setArtifactDependencyParameter",
        "consumes": [
          "text/plain"
        ],
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "btLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildTypeLocator"
          },
          {
            "name": "artifactDepLocator",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fieldName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "text/plain": ""
            },
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/app/rest/buildTypes/{btLocator}/branches": {
      "get": {
        "tags": [
          "BuildType"
        ],
        "summary": "Get all branches of the matching build configuration.",
        "description": "",
        "operationId": "getAllBranchesOfBuildType",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "btLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildTypeLocator"
          },
          {
            "name": "locator",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/branches"
            }
          }
        }
      }
    },
    "/app/rest/buildTypes/{btLocator}/buildTags": {
      "get": {
        "tags": [
          "BuildType"
        ],
        "summary": "Get tags of builds of the matching build configuration.",
        "description": "",
        "operationId": "getBuildTypeBuildTags",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "btLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildTypeLocator"
          },
          {
            "name": "field",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/tags"
            }
          }
        }
      }
    },
    "/app/rest/buildTypes/{btLocator}/builds": {
      "get": {
        "tags": [
          "BuildType"
        ],
        "summary": "Get builds of the matching build configuration.",
        "description": "",
        "operationId": "getBuildTypeBuilds",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "btLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildTypeLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/builds"
            }
          }
        }
      }
    },
    "/app/rest/buildTypes/{btLocator}/features": {
      "get": {
        "tags": [
          "BuildType"
        ],
        "summary": "Get all build features of the matching build configuration.",
        "description": "",
        "operationId": "getAllBuildFeatures",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "btLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildTypeLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/features"
            }
          }
        }
      },
      "post": {
        "tags": [
          "BuildType"
        ],
        "summary": "Add build feature to the matching build configuration.",
        "description": "",
        "operationId": "addBuildFeatureToBuildType",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "btLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildTypeLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/feature"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/feature"
            }
          }
        }
      },
      "put": {
        "tags": [
          "BuildType"
        ],
        "summary": "Update all build features of the matching build configuration.",
        "description": "",
        "operationId": "replaceAllBuildFeatures",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "btLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildTypeLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/features"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/features"
            }
          }
        }
      }
    },
    "/app/rest/buildTypes/{btLocator}/features/{featureId}": {
      "get": {
        "tags": [
          "BuildType"
        ],
        "summary": "Get a build feature of the matching build configuration.",
        "description": "",
        "operationId": "getBuildFeature",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "btLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildTypeLocator"
          },
          {
            "name": "featureId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/feature"
            }
          }
        }
      },
      "put": {
        "tags": [
          "BuildType"
        ],
        "summary": "Update a build feature of the matching build configuration.",
        "description": "",
        "operationId": "replaceBuildFeature",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "btLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildTypeLocator"
          },
          {
            "name": "featureId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/feature"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/feature"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "BuildType"
        ],
        "summary": "Remove a build feature of the matching build configuration.",
        "description": "",
        "operationId": "deleteFeatureOfBuildType",
        "parameters": [
          {
            "name": "btLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildTypeLocator"
          },
          {
            "name": "featureId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/app/rest/buildTypes/{btLocator}/features/{featureId}/parameters": {
      "get": {
        "tags": [
          "BuildType"
        ],
        "summary": "Get all parameters of a build feature of the matching build configuration.",
        "description": "",
        "operationId": "getAllBuildFeatureParameters",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "btLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildTypeLocator"
          },
          {
            "name": "featureId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/properties"
            }
          }
        }
      },
      "put": {
        "tags": [
          "BuildType"
        ],
        "summary": "Update a parameter of a build feature of the matching build configuration.",
        "description": "",
        "operationId": "replaceBuildFeatureParameters",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "btLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildTypeLocator"
          },
          {
            "name": "featureId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/properties"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/properties"
            }
          }
        }
      }
    },
    "/app/rest/buildTypes/{btLocator}/features/{featureId}/parameters/{parameterName}": {
      "get": {
        "tags": [
          "BuildType"
        ],
        "summary": "Get a parameter of a build feature of the matching build configuration.",
        "description": "",
        "operationId": "getBuildFeatureParameter",
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "btLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildTypeLocator"
          },
          {
            "name": "featureId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "parameterName",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "text/plain": ""
            },
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "put": {
        "tags": [
          "BuildType"
        ],
        "summary": "Update build feature parameter for the matching build configuration.",
        "description": "",
        "operationId": "addParameterToBuildFeature",
        "consumes": [
          "text/plain"
        ],
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "btLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildTypeLocator"
          },
          {
            "name": "featureId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "parameterName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "text/plain": ""
            },
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/app/rest/buildTypes/{btLocator}/features/{featureId}/{name}": {
      "get": {
        "tags": [
          "BuildType"
        ],
        "summary": "Get the setting of a build feature of the matching build configuration.",
        "description": "",
        "operationId": "getBuildFeatureSetting",
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "btLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildTypeLocator"
          },
          {
            "name": "featureId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "text/plain": ""
            },
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "put": {
        "tags": [
          "BuildType"
        ],
        "summary": "Update a parameter of a build feature of the matching build configuration.",
        "description": "",
        "operationId": "setBuildFeatureParameter",
        "consumes": [
          "text/plain"
        ],
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "btLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildTypeLocator"
          },
          {
            "name": "featureId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "text/plain": ""
            },
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/app/rest/buildTypes/{btLocator}/investigations": {
      "get": {
        "tags": [
          "BuildType"
        ],
        "summary": "Get all investigations of the matching build configuration.",
        "description": "",
        "operationId": "getAllInvestigationsOfBuildType",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "btLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildTypeLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/investigations"
            }
          }
        }
      }
    },
    "/app/rest/buildTypes/{btLocator}/parameters": {
      "get": {
        "tags": [
          "BuildType"
        ],
        "summary": "Get build parameters.",
        "description": "",
        "operationId": "getBuildParametersOfBuildType",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "locator",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "btLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildTypeLocator"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/properties"
            }
          }
        }
      },
      "post": {
        "tags": [
          "BuildType"
        ],
        "summary": "Create a build parameter.",
        "description": "",
        "operationId": "createBuildParameterOfBuildType",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/property"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "btLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildTypeLocator"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/property"
            }
          }
        }
      },
      "put": {
        "tags": [
          "BuildType"
        ],
        "summary": "Update build parameters.",
        "description": "",
        "operationId": "updateBuildParametersOfBuildType",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/properties"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "btLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildTypeLocator"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/properties"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "BuildType"
        ],
        "summary": "Delete all build parameters.",
        "description": "",
        "operationId": "deleteBuildParametersOfBuildType",
        "parameters": [
          {
            "name": "btLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildTypeLocator"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/app/rest/buildTypes/{btLocator}/parameters/{name}": {
      "get": {
        "tags": [
          "BuildType"
        ],
        "summary": "Get build parameter.",
        "description": "",
        "operationId": "getBuildParameterOfBuildType",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "btLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildTypeLocator"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/property"
            }
          }
        }
      },
      "put": {
        "tags": [
          "BuildType"
        ],
        "summary": "Update build parameter.",
        "description": "",
        "operationId": "updateBuildParameterOfBuildType",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/property"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "btLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildTypeLocator"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/property"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "BuildType"
        ],
        "summary": "Delete build parameter.",
        "description": "",
        "operationId": "deleteBuildParameterOfBuildType",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "btLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildTypeLocator"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/app/rest/buildTypes/{btLocator}/parameters/{name}/type": {
      "get": {
        "tags": [
          "BuildType"
        ],
        "summary": "Get type of build parameter.",
        "description": "",
        "operationId": "getBuildParameterTypeOfBuildType",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "btLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildTypeLocator"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/type"
            }
          }
        }
      },
      "put": {
        "tags": [
          "BuildType"
        ],
        "summary": "Update type of build parameter.",
        "description": "",
        "operationId": "updateBuildParameterTypeOfBuildType",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/type"
            }
          },
          {
            "name": "btLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildTypeLocator"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/type"
            }
          }
        }
      }
    },
    "/app/rest/buildTypes/{btLocator}/parameters/{name}/type/rawValue": {
      "get": {
        "tags": [
          "BuildType"
        ],
        "summary": "Get build parameter specification.",
        "description": "",
        "operationId": "getBuildParameterSpecificationOfBuildType",
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "btLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildTypeLocator"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "text/plain": ""
            },
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "put": {
        "tags": [
          "BuildType"
        ],
        "summary": "Update build parameter specification.",
        "description": "",
        "operationId": "updateBuildParameterSpecificationOfBuildType",
        "consumes": [
          "text/plain"
        ],
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "btLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildTypeLocator"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "text/plain": ""
            },
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/app/rest/buildTypes/{btLocator}/parameters/{name}/value": {
      "get": {
        "tags": [
          "BuildType"
        ],
        "summary": "Get value of build parameter.",
        "description": "",
        "operationId": "getBuildParameterValueOfBuildType",
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "btLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildTypeLocator"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "text/plain": ""
            },
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "put": {
        "tags": [
          "BuildType"
        ],
        "summary": "Update value of build parameter.",
        "description": "",
        "operationId": "updateBuildParameterValueOfBuildType",
        "consumes": [
          "text/plain"
        ],
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "btLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildTypeLocator"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "text/plain": ""
            },
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/app/rest/buildTypes/{btLocator}/settingsFile": {
      "get": {
        "tags": [
          "BuildType"
        ],
        "summary": "Get the settings file of the matching build configuration.",
        "description": "",
        "operationId": "getBuildTypeSettingsFile",
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "btLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildTypeLocator"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "text/plain": ""
            },
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/app/rest/buildTypes/{btLocator}/snapshot-dependencies": {
      "get": {
        "tags": [
          "BuildType"
        ],
        "summary": "Get all snapshot dependencies of the matching build configuration.",
        "description": "",
        "operationId": "getAllSnapshotDependencies",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "btLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildTypeLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/snapshot-dependencies"
            }
          }
        }
      },
      "post": {
        "tags": [
          "BuildType"
        ],
        "summary": "Add a snapshot dependency to the matching build configuration.",
        "description": "",
        "operationId": "addSnapshotDependencyToBuildType",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "btLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildTypeLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/snapshot-dependency"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/snapshot-dependency"
            }
          }
        }
      },
      "put": {
        "tags": [
          "BuildType"
        ],
        "summary": "Update all snapshot dependencies of the matching build configuration.",
        "description": "",
        "operationId": "replaceAllSnapshotDependencies",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "btLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildTypeLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/snapshot-dependencies"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/snapshot-dependencies"
            }
          }
        }
      }
    },
    "/app/rest/buildTypes/{btLocator}/snapshot-dependencies/{snapshotDepLocator}": {
      "get": {
        "tags": [
          "BuildType"
        ],
        "summary": "Get a snapshot dependency of the matching build configuration.",
        "description": "",
        "operationId": "getSnapshotDependency",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "btLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildTypeLocator"
          },
          {
            "name": "snapshotDepLocator",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/snapshot-dependency"
            }
          }
        }
      },
      "put": {
        "tags": [
          "BuildType"
        ],
        "summary": "Update a snapshot dependency of the matching build configuration.",
        "description": "",
        "operationId": "replaceSnapshotDependency",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "btLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildTypeLocator"
          },
          {
            "name": "snapshotDepLocator",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/snapshot-dependency"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/snapshot-dependency"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "BuildType"
        ],
        "summary": "Delete a snapshot dependency of the matching build configuration.",
        "description": "",
        "operationId": "deleteSnapshotDependency",
        "parameters": [
          {
            "name": "btLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildTypeLocator"
          },
          {
            "name": "snapshotDepLocator",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/app/rest/buildTypes/{btLocator}/steps": {
      "get": {
        "tags": [
          "BuildType"
        ],
        "summary": "Get all build steps of the matching build configuration.",
        "description": "",
        "operationId": "getAllBuildSteps",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "btLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildTypeLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/steps"
            }
          }
        }
      },
      "post": {
        "tags": [
          "BuildType"
        ],
        "summary": "Add a build step to the matching build configuration.",
        "description": "",
        "operationId": "addBuildStepToBuildType",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "btLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildTypeLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/step"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/step"
            }
          }
        }
      },
      "put": {
        "tags": [
          "BuildType"
        ],
        "summary": "Update all build steps of the matching build configuration.",
        "description": "",
        "operationId": "replaceAllBuildSteps",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "btLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildTypeLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/steps"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/steps"
            }
          }
        }
      }
    },
    "/app/rest/buildTypes/{btLocator}/steps/{stepId}": {
      "get": {
        "tags": [
          "BuildType"
        ],
        "summary": "Get a build step of the matching build configuration.",
        "description": "",
        "operationId": "getBuildStep",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "btLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildTypeLocator"
          },
          {
            "name": "stepId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/step"
            }
          }
        }
      },
      "put": {
        "tags": [
          "BuildType"
        ],
        "summary": "Replace a build step of the matching build configuration.",
        "description": "",
        "operationId": "replaceBuildStep",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "btLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildTypeLocator"
          },
          {
            "name": "stepId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/step"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/step"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "BuildType"
        ],
        "summary": "Delete a build step of the matching build configuration.",
        "description": "",
        "operationId": "deleteBuildStep",
        "parameters": [
          {
            "name": "btLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildTypeLocator"
          },
          {
            "name": "stepId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/app/rest/buildTypes/{btLocator}/steps/{stepId}/parameters": {
      "get": {
        "tags": [
          "BuildType"
        ],
        "summary": "Get all parameters of a build step of the matching build configuration.",
        "description": "",
        "operationId": "getAllBuildStepParameters",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "btLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildTypeLocator"
          },
          {
            "name": "stepId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/properties"
            }
          }
        }
      },
      "put": {
        "tags": [
          "BuildType"
        ],
        "summary": "Update a parameter of a build step of the matching build configuration.",
        "description": "",
        "operationId": "deleteBuildStepParameters",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "btLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildTypeLocator"
          },
          {
            "name": "stepId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/properties"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/properties"
            }
          }
        }
      }
    },
    "/app/rest/buildTypes/{btLocator}/steps/{stepId}/parameters/{parameterName}": {
      "get": {
        "tags": [
          "BuildType"
        ],
        "summary": "Get a parameter of a build step of the matching build configuration.",
        "description": "",
        "operationId": "getBuildStepParameter",
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "btLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildTypeLocator"
          },
          {
            "name": "stepId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "parameterName",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "text/plain": ""
            },
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "put": {
        "tags": [
          "BuildType"
        ],
        "summary": "Add a parameter to a build step of the matching build configuration.",
        "description": "",
        "operationId": "addParameterToBuildStep",
        "consumes": [
          "text/plain"
        ],
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "btLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildTypeLocator"
          },
          {
            "name": "stepId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "parameterName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "text/plain": ""
            },
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/app/rest/buildTypes/{btLocator}/steps/{stepId}/{fieldName}": {
      "get": {
        "tags": [
          "BuildType"
        ],
        "summary": "Get the setting of a build step of the matching build configuration.",
        "description": "",
        "operationId": "getBuildStepSetting",
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "btLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildTypeLocator"
          },
          {
            "name": "stepId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fieldName",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "text/plain": ""
            },
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "put": {
        "tags": [
          "BuildType"
        ],
        "summary": "Update a parameter of a build step of the matching build configuration.",
        "description": "",
        "operationId": "setBuildStepParameter",
        "consumes": [
          "text/plain"
        ],
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "btLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildTypeLocator"
          },
          {
            "name": "stepId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fieldName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "text/plain": ""
            },
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/app/rest/buildTypes/{btLocator}/templates": {
      "get": {
        "tags": [
          "BuildType"
        ],
        "summary": "Get all build templates of the matching build configuration.",
        "description": "",
        "operationId": "getAllBuildTemplates",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "btLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildTypeLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/buildTypes"
            }
          }
        }
      },
      "post": {
        "tags": [
          "BuildType"
        ],
        "summary": "Add a build template to the matching build configuration.",
        "description": "",
        "operationId": "addBuildTemplate",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "btLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildTypeLocator"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/buildType"
            }
          },
          {
            "name": "optimizeSettings",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/buildType"
            }
          }
        }
      },
      "put": {
        "tags": [
          "BuildType"
        ],
        "summary": "Update all templates of the matching build configuration.",
        "description": "",
        "operationId": "setBuildTypeTemplates",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "btLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildTypeLocator"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/buildTypes"
            }
          },
          {
            "name": "optimizeSettings",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/buildTypes"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "BuildType"
        ],
        "summary": "Detach all templates from the matching build configuration.",
        "description": "",
        "operationId": "removeAllTemplates",
        "parameters": [
          {
            "name": "btLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildTypeLocator"
          },
          {
            "name": "inlineSettings",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/app/rest/buildTypes/{btLocator}/templates/{templateLocator}": {
      "get": {
        "tags": [
          "BuildType"
        ],
        "summary": "Get a template of the matching build configuration.",
        "description": "",
        "operationId": "getBuildTemplate",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "btLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildTypeLocator"
          },
          {
            "name": "templateLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildTypeLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/buildType"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "BuildType"
        ],
        "summary": "Detach a template from the matching build configuration.",
        "description": "",
        "operationId": "removeTemplate",
        "parameters": [
          {
            "name": "btLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildTypeLocator"
          },
          {
            "name": "templateLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildTypeLocator"
          },
          {
            "name": "inlineSettings",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/app/rest/buildTypes/{btLocator}/triggers": {
      "get": {
        "tags": [
          "BuildType"
        ],
        "summary": "Get all triggers of the matching build configuration.",
        "description": "",
        "operationId": "getAllTriggers",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "btLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildTypeLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/triggers"
            }
          }
        }
      },
      "post": {
        "tags": [
          "BuildType"
        ],
        "summary": "Add a trigger to the matching build configuration.",
        "description": "",
        "operationId": "addTriggerToBuildType",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "btLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildTypeLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/trigger"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/trigger"
            }
          }
        }
      },
      "put": {
        "tags": [
          "BuildType"
        ],
        "summary": "Update all triggers of the matching build configuration.",
        "description": "",
        "operationId": "replaceAllTriggers",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "btLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildTypeLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/triggers"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/triggers"
            }
          }
        }
      }
    },
    "/app/rest/buildTypes/{btLocator}/triggers/{triggerLocator}": {
      "get": {
        "tags": [
          "BuildType"
        ],
        "summary": "Get a trigger of the matching build configuration.",
        "description": "",
        "operationId": "getTrigger",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "btLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildTypeLocator"
          },
          {
            "name": "triggerLocator",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/trigger"
            }
          }
        }
      },
      "put": {
        "tags": [
          "BuildType"
        ],
        "summary": "Update a trigger of the matching build configuration.",
        "description": "",
        "operationId": "replaceTrigger",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "btLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildTypeLocator"
          },
          {
            "name": "triggerLocator",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/trigger"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/trigger"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "BuildType"
        ],
        "summary": "Delete a trigger of the matching build configuration.",
        "description": "",
        "operationId": "deleteTrigger",
        "parameters": [
          {
            "name": "btLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildTypeLocator"
          },
          {
            "name": "triggerLocator",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/app/rest/buildTypes/{btLocator}/triggers/{triggerLocator}/{fieldName}": {
      "get": {
        "tags": [
          "BuildType"
        ],
        "summary": "Get a parameter of a trigger of the matching build configuration.",
        "description": "",
        "operationId": "getTriggerParameter",
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "btLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildTypeLocator"
          },
          {
            "name": "triggerLocator",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fieldName",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "text/plain": ""
            },
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "put": {
        "tags": [
          "BuildType"
        ],
        "summary": "Update a parameter of a trigger of the matching build configuration.",
        "description": "",
        "operationId": "setTriggerParameter",
        "consumes": [
          "text/plain"
        ],
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "btLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildTypeLocator"
          },
          {
            "name": "triggerLocator",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fieldName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "text/plain": ""
            },
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/app/rest/buildTypes/{btLocator}/vcs-root-entries": {
      "get": {
        "tags": [
          "BuildType"
        ],
        "summary": "Get all VCS roots of the matching build configuration.",
        "description": "",
        "operationId": "getAllVcsRootsOfBuildType",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "btLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildTypeLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/vcs-root-entries"
            }
          }
        }
      },
      "post": {
        "tags": [
          "BuildType"
        ],
        "summary": "Add a VCS root to the matching build.",
        "description": "",
        "operationId": "addVcsRootToBuildType",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "btLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildTypeLocator"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/vcs-root-entry"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/vcs-root-entry"
            }
          }
        }
      },
      "put": {
        "tags": [
          "BuildType"
        ],
        "summary": "Update all VCS roots of the matching build configuration.",
        "description": "",
        "operationId": "replaceAllVcsRoots",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "btLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildTypeLocator"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/vcs-root-entries"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/vcs-root-entries"
            }
          }
        }
      }
    },
    "/app/rest/buildTypes/{btLocator}/vcs-root-entries/{vcsRootLocator}": {
      "get": {
        "tags": [
          "BuildType"
        ],
        "summary": "Get a VCS root of the matching build configuration.",
        "description": "",
        "operationId": "getVcsRoot",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "btLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildTypeLocator"
          },
          {
            "name": "vcsRootLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "VcsRootLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/vcs-root-entry"
            }
          }
        }
      },
      "put": {
        "tags": [
          "BuildType"
        ],
        "summary": "Update a VCS root of the matching build configuration.",
        "description": "",
        "operationId": "updateBuildTypeVcsRoot",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "btLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildTypeLocator"
          },
          {
            "name": "vcsRootLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "VcsRootLocator"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/vcs-root-entry"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/vcs-root-entry"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "BuildType"
        ],
        "summary": "Remove a VCS root of the matching build configuration.",
        "description": "",
        "operationId": "deleteVcsRootOfBuildType",
        "parameters": [
          {
            "name": "btLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildTypeLocator"
          },
          {
            "name": "vcsRootLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "VcsRootLocator"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/app/rest/buildTypes/{btLocator}/vcs-root-entries/{vcsRootLocator}/checkout-rules": {
      "get": {
        "tags": [
          "BuildType"
        ],
        "summary": "Get checkout rules of a VCS root of the matching build configuration.",
        "description": "",
        "operationId": "getVcsRootCheckoutRules",
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "btLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildTypeLocator"
          },
          {
            "name": "vcsRootLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "VcsRootLocator"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "text/plain": ""
            },
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "put": {
        "tags": [
          "BuildType"
        ],
        "summary": "Update checkout rules of a VCS root of the matching build configuration.",
        "description": "",
        "operationId": "updateBuildTypeVcsRootCheckoutRules",
        "consumes": [
          "text/plain"
        ],
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "btLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildTypeLocator"
          },
          {
            "name": "vcsRootLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "VcsRootLocator"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "text/plain": ""
            },
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/app/rest/buildTypes/{btLocator}/vcs/files/latest": {
      "get": {
        "tags": [
          "BuildType"
        ],
        "summary": "List all files.",
        "description": "",
        "operationId": "getFilesListOfBuildType",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "basePath",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "locator",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "btLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildTypeLocator"
          },
          {
            "name": "resolveParameters",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/files"
            }
          }
        }
      }
    },
    "/app/rest/buildTypes/{btLocator}/vcs/files/latest/archived{path}": {
      "get": {
        "tags": [
          "BuildType"
        ],
        "summary": "Get specific file zipped.",
        "description": "",
        "operationId": "getZippedFileOfBuildType",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "(/.*)?"
          },
          {
            "name": "basePath",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "locator",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "btLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildTypeLocator"
          },
          {
            "name": "resolveParameters",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation",
            "examples": {
              "*/*": ""
            }
          }
        }
      }
    },
    "/app/rest/buildTypes/{btLocator}/vcs/files/latest/files{path}": {
      "get": {
        "tags": [
          "BuildType"
        ],
        "summary": "Download specific file.",
        "description": "",
        "operationId": "downloadFileOfBuildType",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "(/.*)?"
          },
          {
            "name": "btLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildTypeLocator"
          },
          {
            "name": "resolveParameters",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation",
            "examples": {
              "*/*": ""
            }
          }
        }
      }
    },
    "/app/rest/buildTypes/{btLocator}/vcs/files/latest/metadata{path}": {
      "get": {
        "tags": [
          "BuildType"
        ],
        "summary": "Get metadata of specific file.",
        "description": "",
        "operationId": "getFileMetadataOfBuildType",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "(/.*)?"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "btLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildTypeLocator"
          },
          {
            "name": "resolveParameters",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/file"
            }
          }
        }
      }
    },
    "/app/rest/buildTypes/{btLocator}/vcs/files/latest/{path}": {
      "get": {
        "tags": [
          "BuildType"
        ],
        "summary": "List files under this path.",
        "description": "",
        "operationId": "getFilesListForSubpathOfBuildType",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "(.*)?"
          },
          {
            "name": "basePath",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "locator",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "btLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildTypeLocator"
          },
          {
            "name": "resolveParameters",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/files"
            }
          }
        }
      }
    },
    "/app/rest/buildTypes/{btLocator}/vcsRootInstances": {
      "get": {
        "tags": [
          "BuildType"
        ],
        "summary": "Get all VCS root instances of the matching build configuration.",
        "description": "",
        "operationId": "getVcsRootInstancesOfBuildType",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "btLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildTypeLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/vcs-root-instances"
            }
          }
        }
      }
    },
    "/app/rest/buildTypes/{btLocator}/{field}": {
      "get": {
        "tags": [
          "BuildType"
        ],
        "summary": "Get a field of the matching build configuration.",
        "description": "",
        "operationId": "getBuildTypeField",
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "btLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildTypeLocator"
          },
          {
            "name": "field",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "text/plain": ""
            },
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "put": {
        "tags": [
          "BuildType"
        ],
        "summary": "Update a field of the matching build configuration.",
        "description": "",
        "operationId": "setBuildTypeField",
        "consumes": [
          "text/plain"
        ],
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "btLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildTypeLocator"
          },
          {
            "name": "field",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "text/plain": ""
            },
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/app/rest/builds": {
      "get": {
        "tags": [
          "Build"
        ],
        "summary": "Get all builds.",
        "description": "",
        "operationId": "getAllBuilds",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "locator",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "BuildLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/builds"
            }
          }
        }
      }
    },
    "/app/rest/builds/aggregated/{buildLocator}/status": {
      "get": {
        "tags": [
          "Build"
        ],
        "summary": "Get the build status of aggregated matching builds.",
        "description": "",
        "operationId": "getAggregatedBuildStatus",
        "parameters": [
          {
            "name": "buildLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildLocator"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/app/rest/builds/aggregated/{buildLocator}/statusIcon{suffix}": {
      "get": {
        "tags": [
          "Build"
        ],
        "summary": "Get the status icon (in specified format) of aggregated matching builds.",
        "description": "",
        "operationId": "getAggregatedBuildStatusIcon",
        "parameters": [
          {
            "name": "buildLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildLocator"
          },
          {
            "name": "suffix",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "(.*)?"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/app/rest/builds/multiple/{buildLocator}": {
      "get": {
        "tags": [
          "Build"
        ],
        "summary": "Get multiple builds matching the locator.",
        "description": "",
        "operationId": "getMultipleBuilds",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "buildLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/builds"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Build"
        ],
        "summary": "cancelMultipleBuilds",
        "description": "",
        "operationId": "cancelMultiple",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "buildLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildLocator"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/buildCancelRequest"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/multipleOperationResult"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Build"
        ],
        "summary": "Delete multiple builds matching the locator.",
        "description": "",
        "operationId": "deleteMultipleBuilds",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "buildLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/multipleOperationResult"
            }
          }
        }
      }
    },
    "/app/rest/builds/multiple/{buildLocator}/comment": {
      "put": {
        "tags": [
          "Build"
        ],
        "summary": "Update comments in multiple matching builds.",
        "description": "",
        "operationId": "setMultipleBuildComments",
        "consumes": [
          "text/plain"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "buildLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildLocator"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/multipleOperationResult"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Build"
        ],
        "summary": "Delete comments of multiple matching builds.",
        "description": "",
        "operationId": "deleteMultipleBuildComments",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "buildLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/multipleOperationResult"
            }
          }
        }
      }
    },
    "/app/rest/builds/multiple/{buildLocator}/pinInfo": {
      "put": {
        "tags": [
          "Build"
        ],
        "summary": "Pin multiple matching builds.",
        "description": "",
        "operationId": "pinMultipleBuilds",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "buildLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildLocator"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/pinInfo"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/multipleOperationResult"
            }
          }
        }
      }
    },
    "/app/rest/builds/multiple/{buildLocator}/tags": {
      "post": {
        "tags": [
          "Build"
        ],
        "summary": "Add tags to multiple matching builds.",
        "description": "",
        "operationId": "addTagsToMultipleBuilds",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "buildLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildLocator"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/tags"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/multipleOperationResult"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Build"
        ],
        "summary": "Remove tags from multiple matching builds.",
        "description": "",
        "operationId": "removeMultipleBuildTags",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "buildLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildLocator"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/tags"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/multipleOperationResult"
            }
          }
        }
      }
    },
    "/app/rest/builds/{buildLocator}": {
      "get": {
        "tags": [
          "Build"
        ],
        "summary": "Get build matching the locator.",
        "description": "",
        "operationId": "getBuild",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "buildLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/build"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Build"
        ],
        "summary": "cancelBuild",
        "description": "",
        "operationId": "cancelBuild",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "buildLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildLocator"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/buildCancelRequest"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/build"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Build"
        ],
        "summary": "Delete build matching the locator.",
        "description": "",
        "operationId": "deleteBuild",
        "parameters": [
          {
            "name": "buildLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildLocator"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/app/rest/builds/{buildLocator}/artifactDependencyChanges": {
      "get": {
        "tags": [
          "Build"
        ],
        "summary": "Get artifact dependency changes of the matching build.",
        "description": "",
        "operationId": "getArtifactDependencyChanges",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "buildLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/buildChanges"
            }
          }
        }
      }
    },
    "/app/rest/builds/{buildLocator}/artifacts": {
      "get": {
        "tags": [
          "Build"
        ],
        "summary": "List all files.",
        "description": "",
        "operationId": "getFilesListOfBuild",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "basePath",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "locator",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "buildLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildLocator"
          },
          {
            "name": "resolveParameters",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "logBuildUsage",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/files"
            }
          }
        }
      }
    },
    "/app/rest/builds/{buildLocator}/artifacts/archived{path}": {
      "get": {
        "tags": [
          "Build"
        ],
        "summary": "Get specific file zipped.",
        "description": "",
        "operationId": "getZippedFileOfBuild",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "(/.*)?"
          },
          {
            "name": "basePath",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "locator",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "buildLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildLocator"
          },
          {
            "name": "resolveParameters",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "logBuildUsage",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation",
            "examples": {
              "*/*": ""
            }
          }
        }
      }
    },
    "/app/rest/builds/{buildLocator}/artifacts/files{path}": {
      "get": {
        "tags": [
          "Build"
        ],
        "summary": "Download specific file.",
        "description": "",
        "operationId": "downloadFileOfBuild",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "(/.*)?"
          },
          {
            "name": "buildLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildLocator"
          },
          {
            "name": "resolveParameters",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "logBuildUsage",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation",
            "examples": {
              "*/*": ""
            }
          }
        }
      }
    },
    "/app/rest/builds/{buildLocator}/artifacts/metadata{path}": {
      "get": {
        "tags": [
          "Build"
        ],
        "summary": "Get metadata of specific file.",
        "description": "",
        "operationId": "getFileMetadataOfBuild",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "(/.*)?"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "buildLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildLocator"
          },
          {
            "name": "resolveParameters",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "logBuildUsage",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/file"
            }
          }
        }
      }
    },
    "/app/rest/builds/{buildLocator}/artifacts/{path}": {
      "get": {
        "tags": [
          "Build"
        ],
        "summary": "List files under this path.",
        "description": "",
        "operationId": "getFilesListForSubpathOfBuild",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "(.*)?"
          },
          {
            "name": "basePath",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "locator",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "buildLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildLocator"
          },
          {
            "name": "resolveParameters",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "logBuildUsage",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/files"
            }
          }
        }
      }
    },
    "/app/rest/builds/{buildLocator}/artifactsDirectory": {
      "get": {
        "tags": [
          "Build"
        ],
        "summary": "Get the artifacts' directory of the matching build.",
        "description": "",
        "operationId": "getArtifactsDirectory",
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "buildLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildLocator"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "text/plain": ""
            },
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/app/rest/builds/{buildLocator}/caches/finishProperties": {
      "delete": {
        "tags": [
          "Build"
        ],
        "summary": "Remove build parameters from the matching build.",
        "description": "",
        "operationId": "resetBuildFinishProperties",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "buildLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildLocator"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            }
          }
        }
      }
    },
    "/app/rest/builds/{buildLocator}/canceledInfo": {
      "get": {
        "tags": [
          "Build"
        ],
        "summary": "Check if the matching build is canceled.",
        "description": "",
        "operationId": "getCanceledInfo",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "buildLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/comment"
            }
          }
        }
      }
    },
    "/app/rest/builds/{buildLocator}/comment": {
      "put": {
        "tags": [
          "Build"
        ],
        "summary": "Update the comment on the matching build.",
        "description": "",
        "operationId": "setBuildComment",
        "consumes": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "buildLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildLocator"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "delete": {
        "tags": [
          "Build"
        ],
        "summary": "Remove the build comment matching the locator.",
        "description": "",
        "operationId": "deleteBuildComment",
        "parameters": [
          {
            "name": "buildLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildLocator"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/app/rest/builds/{buildLocator}/finish": {
      "put": {
        "tags": [
          "Build"
        ],
        "summary": "Marks the running build as finished by passing agent the current time of the build to finish.",
        "description": "",
        "operationId": "setFinishedTime",
        "consumes": [
          "text/plain"
        ],
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "buildLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildLocator"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "text/plain": ""
            },
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/app/rest/builds/{buildLocator}/finishDate": {
      "get": {
        "tags": [
          "Build"
        ],
        "summary": "Get the finish date of the matching build.",
        "description": "",
        "operationId": "getBuildFinishDate",
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "buildLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildLocator"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "text/plain": ""
            },
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Build"
        ],
        "summary": "Marks the running build as finished by passing agent the current time of the build to finish.",
        "description": "",
        "operationId": "setBuildFinishDate",
        "consumes": [
          "text/plain"
        ],
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "buildLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildLocator"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "text/plain": ""
            },
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/app/rest/builds/{buildLocator}/log": {
      "post": {
        "tags": [
          "Build"
        ],
        "summary": "Adds a message to the build log. Service messages are accepted.",
        "description": "",
        "operationId": "addLogMessageToBuild",
        "consumes": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "buildLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildLocator"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/app/rest/builds/{buildLocator}/number": {
      "get": {
        "tags": [
          "Build"
        ],
        "summary": "Get the number of the matching build.",
        "description": "",
        "operationId": "getBuildNumber",
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "buildLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildLocator"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "text/plain": ""
            },
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Build"
        ],
        "summary": "Update the number of the matching build.",
        "description": "",
        "operationId": "setBuildNumber",
        "consumes": [
          "text/plain"
        ],
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "buildLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildLocator"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "text/plain": ""
            },
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/app/rest/builds/{buildLocator}/pinInfo": {
      "get": {
        "tags": [
          "Build"
        ],
        "summary": "Check if the matching build is pinned.",
        "description": "",
        "operationId": "getBuildPinInfo",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "buildLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/pinInfo"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Build"
        ],
        "summary": "Update the pin info of the matching build.",
        "description": "",
        "operationId": "setBuildPinInfo",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "buildLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildLocator"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/pinInfo"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/pinInfo"
            }
          }
        }
      }
    },
    "/app/rest/builds/{buildLocator}/problemOccurrences": {
      "get": {
        "tags": [
          "Build"
        ],
        "summary": "Get build problems of the matching build.",
        "description": "",
        "operationId": "getBuildProblems",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "buildLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/problemOccurrences"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Build"
        ],
        "summary": "Add a build problem to the matching build.",
        "description": "",
        "operationId": "addProblemToBuild",
        "consumes": [
          "text/plain"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "buildLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildLocator"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/problemOccurrence"
            }
          }
        }
      }
    },
    "/app/rest/builds/{buildLocator}/relatedIssues": {
      "get": {
        "tags": [
          "Build"
        ],
        "summary": "Get related issues of the matching build.",
        "description": "",
        "operationId": "getBuildRelatedIssues",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "buildLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/issuesUsages"
            }
          }
        }
      }
    },
    "/app/rest/builds/{buildLocator}/resolved/{value}": {
      "get": {
        "tags": [
          "Build"
        ],
        "summary": "Get the resolvement status of the matching build.",
        "description": "",
        "operationId": "getBuildResolved",
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "buildLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildLocator"
          },
          {
            "name": "value",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "text/plain": ""
            },
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/app/rest/builds/{buildLocator}/resulting-properties": {
      "get": {
        "tags": [
          "Build"
        ],
        "summary": "Get actual build parameters of the matching build.",
        "description": "",
        "operationId": "getBuildActualParameters",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "buildLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/properties"
            }
          }
        }
      }
    },
    "/app/rest/builds/{buildLocator}/resulting-properties/{propertyName}": {
      "get": {
        "tags": [
          "Build"
        ],
        "summary": "Update a build parameter of the matching build.",
        "description": "",
        "operationId": "getBuildResultingProperties",
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "buildLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildLocator"
          },
          {
            "name": "propertyName",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "text/plain": ""
            },
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/app/rest/builds/{buildLocator}/runningData": {
      "put": {
        "tags": [
          "Build"
        ],
        "summary": "Starts the queued build as an agent-less build and returns the corresponding running build.",
        "description": "",
        "operationId": "markBuildAsRunning",
        "consumes": [
          "text/plain"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "buildLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildLocator"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/build"
            }
          }
        }
      }
    },
    "/app/rest/builds/{buildLocator}/sources/files/{fileName}": {
      "get": {
        "tags": [
          "Build"
        ],
        "summary": "Get a source file of the matching build.",
        "description": "",
        "operationId": "getBuildSourceFile",
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "buildLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildLocator"
          },
          {
            "name": "fileName",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation",
            "examples": {
              "application/octet-stream": ""
            }
          }
        }
      }
    },
    "/app/rest/builds/{buildLocator}/statistics": {
      "get": {
        "tags": [
          "Build"
        ],
        "summary": "Get all statistical values of the matching build.",
        "description": "",
        "operationId": "getBuildStatisticValues",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "buildLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/properties"
            }
          }
        }
      }
    },
    "/app/rest/builds/{buildLocator}/statistics/{name}": {
      "get": {
        "tags": [
          "Build"
        ],
        "summary": "Get a statistical value of the matching build.",
        "description": "",
        "operationId": "getBuildStatisticValue",
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "buildLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildLocator"
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "text/plain": ""
            },
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/app/rest/builds/{buildLocator}/status": {
      "get": {
        "tags": [
          "Build"
        ],
        "summary": "Get status of the matching build.",
        "description": "",
        "operationId": "getBuildStatus",
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "buildLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildLocator"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "text/plain": ""
            },
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Build"
        ],
        "summary": "Change status of the build.",
        "description": "",
        "operationId": "setBuildStatus",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "buildLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/BuildStatusUpdate"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            }
          }
        }
      }
    },
    "/app/rest/builds/{buildLocator}/statusIcon{suffix}": {
      "get": {
        "tags": [
          "Build"
        ],
        "summary": "Get the status icon (in specified format) of the matching build.",
        "description": "",
        "operationId": "getBuildStatusIcon",
        "parameters": [
          {
            "name": "buildLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildLocator"
          },
          {
            "name": "suffix",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "(.*)?"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/app/rest/builds/{buildLocator}/statusText": {
      "get": {
        "tags": [
          "Build"
        ],
        "summary": "Get the build status text of the matching build.",
        "description": "",
        "operationId": "getBuildStatusText",
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "buildLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildLocator"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "text/plain": ""
            },
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Build"
        ],
        "summary": "Update the build status of the matching build.",
        "description": "",
        "operationId": "setBuildStatusText",
        "consumes": [
          "text/plain"
        ],
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "buildLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildLocator"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "text/plain": ""
            },
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/app/rest/builds/{buildLocator}/tags": {
      "get": {
        "tags": [
          "Build"
        ],
        "summary": "Get tags of the matching build.",
        "description": "",
        "operationId": "getBuildTags",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "buildLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildLocator"
          },
          {
            "name": "locator",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "TagLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/tags"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Build"
        ],
        "summary": "Add tags to the matching build.",
        "description": "",
        "operationId": "addTagsToBuild",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "buildLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildLocator"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/tags"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/tags"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Build"
        ],
        "summary": "Update tags of the matching build.",
        "description": "",
        "operationId": "setBuildTags",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "buildLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildLocator"
          },
          {
            "name": "locator",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "TagLocator"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/tags"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/tags"
            }
          }
        }
      }
    },
    "/app/rest/builds/{buildLocator}/testOccurrences": {
      "get": {
        "tags": [
          "Build"
        ],
        "summary": "Get test occurrences of the matching build.",
        "description": "",
        "operationId": "getBuildTestOccurrences",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "buildLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/testOccurrences"
            }
          }
        }
      }
    },
    "/app/rest/builds/{buildLocator}/vcsLabels": {
      "get": {
        "tags": [
          "Build"
        ],
        "summary": "Get VCS labels of the matching build.",
        "description": "",
        "operationId": "getBuildVcsLabels",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "buildLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/vcsLabels"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Build"
        ],
        "summary": "Add a VCS label to the matching build.",
        "description": "",
        "operationId": "addBuildVcsLabel",
        "consumes": [
          "text/plain"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "buildLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildLocator"
          },
          {
            "name": "locator",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "VcsRootInstanceLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/vcsLabels"
            }
          }
        }
      }
    },
    "/app/rest/builds/{buildLocator}/{field}": {
      "get": {
        "tags": [
          "Build"
        ],
        "summary": "Get a field of the matching build.",
        "description": "",
        "operationId": "getBuildField",
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "buildLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "BuildLocator"
          },
          {
            "name": "field",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "text/plain": ""
            },
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/app/rest/changes": {
      "get": {
        "tags": [
          "Change"
        ],
        "summary": "Get all changes.",
        "description": "",
        "operationId": "getAllChanges",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "locator",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "ChangeLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/changes"
            }
          }
        }
      }
    },
    "/app/rest/changes/{changeLocator}": {
      "get": {
        "tags": [
          "Change"
        ],
        "summary": "Get change matching the locator.",
        "description": "",
        "operationId": "getChange",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "changeLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "ChangeLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/change"
            }
          }
        }
      }
    },
    "/app/rest/changes/{changeLocator}/attributes": {
      "get": {
        "tags": [
          "Change"
        ],
        "summary": "Get attributes of the matching change.",
        "description": "",
        "operationId": "getChangeAttributes",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "changeLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "ChangeLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/entries"
            }
          }
        }
      }
    },
    "/app/rest/changes/{changeLocator}/duplicates": {
      "get": {
        "tags": [
          "Change"
        ],
        "summary": "Get duplicates of the matching change.",
        "description": "",
        "operationId": "getChangeDuplicates",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "changeLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "ChangeLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/changes"
            }
          }
        }
      }
    },
    "/app/rest/changes/{changeLocator}/firstBuilds": {
      "get": {
        "tags": [
          "Change"
        ],
        "summary": "Get first builds of the matching change.",
        "description": "",
        "operationId": "getChangeFirstBuilds",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "changeLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "ChangeLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/builds"
            }
          }
        }
      }
    },
    "/app/rest/changes/{changeLocator}/issues": {
      "get": {
        "tags": [
          "Change"
        ],
        "summary": "Get issues of the matching change.",
        "description": "",
        "operationId": "getChangeIssue",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "changeLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "ChangeLocator"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/issues"
            }
          }
        }
      }
    },
    "/app/rest/changes/{changeLocator}/parentChanges": {
      "get": {
        "tags": [
          "Change"
        ],
        "summary": "Get parent changes of the matching change.",
        "description": "",
        "operationId": "getChangeParentChanges",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "changeLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "ChangeLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/changes"
            }
          }
        }
      }
    },
    "/app/rest/changes/{changeLocator}/parentRevisions": {
      "get": {
        "tags": [
          "Change"
        ],
        "summary": "Get parent revisions of the matching change.",
        "description": "",
        "operationId": "getChangeParentRevisions",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "changeLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "ChangeLocator"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/items"
            }
          }
        }
      }
    },
    "/app/rest/changes/{changeLocator}/vcsRootInstance": {
      "get": {
        "tags": [
          "Change"
        ],
        "summary": "Get a VCS root instance of the matching change.",
        "description": "",
        "operationId": "getChangeVcsRoot",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "changeLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "ChangeLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/vcs-root-instance"
            }
          }
        }
      }
    },
    "/app/rest/changes/{changeLocator}/{field}": {
      "get": {
        "tags": [
          "Change"
        ],
        "summary": "Get a field of the matching change.",
        "description": "",
        "operationId": "getChangeField",
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "changeLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "ChangeLocator"
          },
          {
            "name": "field",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "text/plain": ""
            },
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/app/rest/cloud/images": {
      "get": {
        "tags": [
          "CloudInstance"
        ],
        "summary": "Get all cloud images.",
        "description": "",
        "operationId": "getAllCloudImages",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "locator",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/cloudImages"
            }
          }
        }
      }
    },
    "/app/rest/cloud/images/{imageLocator}": {
      "get": {
        "tags": [
          "CloudInstance"
        ],
        "summary": "Get cloud image matching the locator.",
        "description": "",
        "operationId": "getCloudImage",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "imageLocator",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/cloudImage"
            }
          }
        }
      }
    },
    "/app/rest/cloud/instances": {
      "get": {
        "tags": [
          "CloudInstance"
        ],
        "summary": "Get all cloud instances.",
        "description": "",
        "operationId": "getAllCloudInstances",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "locator",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/cloudInstances"
            }
          }
        }
      },
      "post": {
        "tags": [
          "CloudInstance"
        ],
        "summary": "Start a new cloud instance.",
        "description": "",
        "operationId": "startInstance",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/cloudInstance"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            }
          }
        }
      }
    },
    "/app/rest/cloud/instances/{instanceLocator}": {
      "get": {
        "tags": [
          "CloudInstance"
        ],
        "summary": "Get cloud instance matching the locator.",
        "description": "",
        "operationId": "getCloudInstance",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "instanceLocator",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/cloudInstance"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "CloudInstance"
        ],
        "summary": "Stop cloud instance matching the locator.",
        "description": "",
        "operationId": "stopInstance",
        "parameters": [
          {
            "name": "instanceLocator",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/app/rest/cloud/profiles": {
      "get": {
        "tags": [
          "CloudInstance"
        ],
        "summary": "Get all cloud profiles.",
        "description": "",
        "operationId": "getAllCloudProfiles",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "locator",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/cloudProfiles"
            }
          }
        }
      }
    },
    "/app/rest/cloud/profiles/{profileLocator}": {
      "get": {
        "tags": [
          "CloudInstance"
        ],
        "summary": "Get cloud profile matching the locator.",
        "description": "",
        "operationId": "getCloudProfile",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "profileLocator",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/cloudProfile"
            }
          }
        }
      }
    },
    "/app/rest/health": {
      "get": {
        "tags": [
          "health"
        ],
        "operationId": "getHealthItems",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "locator",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "headers": {},
            "schema": {
              "$ref": "#/definitions/healthStatusItems"
            }
          }
        }
      }
    },
    "/app/rest/health/category": {
      "get": {
        "tags": [
          "health"
        ],
        "operationId": "getCategories",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "locator",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "headers": {},
            "schema": {
              "$ref": "#/definitions/healthCategories"
            }
          }
        }
      }
    },
    "/app/rest/health/category/{locator}": {
      "get": {
        "tags": [
          "health"
        ],
        "operationId": "getSingleCategory",
        "parameters": [
          {
            "name": "locator",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/healthCategory"
            }
          }
        }
      }
    },
    "/app/rest/health/{locator}": {
      "get": {
        "tags": [
          "health"
        ],
        "operationId": "getSingleHealthItem",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "locator",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "headers": {},
            "schema": {
              "$ref": "#/definitions/healthItem"
            }
          }
        }
      }
    },
    "/app/rest/info": {
      "get": {
        "tags": [
          "Root"
        ],
        "summary": "Get the plugin info.",
        "description": "",
        "operationId": "getPluginInfo",
        "produces": [
          "application/xml"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": ""
            },
            "schema": {
              "$ref": "#/definitions/plugin"
            }
          }
        }
      }
    },
    "/app/rest/investigations": {
      "get": {
        "tags": [
          "Investigation"
        ],
        "summary": "Get all investigations.",
        "description": "",
        "operationId": "getAllInvestigations",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "locator",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/investigations"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Investigation"
        ],
        "summary": "Create a new investigation.",
        "description": "",
        "operationId": "addInvestigation",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/investigation"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/investigation"
            }
          }
        }
      }
    },
    "/app/rest/investigations/multiple": {
      "post": {
        "tags": [
          "Investigation"
        ],
        "summary": "Create multiple new investigations.",
        "description": "",
        "operationId": "addMultipleInvestigations",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/investigations"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/investigations"
            }
          }
        }
      }
    },
    "/app/rest/investigations/{investigationLocator}": {
      "get": {
        "tags": [
          "Investigation"
        ],
        "summary": "Get investigation matching the locator.",
        "description": "",
        "operationId": "getInvestigation",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "investigationLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "InvestigationLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/investigation"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Investigation"
        ],
        "summary": "Update investigation matching the locator.",
        "description": "",
        "operationId": "replaceInvestigation",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "investigationLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "InvestigationLocator"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/investigation"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/investigation"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Investigation"
        ],
        "summary": "Delete investigation matching the locator.",
        "description": "",
        "operationId": "deleteInvestigation",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "investigationLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "InvestigationLocator"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            }
          }
        }
      }
    },
    "/app/rest/mutes": {
      "get": {
        "tags": [
          "Mute"
        ],
        "summary": "Get all muted tests.",
        "description": "",
        "operationId": "getAllMutedTests",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "locator",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/mutes"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Mute"
        ],
        "summary": "Mute a test.",
        "description": "",
        "operationId": "muteTest",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/mute"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/mute"
            }
          }
        }
      }
    },
    "/app/rest/mutes/multiple": {
      "post": {
        "tags": [
          "Mute"
        ],
        "summary": "Mute multiple tests.",
        "description": "",
        "operationId": "muteMultipleTests",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/mutes"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/mutes"
            }
          }
        }
      }
    },
    "/app/rest/mutes/{muteLocator}": {
      "get": {
        "tags": [
          "Mute"
        ],
        "summary": "Get a muted test.",
        "description": "",
        "operationId": "getMutedTest",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "muteLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "MuteLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/mute"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Mute"
        ],
        "summary": "Unmute the matching test.",
        "description": "",
        "operationId": "unmuteTest",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "muteLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "MuteLocator"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            }
          }
        }
      }
    },
    "/app/rest/problemOccurrences": {
      "get": {
        "tags": [
          "ProblemOccurrence"
        ],
        "summary": "Get all build problem occurrences.",
        "description": "",
        "operationId": "getAllBuildProblemOccurrences",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "locator",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "ProblemOccurrenceLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/problemOccurrences"
            }
          }
        }
      }
    },
    "/app/rest/problemOccurrences/{problemLocator}": {
      "get": {
        "tags": [
          "ProblemOccurrence"
        ],
        "summary": "Get a matching build problem occurrence.",
        "description": "",
        "operationId": "getBuildProblemOccurrence",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "problemLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "ProblemOccurrenceLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/problemOccurrence"
            }
          }
        }
      }
    },
    "/app/rest/problems": {
      "get": {
        "tags": [
          "Problem"
        ],
        "summary": "Get all build problems.",
        "description": "",
        "operationId": "getAllBuildProblems",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "locator",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "ProblemLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/problems"
            }
          }
        }
      }
    },
    "/app/rest/problems/{problemLocator}": {
      "get": {
        "tags": [
          "Problem"
        ],
        "summary": "Get a matching build problem.",
        "description": "",
        "operationId": "getBuildProblem",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "problemLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "ProblemLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/problem"
            }
          }
        }
      }
    },
    "/app/rest/projects": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Get all projects.",
        "description": "",
        "operationId": "getAllProjects",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "locator",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/projects"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "Create a new project.",
        "description": "",
        "operationId": "addProject",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/newProjectDescription"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/project"
            }
          }
        }
      }
    },
    "/app/rest/projects/{locator}/versionedSettings/affectedProjects": {
      "get": {
        "tags": [
          "VersionedSettings"
        ],
        "summary": "Get a list of projects that are affected by Load Settings from VCS action.",
        "description": "",
        "operationId": "getVersionedSettingsProjectsToLoad",
        "parameters": [
          {
            "name": "locator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "ProjectLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/projects"
            }
          }
        }
      }
    },
    "/app/rest/projects/{locator}/versionedSettings/checkForChanges": {
      "post": {
        "tags": [
          "VersionedSettings"
        ],
        "summary": "Check for changes in Versioned Settings.",
        "description": "",
        "operationId": "checkForVersionedSettingsChanges",
        "parameters": [
          {
            "name": "locator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "ProjectLocator"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/app/rest/projects/{locator}/versionedSettings/commitCurrentSettings": {
      "post": {
        "tags": [
          "VersionedSettings"
        ],
        "summary": "Perform Versioned Settings action: Commit current settings to VCS.",
        "description": "",
        "operationId": "commitCurrentSettings",
        "parameters": [
          {
            "name": "locator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "ProjectLocator"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/app/rest/projects/{locator}/versionedSettings/config": {
      "get": {
        "tags": [
          "VersionedSettings"
        ],
        "summary": "Get Versioned Settings config.",
        "description": "",
        "operationId": "getVersionedSettingsConfig",
        "parameters": [
          {
            "name": "locator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "ProjectLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/versionedSettingsConfig"
            }
          }
        }
      },
      "put": {
        "tags": [
          "VersionedSettings"
        ],
        "summary": "Set Verseioned Settings config.",
        "description": "",
        "operationId": "setVersionedSettingsConfig",
        "parameters": [
          {
            "name": "locator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "ProjectLocator"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/versionedSettingsConfig"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/versionedSettingsConfig"
            }
          }
        }
      }
    },
    "/app/rest/projects/{locator}/versionedSettings/config/parameters/{name}": {
      "get": {
        "tags": [
          "VersionedSettings"
        ],
        "summary": "Get Versioned Settings config parameter value.",
        "description": "",
        "operationId": "getVersionedSettingsConfigParameter",
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "locator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "ProjectLocator"
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "text/plain": ""
            },
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "put": {
        "tags": [
          "VersionedSettings"
        ],
        "summary": "Set Versioned Settings config parameter value.",
        "description": "",
        "operationId": "setVersionedSettingsConfigParameter",
        "consumes": [
          "text/plain"
        ],
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "locator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "ProjectLocator"
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "text/plain": ""
            },
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "VersionedSettings"
        ],
        "summary": "Delete Versioned Settings config parameter value.",
        "description": "",
        "operationId": "deleteVersionedSettingsConfigParameter",
        "parameters": [
          {
            "name": "locator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "ProjectLocator"
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/app/rest/projects/{locator}/versionedSettings/contextParameters": {
      "get": {
        "tags": [
          "VersionedSettings"
        ],
        "summary": "Get Versioned Settings Context Parameters.",
        "description": "",
        "operationId": "getVersionedSettingsContextParameters",
        "parameters": [
          {
            "name": "locator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "ProjectLocator"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/versionedSettingsContextParameters"
            }
          }
        }
      },
      "put": {
        "tags": [
          "VersionedSettings"
        ],
        "summary": "Set Versioned Settings Context Parameters.",
        "description": "",
        "operationId": "setVersionedSettingsContextParameters",
        "parameters": [
          {
            "name": "locator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "ProjectLocator"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/versionedSettingsContextParameters"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/versionedSettingsContextParameters"
            }
          }
        }
      }
    },
    "/app/rest/projects/{locator}/versionedSettings/loadSettings": {
      "post": {
        "tags": [
          "VersionedSettings"
        ],
        "summary": "Perform Versioned Settings action: Load Setting from VCS.",
        "description": "",
        "operationId": "loadSettingsFromVCS",
        "parameters": [
          {
            "name": "locator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "ProjectLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/projects"
            }
          }
        }
      }
    },
    "/app/rest/projects/{locator}/versionedSettings/status": {
      "get": {
        "tags": [
          "VersionedSettings"
        ],
        "summary": "Get current status of Versioned Settings.",
        "description": "",
        "operationId": "getVersionedSettingsStatus",
        "parameters": [
          {
            "name": "locator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "ProjectLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/versionedSettingsStatus"
            }
          }
        }
      }
    },
    "/app/rest/projects/{locator}/versionedSettings/tokens": {
      "get": {
        "tags": [
          "VersionedSettings"
        ],
        "summary": "Get Versioned Settings Tokens.",
        "description": "",
        "operationId": "getVersionedSettingsTokens",
        "parameters": [
          {
            "name": "locator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "ProjectLocator"
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/versionedSettingsTokens"
            }
          }
        }
      },
      "post": {
        "tags": [
          "VersionedSettings"
        ],
        "summary": "Add Versioned Settings Tokens.",
        "description": "",
        "operationId": "addVersionedSettingsTokens",
        "parameters": [
          {
            "name": "locator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "ProjectLocator"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/versionedSettingsTokens"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/versionedSettingsTokens"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "VersionedSettings"
        ],
        "summary": "Delete Versioned Settings Tokens.",
        "description": "",
        "operationId": "deleteVersionedSettingsTokens",
        "parameters": [
          {
            "name": "locator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "ProjectLocator"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/versionedSettingsTokens"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/versionedSettingsTokens"
            }
          }
        }
      }
    },
    "/app/rest/projects/{projectLocator}": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Get project matching the locator.",
        "description": "",
        "operationId": "getProject",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "projectLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "ProjectLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/project"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Project"
        ],
        "summary": "Delete project matching the locator.",
        "description": "",
        "operationId": "deleteProject",
        "parameters": [
          {
            "name": "projectLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "ProjectLocator"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/app/rest/projects/{projectLocator}/agentPools": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Get agent pools appointed to the matching project.",
        "description": "",
        "operationId": "getAgentPoolsProject",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "projectLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "ProjectLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/agentPools"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "Assign the matching project to the agent pool.",
        "description": "",
        "operationId": "addAgentPoolsProject",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "projectLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "ProjectLocator"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/agentPool"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/agentPool"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Project"
        ],
        "summary": "Update agent pools apppointed to the matching project.",
        "description": "",
        "operationId": "setAgentPoolsProject",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "projectLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "ProjectLocator"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/agentPools"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/agentPools"
            }
          }
        }
      }
    },
    "/app/rest/projects/{projectLocator}/agentPools/{agentPoolLocator}": {
      "delete": {
        "tags": [
          "Project"
        ],
        "summary": "Unassign a project from the matching agent pool.",
        "description": "",
        "operationId": "removeProjectFromAgentPool",
        "parameters": [
          {
            "name": "projectLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "ProjectLocator"
          },
          {
            "name": "agentPoolLocator",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/app/rest/projects/{projectLocator}/branches": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Get all branches of the matching project.",
        "description": "",
        "operationId": "getAllBranches",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "projectLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "ProjectLocator"
          },
          {
            "name": "locator",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/branches"
            }
          }
        }
      }
    },
    "/app/rest/projects/{projectLocator}/buildTypes": {
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "Add a build configuration to the matching project.",
        "description": "",
        "operationId": "addBuildType",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "projectLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "ProjectLocator"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/newBuildTypeDescription"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/buildType"
            }
          }
        }
      }
    },
    "/app/rest/projects/{projectLocator}/defaultTemplate": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Get the default template of the matching project.",
        "description": "",
        "operationId": "getDefaultTemplate",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "projectLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "ProjectLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/buildType"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Project"
        ],
        "summary": "Update the default template of the matching project.",
        "description": "",
        "operationId": "setDefaultTemplate",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "projectLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "ProjectLocator"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/buildType"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/buildType"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Project"
        ],
        "summary": "Remove the default template from the matching project.",
        "description": "",
        "operationId": "removeDefaultTemplate",
        "parameters": [
          {
            "name": "projectLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "ProjectLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/app/rest/projects/{projectLocator}/order/buildTypes": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Get all build configurations from the matching project, with custom ordering applied.",
        "description": "",
        "operationId": "getAllBuildTypesOrdered",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "projectLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "ProjectLocator"
          },
          {
            "name": "field",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/buildTypes"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Project"
        ],
        "summary": "Update custom ordering of build configurations of the matching project.",
        "description": "",
        "operationId": "setBuildTypesOrder",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "projectLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "ProjectLocator"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/buildTypes"
            }
          },
          {
            "name": "field",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/buildTypes"
            }
          }
        }
      }
    },
    "/app/rest/projects/{projectLocator}/order/projects": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Get all subprojects of the matching project, with custom ordering applied.",
        "description": "",
        "operationId": "getAllSubprojectsOrdered",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "projectLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "ProjectLocator"
          },
          {
            "name": "field",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/projects"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Project"
        ],
        "summary": "Update custom ordering of subprojects of the matching project.",
        "description": "",
        "operationId": "setSubprojectsOrder",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "projectLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "ProjectLocator"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/projects"
            }
          },
          {
            "name": "field",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/projects"
            }
          }
        }
      }
    },
    "/app/rest/projects/{projectLocator}/parameters": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Get build parameters.",
        "description": "",
        "operationId": "getBuildParameters",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "locator",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "ProjectLocator"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/properties"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "Create a build parameter.",
        "description": "",
        "operationId": "createBuildParameter",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/property"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "ProjectLocator"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/property"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Project"
        ],
        "summary": "Update build parameters.",
        "description": "",
        "operationId": "updateBuildParameters",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/properties"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "ProjectLocator"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/properties"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Project"
        ],
        "summary": "Delete all build parameters.",
        "description": "",
        "operationId": "deleteBuildParameters",
        "parameters": [
          {
            "name": "projectLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "ProjectLocator"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/app/rest/projects/{projectLocator}/parameters/{name}": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Get build parameter.",
        "description": "",
        "operationId": "getBuildParameter",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "ProjectLocator"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/property"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Project"
        ],
        "summary": "Update build parameter.",
        "description": "",
        "operationId": "updateBuildParameter",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/property"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "ProjectLocator"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/property"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Project"
        ],
        "summary": "Delete build parameter.",
        "description": "",
        "operationId": "deleteBuildParameter",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "ProjectLocator"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/app/rest/projects/{projectLocator}/parameters/{name}/type": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Get type of build parameter.",
        "description": "",
        "operationId": "getBuildParameterType",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "ProjectLocator"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/type"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Project"
        ],
        "summary": "Update type of build parameter.",
        "description": "",
        "operationId": "updateBuildParameterType",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/type"
            }
          },
          {
            "name": "projectLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "ProjectLocator"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/type"
            }
          }
        }
      }
    },
    "/app/rest/projects/{projectLocator}/parameters/{name}/type/rawValue": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Get build parameter specification.",
        "description": "",
        "operationId": "getBuildParameterSpecification",
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "ProjectLocator"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "text/plain": ""
            },
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Project"
        ],
        "summary": "Update build parameter specification.",
        "description": "",
        "operationId": "updateBuildParameterSpecification",
        "consumes": [
          "text/plain"
        ],
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "ProjectLocator"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "text/plain": ""
            },
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/app/rest/projects/{projectLocator}/parameters/{name}/value": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Get value of build parameter.",
        "description": "",
        "operationId": "getBuildParameterValue",
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "ProjectLocator"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "text/plain": ""
            },
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Project"
        ],
        "summary": "Update value of build parameter.",
        "description": "",
        "operationId": "updateBuildParameterValue",
        "consumes": [
          "text/plain"
        ],
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "ProjectLocator"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "text/plain": ""
            },
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/app/rest/projects/{projectLocator}/parentProject": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Get the parent project of the matching project.",
        "description": "",
        "operationId": "getProjectParentProject",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "projectLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "ProjectLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/project"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Project"
        ],
        "summary": "Update the parent project of the matching project.",
        "description": "",
        "operationId": "setParentProject",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "projectLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "ProjectLocator"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/project"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/project"
            }
          }
        }
      }
    },
    "/app/rest/projects/{projectLocator}/projectFeatures": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Get all features.",
        "description": "",
        "operationId": "getFeatures",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "locator",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "ProjectLocator"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "type": "object"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "Add a feature.",
        "description": "",
        "operationId": "addFeature",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/projectFeature"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "ProjectLocator"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "type": "object"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Project"
        ],
        "summary": "Update all features.",
        "description": "",
        "operationId": "updateFeatures",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/projectFeatures"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "ProjectLocator"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/app/rest/projects/{projectLocator}/projectFeatures/{featureLocator}": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Get a matching feature.",
        "description": "",
        "operationId": "getFeature",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "featureLocator",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "ProjectLocator"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "type": "object"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Project"
        ],
        "summary": "Update a matching feature.",
        "description": "",
        "operationId": "updateFeature",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "featureLocator",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/projectFeature"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "ProjectLocator"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "type": "object"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Project"
        ],
        "summary": "Delete a matching feature.",
        "description": "",
        "operationId": "deleteFeature",
        "parameters": [
          {
            "name": "featureLocator",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "ProjectLocator"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/app/rest/projects/{projectLocator}/secure/tokens": {
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "Create a new secure token for the matching project.",
        "description": "",
        "operationId": "addSecureToken",
        "consumes": [
          "text/plain"
        ],
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "projectLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "ProjectLocator"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "text/plain": ""
            },
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/app/rest/projects/{projectLocator}/secure/values/{token}": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Get a secure token of the matching project.",
        "description": "",
        "operationId": "getSecureValue",
        "consumes": [
          "text/plain"
        ],
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "projectLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "ProjectLocator"
          },
          {
            "name": "token",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "text/plain": ""
            },
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/app/rest/projects/{projectLocator}/settingsFile": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Get the settings file of the matching build configuration.",
        "description": "",
        "operationId": "getProjectSettingsFile",
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "projectLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "ProjectLocator"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "text/plain": ""
            },
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/app/rest/projects/{projectLocator}/templates": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Get all templates of the matching project.",
        "description": "",
        "operationId": "getProjectTemplates",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "projectLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "ProjectLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/buildTypes"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "Add a build configuration template to the matching project.",
        "description": "",
        "operationId": "addTemplate",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "projectLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "ProjectLocator"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/newBuildTypeDescription"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/buildType"
            }
          }
        }
      }
    },
    "/app/rest/projects/{projectLocator}/{field}": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Get a field of the matching project.",
        "description": "",
        "operationId": "getProjectField",
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "projectLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "ProjectLocator"
          },
          {
            "name": "field",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "text/plain": ""
            },
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Project"
        ],
        "summary": "Update a field of the matching project.",
        "description": "",
        "operationId": "setProjectField",
        "consumes": [
          "text/plain"
        ],
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "projectLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "ProjectLocator"
          },
          {
            "name": "field",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "text/plain": ""
            },
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/app/rest/roles": {
      "get": {
        "tags": [
          "Role"
        ],
        "summary": "Get all roles.",
        "description": "",
        "operationId": "getRoles",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/roles"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Role"
        ],
        "summary": "Create a new role.",
        "description": "",
        "operationId": "createRole",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/role"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/role"
            }
          }
        }
      }
    },
    "/app/rest/roles/id:{id}": {
      "get": {
        "tags": [
          "Role"
        ],
        "summary": "Get a role with specified id.",
        "description": "",
        "operationId": "getRole",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/role"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Role"
        ],
        "summary": "Delete a role matching the id.",
        "description": "",
        "operationId": "deleteRole",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/app/rest/roles/id:{roleId}/included/{includedId}": {
      "put": {
        "tags": [
          "Role"
        ],
        "summary": "Add an included role.",
        "description": "",
        "operationId": "addIncludedRole",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "includedId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/role"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Role"
        ],
        "summary": "Remove an included role.",
        "description": "",
        "operationId": "removeIncludedRole",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "includedId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/role"
            }
          }
        }
      }
    },
    "/app/rest/roles/id:{roleId}/permissions/{permissionId}": {
      "put": {
        "tags": [
          "Role"
        ],
        "summary": "Add a permission to a role.",
        "description": "",
        "operationId": "addPermission",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "permissionId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/role"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Role"
        ],
        "summary": "Remove a permission from a role.",
        "description": "",
        "operationId": "removePermission",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "permissionId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/role"
            }
          }
        }
      }
    },
    "/app/rest/server": {
      "get": {
        "tags": [
          "Server"
        ],
        "summary": "Get the server info.",
        "description": "",
        "operationId": "getServerInfo",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/server"
            }
          }
        }
      }
    },
    "/app/rest/server/authSettings": {
      "get": {
        "tags": [
          "Server Authentication Settings"
        ],
        "summary": "Get authentication settings.",
        "description": "",
        "operationId": "getAuthSettings",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/serverAuthSettings"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Server Authentication Settings"
        ],
        "summary": "Set authentication settings.",
        "description": "",
        "operationId": "setAuthSettings",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/serverAuthSettings"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/serverAuthSettings"
            }
          }
        }
      }
    },
    "/app/rest/server/backup": {
      "get": {
        "tags": [
          "Server"
        ],
        "summary": "Get the latest backup status.",
        "description": "",
        "operationId": "getBackupStatus",
        "produces": [
          "text/plain"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "text/plain": ""
            },
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Server"
        ],
        "summary": "Start a new backup.",
        "description": "",
        "operationId": "startBackup",
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "fileName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "addTimestamp",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "includeConfigs",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "includeDatabase",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "includeBuildLogs",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "includePersonalChanges",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "includeRunningBuilds",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "includeSupplimentaryData",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "text/plain": ""
            },
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/app/rest/server/cleanup": {
      "get": {
        "tags": [
          "Server"
        ],
        "summary": "Get clean-up settings.",
        "description": "",
        "operationId": "getCleanupSettings",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/cleanup"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Server"
        ],
        "summary": "Set clean-up settings.",
        "description": "",
        "operationId": "setCleanupSettings",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/cleanup"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/cleanup"
            }
          }
        }
      }
    },
    "/app/rest/server/files/{areaId}": {
      "get": {
        "tags": [
          "Server"
        ],
        "summary": "List all files.",
        "description": "",
        "operationId": "getFilesListOfServer",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "basePath",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "locator",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "areaId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/files"
            }
          }
        }
      }
    },
    "/app/rest/server/files/{areaId}/archived{path}": {
      "get": {
        "tags": [
          "Server"
        ],
        "summary": "Get specific file zipped.",
        "description": "",
        "operationId": "getZippedFileOfServer",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "(/.*)?"
          },
          {
            "name": "basePath",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "locator",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "areaId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation",
            "examples": {
              "*/*": ""
            }
          }
        }
      }
    },
    "/app/rest/server/files/{areaId}/files{path}": {
      "get": {
        "tags": [
          "Server"
        ],
        "summary": "Download specific file.",
        "description": "",
        "operationId": "downloadFileOfServer",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "(/.*)?"
          },
          {
            "name": "areaId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation",
            "examples": {
              "*/*": ""
            }
          }
        }
      }
    },
    "/app/rest/server/files/{areaId}/metadata{path}": {
      "get": {
        "tags": [
          "Server"
        ],
        "summary": "Get metadata of specific file.",
        "description": "",
        "operationId": "getFileMetadataOfServer",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "(/.*)?"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "areaId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/file"
            }
          }
        }
      }
    },
    "/app/rest/server/files/{areaId}/{path}": {
      "get": {
        "tags": [
          "Server"
        ],
        "summary": "List files under this path.",
        "description": "",
        "operationId": "getFilesListForSubpathOfServer",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "(.*)?"
          },
          {
            "name": "basePath",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "locator",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "areaId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/files"
            }
          }
        }
      }
    },
    "/app/rest/server/globalSettings": {
      "get": {
        "tags": [
          "Global Server Settings"
        ],
        "summary": "Get global settings.",
        "description": "",
        "operationId": "getGlobalSettings",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/serverGlobalSettings"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Global Server Settings"
        ],
        "summary": "Set global settings.",
        "description": "",
        "operationId": "setGlobalSettings",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/serverGlobalSettings"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/serverGlobalSettings"
            }
          }
        }
      }
    },
    "/app/rest/server/licensingData": {
      "get": {
        "tags": [
          "Server"
        ],
        "summary": "Get the licensing data.",
        "description": "",
        "operationId": "getLicensingData",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/licensingData"
            }
          }
        }
      }
    },
    "/app/rest/server/licensingData/licenseKeys": {
      "get": {
        "tags": [
          "Server"
        ],
        "summary": "Get all license keys.",
        "description": "",
        "operationId": "getLicenseKeys",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/licenseKeys"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Server"
        ],
        "summary": "Add license keys.",
        "description": "",
        "operationId": "addLicenseKeys",
        "consumes": [
          "text/plain"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/licenseKeys"
            }
          }
        }
      }
    },
    "/app/rest/server/licensingData/licenseKeys/{licenseKey}": {
      "get": {
        "tags": [
          "Server"
        ],
        "summary": "Get a license key.",
        "description": "",
        "operationId": "getLicenseKey",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "licenseKey",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/licenseKey"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Server"
        ],
        "summary": "Delete a license key.",
        "description": "",
        "operationId": "deleteLicenseKey",
        "parameters": [
          {
            "name": "licenseKey",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/app/rest/server/metrics": {
      "get": {
        "tags": [
          "Server"
        ],
        "summary": "Get metrics.",
        "description": "",
        "operationId": "getAllMetrics",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/metrics"
            }
          }
        }
      }
    },
    "/app/rest/server/nodes": {
      "get": {
        "tags": [
          "Node"
        ],
        "summary": "Get all TeamCity nodes.",
        "description": "",
        "operationId": "getAllNodes",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "locator",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "TeamCityNodeLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/nodes"
            }
          }
        }
      }
    },
    "/app/rest/server/nodes/{nodeLocator}": {
      "get": {
        "tags": [
          "Node"
        ],
        "summary": "Get a node matching the locator.",
        "description": "",
        "operationId": "getNode",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "nodeLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "TeamCityNodeLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/node"
            }
          }
        }
      }
    },
    "/app/rest/server/nodes/{nodeLocator}/disabledResponsibilities": {
      "get": {
        "tags": [
          "Node"
        ],
        "summary": "Get all effective responsibilities for a node matching the locator.",
        "description": "",
        "operationId": "getDisabledResponsibilities",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "nodeLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "TeamCityNodeLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/disabledResponsibilities"
            }
          }
        }
      }
    },
    "/app/rest/server/nodes/{nodeLocator}/effectiveResponsibilities": {
      "get": {
        "tags": [
          "Node"
        ],
        "summary": "Get all effective responsibilities for a node matching the locator.",
        "description": "",
        "operationId": "getEffectiveResponsibilities",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "nodeLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "TeamCityNodeLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/effectiveResponsibilities"
            }
          }
        }
      }
    },
    "/app/rest/server/nodes/{nodeLocator}/enabledResponsibilities": {
      "get": {
        "tags": [
          "Node"
        ],
        "summary": "Get all enabled responsibilities for a node matching the locator.",
        "description": "",
        "operationId": "getEnabledResponsibilities",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "nodeLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "TeamCityNodeLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/enabledResponsibilities"
            }
          }
        }
      }
    },
    "/app/rest/server/nodes/{nodeLocator}/enabledResponsibilities/{name}": {
      "put": {
        "tags": [
          "Node"
        ],
        "summary": "Enables or disables responsibility for a node.",
        "description": "",
        "operationId": "changeNodeResponsibility",
        "consumes": [
          "text/plain"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "nodeLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "TeamCityNodeLocator"
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/enabledResponsibilities"
            }
          }
        }
      }
    },
    "/app/rest/server/plugins": {
      "get": {
        "tags": [
          "Server"
        ],
        "summary": "Get all plugins.",
        "description": "",
        "operationId": "getAllPlugins",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/plugins"
            }
          }
        }
      }
    },
    "/app/rest/server/{field}": {
      "get": {
        "tags": [
          "Server"
        ],
        "summary": "Get a field of the server info.",
        "description": "",
        "operationId": "getServerField",
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "field",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "text/plain": ""
            },
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/app/rest/testOccurrences": {
      "get": {
        "tags": [
          "TestOccurrence"
        ],
        "summary": "Get all test occurrences.",
        "description": "",
        "operationId": "getAllTestOccurrences",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "locator",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "TestOccurrenceLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/testOccurrences"
            }
          }
        }
      }
    },
    "/app/rest/testOccurrences/{testLocator}": {
      "get": {
        "tags": [
          "TestOccurrence"
        ],
        "summary": "Get a matching test occurrence.",
        "description": "",
        "operationId": "getTestOccurrence",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "testLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "TestOccurrenceLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/testOccurrence"
            }
          }
        }
      }
    },
    "/app/rest/tests": {
      "get": {
        "tags": [
          "Test"
        ],
        "summary": "Get all tests.",
        "description": "",
        "operationId": "getTests",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "locator",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "TestLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/tests"
            }
          }
        }
      }
    },
    "/app/rest/tests/{testLocator}": {
      "get": {
        "tags": [
          "Test"
        ],
        "summary": "Get a matching test.",
        "description": "",
        "operationId": "getTest",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "testLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "TestLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/test"
            }
          }
        }
      }
    },
    "/app/rest/userGroups": {
      "get": {
        "tags": [
          "Group"
        ],
        "summary": "Get all user groups.",
        "description": "",
        "operationId": "getAllGroups",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/groups"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Group"
        ],
        "summary": "Add a new user group.",
        "description": "",
        "operationId": "addGroup",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/group"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/group"
            }
          }
        }
      }
    },
    "/app/rest/userGroups/{groupLocator}": {
      "get": {
        "tags": [
          "Group"
        ],
        "summary": "Get user group matching the locator.",
        "description": "",
        "operationId": "getUserGroupOfGroup",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "groupLocator",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/group"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Group"
        ],
        "summary": "Delete user group matching the locator.",
        "description": "",
        "operationId": "deleteGroup",
        "parameters": [
          {
            "name": "groupLocator",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/app/rest/userGroups/{groupLocator}/parent-groups": {
      "get": {
        "tags": [
          "Group"
        ],
        "summary": "Get parent groups of the matching user group.",
        "description": "",
        "operationId": "getGroupParentGroups",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "groupLocator",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/groups"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Group"
        ],
        "summary": "Update parent groups of the matching user group.",
        "description": "",
        "operationId": "setGroupParentGroups",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "groupLocator",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/groups"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/groups"
            }
          }
        }
      }
    },
    "/app/rest/userGroups/{groupLocator}/properties": {
      "get": {
        "tags": [
          "Group"
        ],
        "summary": "Get properties of the matching user group.",
        "description": "",
        "operationId": "getGroupProperties",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "groupLocator",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/properties"
            }
          }
        }
      }
    },
    "/app/rest/userGroups/{groupLocator}/properties/{name}": {
      "get": {
        "tags": [
          "Group"
        ],
        "summary": "Get a property of the matching user group.",
        "description": "",
        "operationId": "getGroupProperty",
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "groupLocator",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "text/plain": ""
            },
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Group"
        ],
        "summary": "Update a property of the matching user group.",
        "description": "",
        "operationId": "setGroupProperty",
        "consumes": [
          "text/plain"
        ],
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "groupLocator",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "text/plain": ""
            },
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Group"
        ],
        "summary": "Remove a property of the matching user group.",
        "description": "",
        "operationId": "removeGroupProperty",
        "parameters": [
          {
            "name": "groupLocator",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/app/rest/userGroups/{groupLocator}/roles": {
      "get": {
        "tags": [
          "Group"
        ],
        "summary": "Get all roles of the matching user group.",
        "description": "",
        "operationId": "getGroupRoles",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "groupLocator",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/roles"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Group"
        ],
        "summary": "Add a role to the matching user group.",
        "description": "",
        "operationId": "addRoleToGroup",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "groupLocator",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/role"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/role"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Group"
        ],
        "summary": "Update roles of the matching user group.",
        "description": "",
        "operationId": "setGroupRoles",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "groupLocator",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/roles"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/roles"
            }
          }
        }
      }
    },
    "/app/rest/userGroups/{groupLocator}/roles/{roleId}/{scope}": {
      "get": {
        "tags": [
          "Group"
        ],
        "summary": "Get a role with the specific scope of the matching user group.",
        "description": "",
        "operationId": "getGroupRoleAtScope",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "groupLocator",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "roleId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "scope",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/role"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Group"
        ],
        "summary": "Add a role with the specific scope to the matching user group.",
        "description": "",
        "operationId": "addRoleAtScopeToGroup",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "groupLocator",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "roleId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "scope",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/role"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Group"
        ],
        "summary": "Remove a role with the specific scope from the matching user group.",
        "description": "",
        "operationId": "removeRoleAtScopeFromGroup",
        "parameters": [
          {
            "name": "groupLocator",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "roleId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "scope",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/app/rest/users": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get all users.",
        "description": "",
        "operationId": "getAllUsers",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "locator",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/users"
            }
          }
        }
      },
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Create a new user.",
        "description": "",
        "operationId": "addUser",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/user"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/user"
            }
          }
        }
      }
    },
    "/app/rest/users/{userLocator}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get user matching the locator.",
        "description": "",
        "operationId": "getUser",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "userLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "UserLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/user"
            }
          }
        }
      },
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Update user matching the locator.",
        "description": "",
        "operationId": "replaceUser",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "userLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "UserLocator"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/user"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/user"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Delete user matching the locator.",
        "description": "",
        "operationId": "deleteUser",
        "parameters": [
          {
            "name": "userLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "UserLocator"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/app/rest/users/{userLocator}/debug/rememberMe": {
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Remove the RememberMe data of the matching user.",
        "description": "",
        "operationId": "removeUserRememberMe",
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "userLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "UserLocator"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation",
            "examples": {
              "text/plain": ""
            }
          }
        }
      }
    },
    "/app/rest/users/{userLocator}/groups": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get all groups of the matching user.",
        "description": "",
        "operationId": "getAllUserGroups",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "userLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "UserLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/groups"
            }
          }
        }
      },
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Update groups of the matching user.",
        "description": "",
        "operationId": "setUserGroups",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "userLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "UserLocator"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/groups"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/groups"
            }
          }
        }
      }
    },
    "/app/rest/users/{userLocator}/groups/{groupLocator}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get a user group of the matching user.",
        "description": "",
        "operationId": "getUserGroup",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "userLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "UserLocator"
          },
          {
            "name": "groupLocator",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/group"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Remove the matching user from the specific group.",
        "description": "",
        "operationId": "removeUserFromGroup",
        "parameters": [
          {
            "name": "userLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "UserLocator"
          },
          {
            "name": "groupLocator",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/app/rest/users/{userLocator}/permissions": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get all permissions effective for the matching user.",
        "description": "",
        "operationId": "getUserPermissions",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "userLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "UserLocator"
          },
          {
            "name": "locator",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/permissionAssignments"
            }
          }
        }
      }
    },
    "/app/rest/users/{userLocator}/properties": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get all properties of the matching user.",
        "description": "",
        "operationId": "getUserProperties",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "userLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "UserLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/properties"
            }
          }
        }
      }
    },
    "/app/rest/users/{userLocator}/properties/{name}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get a property of the matching user.",
        "description": "",
        "operationId": "getUserProperty",
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "userLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "UserLocator"
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "text/plain": ""
            },
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Update a property of the matching user.",
        "description": "",
        "operationId": "setUserProperty",
        "consumes": [
          "text/plain"
        ],
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "userLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "UserLocator"
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "text/plain": ""
            },
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Remove a property of the matching user.",
        "description": "",
        "operationId": "removeUserProperty",
        "parameters": [
          {
            "name": "userLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "UserLocator"
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/app/rest/users/{userLocator}/roles": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get all user roles of the matching user.",
        "description": "",
        "operationId": "getAllUserRoles",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "userLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "UserLocator"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/roles"
            }
          }
        }
      },
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Add a role to the matching user.",
        "description": "",
        "operationId": "addRoleToUser",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "userLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "UserLocator"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/role"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/role"
            }
          }
        }
      },
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Update user roles of the matching user.",
        "description": "",
        "operationId": "setUserRoles",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "userLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "UserLocator"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/roles"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/roles"
            }
          }
        }
      }
    },
    "/app/rest/users/{userLocator}/roles/{roleId}/{scope}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get a user role with the specific scope from the matching user.",
        "description": "",
        "operationId": "getUserRolesAtScope",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "userLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "UserLocator"
          },
          {
            "name": "roleId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "scope",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/role"
            }
          }
        }
      },
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Add a role with the specific scope to the matching user.",
        "description": "",
        "operationId": "addRoleToUserAtScope",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "userLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "UserLocator"
          },
          {
            "name": "roleId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "scope",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/role"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Remove a role with the specific scope from the matching user.",
        "description": "",
        "operationId": "removeUserRoleAtScope",
        "parameters": [
          {
            "name": "userLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "UserLocator"
          },
          {
            "name": "roleId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "scope",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/app/rest/users/{userLocator}/tokens": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get all authentication tokens of the matching user.",
        "description": "",
        "operationId": "getUserTokens",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "userLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "UserLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/tokens"
            }
          }
        }
      },
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Create a new authentication token for the matching user.",
        "description": "",
        "operationId": "addUserToken",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/token"
            }
          },
          {
            "name": "userLocator",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/token"
            }
          }
        }
      }
    },
    "/app/rest/users/{userLocator}/tokens/{name}": {
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Remove an authentication token from the matching user.",
        "description": "",
        "operationId": "deleteUserToken",
        "parameters": [
          {
            "name": "userLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "UserLocator"
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/app/rest/users/{userLocator}/{field}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get a field of the matching user.",
        "description": "",
        "operationId": "getUserField",
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "userLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "UserLocator"
          },
          {
            "name": "field",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "text/plain": ""
            },
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Update a field of the matching user.",
        "description": "",
        "operationId": "setUserField",
        "consumes": [
          "text/plain"
        ],
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "userLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "UserLocator"
          },
          {
            "name": "field",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "text/plain": ""
            },
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Remove a property of the matching user.",
        "description": "",
        "operationId": "deleteUserField",
        "parameters": [
          {
            "name": "userLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "UserLocator"
          },
          {
            "name": "field",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/app/rest/vcs-root-instances": {
      "get": {
        "tags": [
          "VcsRootInstance"
        ],
        "summary": "Get all VCS root instances.",
        "description": "",
        "operationId": "getAllVcsRootInstances",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "locator",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "VcsRootInstanceLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/vcs-root-instances"
            }
          }
        }
      }
    },
    "/app/rest/vcs-root-instances/checkingForChangesQueue": {
      "post": {
        "tags": [
          "VcsRootInstance"
        ],
        "summary": "Check for the pending changes for all VCS root instances.",
        "description": "",
        "operationId": "requestPendingChangesCheck",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "locator",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "VcsRootInstanceLocator"
          },
          {
            "name": "requestor",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/vcs-root-instances"
            }
          }
        }
      }
    },
    "/app/rest/vcs-root-instances/commitHookNotification": {
      "post": {
        "tags": [
          "VcsRootInstance"
        ],
        "summary": "Send the commit hook notification.",
        "description": "",
        "operationId": "triggerCommitHookNotification",
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "locator",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "VcsRootInstanceLocator"
          },
          {
            "name": "okOnNothingFound",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation",
            "examples": {
              "text/plain": ""
            }
          }
        }
      }
    },
    "/app/rest/vcs-root-instances/{vcsRootInstanceLocator}": {
      "get": {
        "tags": [
          "VcsRootInstance"
        ],
        "summary": "Get VCS root instance matching the locator.",
        "description": "",
        "operationId": "getVcsRootInstance",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "vcsRootInstanceLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "VcsRootInstanceLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/vcs-root-instance"
            }
          }
        }
      }
    },
    "/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/files/latest": {
      "get": {
        "tags": [
          "VcsRootInstance"
        ],
        "summary": "List all files.",
        "description": "",
        "operationId": "getFilesList",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "basePath",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "locator",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "vcsRootInstanceLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "VcsRootInstanceLocator"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/files"
            }
          }
        }
      }
    },
    "/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/files/latest/archived{path}": {
      "get": {
        "tags": [
          "VcsRootInstance"
        ],
        "summary": "Get specific file zipped.",
        "description": "",
        "operationId": "getZippedFile",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "(/.*)?"
          },
          {
            "name": "basePath",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "locator",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "vcsRootInstanceLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "VcsRootInstanceLocator"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation",
            "examples": {
              "*/*": ""
            }
          }
        }
      }
    },
    "/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/files/latest/files{path}": {
      "get": {
        "tags": [
          "VcsRootInstance"
        ],
        "summary": "Download specific file.",
        "description": "",
        "operationId": "downloadFile",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "(/.*)?"
          },
          {
            "name": "vcsRootInstanceLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "VcsRootInstanceLocator"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation",
            "examples": {
              "*/*": ""
            }
          }
        }
      }
    },
    "/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/files/latest/metadata{path}": {
      "get": {
        "tags": [
          "VcsRootInstance"
        ],
        "summary": "Get metadata of specific file.",
        "description": "",
        "operationId": "getFileMetadata",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "(/.*)?"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "vcsRootInstanceLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "VcsRootInstanceLocator"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/file"
            }
          }
        }
      }
    },
    "/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/files/latest/{path}": {
      "get": {
        "tags": [
          "VcsRootInstance"
        ],
        "summary": "List files under this path.",
        "description": "",
        "operationId": "getFilesListForSubpath",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "(.*)?"
          },
          {
            "name": "basePath",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "locator",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "vcsRootInstanceLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "VcsRootInstanceLocator"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/files"
            }
          }
        }
      }
    },
    "/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/properties": {
      "get": {
        "tags": [
          "VcsRootInstance"
        ],
        "summary": "Get all properties of the matching VCS root instance.",
        "description": "",
        "operationId": "getVcsRootInstanceProperties",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "vcsRootInstanceLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "VcsRootInstanceLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/properties"
            }
          }
        }
      }
    },
    "/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/repositoryState": {
      "get": {
        "tags": [
          "VcsRootInstance"
        ],
        "summary": "Get the repository state of the matching VCS root instance.",
        "description": "",
        "operationId": "getVcsRootInstanceRepositoryState",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "vcsRootInstanceLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "VcsRootInstanceLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/entries"
            }
          }
        }
      },
      "put": {
        "tags": [
          "VcsRootInstance"
        ],
        "summary": "Update the repository state of the matching VCS root instance.",
        "description": "",
        "operationId": "setVcsRootInstanceRepositoryState",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "vcsRootInstanceLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "VcsRootInstanceLocator"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/entries"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/entries"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "VcsRootInstance"
        ],
        "summary": "Delete the last repository state of the matching VCS root instance.",
        "description": "",
        "operationId": "deleteVcsRootInstanceRepositoryState",
        "parameters": [
          {
            "name": "vcsRootInstanceLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "VcsRootInstanceLocator"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/repositoryState/creationDate": {
      "get": {
        "tags": [
          "VcsRootInstance"
        ],
        "summary": "Get the creation date of the matching VCS root instance.",
        "description": "",
        "operationId": "getVcsRootInstanceCreationDate",
        "consumes": [
          "text/plain"
        ],
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "vcsRootInstanceLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "VcsRootInstanceLocator"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "text/plain": ""
            },
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/{field}": {
      "get": {
        "tags": [
          "VcsRootInstance"
        ],
        "summary": "Get a field of the matching VCS root instance.",
        "description": "",
        "operationId": "getVcsRootInstanceField",
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "vcsRootInstanceLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "VcsRootInstanceLocator"
          },
          {
            "name": "field",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "text/plain": ""
            },
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "put": {
        "tags": [
          "VcsRootInstance"
        ],
        "summary": "Get a field of the matching VCS root instance.",
        "description": "",
        "operationId": "setVcsRootInstanceField",
        "consumes": [
          "text/plain"
        ],
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "vcsRootInstanceLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "VcsRootInstanceLocator"
          },
          {
            "name": "field",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "text/plain": ""
            },
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "VcsRootInstance"
        ],
        "summary": "Remove a field of the matching VCS root instance.",
        "description": "",
        "operationId": "deleteVcsRootInstanceField",
        "parameters": [
          {
            "name": "vcsRootInstanceLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "VcsRootInstanceLocator"
          },
          {
            "name": "field",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/app/rest/vcs-roots": {
      "get": {
        "tags": [
          "VcsRoot"
        ],
        "summary": "Get all VCS roots.",
        "description": "",
        "operationId": "getAllVcsRoots",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "locator",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "VcsRootLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/vcs-roots"
            }
          }
        }
      },
      "post": {
        "tags": [
          "VcsRoot"
        ],
        "summary": "Add a new VCS root.",
        "description": "",
        "operationId": "addVcsRoot",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/vcs-root"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/vcs-root"
            }
          }
        }
      }
    },
    "/app/rest/vcs-roots/{vcsRootLocator}": {
      "get": {
        "tags": [
          "VcsRoot"
        ],
        "summary": "Get root endpoints.",
        "description": "",
        "operationId": "getRootEndpoints",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "vcsRootLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "VcsRootLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/vcs-root"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "VcsRoot"
        ],
        "summary": "Remove VCS root matching the locator.",
        "description": "",
        "operationId": "deleteVcsRoot",
        "parameters": [
          {
            "name": "vcsRootLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "VcsRootLocator"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/app/rest/vcs-roots/{vcsRootLocator}/instances": {
      "get": {
        "tags": [
          "VcsRoot"
        ],
        "summary": "Get all VCS root instances of the matching VCS root.",
        "description": "",
        "operationId": "getVcsRootInstances",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "vcsRootLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "VcsRootLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/vcs-root-instances"
            }
          }
        }
      }
    },
    "/app/rest/vcs-roots/{vcsRootLocator}/properties": {
      "get": {
        "tags": [
          "VcsRoot"
        ],
        "summary": "Get all properties of the matching VCS root.",
        "description": "",
        "operationId": "getAllVcsRootProperties",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "vcsRootLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "VcsRootLocator"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/properties"
            }
          }
        }
      },
      "put": {
        "tags": [
          "VcsRoot"
        ],
        "summary": "Update all properties of the matching VCS root.",
        "description": "",
        "operationId": "setVcsRootProperties",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "vcsRootLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "VcsRootLocator"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/properties"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/xml": "",
              "application/json": ""
            },
            "schema": {
              "$ref": "#/definitions/properties"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "VcsRoot"
        ],
        "summary": "Delete all properties of the matching VCS root.",
        "description": "",
        "operationId": "deleteAllVcsRootProperties",
        "parameters": [
          {
            "name": "vcsRootLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "VcsRootLocator"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/app/rest/vcs-roots/{vcsRootLocator}/properties/{name}": {
      "get": {
        "tags": [
          "VcsRoot"
        ],
        "summary": "Get a property on the matching VCS root.",
        "description": "",
        "operationId": "getVcsRootProperty",
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "vcsRootLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "VcsRootLocator"
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "text/plain": ""
            },
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "put": {
        "tags": [
          "VcsRoot"
        ],
        "summary": "Update a property of the matching VCS root.",
        "description": "",
        "operationId": "setVcsRootProperty",
        "consumes": [
          "text/plain"
        ],
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "vcsRootLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "VcsRootLocator"
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "text/plain": ""
            },
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "VcsRoot"
        ],
        "summary": "Delete a property of the matching VCS root.",
        "description": "",
        "operationId": "deleteVcsRootProperty",
        "parameters": [
          {
            "name": "vcsRootLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "VcsRootLocator"
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/app/rest/vcs-roots/{vcsRootLocator}/settingsFile": {
      "get": {
        "tags": [
          "VcsRoot"
        ],
        "summary": "Get the settings file of the matching VCS root.",
        "description": "",
        "operationId": "getVcsRootSettingsFile",
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "vcsRootLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "VcsRootLocator"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "text/plain": ""
            },
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/app/rest/vcs-roots/{vcsRootLocator}/{field}": {
      "get": {
        "tags": [
          "VcsRoot"
        ],
        "summary": "Get a field of the matching VCS root.",
        "description": "",
        "operationId": "getVcsRootField",
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "vcsRootLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "VcsRootLocator"
          },
          {
            "name": "field",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "text/plain": ""
            },
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "put": {
        "tags": [
          "VcsRoot"
        ],
        "summary": "Update a field of the matching VCS root.",
        "description": "",
        "operationId": "setVcsRootField",
        "consumes": [
          "text/plain"
        ],
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "vcsRootLocator",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "VcsRootLocator"
          },
          {
            "name": "field",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "text/plain": ""
            },
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/app/rest/version": {
      "get": {
        "tags": [
          "Root"
        ],
        "summary": "Get the TeamCity server version.",
        "description": "",
        "operationId": "getVersion",
        "produces": [
          "text/plain"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "text/plain": ""
            },
            "schema": {
              "type": "string"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "AgentLocator": {
      "type": "object",
      "properties": {
        "authorized": {
          "type": "boolean",
          "description": "Is the agent authorized."
        },
        "build": {
          "type": "string",
          "format": "BuildLocator",
          "description": "Build locator."
        },
        "compatible": {
          "type": "string",
          "format": "BuildTypeLocator",
          "description": "Compatible build types locator."
        },
        "connected": {
          "type": "boolean",
          "description": "Is the agent connected."
        },
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "For paginated calls, how many entities to return per page."
        },
        "enabled": {
          "type": "boolean",
          "description": "Is the agent enabled."
        },
        "id": {
          "type": "string",
          "description": "Entity ID."
        },
        "ip": {
          "type": "string"
        },
        "item": {
          "type": "string",
          "format": "item:(<locator1>),item:(<locator2>...)",
          "description": "Supply multiple locators and return a union of the results."
        },
        "name": {
          "type": "string"
        },
        "parameter": {
          "type": "string"
        },
        "pool": {
          "type": "string",
          "format": "AgentPoolLocator",
          "description": "Agent pool locator."
        },
        "start": {
          "type": "integer",
          "format": "int32",
          "description": "For paginated calls, from which entity to start rendering the page."
        }
      },
      "description": "Represents a locator string for filtering Agent entities.",
      "x-object-type": "LocatorEntity",
      "x-is-locator": true,
      "x-subpackage": "locator",
      "x-base-entity": "Agent",
      "x-model-examples": [
        "`name:DefaultAgent` - find agent with `DefaultAgent` name.",
        "`pool:(<agentPoolLocator>),connected:true` - find all connected agents in a pool found by `agentPoolLocator`."
      ]
    },
    "AgentPoolLocator": {
      "type": "object",
      "properties": {
        "agent": {
          "type": "string",
          "format": "AgentLocator",
          "description": "Pool's agents locator."
        },
        "id": {
          "type": "string"
        },
        "item": {
          "type": "string",
          "format": "item:(<locator1>),item:(<locator2>...)",
          "description": "Supply multiple locators and return a union of the results."
        },
        "name": {
          "type": "string"
        },
        "project": {
          "type": "string",
          "format": "ProjectLocator",
          "description": "Pool's associated projects locator."
        }
      },
      "description": "Represents a locator string for filtering AgentPool entities.",
      "x-object-type": "LocatorEntity",
      "x-is-locator": true,
      "x-subpackage": "locator",
      "x-base-entity": "AgentPool",
      "x-model-examples": [
        "`name:Default` — find `Default` agent pool details.",
        "`project:(<projectLocator>)` — find pool associated with project found by `projectLocator`."
      ]
    },
    "ArtifactDownloadInfo": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "downloadTimestamp": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        }
      },
      "x-object-type": "DataEntity",
      "x-subpackage": ".build.downloadedArtifacts.",
      "x-is-data": true
    },
    "AuditLocator": {
      "type": "object",
      "properties": {
        "action": {
          "type": "string",
          "description": "Use `$help` to get the full list of supported actions."
        },
        "affectedProject": {
          "type": "string",
          "format": "ProjectLocator",
          "description": "Related project locator."
        },
        "buildType": {
          "type": "string",
          "format": "BuildTypeLocator",
          "description": "Related build type or template locator."
        },
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "For paginated calls, how many entities to return per page."
        },
        "id": {
          "type": "string"
        },
        "item": {
          "type": "string",
          "format": "item:(<locator1>),item:(<locator2>...)",
          "description": "Supply multiple locators and return a union of the results."
        },
        "lookupLimit": {
          "type": "integer",
          "format": "int32",
          "description": "Limit processing to the latest `<lookupLimit>` entities."
        },
        "start": {
          "type": "integer",
          "format": "int32",
          "description": "For paginated calls, from which entity to start rendering the page."
        },
        "systemAction": {
          "type": "string",
          "format": "boolean"
        },
        "user": {
          "type": "string",
          "format": "UserLocator",
          "description": "Locator of user who caused the audit event."
        }
      },
      "description": "Represents a locator string for filtering AuditEvent entities.",
      "x-object-type": "LocatorEntity",
      "x-is-locator": true,
      "x-subpackage": "locator",
      "x-base-entity": "AuditEvent",
      "x-model-examples": [
        "`count:1000` — find last `1000` audit events.",
        "`user:(<userLocator>)` — find last 100 events by user found by `userLocator`."
      ]
    },
    "AuthModule": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "properties": {
          "$ref": "#/definitions/properties"
        }
      },
      "x-object-type": "DataEntity",
      "x-subpackage": ".server.",
      "x-is-data": true
    },
    "AuthModules": {
      "type": "object",
      "properties": {
        "module": {
          "type": "array",
          "items": {
            "xml": {
              "name": "module"
            },
            "$ref": "#/definitions/AuthModule"
          }
        }
      },
      "x-object-type": "DataEntity",
      "x-subpackage": ".server.",
      "x-is-data": true
    },
    "BranchLocator": {
      "type": "object",
      "properties": {
        "branched": {
          "type": "string",
          "format": "boolean",
          "description": "Is feature branch."
        },
        "build": {
          "type": "string",
          "format": "BuildLocator",
          "description": "Build locator."
        },
        "buildType": {
          "type": "string",
          "format": "BuildTypeLocator",
          "description": "Build type locator."
        },
        "default": {
          "type": "string",
          "format": "boolean",
          "description": "Is default branch."
        },
        "item": {
          "type": "string",
          "format": "item:(<locator1>),item:(<locator2>...)",
          "description": "Supply multiple locators and return a union of the results."
        },
        "name": {
          "type": "string"
        },
        "policy": {
          "type": "string",
          "enum": [
            "VCS_BRANCHES",
            "ACTIVE_VCS_BRANCHES",
            "HISTORY_BRANCHES",
            "ACTIVE_HISTORY_BRANCHES",
            "ACTIVE_HISTORY_AND_ACTIVE_VCS_BRANCHES",
            "ALL_BRANCHES"
          ]
        }
      },
      "description": "Represents a locator string for filtering Branch entities.",
      "x-object-type": "LocatorEntity",
      "x-is-locator": true,
      "x-subpackage": "locator",
      "x-base-entity": "Branch",
      "x-model-examples": [
        "`build:<buildLocator>` - find branch with which the build found by `buildLocator` was started.",
        "`buildType:<buildTypeLocator>` - find branches of a build configuration found by `buildTypeLocator`."
      ]
    },
    "BuildLocator": {
      "type": "object",
      "properties": {
        "affectedProject": {
          "type": "string",
          "format": "ProjectLocator",
          "description": "Project (direct or indirect parent) locator."
        },
        "agent": {
          "type": "string",
          "format": "AgentLocator",
          "description": "Agent locator."
        },
        "agentTypeId": {
          "type": "integer",
          "format": "int32",
          "description": "typeId of agent used to execute build."
        },
        "any": {
          "type": "boolean",
          "description": "State can be any."
        },
        "artifactDependency": {
          "type": "string"
        },
        "branch": {
          "type": "string",
          "format": "BranchLocator",
          "description": "Branch locator."
        },
        "buildType": {
          "type": "string",
          "format": "BuildTypeLocator",
          "description": "Build type locator."
        },
        "canceled": {
          "type": "boolean",
          "description": "Is canceled."
        },
        "compatibleAgent": {
          "type": "string",
          "format": "AgentLocator",
          "description": "Agent locator."
        },
        "composite": {
          "type": "boolean",
          "description": "Is composite."
        },
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "For paginated calls, how many entities to return per page."
        },
        "defaultFilter": {
          "type": "boolean",
          "description": "If true, applies default filter which returns only \"normal\" builds (finished builds which are not canceled, not failed-to-start, not personal, and on default branch (in branched build configurations))."
        },
        "failedToStart": {
          "type": "boolean",
          "description": "Is failed to start."
        },
        "finishDate": {
          "type": "string",
          "format": "date:<yyyyMMddTHHmmss+ZZZZ>,build:<build locator>,condition:<before/after>",
          "description": "Requires either date or build dimension."
        },
        "finished": {
          "type": "boolean",
          "description": "Is finished."
        },
        "hanging": {
          "type": "boolean",
          "description": "Is hanging."
        },
        "history": {
          "type": "boolean",
          "description": "Is history build."
        },
        "id": {
          "type": "string",
          "description": "Entity ID."
        },
        "item": {
          "type": "string",
          "format": "item:(<locator1>),item:(<locator2>...)",
          "description": "Supply multiple locators and return a union of the results."
        },
        "lookupLimit": {
          "type": "integer",
          "format": "int32",
          "description": "Limit processing to the latest `<lookupLimit>` entities."
        },
        "number": {
          "type": "string",
          "description": "Build number string."
        },
        "personal": {
          "type": "boolean",
          "description": "Is a personal build."
        },
        "pinned": {
          "type": "boolean",
          "description": "Is pinned."
        },
        "project": {
          "type": "string",
          "format": "ProjectLocator",
          "description": "Project (direct parent) locator."
        },
        "property": {
          "type": "string",
          "format": "property:(name:<name>,value:<value>,matchType:<matchType>)",
          "enum": [
            "exists",
            "not-exists",
            "equals",
            "does-not-equal",
            "starts-with",
            "contains",
            "does-not-contain",
            "ends-with",
            "any",
            "matches",
            "does-not-match",
            "more-than",
            "no-more-than",
            "less-than",
            "no-less-than",
            "ver-more-than",
            "ver-no-more-than",
            "ver-less-than",
            "ver-no-less-than"
          ]
        },
        "queued": {
          "type": "boolean",
          "description": "Is queued."
        },
        "queuedDate": {
          "type": "string",
          "format": "date:<yyyyMMddTHHmmss+ZZZZ>,build:<build locator>,condition:<before/after>",
          "description": "Requires either date or build dimension."
        },
        "revision": {
          "type": "string",
          "description": "Build revision."
        },
        "running": {
          "type": "boolean",
          "description": "Is running."
        },
        "snapshotDependency": {
          "type": "string"
        },
        "start": {
          "type": "integer",
          "format": "int32",
          "description": "For paginated calls, from which entity to start rendering the page."
        },
        "startDate": {
          "type": "string",
          "format": "date:<yyyyMMddTHHmmss+ZZZZ>,build:<build locator>,condition:<before/after>",
          "description": "Requires either date or build dimension."
        },
        "state": {
          "type": "string",
          "enum": [
            "queued",
            "running",
            "finished",
            "any"
          ]
        },
        "status": {
          "type": "string",
          "description": "Status text."
        },
        "tag": {
          "type": "string",
          "format": "TagLocator",
          "description": "Tag locator."
        },
        "taskId": {
          "type": "integer",
          "format": "int32",
          "description": "ID of a build or build promotion."
        },
        "user": {
          "type": "string",
          "format": "UserLocator",
          "description": "For personal builds checks the owner of the build, triggerring user in other cases."
        }
      },
      "description": "Represents a locator string for filtering Build entities.",
      "x-object-type": "LocatorEntity",
      "x-is-locator": true,
      "x-subpackage": "locator",
      "x-base-entity": "Build",
      "x-model-examples": [
        "`id:1` — find build with ID `1`.",
        "`buildType:<buildTypeLocator>` — find builds under build configuration found by `buildTypeLocator`.",
        "`defaultFilter:false,agent:<agentLocator>` — find builds executed on agent found by `agentLocator`, with `defaultFilter` disabled (see below)."
      ]
    },
    "BuildQueueLocator": {
      "type": "object",
      "properties": {
        "agent": {
          "type": "string",
          "format": "AgentLocator",
          "description": "Agent locator."
        },
        "buildType": {
          "type": "string",
          "format": "BuildTypeLocator",
          "description": "Build type locator."
        },
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "For paginated calls, how many entities to return per page."
        },
        "id": {
          "type": "string",
          "description": "Entity ID."
        },
        "item": {
          "type": "string",
          "format": "item:(<locator1>),item:(<locator2>...)",
          "description": "Supply multiple locators and return a union of the results."
        },
        "personal": {
          "type": "boolean",
          "description": "Is personal."
        },
        "pool": {
          "type": "string",
          "format": "AgentPoolLocator",
          "description": "Agent pool locator."
        },
        "project": {
          "type": "string",
          "format": "ProjectLocator",
          "description": "Project locator."
        },
        "start": {
          "type": "integer",
          "format": "int32",
          "description": "For paginated calls, from which entity to start rendering the page."
        },
        "taskId": {
          "type": "string",
          "description": "Deprecated."
        },
        "user": {
          "type": "string",
          "format": "UserLocator",
          "description": "User locator."
        }
      },
      "description": "Represents a locator string for filtering Build entities.",
      "x-object-type": "LocatorEntity",
      "x-is-locator": true,
      "x-subpackage": "locator",
      "x-base-entity": "Build",
      "x-model-examples": [
        "`buildType:<buildTypeLocator>` — find queued builds under build configuration found by buildTypeLocator.",
        "`user:<userLocator>` — find queued builds started by user found by userLocator."
      ]
    },
    "BuildStatusUpdate": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "comment": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        }
      },
      "description": "Represents a build status update.",
      "x-object-type": "DataEntity",
      "x-subpackage": ".build.",
      "x-is-data": true
    },
    "BuildTriggerCustomization": {
      "type": "object",
      "properties": {
        "enforceCleanCheckout": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "enforceCleanCheckoutForDependencies": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "parameters": {
          "$ref": "#/definitions/properties"
        }
      },
      "description": "Represents build customization settings of a trigger",
      "x-object-type": "DataEntity",
      "x-subpackage": ".buildType.",
      "x-is-data": true
    },
    "BuildTypeLocator": {
      "type": "object",
      "properties": {
        "affectedProject": {
          "type": "string",
          "format": "ProjectLocator",
          "description": "Project (direct or indirect parent) locator."
        },
        "build": {
          "type": "string",
          "format": "BuildLocator",
          "description": "Build locator."
        },
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "For paginated calls, how many entities to return per page."
        },
        "id": {
          "type": "string"
        },
        "internalId": {
          "type": "string"
        },
        "item": {
          "type": "string",
          "format": "item:(<locator1>),item:(<locator2>...)",
          "description": "Supply multiple locators and return a union of the results."
        },
        "name": {
          "type": "string"
        },
        "paused": {
          "type": "boolean",
          "description": "Is paused."
        },
        "project": {
          "type": "string",
          "format": "ProjectLocator",
          "description": "Project (direct parent) locator."
        },
        "start": {
          "type": "integer",
          "format": "int32",
          "description": "For paginated calls, from which entity to start rendering the page."
        },
        "template": {
          "type": "string",
          "format": "BuildTypeLocator",
          "description": "Base template locator."
        },
        "templateFlag": {
          "type": "boolean",
          "description": "Is a template."
        },
        "uuid": {
          "type": "string"
        },
        "vcsRoot": {
          "type": "string",
          "format": "VcsRootLocator",
          "description": "VCS root locator."
        },
        "vcsRootInstance": {
          "type": "string",
          "format": "VcsRootInstanceLocator",
          "description": "VCS root instance locator."
        }
      },
      "description": "Represents a locator string for filtering BuildType entities.",
      "x-object-type": "LocatorEntity",
      "x-is-locator": true,
      "x-subpackage": "locator",
      "x-base-entity": "BuildType",
      "x-model-examples": [
        "`name:MyBuildType` — find build configuration with `MyBuildType` name",
        "`project:<projectLocator>` — find build configurations under project found by `projectLocator`"
      ]
    },
    "ChangeLocator": {
      "type": "object",
      "properties": {
        "affectedProject": {
          "type": "string",
          "format": "ProjectLocator",
          "description": "Project (direct or indirect parent) locator."
        },
        "build": {
          "type": "string",
          "format": "BuildLocator",
          "description": "Build locator."
        },
        "buildType": {
          "type": "string",
          "format": "BuildTypeLocator",
          "description": "Build type locator."
        },
        "comment": {
          "type": "string"
        },
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "For paginated calls, how many entities to return per page."
        },
        "file": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "description": "Entity ID."
        },
        "internalVersion": {
          "type": "string",
          "description": "Commit SHA."
        },
        "item": {
          "type": "string",
          "format": "item:(<locator1>),item:(<locator2>...)",
          "description": "Supply multiple locators and return a union of the results."
        },
        "pending": {
          "type": "boolean",
          "description": "Is pending."
        },
        "project": {
          "type": "string",
          "format": "ProjectLocator",
          "description": "Project locator."
        },
        "sinceChange": {
          "type": "string",
          "description": "Commit SHA since which the changes should be returned."
        },
        "start": {
          "type": "integer",
          "format": "int32",
          "description": "For paginated calls, from which entity to start rendering the page."
        },
        "user": {
          "type": "string",
          "format": "UserLocator",
          "description": "User locator."
        },
        "username": {
          "type": "string",
          "description": "VCS side username."
        },
        "vcsRoot": {
          "type": "string",
          "format": "VcsRootLocator",
          "description": "VCS root locator."
        },
        "vcsRootInstance": {
          "type": "string",
          "format": "VcsRootInstanceLocator",
          "description": "VCS instance locator."
        },
        "version": {
          "type": "string"
        }
      },
      "description": "Represents a locator string for filtering Change entities.",
      "x-object-type": "LocatorEntity",
      "x-is-locator": true,
      "x-subpackage": "locator",
      "x-base-entity": "Change",
      "x-model-examples": [
        "`username:MyVCSUsername` — find last 100 changes made by user with `MyVCSUsername` VCS username.",
        "`pending:true,buildType:<buildTypeLocator>` — find all pending changes on build configuration found by `buildTypeLocator`."
      ]
    },
    "ChangeStatus": {
      "type": "object",
      "properties": {
        "runningSuccessfullyBuilds": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        },
        "pendingBuildTypes": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        },
        "successfulBuilds": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        },
        "totalProblems": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        },
        "newFailedTests": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        },
        "otherFailedTests": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        },
        "queuedBuildsCount": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        },
        "criticalBuilds": {
          "$ref": "#/definitions/builds"
        },
        "notCriticalBuilds": {
          "$ref": "#/definitions/builds"
        },
        "newTestsFailedBuilds": {
          "$ref": "#/definitions/builds"
        },
        "compilationErrorBuilds": {
          "$ref": "#/definitions/builds"
        },
        "runningBuilds": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        },
        "failedBuilds": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        },
        "cancelledBuilds": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        },
        "finishedBuilds": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        }
      },
      "description": "Aggregated statuses of the first builds with this change. Fairly expensive to compute.",
      "x-object-type": "DataEntity",
      "x-subpackage": ".change.",
      "x-is-data": true
    },
    "CloudImageLocator": {
      "type": "object",
      "properties": {
        "affectedProject": {
          "type": "string",
          "format": "ProjectLocator",
          "description": "Project (direct or indirect parent) locator."
        },
        "agent": {
          "type": "string",
          "format": "AgentLocator",
          "description": "Agent locator."
        },
        "agentPool": {
          "type": "string",
          "format": "AgentPoolLocator",
          "description": "Agent pool locator."
        },
        "compatibleBuildPromotion": {
          "type": "string",
          "format": "BuildLocator",
          "description": "Build promotion locator"
        },
        "compatibleBuildType": {
          "type": "string",
          "format": "BuildTypeLocator",
          "description": "Build type locator"
        },
        "id": {
          "type": "string"
        },
        "instance": {
          "type": "string",
          "format": "CloudInstanceLocator",
          "description": "Cloud instance locator."
        },
        "item": {
          "type": "string",
          "format": "item:(<locator1>),item:(<locator2>...)",
          "description": "Supply multiple locators and return a union of the results."
        },
        "name": {
          "type": "string"
        },
        "profile": {
          "type": "string",
          "format": "CloudProfileLocator",
          "description": "Cloud profile locator."
        },
        "project": {
          "type": "string",
          "format": "ProjectLocator",
          "description": "Project locator."
        },
        "property": {
          "type": "string",
          "format": "property:(name:<name>,value:<value>,matchType:<matchType>)",
          "enum": [
            "exists",
            "not-exists",
            "equals",
            "does-not-equal",
            "starts-with",
            "contains",
            "does-not-contain",
            "ends-with",
            "any",
            "matches",
            "does-not-match",
            "more-than",
            "no-more-than",
            "less-than",
            "no-less-than",
            "ver-more-than",
            "ver-no-more-than",
            "ver-less-than",
            "ver-no-less-than"
          ]
        }
      },
      "description": "Represents a locator string for filtering CloudImage entities.",
      "x-object-type": "LocatorEntity",
      "x-is-locator": true,
      "x-subpackage": "locator",
      "x-base-entity": "CloudImage",
      "x-model-examples": [
        "`name:MyImage` - find image with name `MyImage`.",
        "`profile:<profileLocator>` - find all images in cloud profile found by `profileLocator`."
      ]
    },
    "CloudInstanceLocator": {
      "type": "object",
      "properties": {
        "affectedProject": {
          "type": "string",
          "format": "ProjectLocator",
          "description": "Project (direct or indirect parent) locator."
        },
        "agent": {
          "type": "string",
          "format": "AgentLocator",
          "description": "Agent locator."
        },
        "id": {
          "type": "string"
        },
        "instance": {
          "type": "string",
          "format": "CloudImageLocator",
          "description": "Cloud image locator."
        },
        "item": {
          "type": "string",
          "format": "item:(<locator1>),item:(<locator2>...)",
          "description": "Supply multiple locators and return a union of the results."
        },
        "networkAddress": {
          "type": "string"
        },
        "profile": {
          "type": "string",
          "format": "CloudProfileLocator",
          "description": "Cloud profile locator."
        },
        "project": {
          "type": "string",
          "format": "ProjectLocator",
          "description": "Project locator."
        },
        "property": {
          "type": "string",
          "format": "property:(name:<name>,value:<value>,matchType:<matchType>)",
          "enum": [
            "exists",
            "not-exists",
            "equals",
            "does-not-equal",
            "starts-with",
            "contains",
            "does-not-contain",
            "ends-with",
            "any",
            "matches",
            "does-not-match",
            "more-than",
            "no-more-than",
            "less-than",
            "no-less-than",
            "ver-more-than",
            "ver-no-more-than",
            "ver-less-than",
            "ver-no-less-than"
          ]
        }
      },
      "description": "Represents a locator string for filtering CloudInstance entities.",
      "x-object-type": "LocatorEntity",
      "x-is-locator": true,
      "x-subpackage": "locator",
      "x-base-entity": "CloudInstance",
      "x-model-examples": [
        "`agent:<agentLocator>` - find cloud instance which hosts agent found by `agentLocator`.",
        "`profile:<profileLocator>` - find all cloud instances in cloud profile found by `profileLocator`."
      ]
    },
    "CloudProfileLocator": {
      "type": "object",
      "properties": {
        "affectedProject": {
          "type": "string",
          "format": "ProjectLocator",
          "description": "Project (direct or indirect parent) locator."
        },
        "cloudProviderId": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "instance": {
          "type": "string",
          "format": "CloudImageLocator",
          "description": "Cloud image locator."
        },
        "item": {
          "type": "string",
          "format": "item:(<locator1>),item:(<locator2>...)",
          "description": "Supply multiple locators and return a union of the results."
        },
        "name": {
          "type": "string"
        },
        "project": {
          "type": "string",
          "format": "ProjectLocator",
          "description": "Project locator."
        },
        "property": {
          "type": "string",
          "format": "property:(name:<name>,value:<value>,matchType:<matchType>)",
          "enum": [
            "exists",
            "not-exists",
            "equals",
            "does-not-equal",
            "starts-with",
            "contains",
            "does-not-contain",
            "ends-with",
            "any",
            "matches",
            "does-not-match",
            "more-than",
            "no-more-than",
            "less-than",
            "no-less-than",
            "ver-more-than",
            "ver-no-more-than",
            "ver-less-than",
            "ver-no-less-than"
          ]
        }
      },
      "description": "Represents a locator string for filtering CloudProfile entities.",
      "x-object-type": "LocatorEntity",
      "x-is-locator": true,
      "x-subpackage": "locator",
      "x-base-entity": "CloudProfile",
      "x-model-examples": [
        "`name:MyCloudProfile` - find cloud profile with `MyCloudProfile` name.",
        "`project:<projectLocator>` - find all cloud profiles under project found by `projectLocator`."
      ]
    },
    "FileChange": {
      "type": "object",
      "properties": {
        "before-revision": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "after-revision": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "changeType": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "changeTypeComment": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "file": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "relative-file": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "directory": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        }
      },
      "description": "Represents the specific file change (in the scope of the commit).",
      "x-object-type": "DataEntity",
      "x-subpackage": ".change.",
      "x-is-data": true
    },
    "InvestigationLocator": {
      "type": "object",
      "properties": {
        "affectedProject": {
          "type": "string",
          "format": "ProjectLocator",
          "description": "Project (direct or indirect parent) locator."
        },
        "assignee": {
          "type": "string"
        },
        "assignmentProject": {
          "type": "string",
          "format": "ProjectLocator",
          "description": "Project (direct parent) locator."
        },
        "buildType": {
          "type": "string",
          "format": "BuildTypeLocator",
          "description": "Build type locator."
        },
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "For paginated calls, how many entities to return per page."
        },
        "item": {
          "type": "string",
          "format": "item:(<locator1>),item:(<locator2>...)",
          "description": "Supply multiple locators and return a union of the results."
        },
        "lookupLimit": {
          "type": "integer",
          "format": "int32",
          "description": "Limit processing to the latest `<lookupLimit>` entities."
        },
        "problem": {
          "type": "string",
          "format": "ProblemLocator",
          "description": "Problem locator."
        },
        "reporter": {
          "type": "string"
        },
        "resolution": {
          "type": "string",
          "enum": [
            "manually",
            "whenFixed",
            "atTime"
          ]
        },
        "sinceDate": {
          "type": "string",
          "format": "date-time",
          "description": "yyyyMMddTHHmmss+ZZZZ"
        },
        "start": {
          "type": "integer",
          "format": "int32",
          "description": "For paginated calls, from which entity to start rendering the page."
        },
        "state": {
          "type": "string",
          "enum": [
            "taken",
            "fixed",
            "given_up",
            "none"
          ]
        },
        "test": {
          "type": "string",
          "format": "TestLocator",
          "description": "Test locator."
        },
        "type": {
          "type": "string",
          "enum": [
            "test",
            "problem",
            "anyProblem",
            "unknown"
          ]
        }
      },
      "description": "Represents a locator string for filtering Investigation entities.",
      "x-object-type": "LocatorEntity",
      "x-is-locator": true,
      "x-subpackage": "locator",
      "x-base-entity": "Investigation",
      "x-model-examples": [
        "`assignee:John Smith` — find investigations assigned to `John Smith`.",
        "`state:taken` — find investigations which are currently in work."
      ]
    },
    "Issue": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "id": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        }
      },
      "description": "Represents an issue related to the specific change.",
      "x-object-type": "DataEntity",
      "x-subpackage": ".issue.",
      "x-is-data": true
    },
    "IssueUsage": {
      "type": "object",
      "properties": {
        "changes": {
          "$ref": "#/definitions/changes"
        },
        "issue": {
          "$ref": "#/definitions/Issue"
        }
      },
      "description": "Represents a relation between the issue and the Changes entity.",
      "x-object-type": "DataEntity",
      "x-subpackage": ".issue.",
      "x-is-data": true
    },
    "MuteLocator": {
      "type": "object",
      "properties": {
        "affectedProject": {
          "type": "string",
          "format": "ProjectLocator",
          "description": "Project (direct or indirect parent) locator."
        },
        "creationDate": {
          "type": "string",
          "format": "date-time",
          "description": "yyyyMMddTHHmmss+ZZZZ"
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "item": {
          "type": "string",
          "format": "item:(<locator1>),item:(<locator2>...)",
          "description": "Supply multiple locators and return a union of the results."
        },
        "problem": {
          "type": "string",
          "format": "ProblemLocator",
          "description": "Problem locator."
        },
        "project": {
          "type": "string",
          "format": "ProjectLocator",
          "description": "Project (direct parent) locator."
        },
        "reporter": {
          "type": "string",
          "description": "User who muted this test."
        },
        "resolution": {
          "type": "string",
          "enum": [
            "manually",
            "whenFixed",
            "atTime"
          ]
        },
        "test": {
          "type": "string",
          "format": "TestLocator",
          "description": "Test locator."
        },
        "type": {
          "type": "string",
          "enum": [
            "test",
            "problem",
            "anyProblem",
            "unknown"
          ]
        },
        "unmuteDate": {
          "type": "string",
          "format": "date-time",
          "description": "yyyyMMddTHHmmss+ZZZZ"
        }
      },
      "description": "Represents a locator string for filtering Mute entities.",
      "x-object-type": "LocatorEntity",
      "x-is-locator": true,
      "x-subpackage": "locator",
      "x-base-entity": "Mute",
      "x-model-examples": [
        "`project:<projectLocator>` — find muted problem under project found by `projectLocator`.",
        "`type:test` — find last 100 muted tests."
      ]
    },
    "ParsedTestName": {
      "type": "object",
      "properties": {
        "testPackage": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "testSuite": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "testClass": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "testShortName": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "testNameWithoutPrefix": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "testMethodName": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "testNameWithParameters": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        }
      },
      "description": "Represents test metadata (package, method, class, and so on).",
      "x-object-type": "DataEntity",
      "x-subpackage": ".problem.",
      "x-is-data": true
    },
    "Permissions": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        },
        "permission": {
          "type": "array",
          "items": {
            "xml": {
              "name": "permission"
            },
            "$ref": "#/definitions/permission"
          }
        }
      },
      "x-object-type": "DataEntity",
      "x-subpackage": ".role.",
      "x-is-data": true
    },
    "ProblemLocator": {
      "type": "object",
      "properties": {
        "affectedProject": {
          "type": "string",
          "format": "ProjectLocator",
          "description": "Project (direct or indirect parent) locator."
        },
        "build": {
          "type": "string",
          "format": "BuildLocator",
          "description": "Build locator."
        },
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "For paginated calls, how many entities to return per page."
        },
        "currentlyFailing": {
          "type": "boolean",
          "description": "Is currently failing."
        },
        "currentlyInvestigated": {
          "type": "boolean",
          "description": "Is currently investigated."
        },
        "currentlyMuted": {
          "type": "boolean",
          "description": "Is currently muted."
        },
        "id": {
          "type": "string",
          "description": "Entity ID."
        },
        "identity": {
          "type": "string"
        },
        "item": {
          "type": "string",
          "format": "item:(<locator1>),item:(<locator2>...)",
          "description": "Supply multiple locators and return a union of the results."
        },
        "lookupLimit": {
          "type": "integer",
          "format": "int32",
          "description": "Limit processing to the latest `<lookupLimit>` entities."
        },
        "start": {
          "type": "integer",
          "format": "int32",
          "description": "For paginated calls, from which entity to start rendering the page."
        },
        "type": {
          "type": "string"
        }
      },
      "description": "Represents a locator string for filtering Problem entities.",
      "x-object-type": "LocatorEntity",
      "x-is-locator": true,
      "x-subpackage": "locator",
      "x-base-entity": "Problem",
      "x-model-examples": [
        "`currentlyInvestigated:true` — find last 100 build problems which are being currently investigated.",
        "`build:<buildLocator>` — find build problems under build found by `buildLocator`."
      ]
    },
    "ProblemOccurrenceLocator": {
      "type": "object",
      "properties": {
        "affectedProject": {
          "type": "string",
          "format": "ProjectLocator",
          "description": "Project (direct or indirect parent) locator."
        },
        "build": {
          "type": "string",
          "format": "BuildLocator",
          "description": "Build locator."
        },
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "For paginated calls, how many entities to return per page."
        },
        "currentlyFailing": {
          "type": "boolean",
          "description": "Is currently failing."
        },
        "currentlyInvestigated": {
          "type": "boolean",
          "description": "Is currently investigated."
        },
        "currentlyMuted": {
          "type": "boolean",
          "description": "Is currently muted."
        },
        "identity": {
          "type": "string"
        },
        "item": {
          "type": "string",
          "format": "item:(<locator1>),item:(<locator2>...)",
          "description": "Supply multiple locators and return a union of the results."
        },
        "lookupLimit": {
          "type": "integer",
          "format": "int32",
          "description": "Limit processing to the latest `<lookupLimit>` entities."
        },
        "muted": {
          "type": "boolean",
          "description": "Has ever been muted."
        },
        "problem": {
          "type": "string"
        },
        "start": {
          "type": "integer",
          "format": "int32",
          "description": "For paginated calls, from which entity to start rendering the page."
        },
        "type": {
          "type": "string"
        }
      },
      "description": "Represents a locator string for filtering ProblemOccurrence entities.",
      "x-object-type": "LocatorEntity",
      "x-is-locator": true,
      "x-subpackage": "locator",
      "x-base-entity": "ProblemOccurrence",
      "x-model-examples": [
        "`currentlyInvestigated:true` — find last 100 build problem occurrences which are being currently investigated.",
        "`build:<buildLocator>` — find build problem occurrences under build found by `buildLocator`."
      ]
    },
    "ProblemScope": {
      "type": "object",
      "properties": {
        "project": {
          "$ref": "#/definitions/project"
        },
        "buildTypes": {
          "$ref": "#/definitions/buildTypes"
        },
        "buildType": {
          "$ref": "#/definitions/buildType"
        }
      },
      "description": "Represents an investigation scope.",
      "x-object-type": "DataEntity",
      "x-subpackage": ".buildType.",
      "x-is-data": true
    },
    "ProblemTarget": {
      "type": "object",
      "properties": {
        "anyProblem": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "tests": {
          "$ref": "#/definitions/tests"
        },
        "problems": {
          "$ref": "#/definitions/problems"
        }
      },
      "description": "Represents an investigation target.",
      "x-object-type": "DataEntity",
      "x-subpackage": ".buildType.",
      "x-is-data": true
    },
    "ProjectLocator": {
      "type": "object",
      "properties": {
        "affectedProject": {
          "type": "string",
          "format": "ProjectLocator",
          "description": "Project (direct or indirect parent) locator."
        },
        "archived": {
          "type": "boolean",
          "description": "Is archived."
        },
        "build": {
          "type": "string",
          "format": "BuildLocator",
          "description": "Build locator."
        },
        "buildType": {
          "type": "string",
          "format": "BuildTypeLocator",
          "description": "Build type locator."
        },
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "For paginated calls, how many entities to return per page."
        },
        "defaultTemplate": {
          "type": "string",
          "format": "BuildTypeLocator",
          "description": "Default template locator."
        },
        "id": {
          "type": "string"
        },
        "internalId": {
          "type": "string"
        },
        "item": {
          "type": "string",
          "format": "item:(<locator1>),item:(<locator2>...)",
          "description": "Supply multiple locators and return a union of the results."
        },
        "name": {
          "type": "string"
        },
        "pool": {
          "type": "string",
          "format": "AgentPoolLocator",
          "description": "Associated agent pool locator."
        },
        "project": {
          "type": "string",
          "format": "ProjectLocator",
          "description": "Project (direct parent) locator."
        },
        "projectFeature": {
          "type": "string",
          "format": "ProjectLocator",
          "description": "Project feature locator."
        },
        "start": {
          "type": "integer",
          "format": "int32",
          "description": "For paginated calls, from which entity to start rendering the page."
        },
        "uuid": {
          "type": "string"
        },
        "vcsRoot": {
          "type": "string",
          "format": "VcsRootLocator",
          "description": "VCS root locator."
        },
        "virtual": {
          "type": "boolean",
          "description": "Is virtual (default=false)."
        }
      },
      "description": "Represents a locator string for filtering Project entities.",
      "x-object-type": "LocatorEntity",
      "x-is-locator": true,
      "x-subpackage": "locator",
      "x-base-entity": "Project",
      "x-model-examples": [
        "`name:MyProject` — find a project with name `MyProject`.",
        "`archived:false` — find projects which are not archived."
      ]
    },
    "Resolution": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "enum": [
            "manually",
            "whenFixed",
            "atTime"
          ]
        },
        "time": {
          "type": "string"
        }
      },
      "description": "Represents an investigation resolution timestamp and details.",
      "x-object-type": "DataEntity",
      "x-subpackage": ".problem.",
      "x-is-data": true
    },
    "Revision": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "internalVersion": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "vcsBranchName": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "vcs-root-instance": {
          "$ref": "#/definitions/vcs-root-instance"
        },
        "checkout-rules": {
          "type": "string"
        }
      },
      "description": "Represents a revision related to a VCS change.",
      "x-help-article-name": "Revision",
      "x-help-article-link": "https://www.jetbrains.com/help/teamcity/revision.html",
      "x-object-type": "DataEntity",
      "x-subpackage": ".change.",
      "x-is-data": true
    },
    "Revisions": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "revision": {
          "type": "array",
          "items": {
            "xml": {
              "name": "revision"
            },
            "$ref": "#/definitions/Revision"
          },
          "x-is-first-container-var": true
        },
        "failOnMissingRevisions": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        }
      },
      "description": "Represents a list of Revision entities.",
      "x-object-type": "ListEntity",
      "x-subpackage": ".change.",
      "x-is-data": true,
      "x-is-list": true,
      "x-base-entity": "Revision"
    },
    "SnapshotDependencyLink": {
      "type": "object",
      "properties": {
        "build": {
          "$ref": "#/definitions/build"
        },
        "buildType": {
          "$ref": "#/definitions/buildType"
        },
        "buildTypeBranch": {
          "type": "string"
        }
      },
      "x-object-type": "DataEntity",
      "x-subpackage": ".change.",
      "x-is-data": true
    },
    "StateField": {
      "type": "object",
      "properties": {
        "value": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "inherited": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        }
      },
      "description": "Represents a project state field (as of now, limited to the read-only state of project).",
      "x-object-type": "DataEntity",
      "x-subpackage": ".project.",
      "x-is-data": true
    },
    "TagLocator": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "owner": {
          "type": "string"
        },
        "private": {
          "type": "string"
        }
      },
      "description": "Represents a locator string for filtering Tag entities.",
      "x-object-type": "LocatorEntity",
      "x-is-locator": true,
      "x-subpackage": "locator",
      "x-base-entity": "Tag"
    },
    "TeamCityNodeLocator": {
      "type": "object",
      "properties": {
        "item": {
          "type": "string",
          "format": "item:(<locator1>),item:(<locator2>...)",
          "description": "Supply multiple locators and return a union of the results."
        },
        "role": {
          "type": "string"
        },
        "state": {
          "type": "string"
        }
      },
      "description": "Represents a locator string for filtering Node entities.",
      "x-object-type": "LocatorEntity",
      "x-is-locator": true,
      "x-subpackage": "locator",
      "x-base-entity": "Node",
      "x-model-examples": [
        "`id:node-1` - find a node with id `node-1`.",
        "`state:<stateLocator>` - find all nodes having the given state.",
        "`role:<role>` - finds a node with the specified role, possible values are: main_node or secondary_node."
      ]
    },
    "TestLocator": {
      "type": "object",
      "properties": {
        "affectedProject": {
          "type": "string",
          "format": "ProjectLocator",
          "description": "Project (direct or indirect parent) locator."
        },
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "For paginated calls, how many entities to return per page."
        },
        "currentlyFailing": {
          "type": "boolean",
          "description": "Is currently failing."
        },
        "currentlyInvestigated": {
          "type": "boolean",
          "description": "Is currently investigated."
        },
        "currentlyMuted": {
          "type": "boolean",
          "description": "Is currently muted."
        },
        "id": {
          "type": "string",
          "description": "Entity ID."
        },
        "item": {
          "type": "string",
          "format": "item:(<locator1>),item:(<locator2>...)",
          "description": "Supply multiple locators and return a union of the results."
        },
        "lookupLimit": {
          "type": "integer",
          "format": "int32",
          "description": "Limit processing to the latest `<lookupLimit>` entities."
        },
        "muteAffected": {
          "type": "string",
          "format": "BuildTypeLocator",
          "description": "Build type locator (for finding out if this test is affected by mutes in build type)."
        },
        "name": {
          "type": "string"
        },
        "start": {
          "type": "integer",
          "format": "int32",
          "description": "For paginated calls, from which entity to start rendering the page."
        }
      },
      "description": "Represents a locator string for filtering Test entities.",
      "x-object-type": "LocatorEntity",
      "x-is-locator": true,
      "x-subpackage": "locator",
      "x-base-entity": "Test",
      "x-model-examples": [
        "`currentlyInvestigated:true` — find last 100 tests which are being currently investigated.",
        "`build:<buildLocator>` — find tests under build found by `buildLocator`."
      ]
    },
    "TestOccurrenceLocator": {
      "type": "object",
      "properties": {
        "affectedProject": {
          "type": "string",
          "format": "ProjectLocator",
          "description": "Project (direct or indirect parent) locator."
        },
        "branch": {
          "type": "string"
        },
        "build": {
          "type": "string",
          "format": "BuildLocator",
          "description": "Build locator."
        },
        "buildType": {
          "type": "string",
          "format": "BuildTypeLocator",
          "description": "Build type locator."
        },
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "For paginated calls, how many entities to return per page."
        },
        "currentlyFailing": {
          "type": "boolean",
          "description": "Is currently failing."
        },
        "currentlyInvestigated": {
          "type": "boolean",
          "description": "Is currently investigated."
        },
        "currentlyMuted": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "description": "Entity ID."
        },
        "ignored": {
          "type": "boolean",
          "description": "Is ignored."
        },
        "includePersonal": {
          "type": "boolean"
        },
        "item": {
          "type": "string",
          "format": "item:(<locator1>),item:(<locator2>...)",
          "description": "Supply multiple locators and return a union of the results."
        },
        "lookupLimit": {
          "type": "integer",
          "format": "int32",
          "description": "Limit processing to the latest `<lookupLimit>` entities."
        },
        "muted": {
          "type": "boolean",
          "description": "Is muted."
        },
        "name": {
          "type": "string"
        },
        "newFailure": {
          "type": "string"
        },
        "start": {
          "type": "integer",
          "format": "int32",
          "description": "For paginated calls, from which entity to start rendering the page."
        },
        "status": {
          "type": "string",
          "enum": [
            "unknown",
            "normal",
            "warning",
            "failure",
            "error",
            "success"
          ]
        },
        "test": {
          "type": "string",
          "format": "TestLocator",
          "description": "Test locator."
        }
      },
      "description": "Represents a locator string for filtering TestOccurrence entities.",
      "x-object-type": "LocatorEntity",
      "x-is-locator": true,
      "x-subpackage": "locator",
      "x-base-entity": "TestOccurrence",
      "x-model-examples": [
        "`currentlyInvestigated:true` — find last 100 test occurrences which are being currently investigated.",
        "`build:<buildLocator>` — find test occurrences under build found by `buildLocator`."
      ]
    },
    "TriggeredBy": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "details": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "date": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "displayText": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "rawValue": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "user": {
          "$ref": "#/definitions/user"
        },
        "build": {
          "$ref": "#/definitions/build"
        },
        "buildType": {
          "$ref": "#/definitions/buildType"
        },
        "properties": {
          "$ref": "#/definitions/properties"
        }
      },
      "description": "Represents the user/trigger/dependency which caused this build to start.",
      "x-object-type": "DataEntity",
      "x-subpackage": ".build.",
      "x-is-data": true
    },
    "UserGroupLocator": {
      "type": "object",
      "properties": {
        "item": {
          "type": "string",
          "format": "item:(<locator1>),item:(<locator2>...)",
          "description": "Supply multiple locators and return a union of the results."
        },
        "key": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "description": "Represents a locator string for filtering Group entities.",
      "x-object-type": "LocatorEntity",
      "x-is-locator": true,
      "x-subpackage": "locator",
      "x-base-entity": "Group",
      "x-model-examples": [
        "'name:MyGroupName' – find group with name `MyGroupName`.",
        "'key:MyGroupKey' – find group with key `MyGroupKey`."
      ]
    },
    "UserLocator": {
      "type": "object",
      "properties": {
        "affectedGroup": {
          "type": "string",
          "format": "UserGroupLocator",
          "description": "User group (direct or indirect parent) locator."
        },
        "current": {
          "type": "string",
          "format": "current",
          "description": "Return user that has issued this request."
        },
        "email": {
          "type": "string"
        },
        "group": {
          "type": "string",
          "format": "UserGroupLocator",
          "description": "User group (direct parent) locator."
        },
        "id": {
          "type": "string"
        },
        "item": {
          "type": "string",
          "format": "item:(<locator1>),item:(<locator2>...)",
          "description": "Supply multiple locators and return a union of the results."
        },
        "lastLogin": {
          "type": "string",
          "format": "date-time"
        },
        "name": {
          "type": "string"
        },
        "property": {
          "type": "string",
          "format": "property:(name:<name>,value:<value>,matchType:<matchType>)",
          "enum": [
            "exists",
            "not-exists",
            "equals",
            "does-not-equal",
            "starts-with",
            "contains",
            "does-not-contain",
            "ends-with",
            "any",
            "matches",
            "does-not-match",
            "more-than",
            "no-more-than",
            "less-than",
            "no-less-than",
            "ver-more-than",
            "ver-no-more-than",
            "ver-less-than",
            "ver-no-less-than"
          ]
        },
        "role": {
          "type": "string",
          "format": "RoleLocator",
          "description": "Role locator."
        },
        "username": {
          "type": "string"
        }
      },
      "description": "Represents a locator string for filtering User entities.",
      "x-object-type": "LocatorEntity",
      "x-is-locator": true,
      "x-subpackage": "locator",
      "x-base-entity": "User",
      "x-model-examples": [
        "`name:John Smith` — find user with name `John Smith`.",
        "`group:<groupLocator>` — find all users in user group found by `groupLocator`."
      ]
    },
    "VcsCheckStatus": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "requestorType": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "timestamp": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        }
      },
      "xml": {
        "name": "VcsCheckStatus"
      },
      "description": "Represents the last known repository check status.",
      "x-help-article-name": "VCS Root",
      "x-help-article-link": "https://www.jetbrains.com/help/teamcity/configuring-vcs-roots.html",
      "x-object-type": "DataEntity",
      "x-subpackage": ".change.",
      "x-is-data": true
    },
    "VcsRootInstanceLocator": {
      "type": "object",
      "properties": {
        "affectedProject": {
          "type": "string",
          "format": "ProjectLocator",
          "description": "Project (direct or indirect parent) locator."
        },
        "build": {
          "type": "string",
          "format": "BuildLocator",
          "description": "Build locator."
        },
        "buildType": {
          "type": "string",
          "format": "BuildTypeLocator",
          "description": "Build type locator."
        },
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "For paginated calls, how many entities to return per page."
        },
        "id": {
          "type": "string",
          "description": "Entity ID."
        },
        "item": {
          "type": "string",
          "format": "item:(<locator1>),item:(<locator2>...)",
          "description": "Supply multiple locators and return a union of the results."
        },
        "lookupLimit": {
          "type": "integer",
          "format": "int32",
          "description": "Limit processing to the latest `<lookupLimit>` entities."
        },
        "project": {
          "type": "string",
          "format": "ProjectLocator",
          "description": "Project (direct parent) locator."
        },
        "property": {
          "type": "string",
          "format": "property:(name:<name>,value:<value>,matchType:<matchType>)",
          "enum": [
            "exists",
            "not-exists",
            "equals",
            "does-not-equal",
            "starts-with",
            "contains",
            "does-not-contain",
            "ends-with",
            "any",
            "matches",
            "does-not-match",
            "more-than",
            "no-more-than",
            "less-than",
            "no-less-than",
            "ver-more-than",
            "ver-no-more-than",
            "ver-less-than",
            "ver-no-less-than"
          ]
        },
        "start": {
          "type": "integer",
          "format": "int32",
          "description": "For paginated calls, from which entity to start rendering the page."
        },
        "type": {
          "type": "string",
          "description": "Type of VCS (e.g. jetbrains.git)."
        },
        "vcsRoot": {
          "type": "string",
          "format": "VcsRootLocator",
          "description": "VCS root locator."
        },
        "versionedSettings": {
          "type": "boolean",
          "description": "Is used for versioned settings."
        }
      },
      "description": "Represents a locator string for filtering VcsRootInstance entities.",
      "x-object-type": "LocatorEntity",
      "x-is-locator": true,
      "x-subpackage": "locator",
      "x-base-entity": "VcsRootInstance",
      "x-model-examples": [
        "`vcsRoot:<vcsRootLocator>` — find all VCS root instances of a VCS root found by `vcsRootLocator`.",
        "`project:<projectLocator>` — find all VCS root instances defined under project found by `projectLocator`."
      ]
    },
    "VcsRootLocator": {
      "type": "object",
      "properties": {
        "affectedProject": {
          "type": "string",
          "format": "ProjectLocator",
          "description": "Project (direct or indirect parent) locator."
        },
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "For paginated calls, how many entities to return per page."
        },
        "id": {
          "type": "string",
          "description": "Entity ID."
        },
        "internalId": {
          "type": "integer",
          "format": "int32"
        },
        "item": {
          "type": "string",
          "format": "item:(<locator1>),item:(<locator2>...)",
          "description": "Supply multiple locators and return a union of the results."
        },
        "lookupLimit": {
          "type": "integer",
          "format": "int32",
          "description": "Limit processing to the latest `<lookupLimit>` entities."
        },
        "name": {
          "type": "string"
        },
        "project": {
          "type": "string",
          "format": "ProjectLocator",
          "description": "Project (direct parent) locator."
        },
        "property": {
          "type": "string",
          "format": "property:(name:<name>,value:<value>,matchType:<matchType>)",
          "enum": [
            "exists",
            "not-exists",
            "equals",
            "does-not-equal",
            "starts-with",
            "contains",
            "does-not-contain",
            "ends-with",
            "any",
            "matches",
            "does-not-match",
            "more-than",
            "no-more-than",
            "less-than",
            "no-less-than",
            "ver-more-than",
            "ver-no-more-than",
            "ver-less-than",
            "ver-no-less-than"
          ]
        },
        "start": {
          "type": "integer",
          "format": "int32",
          "description": "For paginated calls, from which entity to start rendering the page."
        },
        "type": {
          "type": "string",
          "description": "Type of VCS (e.g. jetbrains.git)."
        },
        "uuid": {
          "type": "string"
        }
      },
      "description": "Represents a locator string for filtering VcsRoot entities.",
      "x-object-type": "LocatorEntity",
      "x-is-locator": true,
      "x-subpackage": "locator",
      "x-base-entity": "VcsRoot",
      "x-model-examples": [
        "`type:jetbrains.git` — find all `Git`-typed VCS roots.",
        "`project:<projectLocator>` — find all VCS roots defined under project found by `projectLocator`."
      ]
    },
    "agent": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        },
        "name": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "typeId": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        },
        "connected": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "enabled": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "authorized": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "uptodate": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "outdated": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "pluginsOutdated": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "javaOutdated": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "ip": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "protocol": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "enum": [
            "unidirectional",
            "bidirectional"
          ]
        },
        "version": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "currentAgentVersion": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "lastActivityTime": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "idleSinceTime": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "disconnectionComment": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "registrationTimestamp": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "host": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "cpuRank": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        },
        "port": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        },
        "href": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "webUrl": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "build": {
          "$ref": "#/definitions/build"
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "enabledInfo": {
          "$ref": "#/definitions/enabledInfo"
        },
        "authorizedInfo": {
          "$ref": "#/definitions/authorizedInfo"
        },
        "properties": {
          "$ref": "#/definitions/properties"
        },
        "cloudInstance": {
          "$ref": "#/definitions/cloudInstance"
        },
        "cloudImage": {
          "$ref": "#/definitions/cloudImage"
        },
        "environment": {
          "$ref": "#/definitions/environment"
        },
        "pool": {
          "$ref": "#/definitions/agentPool"
        },
        "compatibilityPolicy": {
          "$ref": "#/definitions/compatibilityPolicy"
        },
        "compatibleBuildTypes": {
          "$ref": "#/definitions/buildTypes"
        },
        "incompatibleBuildTypes": {
          "$ref": "#/definitions/compatibilities"
        },
        "builds": {
          "$ref": "#/definitions/builds"
        },
        "locator": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        }
      },
      "xml": {
        "name": "agent"
      },
      "description": "Represents a known agent instance.",
      "x-help-article-name": "Build Agent",
      "x-help-article-link": "https://www.jetbrains.com/help/teamcity/build-agent.html",
      "x-object-type": "DataEntity",
      "x-subpackage": ".agent.",
      "x-is-data": true
    },
    "agent-requirement": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "name": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "type": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "disabled": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "inherited": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "href": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "properties": {
          "$ref": "#/definitions/properties"
        }
      },
      "xml": {
        "name": "agent-requirement"
      },
      "description": "Represents a requirement to agent parameters.",
      "x-help-article-name": "Agent Requirements",
      "x-help-article-link": "https://www.jetbrains.com/help/teamcity/agent-requirements.html",
      "x-object-type": "DataEntity",
      "x-subpackage": ".buildType.",
      "x-is-data": true
    },
    "agent-requirements": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "agent-requirement": {
          "type": "array",
          "items": {
            "xml": {
              "name": "agent-requirement"
            },
            "$ref": "#/definitions/agent-requirement"
          },
          "x-is-first-container-var": true
        }
      },
      "xml": {
        "name": "agent-requirements"
      },
      "description": "Represents a list of AgentRequirement entities.",
      "x-object-type": "ListEntity",
      "x-subpackage": ".buildType.",
      "x-is-data": true,
      "x-is-list": true,
      "x-base-entity": "AgentRequirement"
    },
    "agentPool": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        },
        "name": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "href": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "maxAgents": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        },
        "ownerProject": {
          "$ref": "#/definitions/project"
        },
        "projects": {
          "$ref": "#/definitions/projects"
        },
        "agents": {
          "$ref": "#/definitions/agents"
        },
        "locator": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        }
      },
      "xml": {
        "name": "agentPool"
      },
      "description": "Represents an agent pool instance.",
      "x-help-article-name": "Agent Pool",
      "x-help-article-link": "https://www.jetbrains.com/help/teamcity/agent-pool.html",
      "x-object-type": "DataEntity",
      "x-subpackage": ".agent.",
      "x-is-data": true
    },
    "agentPools": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "href": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "nextHref": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "prevHref": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "agentPool": {
          "type": "array",
          "items": {
            "xml": {
              "name": "agentPool"
            },
            "$ref": "#/definitions/agentPool"
          },
          "x-is-first-container-var": true
        }
      },
      "xml": {
        "name": "agentPools"
      },
      "description": "Represents a paginated list of AgentPool entities.",
      "x-object-type": "PaginatedEntity",
      "x-subpackage": ".agent.",
      "x-is-data": true,
      "x-is-list": true,
      "x-is-paginated": true,
      "x-base-entity": "AgentPool"
    },
    "agents": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "nextHref": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "prevHref": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "href": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "agent": {
          "type": "array",
          "items": {
            "xml": {
              "name": "agent"
            },
            "$ref": "#/definitions/agent"
          },
          "x-is-first-container-var": true
        }
      },
      "xml": {
        "name": "agents"
      },
      "description": "Represents a paginated list of Agent entities.",
      "x-object-type": "PaginatedEntity",
      "x-subpackage": ".agent.",
      "x-is-data": true,
      "x-is-list": true,
      "x-is-paginated": true,
      "x-base-entity": "Agent"
    },
    "approvalInfo": {
      "type": "object",
      "properties": {
        "timeoutTimestamp": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "configurationValid": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "canBeApprovedByCurrentUser": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "userApprovals": {
          "$ref": "#/definitions/userApprovals"
        },
        "groupApprovals": {
          "$ref": "#/definitions/groupApprovals"
        },
        "status": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "enum": [
            "waitingForApproval",
            "approved",
            "timedOut",
            "canceled"
          ]
        }
      },
      "xml": {
        "name": "approvalInfo"
      },
      "description": "Represents approval status for this build, if applicable.",
      "x-object-type": "DataEntity",
      "x-subpackage": ".build.approval.",
      "x-is-data": true
    },
    "artifact-dependencies": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "artifact-dependency": {
          "type": "array",
          "items": {
            "xml": {
              "name": "artifact-dependency"
            },
            "$ref": "#/definitions/artifact-dependency"
          },
          "x-is-first-container-var": true
        },
        "replace": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        }
      },
      "xml": {
        "name": "artifact-dependencies"
      },
      "description": "Represents a list of ArtifactDependency entities.",
      "x-object-type": "ListEntity",
      "x-subpackage": ".buildType.",
      "x-is-data": true,
      "x-is-list": true,
      "x-base-entity": "ArtifactDependency"
    },
    "artifact-dependency": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "name": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "type": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "disabled": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "inherited": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "href": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "properties": {
          "$ref": "#/definitions/properties"
        },
        "source-buildType": {
          "$ref": "#/definitions/buildType"
        }
      },
      "xml": {
        "name": "artifact-dependency"
      },
      "description": "Represents an artifact dependency relation.",
      "x-help-article-name": "Artifact Dependency",
      "x-help-article-link": "https://www.jetbrains.com/help/teamcity/dependent-build.html#Artifact+Dependency",
      "x-object-type": "DataEntity",
      "x-subpackage": ".buildType.",
      "x-is-data": true
    },
    "auditAction": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "id": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "pattern": {
          "type": "string"
        }
      },
      "xml": {
        "name": "auditAction"
      },
      "description": "Represents an audit action.",
      "x-help-article-name": "Audit",
      "x-help-article-link": "https://www.jetbrains.com/help/teamcity/tracking-user-actions.html",
      "x-object-type": "DataEntity",
      "x-subpackage": ".audit.",
      "x-is-data": true
    },
    "auditEvent": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "timestamp": {
          "type": "string"
        },
        "comment": {
          "type": "string"
        },
        "action": {
          "$ref": "#/definitions/auditAction"
        },
        "relatedEntities": {
          "$ref": "#/definitions/relatedEntities"
        },
        "user": {
          "$ref": "#/definitions/user"
        }
      },
      "xml": {
        "name": "auditEvent"
      },
      "description": "Represents an audit event including a user and affected entities.",
      "x-help-article-name": "Audit",
      "x-help-article-link": "https://www.jetbrains.com/help/teamcity/tracking-user-actions.html",
      "x-object-type": "DataEntity",
      "x-subpackage": ".audit.",
      "x-is-data": true
    },
    "auditEvents": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "nextHref": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "prevHref": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "href": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "auditEvent": {
          "type": "array",
          "items": {
            "xml": {
              "name": "auditEvent"
            },
            "$ref": "#/definitions/auditEvent"
          },
          "x-is-first-container-var": true
        }
      },
      "xml": {
        "name": "auditEvents"
      },
      "description": "Represents a paginated list of AuditEvent entities.",
      "x-object-type": "PaginatedEntity",
      "x-subpackage": ".audit.",
      "x-is-data": true,
      "x-is-list": true,
      "x-is-paginated": true,
      "x-base-entity": "AuditEvent"
    },
    "authorizedInfo": {
      "type": "object",
      "properties": {
        "status": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "comment": {
          "$ref": "#/definitions/comment"
        }
      },
      "xml": {
        "name": "authorizedInfo"
      },
      "description": "Represents agent authorization data.",
      "x-help-article-name": "Build Agent",
      "x-help-article-link": "https://www.jetbrains.com/help/teamcity/build-agent.html",
      "x-object-type": "DataEntity",
      "x-subpackage": ".agent.",
      "x-is-data": true
    },
    "branch": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "internalName": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "default": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "unspecified": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "active": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "lastActivity": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "groupFlag": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "builds": {
          "$ref": "#/definitions/builds"
        }
      },
      "xml": {
        "name": "branch"
      },
      "description": "Represents a branch on which this build has been started.",
      "x-help-article-name": "Feature Branches",
      "x-help-article-link": "https://www.jetbrains.com/help/teamcity/working-with-feature-branches.html",
      "x-object-type": "DataEntity",
      "x-subpackage": ".build.",
      "x-is-data": true
    },
    "branchVersion": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "unspecified": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "groupFlag": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "builds": {
          "$ref": "#/definitions/builds"
        },
        "lastActivity": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "internalName": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "name": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "default": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "active": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        }
      },
      "xml": {
        "name": "branchVersion"
      },
      "description": "Represents a branch version.",
      "x-object-type": "DataEntity",
      "x-subpackage": ".change.",
      "x-is-data": true
    },
    "branches": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "href": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "branch": {
          "type": "array",
          "items": {
            "xml": {
              "name": "branch"
            },
            "$ref": "#/definitions/branch"
          },
          "x-is-first-container-var": true
        }
      },
      "xml": {
        "name": "branches"
      },
      "description": "Represents a list of Branch entities.",
      "x-object-type": "ListEntity",
      "x-subpackage": ".build.",
      "x-is-data": true,
      "x-is-list": true,
      "x-base-entity": "Branch"
    },
    "build": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "xml": {
            "attribute": true
          }
        },
        "taskId": {
          "type": "integer",
          "format": "int64",
          "xml": {
            "attribute": true
          }
        },
        "buildTypeId": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "buildTypeInternalId": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "number": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "status": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "state": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "enum": [
            "queued",
            "finished",
            "running",
            "deleted",
            "unknown"
          ]
        },
        "running": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "composite": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "failedToStart": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "personal": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "percentageComplete": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        },
        "branchName": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "defaultBranch": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "unspecifiedBranch": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "history": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "pinned": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "href": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "webUrl": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "queuePosition": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        },
        "limitedChangesCount": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        },
        "artifactsDirectory": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "statusText": {
          "type": "string"
        },
        "buildType": {
          "$ref": "#/definitions/buildType"
        },
        "comment": {
          "$ref": "#/definitions/comment"
        },
        "tags": {
          "$ref": "#/definitions/tags"
        },
        "pinInfo": {
          "$ref": "#/definitions/comment"
        },
        "user": {
          "$ref": "#/definitions/user"
        },
        "startEstimate": {
          "type": "string"
        },
        "waitReason": {
          "type": "string"
        },
        "finishEstimate": {
          "type": "string"
        },
        "delayedByBuild": {
          "$ref": "#/definitions/build"
        },
        "plannedAgent": {
          "$ref": "#/definitions/agent"
        },
        "approvalInfo": {
          "$ref": "#/definitions/approvalInfo"
        },
        "running-info": {
          "$ref": "#/definitions/progress-info"
        },
        "canceledInfo": {
          "$ref": "#/definitions/comment"
        },
        "queuedDate": {
          "type": "string"
        },
        "startDate": {
          "type": "string"
        },
        "finishDate": {
          "type": "string"
        },
        "triggered": {
          "$ref": "#/definitions/TriggeredBy"
        },
        "lastChanges": {
          "$ref": "#/definitions/changes"
        },
        "changes": {
          "$ref": "#/definitions/changes"
        },
        "revisions": {
          "$ref": "#/definitions/Revisions"
        },
        "versionedSettingsRevision": {
          "$ref": "#/definitions/Revision"
        },
        "artifactDependencyChanges": {
          "$ref": "#/definitions/buildChanges"
        },
        "agent": {
          "$ref": "#/definitions/agent"
        },
        "compatibleAgents": {
          "$ref": "#/definitions/agents"
        },
        "compatibleCloudImages": {
          "$ref": "#/definitions/cloudImages"
        },
        "testOccurrences": {
          "$ref": "#/definitions/testOccurrences"
        },
        "problemOccurrences": {
          "$ref": "#/definitions/problemOccurrences"
        },
        "artifacts": {
          "$ref": "#/definitions/files"
        },
        "relatedIssues": {
          "$ref": "#/definitions/issuesUsages"
        },
        "properties": {
          "description": "Parameters defined by users. Includes parameters added in custom builds. See \"originalProperties\" for more information.",
          "$ref": "#/definitions/properties"
        },
        "resultingProperties": {
          "description": "Actual parameters reported by a build agent after a build finishes. To get the initial parameters reported when a build started, use \"startProperties\" instead.",
          "$ref": "#/definitions/properties"
        },
        "originalProperties": {
          "description": "User-defined parameters from the build configuration (\"BuildType\" in REST API). See \"properties\" for more information.",
          "$ref": "#/definitions/properties"
        },
        "startProperties": {
          "description": "Actual parameters reported by a build agent when a build starts. To get the final parameters reported when a build finishes, use \"resultingProperties\" instead.",
          "$ref": "#/definitions/properties"
        },
        "attributes": {
          "$ref": "#/definitions/entries"
        },
        "statistics": {
          "$ref": "#/definitions/properties"
        },
        "metadata": {
          "$ref": "#/definitions/datas"
        },
        "snapshot-dependencies": {
          "$ref": "#/definitions/builds"
        },
        "artifact-dependencies": {
          "$ref": "#/definitions/builds"
        },
        "custom-artifact-dependencies": {
          "$ref": "#/definitions/artifact-dependencies"
        },
        "settingsHash": {
          "type": "string"
        },
        "currentSettingsHash": {
          "type": "string"
        },
        "modificationId": {
          "type": "string"
        },
        "chainModificationId": {
          "type": "string"
        },
        "replacementIds": {
          "$ref": "#/definitions/items"
        },
        "related": {
          "$ref": "#/definitions/related"
        },
        "triggeringOptions": {
          "$ref": "#/definitions/buildTriggeringOptions"
        },
        "usedByOtherBuilds": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "statusChangeComment": {
          "$ref": "#/definitions/comment"
        },
        "vcsLabels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vcsLabel"
          }
        },
        "detachedFromAgent": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "finishOnAgentDate": {
          "type": "string"
        },
        "customized": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "customization": {
          "$ref": "#/definitions/customizations"
        },
        "changesCollectingInProgress": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "queuedWaitReasons": {
          "$ref": "#/definitions/properties"
        },
        "downloadedArtifacts": {
          "$ref": "#/definitions/downloadedArtifacts"
        },
        "firstBuildWithSameChanges": {
          "$ref": "#/definitions/build"
        },
        "locator": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        }
      },
      "xml": {
        "name": "build"
      },
      "description": "Represents a build instance.",
      "x-object-type": "DataEntity",
      "x-subpackage": ".build.",
      "x-is-data": true
    },
    "buildCancelRequest": {
      "type": "object",
      "properties": {
        "comment": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "readdIntoQueue": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        }
      },
      "xml": {
        "name": "buildCancelRequest"
      },
      "description": "Represents a cancel request for the specific build.",
      "x-object-type": "DataEntity",
      "x-subpackage": ".build.",
      "x-is-data": true
    },
    "buildChange": {
      "type": "object",
      "properties": {
        "nextBuild": {
          "$ref": "#/definitions/build"
        },
        "prevBuild": {
          "$ref": "#/definitions/build"
        }
      },
      "xml": {
        "name": "buildChange"
      },
      "description": "Represents links to the next or previous build.",
      "x-object-type": "DataEntity",
      "x-subpackage": ".change.",
      "x-is-data": true
    },
    "buildChanges": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "buildChange": {
          "type": "array",
          "items": {
            "xml": {
              "name": "buildChange"
            },
            "$ref": "#/definitions/buildChange"
          },
          "x-is-first-container-var": true
        }
      },
      "xml": {
        "name": "buildChanges"
      },
      "description": "Represents a list of BuildChange entities.",
      "x-object-type": "ListEntity",
      "x-subpackage": ".change.",
      "x-is-data": true,
      "x-is-list": true,
      "x-base-entity": "BuildChange"
    },
    "buildTriggeringOptions": {
      "type": "object",
      "properties": {
        "cleanSources": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "cleanSourcesInAllDependencies": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "rebuildAllDependencies": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "rebuildFailedOrIncompleteDependencies": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "queueAtTop": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "freezeSettings": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "tagDependencies": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "rebuildDependencies": {
          "$ref": "#/definitions/buildTypes"
        }
      },
      "xml": {
        "name": "buildTriggeringOptions"
      },
      "description": "Represents the dependency/queue settings with which this build has been started.",
      "x-help-article-name": "Running Custom Build",
      "x-help-article-link": "https://www.jetbrains.com/help/teamcity/running-custom-build.html",
      "x-object-type": "DataEntity",
      "x-subpackage": ".build.",
      "x-is-data": true
    },
    "buildType": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "internalId": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "name": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "templateFlag": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "type": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "enum": [
            "regular",
            "composite",
            "deployment"
          ]
        },
        "paused": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "uuid": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "description": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "projectName": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "projectId": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "projectInternalId": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "href": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "webUrl": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "inherited": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "project": {
          "$ref": "#/definitions/project"
        },
        "templates": {
          "$ref": "#/definitions/buildTypes"
        },
        "template": {
          "$ref": "#/definitions/buildType"
        },
        "vcs-root-entries": {
          "$ref": "#/definitions/vcs-root-entries"
        },
        "settings": {
          "$ref": "#/definitions/properties"
        },
        "parameters": {
          "$ref": "#/definitions/properties"
        },
        "steps": {
          "$ref": "#/definitions/steps"
        },
        "features": {
          "$ref": "#/definitions/features"
        },
        "triggers": {
          "$ref": "#/definitions/triggers"
        },
        "snapshot-dependencies": {
          "$ref": "#/definitions/snapshot-dependencies"
        },
        "artifact-dependencies": {
          "$ref": "#/definitions/artifact-dependencies"
        },
        "agent-requirements": {
          "$ref": "#/definitions/agent-requirements"
        },
        "branches": {
          "$ref": "#/definitions/branches"
        },
        "builds": {
          "$ref": "#/definitions/builds"
        },
        "investigations": {
          "$ref": "#/definitions/investigations"
        },
        "compatibleAgents": {
          "$ref": "#/definitions/agents"
        },
        "compatibleCloudImages": {
          "$ref": "#/definitions/cloudImages"
        },
        "vcsRootInstances": {
          "$ref": "#/definitions/vcs-root-instances"
        },
        "externalStatusAllowed": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "pauseComment": {
          "$ref": "#/definitions/comment"
        },
        "locator": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        }
      },
      "xml": {
        "name": "buildType"
      },
      "description": "Represents a build configuration.",
      "x-help-article-name": "Build Configuration",
      "x-help-article-link": "https://www.jetbrains.com/help/teamcity/creating-and-editing-build-configurations.html",
      "x-object-type": "DataEntity",
      "x-subpackage": ".buildType.",
      "x-is-data": true
    },
    "buildTypes": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "href": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "nextHref": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "prevHref": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "buildType": {
          "type": "array",
          "items": {
            "xml": {
              "name": "buildType"
            },
            "$ref": "#/definitions/buildType"
          },
          "x-is-first-container-var": true
        }
      },
      "xml": {
        "name": "buildTypes"
      },
      "description": "Represents a paginated list of BuildType entities.",
      "x-object-type": "PaginatedEntity",
      "x-subpackage": ".buildType.",
      "x-is-data": true,
      "x-is-list": true,
      "x-is-paginated": true,
      "x-base-entity": "BuildType"
    },
    "builds": {
      "type": "object",
      "properties": {
        "href": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "nextHref": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "prevHref": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "build": {
          "type": "array",
          "items": {
            "xml": {
              "name": "build"
            },
            "$ref": "#/definitions/build"
          },
          "x-is-first-container-var": true
        },
        "count": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        }
      },
      "xml": {
        "name": "builds"
      },
      "description": "Represents a paginated list of Build entities.",
      "x-object-type": "PaginatedEntity",
      "x-subpackage": ".build.",
      "x-is-data": true,
      "x-is-list": true,
      "x-is-paginated": true,
      "x-base-entity": "Build"
    },
    "change": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "xml": {
            "attribute": true
          }
        },
        "version": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "internalVersion": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "username": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "date": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "registrationDate": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "personal": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "href": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "webUrl": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "comment": {
          "type": "string"
        },
        "user": {
          "$ref": "#/definitions/user"
        },
        "type": {
          "type": "string"
        },
        "snapshotDependencyLink": {
          "$ref": "#/definitions/SnapshotDependencyLink"
        },
        "files": {
          "$ref": "#/definitions/fileChanges"
        },
        "vcsRootInstance": {
          "$ref": "#/definitions/vcs-root-instance"
        },
        "parentChanges": {
          "$ref": "#/definitions/changes"
        },
        "parentRevisions": {
          "$ref": "#/definitions/items"
        },
        "attributes": {
          "$ref": "#/definitions/properties"
        },
        "storesProjectSettings": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "status": {
          "$ref": "#/definitions/ChangeStatus"
        },
        "commiter": {
          "$ref": "#/definitions/commiter"
        },
        "canEditComment": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "locator": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        }
      },
      "xml": {
        "name": "change"
      },
      "description": "Represents a VCS change (commit).",
      "x-help-article-name": "Change",
      "x-help-article-link": "https://www.jetbrains.com/help/teamcity/change.html",
      "x-object-type": "DataEntity",
      "x-subpackage": ".change.",
      "x-is-data": true
    },
    "changes": {
      "type": "object",
      "properties": {
        "href": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "nextHref": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "prevHref": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "change": {
          "type": "array",
          "items": {
            "xml": {
              "name": "change"
            },
            "$ref": "#/definitions/change"
          },
          "x-is-first-container-var": true
        },
        "count": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        }
      },
      "xml": {
        "name": "changes"
      },
      "description": "Represents a paginated list of Change entities.",
      "x-object-type": "PaginatedEntity",
      "x-subpackage": ".change.",
      "x-is-data": true,
      "x-is-list": true,
      "x-is-paginated": true,
      "x-base-entity": "Change"
    },
    "cleanup": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "maxCleanupDuration": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        },
        "daily": {
          "$ref": "#/definitions/daily"
        },
        "cron": {
          "$ref": "#/definitions/cron"
        }
      },
      "xml": {
        "name": "cleanup"
      },
      "description": "Clean-up Settings",
      "x-object-type": "DataEntity",
      "x-subpackage": ".server.",
      "x-is-data": true
    },
    "cloudImage": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "name": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "href": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "profile": {
          "$ref": "#/definitions/cloudProfile"
        },
        "instances": {
          "$ref": "#/definitions/cloudInstances"
        },
        "errorMessage": {
          "type": "string"
        },
        "agentTypeId": {
          "type": "integer",
          "format": "int32"
        },
        "agentPoolId": {
          "type": "integer",
          "format": "int32"
        },
        "operatingSystemName": {
          "type": "string"
        },
        "locator": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        }
      },
      "xml": {
        "name": "cloudImage"
      },
      "description": "Represents a cloud instance image saved with a profile.",
      "x-help-article-name": "Cloud Profile",
      "x-help-article-link": "https://www.jetbrains.com/help/teamcity/agent-cloud-profile.html",
      "x-object-type": "DataEntity",
      "x-subpackage": ".cloud.",
      "x-is-data": true
    },
    "cloudImages": {
      "type": "object",
      "properties": {
        "cloudImage": {
          "type": "array",
          "items": {
            "xml": {
              "name": "cloudImage"
            },
            "$ref": "#/definitions/cloudImage"
          },
          "x-is-first-container-var": true
        },
        "count": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "nextHref": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "prevHref": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "href": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        }
      },
      "xml": {
        "name": "cloudImages"
      },
      "description": "Represents a paginated list of CloudImage entities.",
      "x-object-type": "PaginatedEntity",
      "x-subpackage": ".cloud.",
      "x-is-data": true,
      "x-is-list": true,
      "x-is-paginated": true,
      "x-base-entity": "CloudImage"
    },
    "cloudInstance": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "name": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "state": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "startDate": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "networkAddress": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "href": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "image": {
          "$ref": "#/definitions/cloudImage"
        },
        "agent": {
          "$ref": "#/definitions/agent"
        },
        "errorMessage": {
          "type": "string"
        }
      },
      "xml": {
        "name": "cloudInstance"
      },
      "description": "Represents a running cloud instance.",
      "x-help-article-name": "Cloud Profile",
      "x-help-article-link": "https://www.jetbrains.com/help/teamcity/agent-cloud-profile.html",
      "x-object-type": "DataEntity",
      "x-subpackage": ".cloud.",
      "x-is-data": true
    },
    "cloudInstances": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "nextHref": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "prevHref": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "href": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "cloudInstance": {
          "type": "array",
          "items": {
            "xml": {
              "name": "cloudInstance"
            },
            "$ref": "#/definitions/cloudInstance"
          },
          "x-is-first-container-var": true
        }
      },
      "xml": {
        "name": "cloudInstances"
      },
      "description": "Represents a paginated list of CloudInstance entities.",
      "x-object-type": "PaginatedEntity",
      "x-subpackage": ".cloud.",
      "x-is-data": true,
      "x-is-list": true,
      "x-is-paginated": true,
      "x-base-entity": "CloudInstance"
    },
    "cloudProfile": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "name": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "cloudProviderId": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "href": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "project": {
          "$ref": "#/definitions/project"
        },
        "images": {
          "$ref": "#/definitions/cloudImages"
        }
      },
      "xml": {
        "name": "cloudProfile"
      },
      "description": "Represents a cloud agent profile.",
      "x-help-article-name": "Cloud Profile",
      "x-help-article-link": "https://www.jetbrains.com/help/teamcity/agent-cloud-profile.html",
      "x-object-type": "DataEntity",
      "x-subpackage": ".cloud.",
      "x-is-data": true
    },
    "cloudProfiles": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "nextHref": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "prevHref": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "href": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "cloudProfile": {
          "type": "array",
          "items": {
            "xml": {
              "name": "cloudProfile"
            },
            "$ref": "#/definitions/cloudProfile"
          },
          "x-is-first-container-var": true
        }
      },
      "xml": {
        "name": "cloudProfiles"
      },
      "description": "Represents a paginated list of CloudProfile entities.",
      "x-object-type": "PaginatedEntity",
      "x-subpackage": ".cloud.",
      "x-is-data": true,
      "x-is-list": true,
      "x-is-paginated": true,
      "x-base-entity": "CloudProfile"
    },
    "comment": {
      "type": "object",
      "properties": {
        "timestamp": {
          "type": "string"
        },
        "text": {
          "type": "string"
        },
        "user": {
          "$ref": "#/definitions/user"
        }
      },
      "xml": {
        "name": "comment"
      },
      "description": "Represents a dated comment of the specific user.",
      "x-object-type": "DataEntity",
      "x-subpackage": ".",
      "x-is-data": true
    },
    "commiter": {
      "type": "object",
      "properties": {
        "vcsUsername": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "users": {
          "$ref": "#/definitions/users"
        }
      },
      "xml": {
        "name": "commiter"
      },
      "description": "Represents a commiter to a VCS.",
      "x-object-type": "DataEntity",
      "x-subpackage": ".change.",
      "x-is-data": true
    },
    "compatibilities": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "compatibility": {
          "type": "array",
          "items": {
            "xml": {
              "name": "compatibility"
            },
            "$ref": "#/definitions/compatibility"
          },
          "x-is-first-container-var": true
        }
      },
      "xml": {
        "name": "compatibilities"
      },
      "description": "Represents a list of Compatibility entities.",
      "x-object-type": "ListEntity",
      "x-subpackage": ".agent.",
      "x-is-data": true,
      "x-is-list": true,
      "x-base-entity": "Compatibility"
    },
    "compatibility": {
      "type": "object",
      "properties": {
        "compatible": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "agent": {
          "$ref": "#/definitions/agent"
        },
        "buildType": {
          "$ref": "#/definitions/buildType"
        },
        "unmetRequirements": {
          "$ref": "#/definitions/requirements"
        }
      },
      "xml": {
        "name": "compatibility"
      },
      "description": "Represents a compatibility relation between the agent and build configuration.",
      "x-object-type": "DataEntity",
      "x-subpackage": ".agent.",
      "x-is-data": true
    },
    "compatibilityPolicy": {
      "type": "object",
      "properties": {
        "policy": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "buildTypes": {
          "$ref": "#/definitions/buildTypes"
        }
      },
      "xml": {
        "name": "compatibilityPolicy"
      },
      "description": "Represents a build configuration run policy and included build configurations.",
      "x-object-type": "DataEntity",
      "x-subpackage": ".agent.",
      "x-is-data": true
    },
    "cron": {
      "type": "object",
      "properties": {
        "minute": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "hour": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "day": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "month": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "dayWeek": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        }
      },
      "xml": {
        "name": "cron"
      },
      "x-object-type": "DataEntity",
      "x-subpackage": ".server.",
      "x-is-data": true
    },
    "customizations": {
      "type": "object",
      "properties": {
        "parameters": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "changes": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "artifactDependencies": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "xml": {
        "name": "customizations"
      },
      "description": "Represents build customizations (artifact dependency overrides, custom parameters or changesets).",
      "x-object-type": "DataEntity",
      "x-subpackage": ".build.",
      "x-is-data": true
    },
    "daily": {
      "type": "object",
      "properties": {
        "hour": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        },
        "minute": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        }
      },
      "xml": {
        "name": "daily"
      },
      "x-object-type": "DataEntity",
      "x-subpackage": ".server.",
      "x-is-data": true
    },
    "datas": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "data": {
          "type": "array",
          "items": {
            "xml": {
              "name": "data"
            },
            "$ref": "#/definitions/metaData"
          },
          "x-is-first-container-var": true
        }
      },
      "xml": {
        "name": "datas"
      },
      "description": "Represents a list of MetaData entities.",
      "x-object-type": "ListEntity",
      "x-base-entity": "MetaData",
      "x-subpackage": ".",
      "x-is-data": true,
      "x-is-list": true
    },
    "disabledResponsibilities": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        },
        "responsibility": {
          "type": "array",
          "items": {
            "xml": {
              "name": "responsibility"
            },
            "$ref": "#/definitions/responsibility"
          }
        }
      },
      "xml": {
        "name": "disabledResponsibilities"
      },
      "description": "Represents a set of responsibilities that are currently disabled but can be enabled on a TeamCity node.",
      "x-help-article-name": "Multi-node setup",
      "x-help-article-link": "https://www.jetbrains.com/help/teamcity/multinode-setup.html",
      "x-object-type": "DataEntity",
      "x-subpackage": ".nodes.",
      "x-is-data": true
    },
    "downloadInfo": {
      "type": "object",
      "properties": {
        "build": {
          "$ref": "#/definitions/build"
        },
        "artifactInfo": {
          "type": "array",
          "items": {
            "xml": {
              "name": "artifactInfo"
            },
            "$ref": "#/definitions/ArtifactDownloadInfo"
          },
          "x-is-first-container-var": true
        },
        "count": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        }
      },
      "xml": {
        "name": "downloadInfo"
      },
      "description": "List of metadata on artifacts downloaded from [or provided by] a build.",
      "x-object-type": "ListEntity",
      "x-subpackage": ".build.downloadedArtifacts.",
      "x-is-data": true,
      "x-is-list": true,
      "x-base-entity": "ArtifactInfo"
    },
    "downloadedArtifacts": {
      "type": "object",
      "properties": {
        "unfilteredCount": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        },
        "downloadInfo": {
          "type": "array",
          "items": {
            "xml": {
              "name": "downloadInfo"
            },
            "$ref": "#/definitions/downloadInfo"
          },
          "x-is-first-container-var": true
        },
        "count": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        }
      },
      "xml": {
        "name": "downloadedArtifacts"
      },
      "description": "Collection of artifacts metadata which were downloaded from dependencies of this build or delivered to ones depending on this build.",
      "x-object-type": "ListEntity",
      "x-subpackage": ".build.downloadedArtifacts.",
      "x-is-data": true,
      "x-is-list": true,
      "x-base-entity": "DownloadInfo"
    },
    "effectiveResponsibilities": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        },
        "responsibility": {
          "type": "array",
          "items": {
            "xml": {
              "name": "responsibility"
            },
            "$ref": "#/definitions/responsibility"
          }
        }
      },
      "xml": {
        "name": "effectiveResponsibilities"
      },
      "description": "Represents a set of effective responsibilities of a TeamCity node. A responsibility becomes effective once it is enabled in the server configuration and a responsible node detects this change and updates its state.",
      "x-help-article-name": "Multi-node setup",
      "x-help-article-link": "https://www.jetbrains.com/help/teamcity/multinode-setup.html",
      "x-object-type": "DataEntity",
      "x-subpackage": ".nodes.",
      "x-is-data": true
    },
    "enabledInfo": {
      "type": "object",
      "properties": {
        "status": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "comment": {
          "$ref": "#/definitions/comment"
        },
        "statusSwitchTime": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        }
      },
      "xml": {
        "name": "enabledInfo"
      },
      "description": "Represents the current enablement status of the agent.",
      "x-help-article-name": "Build Agent",
      "x-help-article-link": "https://www.jetbrains.com/help/teamcity/build-agent.html",
      "x-object-type": "DataEntity",
      "x-subpackage": ".agent.",
      "x-is-data": true
    },
    "enabledResponsibilities": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        },
        "responsibility": {
          "type": "array",
          "items": {
            "xml": {
              "name": "responsibility"
            },
            "$ref": "#/definitions/responsibility"
          }
        }
      },
      "xml": {
        "name": "enabledResponsibilities"
      },
      "description": "Represents a set of enabled responsibilities of a TeamCity node.",
      "x-help-article-name": "Multi-node setup",
      "x-help-article-link": "https://www.jetbrains.com/help/teamcity/multinode-setup.html",
      "x-object-type": "DataEntity",
      "x-subpackage": ".nodes.",
      "x-is-data": true
    },
    "entries": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "entry": {
          "type": "array",
          "items": {
            "xml": {
              "name": "entry"
            },
            "$ref": "#/definitions/entry"
          },
          "x-is-first-container-var": true
        }
      },
      "xml": {
        "name": "entries"
      },
      "description": "Represents a list of Entry entities.",
      "x-object-type": "ListEntity",
      "x-subpackage": ".",
      "x-is-data": true,
      "x-is-list": true,
      "x-base-entity": "Entry"
    },
    "entry": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "value": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        }
      },
      "xml": {
        "name": "entry"
      },
      "description": "Represents a single name-value relation.",
      "x-object-type": "DataEntity",
      "x-subpackage": ".",
      "x-is-data": true
    },
    "environment": {
      "type": "object",
      "properties": {
        "osType": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "osName": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        }
      },
      "xml": {
        "name": "environment"
      },
      "description": "Represents the details of the agent's OS.",
      "x-object-type": "DataEntity",
      "x-subpackage": ".agent.",
      "x-is-data": true
    },
    "feature": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "name": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "type": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "disabled": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "inherited": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "href": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "properties": {
          "$ref": "#/definitions/properties"
        }
      },
      "xml": {
        "name": "feature"
      },
      "description": "Represents a build feature.",
      "x-object-type": "DataEntity",
      "x-subpackage": ".buildType.",
      "x-is-data": true
    },
    "features": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "feature": {
          "type": "array",
          "items": {
            "xml": {
              "name": "feature"
            },
            "$ref": "#/definitions/feature"
          },
          "x-is-first-container-var": true
        }
      },
      "xml": {
        "name": "features"
      },
      "description": "Represents a list of Feature entities.",
      "x-object-type": "ListEntity",
      "x-subpackage": ".buildType.",
      "x-is-data": true,
      "x-is-list": true,
      "x-base-entity": "Feature"
    },
    "file": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "fullName": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "xml": {
            "attribute": true
          }
        },
        "modificationTime": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "href": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "parent": {
          "$ref": "#/definitions/file"
        },
        "content": {
          "$ref": "#/definitions/href"
        },
        "children": {
          "$ref": "#/definitions/files"
        }
      },
      "xml": {
        "name": "file"
      },
      "description": "Represents a file.",
      "x-object-type": "DataEntity",
      "x-subpackage": ".files.",
      "x-is-data": true
    },
    "fileChanges": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "file": {
          "type": "array",
          "items": {
            "xml": {
              "name": "file"
            },
            "$ref": "#/definitions/FileChange"
          },
          "x-is-first-container-var": true
        }
      },
      "xml": {
        "name": "fileChanges"
      },
      "description": "Represents a list of FileChange entities.",
      "x-object-type": "ListEntity",
      "x-base-entity": "FileChange",
      "x-subpackage": ".change.",
      "x-is-data": true,
      "x-is-list": true
    },
    "files": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "href": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "file": {
          "type": "array",
          "items": {
            "xml": {
              "name": "file"
            },
            "$ref": "#/definitions/file"
          },
          "x-is-first-container-var": true
        }
      },
      "xml": {
        "name": "files"
      },
      "description": "Represents a list of File entities.",
      "x-object-type": "ListEntity",
      "x-subpackage": ".files.",
      "x-is-data": true,
      "x-is-list": true,
      "x-base-entity": "File"
    },
    "group": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "name": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "href": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "description": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "parent-groups": {
          "$ref": "#/definitions/groups"
        },
        "child-groups": {
          "$ref": "#/definitions/groups"
        },
        "users": {
          "$ref": "#/definitions/users"
        },
        "roles": {
          "$ref": "#/definitions/roles"
        },
        "properties": {
          "$ref": "#/definitions/properties"
        }
      },
      "xml": {
        "name": "group"
      },
      "description": "Represents a user group.",
      "x-help-article-name": "User Group",
      "x-help-article-link": "https://www.jetbrains.com/help/teamcity/user-group.html",
      "x-object-type": "DataEntity",
      "x-subpackage": ".group.",
      "x-is-data": true
    },
    "groupApprovalRule": {
      "type": "object",
      "properties": {
        "group": {
          "$ref": "#/definitions/group"
        },
        "requiredApprovalsCount": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        },
        "currentlyApprovedBy": {
          "$ref": "#/definitions/users"
        }
      },
      "xml": {
        "name": "groupApprovalRule"
      },
      "description": "Represents group approval rule and its current status for the given build.",
      "x-object-type": "DataEntity",
      "x-subpackage": ".build.approval.",
      "x-is-data": true
    },
    "groupApprovals": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "groupApproval": {
          "type": "array",
          "items": {
            "xml": {
              "name": "groupApproval"
            },
            "$ref": "#/definitions/groupApprovalRule"
          },
          "x-is-first-container-var": true
        }
      },
      "xml": {
        "name": "groupApprovals"
      },
      "description": "Represents a list of GroupApprovalRule entities.",
      "x-object-type": "ListEntity",
      "x-base-entity": "GroupApprovalRule",
      "x-subpackage": ".build.approval.",
      "x-is-data": true,
      "x-is-list": true
    },
    "groups": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "group": {
          "type": "array",
          "items": {
            "xml": {
              "name": "group"
            },
            "$ref": "#/definitions/group"
          },
          "x-is-first-container-var": true
        }
      },
      "xml": {
        "name": "groups"
      },
      "description": "Represents a list of Group entities.",
      "x-object-type": "ListEntity",
      "x-subpackage": ".group.",
      "x-is-data": true,
      "x-is-list": true,
      "x-base-entity": "Group"
    },
    "healthCategories": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "healthCategory": {
          "type": "array",
          "items": {
            "xml": {
              "name": "healthCategory"
            },
            "$ref": "#/definitions/healthCategory"
          },
          "x-is-first-container-var": true
        },
        "href": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "nextHref": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "prevHref": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        }
      },
      "xml": {
        "name": "healthCategories"
      },
      "description": "Represents a paginated list of HealthCategory entities.",
      "x-object-type": "PaginatedEntity",
      "x-subpackage": ".health.",
      "x-is-data": true,
      "x-is-list": true,
      "x-is-paginated": true,
      "x-base-entity": "HealthCategory"
    },
    "healthCategory": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "helpUrl": {
          "type": "string"
        }
      },
      "xml": {
        "name": "healthCategory"
      },
      "x-object-type": "DataEntity",
      "x-subpackage": ".health.",
      "x-is-data": true
    },
    "healthItem": {
      "type": "object",
      "properties": {
        "identity": {
          "type": "string"
        },
        "severity": {
          "type": "string",
          "enum": [
            "INFO",
            "WARN",
            "ERROR"
          ]
        },
        "healthCategory": {
          "$ref": "#/definitions/healthCategory"
        }
      },
      "xml": {
        "name": "healthItem"
      },
      "description": "Represents a server health item.",
      "x-help-article-name": "Server Health",
      "x-help-article-link": "https://www.jetbrains.com/help/teamcity/server-health.html",
      "x-object-type": "DataEntity",
      "x-subpackage": ".health.",
      "x-is-data": true
    },
    "healthStatusItems": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "healthItem": {
          "type": "array",
          "items": {
            "xml": {
              "name": "healthItem"
            },
            "$ref": "#/definitions/healthItem"
          },
          "x-is-first-container-var": true
        },
        "href": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "nextHref": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "prevHref": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        }
      },
      "xml": {
        "name": "healthStatusItems"
      },
      "description": "Represents a paginated list of HealthItem entities.",
      "x-object-type": "PaginatedEntity",
      "x-subpackage": ".health.",
      "x-is-data": true,
      "x-is-list": true,
      "x-is-paginated": true,
      "x-base-entity": "HealthItem"
    },
    "href": {
      "type": "object",
      "properties": {
        "href": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        }
      },
      "xml": {
        "name": "href"
      },
      "description": "Represents a href link.",
      "x-object-type": "DataEntity",
      "x-subpackage": ".",
      "x-is-data": true
    },
    "investigation": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "state": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "enum": [
            "TAKEN",
            "FIXED",
            "GIVEN_UP",
            "NONE"
          ]
        },
        "href": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "assignee": {
          "$ref": "#/definitions/user"
        },
        "assignment": {
          "$ref": "#/definitions/comment"
        },
        "scope": {
          "$ref": "#/definitions/ProblemScope"
        },
        "target": {
          "$ref": "#/definitions/ProblemTarget"
        },
        "resolution": {
          "$ref": "#/definitions/Resolution"
        },
        "responsible": {
          "$ref": "#/definitions/user"
        }
      },
      "xml": {
        "name": "investigation"
      },
      "description": "Represents an investigation of a build problem.",
      "x-object-type": "DataEntity",
      "x-subpackage": ".buildType.",
      "x-is-data": true
    },
    "investigations": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "nextHref": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "prevHref": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "href": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "investigation": {
          "type": "array",
          "items": {
            "xml": {
              "name": "investigation"
            },
            "$ref": "#/definitions/investigation"
          },
          "x-is-first-container-var": true
        }
      },
      "xml": {
        "name": "investigations"
      },
      "description": "Represents a paginated list of Investigation entities.",
      "x-object-type": "PaginatedEntity",
      "x-subpackage": ".buildType.",
      "x-is-data": true,
      "x-is-list": true,
      "x-is-paginated": true,
      "x-base-entity": "Investigation"
    },
    "issues": {
      "type": "object",
      "properties": {
        "issues": {
          "type": "array",
          "xml": {
            "name": "issue"
          },
          "items": {
            "xml": {
              "name": "issue"
            },
            "$ref": "#/definitions/Issue"
          },
          "x-is-first-container-var": true
        }
      },
      "xml": {
        "name": "issues"
      },
      "description": "Represents a list of Issue entities.",
      "x-object-type": "ListEntity",
      "x-base-entity": "Issue",
      "x-subpackage": ".issue.",
      "x-is-data": true,
      "x-is-list": true
    },
    "issuesUsages": {
      "type": "object",
      "properties": {
        "href": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "issueUsage": {
          "type": "array",
          "items": {
            "xml": {
              "name": "issueUsage"
            },
            "$ref": "#/definitions/IssueUsage"
          },
          "x-is-first-container-var": true
        },
        "count": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        }
      },
      "xml": {
        "name": "issuesUsages"
      },
      "description": "Represents a list of IssueUsage entities.",
      "x-object-type": "ListEntity",
      "x-subpackage": ".issue.",
      "x-is-data": true,
      "x-is-list": true,
      "x-base-entity": "IssueUsage"
    },
    "items": {
      "type": "object",
      "properties": {
        "item": {
          "type": "array",
          "items": {
            "type": "string",
            "xml": {
              "name": "item"
            }
          }
        }
      },
      "xml": {
        "name": "items"
      },
      "description": "Represents a list of items (strings).",
      "x-object-type": "DataEntity",
      "x-subpackage": ".",
      "x-is-data": true
    },
    "licenseKey": {
      "type": "object",
      "properties": {
        "valid": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "active": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "expired": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "obsolete": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "expirationDate": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "maintenanceEndDate": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "type": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "enum": [
            "evaluation",
            "eap",
            "open_source",
            "commercial",
            "enterprise",
            "professional"
          ]
        },
        "servers": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        },
        "agents": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        },
        "unlimitedAgents": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "buildTypes": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        },
        "unlimitedBuildTypes": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "errorDetails": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "key": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "rawType": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        }
      },
      "xml": {
        "name": "licenseKey"
      },
      "description": "Represents a license key details.",
      "x-object-type": "DataEntity",
      "x-subpackage": ".server.",
      "x-is-data": true
    },
    "licenseKeys": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "href": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "licenseKey": {
          "type": "array",
          "items": {
            "xml": {
              "name": "licenseKey"
            },
            "$ref": "#/definitions/licenseKey"
          },
          "x-is-first-container-var": true
        }
      },
      "xml": {
        "name": "licenseKeys"
      },
      "description": "Represents a list of LicenseKey entities.",
      "x-object-type": "ListEntity",
      "x-subpackage": ".server.",
      "x-is-data": true,
      "x-is-list": true,
      "x-base-entity": "LicenseKey"
    },
    "licensingData": {
      "type": "object",
      "properties": {
        "licenseUseExceeded": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "maxAgents": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        },
        "unlimitedAgents": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "maxBuildTypes": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        },
        "unlimitedBuildTypes": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "buildTypesLeft": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        },
        "serverLicenseType": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "enum": [
            "evaluation",
            "eap",
            "open_source",
            "commercial",
            "enterprise",
            "professional"
          ]
        },
        "serverEffectiveReleaseDate": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "agentsLeft": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        },
        "licenseKeys": {
          "$ref": "#/definitions/licenseKeys"
        }
      },
      "xml": {
        "name": "licensingData"
      },
      "description": "Represents license state details (available build configurations, agents, etc.).",
      "x-object-type": "DataEntity",
      "x-subpackage": ".server.",
      "x-is-data": true
    },
    "link": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "url": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "relativeUrl": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        }
      },
      "xml": {
        "name": "link"
      },
      "description": "Represents a list of URLs.",
      "x-object-type": "DataEntity",
      "x-subpackage": ".",
      "x-is-data": true
    },
    "links": {
      "type": "object",
      "properties": {
        "link": {
          "type": "array",
          "items": {
            "xml": {
              "name": "link"
            },
            "$ref": "#/definitions/link"
          },
          "x-is-first-container-var": true
        },
        "count": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        }
      },
      "xml": {
        "name": "links"
      },
      "description": "Represents a list of Link entities.",
      "x-object-type": "ListEntity",
      "x-subpackage": ".",
      "x-is-data": true,
      "x-is-list": true,
      "x-base-entity": "Link"
    },
    "metaData": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "entries": {
          "$ref": "#/definitions/entries"
        }
      },
      "xml": {
        "name": "metaData"
      },
      "description": "Represents a named Entries entity.",
      "x-object-type": "DataEntity",
      "x-base-entity": "Entries",
      "x-subpackage": ".",
      "x-is-data": true
    },
    "metric": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "description": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "prometheusName": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "metricValues": {
          "$ref": "#/definitions/metricValues"
        },
        "metricTags": {
          "$ref": "#/definitions/metricTags"
        }
      },
      "xml": {
        "name": "metric"
      },
      "description": "Represents the specific server metric.",
      "x-help-article-name": "Metrics",
      "x-help-article-link": "https://www.jetbrains.com/help/teamcity/teamcity-monitoring-and-diagnostics.html#Metrics",
      "x-object-type": "DataEntity",
      "x-subpackage": ".metrics.",
      "x-is-data": true
    },
    "metricTag": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "value": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        }
      },
      "xml": {
        "name": "metricTag"
      },
      "description": "Represents a metric tag.",
      "x-help-article-name": "Metrics",
      "x-help-article-link": "https://www.jetbrains.com/help/teamcity/teamcity-monitoring-and-diagnostics.html#Metrics",
      "x-object-type": "DataEntity",
      "x-subpackage": ".metrics.",
      "x-is-data": true
    },
    "metricTags": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "metricTag": {
          "type": "array",
          "items": {
            "xml": {
              "name": "metricTag"
            },
            "$ref": "#/definitions/metricTag"
          },
          "x-is-first-container-var": true
        }
      },
      "xml": {
        "name": "metricTags"
      },
      "description": "Represents a list of MetricTag entities.",
      "x-object-type": "ListEntity",
      "x-subpackage": ".metrics.",
      "x-is-data": true,
      "x-is-list": true,
      "x-base-entity": "MetricTag"
    },
    "metricValue": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "value": {
          "type": "number",
          "format": "double",
          "xml": {
            "attribute": true
          }
        },
        "tags": {
          "$ref": "#/definitions/metricTags"
        }
      },
      "xml": {
        "name": "metricValue"
      },
      "description": "Represents a metric value.",
      "x-help-article-name": "Metrics",
      "x-help-article-link": "https://www.jetbrains.com/help/teamcity/teamcity-monitoring-and-diagnostics.html#Metrics",
      "x-object-type": "DataEntity",
      "x-subpackage": ".metrics.",
      "x-is-data": true
    },
    "metricValues": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "metricValue": {
          "type": "array",
          "items": {
            "xml": {
              "name": "metricValue"
            },
            "$ref": "#/definitions/metricValue"
          },
          "x-is-first-container-var": true
        }
      },
      "xml": {
        "name": "metricValues"
      },
      "description": "Represents a list of MetricValue entities.",
      "x-object-type": "ListEntity",
      "x-subpackage": ".metrics.",
      "x-is-data": true,
      "x-is-list": true,
      "x-base-entity": "MetricValue"
    },
    "metrics": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "metric": {
          "type": "array",
          "items": {
            "xml": {
              "name": "metric"
            },
            "$ref": "#/definitions/metric"
          },
          "x-is-first-container-var": true
        }
      },
      "xml": {
        "name": "metrics"
      },
      "description": "Represents a list of Metric entities.",
      "x-object-type": "ListEntity",
      "x-subpackage": ".metrics.",
      "x-is-data": true,
      "x-is-list": true,
      "x-base-entity": "Metric"
    },
    "multipleOperationResult": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "errorCount": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        },
        "operationResult": {
          "type": "array",
          "items": {
            "xml": {
              "name": "operationResult"
            },
            "$ref": "#/definitions/operationResult"
          },
          "x-is-first-container-var": true
        }
      },
      "xml": {
        "name": "multipleOperationResult"
      },
      "description": "Represents a list of OperationResult entities.",
      "x-object-type": "ListEntity",
      "x-subpackage": ".",
      "x-is-data": true,
      "x-is-list": true,
      "x-base-entity": "OperationResult"
    },
    "mute": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        },
        "href": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "assignment": {
          "$ref": "#/definitions/comment"
        },
        "scope": {
          "$ref": "#/definitions/ProblemScope"
        },
        "target": {
          "$ref": "#/definitions/ProblemTarget"
        },
        "resolution": {
          "$ref": "#/definitions/Resolution"
        }
      },
      "xml": {
        "name": "mute"
      },
      "description": "Represents a muted test.",
      "x-object-type": "DataEntity",
      "x-subpackage": ".problem.",
      "x-is-data": true
    },
    "mutes": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "nextHref": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "prevHref": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "href": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "mute": {
          "type": "array",
          "items": {
            "xml": {
              "name": "mute"
            },
            "$ref": "#/definitions/mute"
          },
          "x-is-first-container-var": true
        }
      },
      "xml": {
        "name": "mutes"
      },
      "description": "Represents a paginated list of Mute entities.",
      "x-object-type": "PaginatedEntity",
      "x-subpackage": ".problem.",
      "x-is-data": true,
      "x-is-list": true,
      "x-is-paginated": true,
      "x-base-entity": "Mute"
    },
    "newBuildTypeDescription": {
      "type": "object",
      "properties": {
        "copyAllAssociatedSettings": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "projectsIdsMap": {
          "$ref": "#/definitions/properties"
        },
        "buildTypesIdsMap": {
          "$ref": "#/definitions/properties"
        },
        "vcsRootsIdsMap": {
          "$ref": "#/definitions/properties"
        },
        "name": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "id": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "sourceBuildTypeLocator": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "sourceBuildType": {
          "$ref": "#/definitions/buildType"
        }
      },
      "xml": {
        "name": "newBuildTypeDescription"
      },
      "description": "Represents a build configuration stub.",
      "x-object-type": "DataEntity",
      "x-subpackage": ".buildType.",
      "x-is-data": true
    },
    "newProjectDescription": {
      "type": "object",
      "properties": {
        "copyAllAssociatedSettings": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "projectsIdsMap": {
          "$ref": "#/definitions/properties"
        },
        "buildTypesIdsMap": {
          "$ref": "#/definitions/properties"
        },
        "vcsRootsIdsMap": {
          "$ref": "#/definitions/properties"
        },
        "name": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "id": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "sourceProjectLocator": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "sourceProject": {
          "$ref": "#/definitions/project"
        },
        "parentProject": {
          "$ref": "#/definitions/project"
        }
      },
      "xml": {
        "name": "newProjectDescription"
      },
      "description": "Represents a project stub.",
      "x-object-type": "DataEntity",
      "x-subpackage": ".project.",
      "x-is-data": true
    },
    "node": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "url": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "state": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "enum": [
            "online",
            "offline",
            "stopping",
            "starting"
          ]
        },
        "role": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "current": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "enabledResponsibilities": {
          "$ref": "#/definitions/enabledResponsibilities"
        },
        "disabledResponsibilities": {
          "$ref": "#/definitions/disabledResponsibilities"
        },
        "effectiveResponsibilities": {
          "$ref": "#/definitions/effectiveResponsibilities"
        }
      },
      "xml": {
        "name": "node"
      },
      "description": "Represents a TeamCity node.",
      "x-help-article-name": "Multi-node setup",
      "x-help-article-link": "https://www.jetbrains.com/help/teamcity/multinode-setup.html",
      "x-object-type": "DataEntity",
      "x-subpackage": ".nodes.",
      "x-is-data": true
    },
    "nodes": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        },
        "node": {
          "type": "array",
          "items": {
            "xml": {
              "name": "node"
            },
            "$ref": "#/definitions/node"
          }
        }
      },
      "xml": {
        "name": "nodes"
      },
      "x-object-type": "DataEntity",
      "x-subpackage": ".nodes.",
      "x-is-data": true
    },
    "operationResult": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "related": {
          "$ref": "#/definitions/relatedEntity"
        }
      },
      "xml": {
        "name": "operationResult"
      },
      "description": "Represents a relation between a message and a related entity.",
      "x-object-type": "DataEntity",
      "x-subpackage": ".",
      "x-is-data": true
    },
    "permission": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "name": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "global": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        }
      },
      "xml": {
        "name": "permission"
      },
      "description": "Represents a permission.",
      "x-help-article-name": "Roles",
      "x-help-article-link": "https://www.jetbrains.com/help/teamcity/role-and-permission.html",
      "x-object-type": "DataEntity",
      "x-subpackage": ".user.",
      "x-is-data": true
    },
    "permissionAssignment": {
      "type": "object",
      "properties": {
        "isGlobalScope": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "permission": {
          "$ref": "#/definitions/permission"
        },
        "project": {
          "$ref": "#/definitions/project"
        }
      },
      "xml": {
        "name": "permissionAssignment"
      },
      "description": "Represents a relation between the specific permission and a project.",
      "x-object-type": "DataEntity",
      "x-subpackage": ".user.",
      "x-is-data": true
    },
    "permissionAssignments": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "permissionAssignment": {
          "type": "array",
          "items": {
            "xml": {
              "name": "permissionAssignment"
            },
            "$ref": "#/definitions/permissionAssignment"
          },
          "x-is-first-container-var": true
        }
      },
      "xml": {
        "name": "permissionAssignments"
      },
      "description": "Represents a list of PermissionAssignment entities.",
      "x-object-type": "ListEntity",
      "x-subpackage": ".user.",
      "x-is-data": true,
      "x-is-list": true,
      "x-base-entity": "PermissionAssignment"
    },
    "permissionRestriction": {
      "type": "object",
      "properties": {
        "isGlobalScope": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "project": {
          "$ref": "#/definitions/project"
        },
        "permission": {
          "$ref": "#/definitions/permission"
        }
      },
      "xml": {
        "name": "permissionRestriction"
      },
      "description": "Represents permission restrictions of an authentication token.",
      "x-object-type": "DataEntity",
      "x-subpackage": ".user.",
      "x-is-data": true
    },
    "permissionRestrictions": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "permissionRestriction": {
          "type": "array",
          "items": {
            "xml": {
              "name": "permissionRestriction"
            },
            "$ref": "#/definitions/permissionRestriction"
          },
          "x-is-first-container-var": true
        }
      },
      "xml": {
        "name": "permissionRestrictions"
      },
      "description": "Represents a list of PermissionRestriction entities.",
      "x-object-type": "ListEntity",
      "x-subpackage": ".user.",
      "x-is-data": true,
      "x-is-list": true,
      "x-base-entity": "PermissionRestriction"
    },
    "pinInfo": {
      "type": "object",
      "properties": {
        "status": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "comment": {
          "$ref": "#/definitions/comment"
        }
      },
      "xml": {
        "name": "pinInfo"
      },
      "description": "Represents the pinned status of this build.",
      "x-help-article-name": "Pinning Build",
      "x-help-article-link": "https://www.jetbrains.com/help/teamcity/pinned-build.html",
      "x-object-type": "DataEntity",
      "x-subpackage": ".build.",
      "x-is-data": true
    },
    "plugin": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "displayName": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "version": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "loadPath": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "parameters": {
          "$ref": "#/definitions/properties"
        }
      },
      "xml": {
        "name": "plugin"
      },
      "description": "Represents a plugin.",
      "x-object-type": "DataEntity",
      "x-subpackage": ".plugin.",
      "x-is-data": true
    },
    "plugins": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "plugin": {
          "type": "array",
          "items": {
            "xml": {
              "name": "plugin"
            },
            "$ref": "#/definitions/plugin"
          },
          "x-is-first-container-var": true
        }
      },
      "xml": {
        "name": "plugins"
      },
      "description": "Represents a list of Plugin entities.",
      "x-object-type": "ListEntity",
      "x-subpackage": ".plugin.",
      "x-is-data": true,
      "x-is-list": true,
      "x-base-entity": "Plugin"
    },
    "problem": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "type": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "identity": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "href": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "description": {
          "type": "string"
        },
        "mutes": {
          "$ref": "#/definitions/mutes"
        },
        "investigations": {
          "$ref": "#/definitions/investigations"
        },
        "problemOccurrences": {
          "$ref": "#/definitions/problemOccurrences"
        },
        "locator": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        }
      },
      "xml": {
        "name": "problem"
      },
      "description": "Represents an issue with the test.",
      "x-object-type": "DataEntity",
      "x-subpackage": ".problem.",
      "x-is-data": true
    },
    "problemOccurrence": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "type": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "identity": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "href": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "muted": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "currentlyInvestigated": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "currentlyMuted": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "logAnchor": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "newFailure": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "details": {
          "type": "string"
        },
        "additionalData": {
          "type": "string"
        },
        "problem": {
          "$ref": "#/definitions/problem"
        },
        "mute": {
          "$ref": "#/definitions/mute"
        },
        "build": {
          "$ref": "#/definitions/build"
        }
      },
      "xml": {
        "name": "problemOccurrence"
      },
      "description": "Represents an instance of a failed test in the specific build.",
      "x-object-type": "DataEntity",
      "x-subpackage": ".problem.",
      "x-is-data": true
    },
    "problemOccurrences": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "href": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "nextHref": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "prevHref": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "problemOccurrence": {
          "type": "array",
          "items": {
            "xml": {
              "name": "problemOccurrence"
            },
            "$ref": "#/definitions/problemOccurrence"
          },
          "x-is-first-container-var": true
        },
        "passed": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        },
        "failed": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        },
        "newFailed": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        },
        "ignored": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        },
        "muted": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        }
      },
      "xml": {
        "name": "problemOccurrences"
      },
      "description": "Represents a paginated list of ProblemOccurrence entities.",
      "x-object-type": "PaginatedEntity",
      "x-subpackage": ".problem.",
      "x-is-data": true,
      "x-is-list": true,
      "x-is-paginated": true,
      "x-base-entity": "ProblemOccurrence"
    },
    "problems": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "nextHref": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "prevHref": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "problem": {
          "type": "array",
          "items": {
            "xml": {
              "name": "problem"
            },
            "$ref": "#/definitions/problem"
          },
          "x-is-first-container-var": true
        }
      },
      "xml": {
        "name": "problems"
      },
      "description": "Represents a paginated list of Problem entities.",
      "x-object-type": "PaginatedEntity",
      "x-subpackage": ".problem.",
      "x-is-data": true,
      "x-is-list": true,
      "x-is-paginated": true,
      "x-base-entity": "Problem"
    },
    "progress-info": {
      "type": "object",
      "properties": {
        "percentageComplete": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        },
        "elapsedSeconds": {
          "type": "integer",
          "format": "int64",
          "xml": {
            "attribute": true
          }
        },
        "estimatedTotalSeconds": {
          "type": "integer",
          "format": "int64",
          "xml": {
            "attribute": true
          }
        },
        "leftSeconds": {
          "type": "integer",
          "format": "int64",
          "xml": {
            "attribute": true
          }
        },
        "currentStageText": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "outdated": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "probablyHanging": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "lastActivityTime": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "outdatedReasonBuild": {
          "$ref": "#/definitions/build"
        }
      },
      "xml": {
        "name": "progress-info"
      },
      "description": "Represents a progress estimate of this build.",
      "x-object-type": "DataEntity",
      "x-subpackage": ".build.",
      "x-is-data": true
    },
    "project": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "internalId": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "uuid": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "name": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "parentProjectId": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "parentProjectInternalId": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "parentProjectName": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "archived": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "virtual": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "description": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "href": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "webUrl": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "parentProject": {
          "$ref": "#/definitions/project"
        },
        "readOnlyUI": {
          "$ref": "#/definitions/StateField"
        },
        "defaultTemplate": {
          "$ref": "#/definitions/buildType"
        },
        "buildTypes": {
          "$ref": "#/definitions/buildTypes"
        },
        "templates": {
          "$ref": "#/definitions/buildTypes"
        },
        "parameters": {
          "$ref": "#/definitions/properties"
        },
        "vcsRoots": {
          "$ref": "#/definitions/vcs-roots"
        },
        "projectFeatures": {
          "$ref": "#/definitions/projectFeatures"
        },
        "projects": {
          "$ref": "#/definitions/projects"
        },
        "cloudProfiles": {
          "$ref": "#/definitions/cloudProfiles"
        },
        "ancestorProjects": {
          "$ref": "#/definitions/projects"
        },
        "locator": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        }
      },
      "xml": {
        "name": "project"
      },
      "description": "Represents a project.",
      "x-help-article-name": "Project",
      "x-help-article-link": "https://www.jetbrains.com/help/teamcity/project.html",
      "x-object-type": "DataEntity",
      "x-subpackage": ".project.",
      "x-is-data": true
    },
    "projectFeature": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "name": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "type": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "disabled": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "inherited": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "href": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "properties": {
          "$ref": "#/definitions/properties"
        }
      },
      "xml": {
        "name": "projectFeature"
      },
      "description": "Represents a project feature.",
      "x-object-type": "DataEntity",
      "x-subpackage": ".project.",
      "x-is-data": true
    },
    "projectFeatures": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "href": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "projectFeature": {
          "type": "array",
          "items": {
            "xml": {
              "name": "projectFeature"
            },
            "$ref": "#/definitions/projectFeature"
          },
          "x-is-first-container-var": true
        }
      },
      "xml": {
        "name": "projectFeatures"
      },
      "description": "Represents a list of ProjectFeature entities.",
      "x-object-type": "ListEntity",
      "x-subpackage": ".project.",
      "x-is-data": true,
      "x-is-list": true,
      "x-base-entity": "ProjectFeature"
    },
    "projects": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "href": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "nextHref": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "prevHref": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "project": {
          "type": "array",
          "items": {
            "xml": {
              "name": "project"
            },
            "$ref": "#/definitions/project"
          },
          "x-is-first-container-var": true
        }
      },
      "xml": {
        "name": "projects"
      },
      "description": "Represents a paginated list of Project entities.",
      "x-object-type": "PaginatedEntity",
      "x-subpackage": ".project.",
      "x-is-data": true,
      "x-is-list": true,
      "x-is-paginated": true,
      "x-base-entity": "Project"
    },
    "properties": {
      "type": "object",
      "properties": {
        "href": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "count": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "property": {
          "type": "array",
          "items": {
            "xml": {
              "name": "property"
            },
            "$ref": "#/definitions/property"
          },
          "x-is-first-container-var": true
        }
      },
      "xml": {
        "name": "properties"
      },
      "description": "Represents a list of Property entities.",
      "x-object-type": "ListEntity",
      "x-subpackage": ".",
      "x-is-data": true,
      "x-is-list": true,
      "x-base-entity": "Property"
    },
    "property": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "value": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "inherited": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "type": {
          "$ref": "#/definitions/type"
        }
      },
      "xml": {
        "name": "property"
      },
      "description": "Represents a name-value-type relation.",
      "x-object-type": "DataEntity",
      "x-subpackage": ".",
      "x-is-data": true
    },
    "related": {
      "type": "object",
      "properties": {
        "builds": {
          "$ref": "#/definitions/builds"
        }
      },
      "xml": {
        "name": "related"
      },
      "description": "Represents a link to the Builds entity.",
      "x-object-type": "DataEntity",
      "x-subpackage": ".",
      "x-is-data": true
    },
    "relatedEntities": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "entity": {
          "type": "array",
          "items": {
            "xml": {
              "name": "entity"
            },
            "$ref": "#/definitions/relatedEntity"
          },
          "x-is-first-container-var": true
        }
      },
      "xml": {
        "name": "relatedEntities"
      },
      "description": "Represents a list of RelatedEntity entities.",
      "x-object-type": "ListEntity",
      "x-base-entity": "RelatedEntity",
      "x-subpackage": ".",
      "x-is-data": true,
      "x-is-list": true
    },
    "relatedEntity": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "unknown": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "internalId": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "text": {
          "type": "string"
        },
        "build": {
          "$ref": "#/definitions/build"
        },
        "buildType": {
          "$ref": "#/definitions/buildType"
        },
        "project": {
          "$ref": "#/definitions/project"
        },
        "user": {
          "$ref": "#/definitions/user"
        },
        "group": {
          "$ref": "#/definitions/group"
        },
        "test": {
          "$ref": "#/definitions/test"
        },
        "problem": {
          "$ref": "#/definitions/problem"
        },
        "agent": {
          "$ref": "#/definitions/agent"
        },
        "vcsRoot": {
          "$ref": "#/definitions/vcs-root"
        },
        "change": {
          "$ref": "#/definitions/change"
        },
        "agentPool": {
          "$ref": "#/definitions/agentPool"
        }
      },
      "xml": {
        "name": "relatedEntity"
      },
      "description": "Represents a related entity.",
      "x-object-type": "DataEntity",
      "x-subpackage": ".",
      "x-is-data": true
    },
    "repositoryState": {
      "type": "object",
      "properties": {
        "timestamp": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "count": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "branch": {
          "type": "array",
          "items": {
            "xml": {
              "name": "branch"
            },
            "$ref": "#/definitions/branchVersion"
          },
          "x-is-first-container-var": true
        }
      },
      "xml": {
        "name": "repositoryState"
      },
      "description": "Represents the list of the repository Branch entities with their recent revisions.",
      "x-object-type": "ListEntity",
      "x-base-entity": "BranchVersion",
      "x-subpackage": ".change.",
      "x-is-data": true,
      "x-is-list": true
    },
    "requirements": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        }
      },
      "xml": {
        "name": "requirements"
      },
      "description": "Represents a list of unmet requirements of a build.",
      "x-object-type": "DataEntity",
      "x-subpackage": ".agent.",
      "x-is-data": true
    },
    "responsibility": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "description": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        }
      },
      "xml": {
        "name": "responsibility"
      },
      "description": "Represents a single responsibility of a TeamCity node.",
      "x-help-article-name": "Multi-node setup",
      "x-help-article-link": "https://www.jetbrains.com/help/teamcity/multinode-setup.html",
      "x-object-type": "DataEntity",
      "x-subpackage": ".nodes.",
      "x-is-data": true
    },
    "role": {
      "type": "object",
      "properties": {
        "roleId": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "scope": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "href": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        }
      },
      "xml": {
        "name": "role"
      },
      "description": "Represents a user/group role.",
      "x-help-article-name": "Roles",
      "x-help-article-link": "https://www.jetbrains.com/help/teamcity/role-and-permission.html",
      "x-object-type": "DataEntity",
      "x-subpackage": ".user.",
      "x-is-data": true
    },
    "roles": {
      "type": "object",
      "properties": {
        "role": {
          "type": "array",
          "items": {
            "xml": {
              "name": "role"
            },
            "$ref": "#/definitions/role"
          }
        }
      },
      "xml": {
        "name": "roles"
      },
      "description": "Represents a list of Role entities.",
      "x-object-type": "DataEntity",
      "x-subpackage": ".user.",
      "x-is-data": true
    },
    "server": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "versionMajor": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        },
        "versionMinor": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        },
        "startTime": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "currentTime": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "buildNumber": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "buildDate": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "internalId": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "role": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "webUrl": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "projects": {
          "$ref": "#/definitions/href"
        },
        "vcsRoots": {
          "$ref": "#/definitions/href"
        },
        "builds": {
          "$ref": "#/definitions/href"
        },
        "users": {
          "$ref": "#/definitions/href"
        },
        "userGroups": {
          "$ref": "#/definitions/href"
        },
        "agents": {
          "$ref": "#/definitions/href"
        },
        "buildQueue": {
          "$ref": "#/definitions/href"
        },
        "agentPools": {
          "$ref": "#/definitions/href"
        },
        "investigations": {
          "$ref": "#/definitions/href"
        },
        "mutes": {
          "$ref": "#/definitions/href"
        },
        "artifactsUrl": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "nodes": {
          "$ref": "#/definitions/href"
        }
      },
      "xml": {
        "name": "server"
      },
      "description": "Represents various details of this server including the installation version.",
      "x-object-type": "DataEntity",
      "x-subpackage": ".server.",
      "x-is-data": true
    },
    "serverAuthSettings": {
      "type": "object",
      "properties": {
        "allowGuest": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "guestUsername": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "welcomeText": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "collapseLoginForm": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "perProjectPermissions": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "emailVerification": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "modules": {
          "$ref": "#/definitions/AuthModules"
        }
      },
      "xml": {
        "name": "serverAuthSettings"
      },
      "description": "Authentication Settings",
      "x-object-type": "DataEntity",
      "x-subpackage": ".server.",
      "x-is-data": true
    },
    "serverGlobalSettings": {
      "type": "object",
      "properties": {
        "useEncryption": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "defaultVCSCheckInterval": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        },
        "enforceDefaultVCSCheckInterval": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "artifactsDomainIsolation": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "artifactsUrl": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "maxArtifactSize": {
          "type": "integer",
          "format": "int64",
          "xml": {
            "attribute": true
          }
        },
        "maxArtifactsNumber": {
          "type": "integer",
          "format": "int64",
          "xml": {
            "attribute": true
          }
        },
        "encryptionKey": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "artifactDirectories": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "rootUrl": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "defaultQuietPeriod": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        },
        "defaultExecutionTimeout": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        }
      },
      "xml": {
        "name": "serverGlobalSettings"
      },
      "description": "Global Server Settings",
      "x-object-type": "DataEntity",
      "x-subpackage": ".server.",
      "x-is-data": true
    },
    "snapshot-dependencies": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "snapshot-dependency": {
          "type": "array",
          "items": {
            "xml": {
              "name": "snapshot-dependency"
            },
            "$ref": "#/definitions/snapshot-dependency"
          },
          "x-is-first-container-var": true
        }
      },
      "xml": {
        "name": "snapshot-dependencies"
      },
      "description": "Represents a list of SnapshotDependency entities.",
      "x-object-type": "ListEntity",
      "x-subpackage": ".buildType.",
      "x-is-data": true,
      "x-is-list": true,
      "x-base-entity": "SnapshotDependency"
    },
    "snapshot-dependency": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "name": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "type": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "disabled": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "inherited": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "href": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "properties": {
          "$ref": "#/definitions/properties"
        },
        "source-buildType": {
          "$ref": "#/definitions/buildType"
        }
      },
      "xml": {
        "name": "snapshot-dependency"
      },
      "description": "Represents a snapshot dependency relation.",
      "x-object-type": "DataEntity",
      "x-subpackage": ".buildType.",
      "x-is-data": true
    },
    "step": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "name": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "type": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "disabled": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "inherited": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "href": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "properties": {
          "$ref": "#/definitions/properties"
        }
      },
      "xml": {
        "name": "step"
      },
      "description": "Represents a build step.",
      "x-object-type": "DataEntity",
      "x-subpackage": ".buildType.",
      "x-is-data": true
    },
    "steps": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "step": {
          "type": "array",
          "items": {
            "xml": {
              "name": "step"
            },
            "$ref": "#/definitions/step"
          },
          "x-is-first-container-var": true
        }
      },
      "xml": {
        "name": "steps"
      },
      "description": "Represents a list of Step entities.",
      "x-object-type": "ListEntity",
      "x-subpackage": ".buildType.",
      "x-is-data": true,
      "x-is-list": true,
      "x-base-entity": "Step"
    },
    "tag": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "owner": {
          "$ref": "#/definitions/user"
        },
        "private": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        }
      },
      "xml": {
        "name": "tag"
      },
      "description": "Represents a single build tag.",
      "x-help-article-name": "Tagging Build",
      "x-help-article-link": "https://www.jetbrains.com/help/teamcity/build-tag.html",
      "x-object-type": "DataEntity",
      "x-subpackage": ".build.",
      "x-is-data": true
    },
    "tags": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "tag": {
          "type": "array",
          "items": {
            "xml": {
              "name": "tag"
            },
            "$ref": "#/definitions/tag"
          },
          "x-is-first-container-var": true
        }
      },
      "xml": {
        "name": "tags"
      },
      "description": "Represents a list of Tag entities.",
      "x-object-type": "ListEntity",
      "x-subpackage": ".build.",
      "x-is-data": true,
      "x-is-list": true,
      "x-base-entity": "Tag"
    },
    "test": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "name": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "mutes": {
          "$ref": "#/definitions/mutes"
        },
        "investigations": {
          "$ref": "#/definitions/investigations"
        },
        "testOccurrences": {
          "$ref": "#/definitions/testOccurrences"
        },
        "parsedTestName": {
          "$ref": "#/definitions/ParsedTestName"
        },
        "href": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "locator": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        }
      },
      "xml": {
        "name": "test"
      },
      "description": "Represents a test.",
      "x-object-type": "DataEntity",
      "x-subpackage": ".problem.",
      "x-is-data": true
    },
    "testCounters": {
      "type": "object",
      "properties": {
        "ignored": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        },
        "failed": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        },
        "muted": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        },
        "success": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        },
        "all": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        },
        "newFailed": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        },
        "duration": {
          "type": "integer",
          "format": "int64",
          "xml": {
            "attribute": true
          }
        }
      },
      "xml": {
        "name": "testCounters"
      },
      "description": "Represents a test results counter (how many times this test was successful/failed/muted/ignored).",
      "x-object-type": "DataEntity",
      "x-subpackage": ".problem.",
      "x-is-data": true
    },
    "testOccurrence": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "name": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "status": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "enum": [
            "UNKNOWN",
            "NORMAL",
            "WARNING",
            "FAILURE",
            "ERROR"
          ]
        },
        "ignored": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "duration": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        },
        "runOrder": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "newFailure": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "muted": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "currentlyMuted": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "currentlyInvestigated": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "href": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "ignoreDetails": {
          "type": "string"
        },
        "details": {
          "type": "string"
        },
        "test": {
          "$ref": "#/definitions/test"
        },
        "mute": {
          "$ref": "#/definitions/mute"
        },
        "build": {
          "$ref": "#/definitions/build"
        },
        "firstFailed": {
          "$ref": "#/definitions/testOccurrence"
        },
        "nextFixed": {
          "$ref": "#/definitions/testOccurrence"
        },
        "invocations": {
          "$ref": "#/definitions/testOccurrences"
        },
        "metadata": {
          "$ref": "#/definitions/testRunMetadata"
        },
        "logAnchor": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        }
      },
      "xml": {
        "name": "testOccurrence"
      },
      "description": "Represents a relation between a test and the specific build.",
      "x-object-type": "DataEntity",
      "x-subpackage": ".problem.",
      "x-is-data": true
    },
    "testOccurrences": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "href": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "nextHref": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "prevHref": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "testOccurrence": {
          "type": "array",
          "items": {
            "xml": {
              "name": "testOccurrence"
            },
            "$ref": "#/definitions/testOccurrence"
          },
          "x-is-first-container-var": true
        },
        "testCounters": {
          "$ref": "#/definitions/testCounters"
        },
        "ignored": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        },
        "failed": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        },
        "passed": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        },
        "newFailed": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        },
        "muted": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        }
      },
      "xml": {
        "name": "testOccurrences"
      },
      "description": "Represents a paginated list of TestOccurrence entities.",
      "x-object-type": "PaginatedEntity",
      "x-subpackage": ".problem.",
      "x-is-data": true,
      "x-is-list": true,
      "x-is-paginated": true,
      "x-base-entity": "TestOccurrence"
    },
    "testRunMetadata": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "typedValues": {
          "type": "array",
          "items": {
            "xml": {
              "name": "typedValues"
            },
            "$ref": "#/definitions/typedValue"
          },
          "x-is-first-container-var": true
        }
      },
      "xml": {
        "name": "testRunMetadata"
      },
      "description": "Represents a list of TypedValue entities.",
      "x-object-type": "ListEntity",
      "x-base-entity": "TypedValue",
      "x-subpackage": ".problem.",
      "x-is-data": true,
      "x-is-list": true
    },
    "tests": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "myTestCounters": {
          "$ref": "#/definitions/testCounters"
        },
        "nextHref": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "prevHref": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "test": {
          "type": "array",
          "items": {
            "xml": {
              "name": "test"
            },
            "$ref": "#/definitions/test"
          },
          "x-is-first-container-var": true
        }
      },
      "xml": {
        "name": "tests"
      },
      "description": "Represents a paginated list of Test entities.",
      "x-object-type": "PaginatedEntity",
      "x-subpackage": ".problem.",
      "x-is-data": true,
      "x-is-list": true,
      "x-is-paginated": true,
      "x-base-entity": "Test"
    },
    "token": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "creationTime": {
          "type": "string",
          "format": "date-time",
          "xml": {
            "attribute": true
          }
        },
        "value": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "expirationTime": {
          "type": "string",
          "format": "date-time",
          "xml": {
            "attribute": true
          }
        },
        "permissionRestrictions": {
          "$ref": "#/definitions/permissionRestrictions"
        }
      },
      "xml": {
        "name": "token"
      },
      "description": "Represents an authentication token.",
      "x-object-type": "DataEntity",
      "x-subpackage": ".user.",
      "x-is-data": true
    },
    "tokens": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "token": {
          "type": "array",
          "items": {
            "xml": {
              "name": "token"
            },
            "$ref": "#/definitions/token"
          },
          "x-is-first-container-var": true
        }
      },
      "xml": {
        "name": "tokens"
      },
      "description": "Represents a list of Token entities.",
      "x-object-type": "ListEntity",
      "x-subpackage": ".user.",
      "x-is-data": true,
      "x-is-list": true,
      "x-base-entity": "Token"
    },
    "trigger": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "name": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "type": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "disabled": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "inherited": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "href": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "properties": {
          "$ref": "#/definitions/properties"
        },
        "buildCustomization": {
          "$ref": "#/definitions/BuildTriggerCustomization"
        }
      },
      "xml": {
        "name": "trigger"
      },
      "description": "Represents a build trigger.",
      "x-object-type": "DataEntity",
      "x-subpackage": ".buildType.",
      "x-is-data": true
    },
    "triggers": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "trigger": {
          "type": "array",
          "items": {
            "xml": {
              "name": "trigger"
            },
            "$ref": "#/definitions/trigger"
          },
          "x-is-first-container-var": true
        }
      },
      "xml": {
        "name": "triggers"
      },
      "description": "Represents a list of Trigger entities.",
      "x-object-type": "ListEntity",
      "x-subpackage": ".buildType.",
      "x-is-data": true,
      "x-is-list": true,
      "x-base-entity": "Trigger"
    },
    "type": {
      "type": "object",
      "properties": {
        "rawValue": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        }
      },
      "xml": {
        "name": "type"
      },
      "description": "Represents a build parameter type string.",
      "x-object-type": "DataEntity",
      "x-subpackage": ".",
      "x-is-data": true
    },
    "typedValue": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "type": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "value": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        }
      },
      "xml": {
        "name": "typedValue"
      },
      "description": "Represents a name-value-type relation.",
      "x-object-type": "DataEntity",
      "x-subpackage": ".problem.",
      "x-is-data": true
    },
    "user": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "name": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "xml": {
            "attribute": true
          }
        },
        "email": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "lastLogin": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "password": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "hasPassword": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "realm": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "href": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "properties": {
          "$ref": "#/definitions/properties"
        },
        "roles": {
          "$ref": "#/definitions/roles"
        },
        "groups": {
          "$ref": "#/definitions/groups"
        },
        "locator": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "avatars": {
          "$ref": "#/definitions/userAvatars"
        },
        "enabled2FA": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        }
      },
      "xml": {
        "name": "user"
      },
      "description": "Represents a user.",
      "x-help-article-name": "User Account",
      "x-help-article-link": "https://www.jetbrains.com/help/teamcity/user-account.html",
      "x-object-type": "DataEntity",
      "x-subpackage": ".user.",
      "x-is-data": true
    },
    "userApprovalRule": {
      "type": "object",
      "properties": {
        "approved": {
          "type": "boolean"
        },
        "user": {
          "$ref": "#/definitions/user"
        }
      },
      "xml": {
        "name": "userApprovalRule"
      },
      "description": "Represents user approval rule and its current status for the given build.",
      "x-object-type": "DataEntity",
      "x-subpackage": ".build.approval.",
      "x-is-data": true
    },
    "userApprovals": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "userApproval": {
          "type": "array",
          "items": {
            "xml": {
              "name": "userApproval"
            },
            "$ref": "#/definitions/userApprovalRule"
          },
          "x-is-first-container-var": true
        }
      },
      "xml": {
        "name": "userApprovals"
      },
      "description": "Represents a list of UserApprovalRule entities.",
      "x-object-type": "ListEntity",
      "x-base-entity": "UserApprovalRule",
      "x-subpackage": ".build.approval.",
      "x-is-data": true,
      "x-is-list": true
    },
    "userAvatars": {
      "type": "object",
      "properties": {
        "urlToSize20": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "urlToSize28": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "urlToSize32": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "urlToSize40": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "urlToSize56": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "urlToSize64": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "urlToSize80": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        }
      },
      "xml": {
        "name": "userAvatars"
      },
      "description": "Represents a group of links to the user's avatars",
      "x-object-type": "DataEntity",
      "x-subpackage": ".user.",
      "x-is-data": true
    },
    "users": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "user": {
          "type": "array",
          "items": {
            "xml": {
              "name": "user"
            },
            "$ref": "#/definitions/user"
          },
          "x-is-first-container-var": true
        }
      },
      "xml": {
        "name": "users"
      },
      "description": "Represents a list of User entities.",
      "x-object-type": "ListEntity",
      "x-subpackage": ".user.",
      "x-is-data": true,
      "x-is-list": true,
      "x-base-entity": "User"
    },
    "vcs-root": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "internalId": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "uuid": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "name": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "vcsName": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "modificationCheckInterval": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        },
        "href": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "project": {
          "$ref": "#/definitions/project"
        },
        "properties": {
          "$ref": "#/definitions/properties"
        },
        "vcsRootInstances": {
          "$ref": "#/definitions/vcs-root-instances"
        },
        "repositoryIdStrings": {
          "$ref": "#/definitions/items"
        },
        "locator": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "projectLocator": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        }
      },
      "xml": {
        "name": "vcs-root"
      },
      "description": "Represents a VCS root.",
      "x-help-article-name": "VCS Root",
      "x-help-article-link": "https://www.jetbrains.com/help/teamcity/vcs-root.html",
      "x-object-type": "DataEntity",
      "x-subpackage": ".change.",
      "x-is-data": true
    },
    "vcs-root-entries": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "vcs-root-entry": {
          "type": "array",
          "items": {
            "xml": {
              "name": "vcs-root-entry"
            },
            "$ref": "#/definitions/vcs-root-entry"
          },
          "x-is-first-container-var": true
        }
      },
      "xml": {
        "name": "vcs-root-entries"
      },
      "description": "Represents a list of VcsRootEntry entities.",
      "x-object-type": "ListEntity",
      "x-subpackage": ".buildType.",
      "x-is-data": true,
      "x-is-list": true,
      "x-base-entity": "VcsRootEntry"
    },
    "vcs-root-entry": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "inherited": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "vcs-root": {
          "$ref": "#/definitions/vcs-root"
        },
        "checkout-rules": {
          "type": "string"
        }
      },
      "xml": {
        "name": "vcs-root-entry"
      },
      "description": "Represents a VCS root assigned to this build configuration.",
      "x-object-type": "DataEntity",
      "x-subpackage": ".buildType.",
      "x-is-data": true
    },
    "vcs-root-instance": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "vcs-root-id": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "vcsRootInternalId": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "name": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "vcsName": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "modificationCheckInterval": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        },
        "commitHookMode": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "lastVersion": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "lastVersionInternal": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "href": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "vcs-root": {
          "$ref": "#/definitions/vcs-root"
        },
        "status": {
          "$ref": "#/definitions/vcsStatus"
        },
        "repositoryState": {
          "$ref": "#/definitions/repositoryState"
        },
        "properties": {
          "$ref": "#/definitions/properties"
        },
        "repositoryIdStrings": {
          "$ref": "#/definitions/items"
        },
        "projectLocator": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        }
      },
      "xml": {
        "name": "vcs-root-instance"
      },
      "description": "Represents a relation between a VCS root and unique settings set for this root.",
      "x-help-article-name": "VCS Settings",
      "x-help-article-link": "https://www.jetbrains.com/help/teamcity/configuring-vcs-settings.html#VCS+Settings+Overview",
      "x-object-type": "DataEntity",
      "x-subpackage": ".change.",
      "x-is-data": true
    },
    "vcs-root-instances": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "href": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "nextHref": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "prevHref": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "vcs-root-instance": {
          "type": "array",
          "items": {
            "xml": {
              "name": "vcs-root-instance"
            },
            "$ref": "#/definitions/vcs-root-instance"
          },
          "x-is-first-container-var": true
        }
      },
      "xml": {
        "name": "vcs-root-instances"
      },
      "description": "Represents a paginated list of VcsRootInstance entities.",
      "x-object-type": "PaginatedEntity",
      "x-subpackage": ".buildType.",
      "x-is-data": true,
      "x-is-list": true,
      "x-is-paginated": true,
      "x-base-entity": "VcsRootInstance"
    },
    "vcs-roots": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "href": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "nextHref": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "prevHref": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "vcs-root": {
          "type": "array",
          "items": {
            "xml": {
              "name": "vcs-root"
            },
            "$ref": "#/definitions/vcs-root"
          },
          "x-is-first-container-var": true
        }
      },
      "xml": {
        "name": "vcs-roots"
      },
      "description": "Represents a paginated list of VcsRoot entities.",
      "x-object-type": "PaginatedEntity",
      "x-subpackage": ".buildType.",
      "x-is-data": true,
      "x-is-list": true,
      "x-is-paginated": true,
      "x-base-entity": "VcsRoot"
    },
    "vcsLabel": {
      "type": "object",
      "properties": {
        "text": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "failureReason": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "status": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "enum": [
            "UNKNOWN",
            "SUCCESSFUL_SET",
            "IS_BEING_SET",
            "FAILED",
            "DISABLED_FOR_THE_ROOT",
            "LABELING_NOT_SUPPORTED"
          ]
        },
        "buildId": {
          "type": "integer",
          "format": "int64",
          "xml": {
            "attribute": true
          }
        },
        "vcs-root-instance": {
          "$ref": "#/definitions/vcs-root-instance"
        }
      },
      "xml": {
        "name": "vcsLabel"
      },
      "description": "Represents a VCS-side label of this build's sources.",
      "x-help-article-name": "Labeling Sources",
      "x-help-article-link": "https://www.jetbrains.com/help/teamcity/vcs-labeling.html",
      "x-object-type": "DataEntity",
      "x-subpackage": ".build.",
      "x-is-data": true
    },
    "vcsLabels": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          },
          "x-defined-in-base": true
        },
        "vcsLabel": {
          "type": "array",
          "items": {
            "xml": {
              "name": "vcsLabel"
            },
            "$ref": "#/definitions/vcsLabel"
          },
          "x-is-first-container-var": true
        }
      },
      "xml": {
        "name": "vcsLabels"
      },
      "description": "Represents a list of VcsLabel entities.",
      "x-object-type": "ListEntity",
      "x-subpackage": ".build.",
      "x-is-data": true,
      "x-is-list": true,
      "x-base-entity": "VcsLabel"
    },
    "vcsStatus": {
      "type": "object",
      "properties": {
        "current": {
          "$ref": "#/definitions/VcsCheckStatus"
        },
        "previous": {
          "$ref": "#/definitions/VcsCheckStatus"
        }
      },
      "xml": {
        "name": "vcsStatus"
      },
      "description": "Represents links to the last or previous VCS root check.",
      "x-help-article-name": "VCS Root",
      "x-help-article-link": "https://www.jetbrains.com/help/teamcity/configuring-vcs-roots.html",
      "x-object-type": "DataEntity",
      "x-subpackage": ".change.",
      "x-is-data": true
    },
    "versionedSettingsConfig": {
      "type": "object",
      "properties": {
        "storeSecureValuesOutsideVcs": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "importDecision": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "enum": [
            "overrideInVCS",
            "importFromVCS"
          ]
        },
        "portableDsl": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "allowUIEditing": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "synchronizationMode": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "enum": [
            "useParentProjectSettings",
            "disabled",
            "enabled"
          ]
        },
        "vcsRootId": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "showSettingsChanges": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "buildSettingsMode": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "enum": [
            "alwaysUseCurrent",
            "useCurrentByDefault",
            "useFromVCS"
          ]
        },
        "format": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        }
      },
      "xml": {
        "name": "versionedSettingsConfig"
      },
      "description": "Represents a Versioned Settings Config.",
      "x-help-article-name": "Storing Project Settings in Version Control",
      "x-help-article-link": "https://www.jetbrains.com/help/teamcity/storing-project-settings-in-version-control.html",
      "x-object-type": "DataEntity",
      "x-subpackage": ".versionedSettings.",
      "x-is-data": true
    },
    "versionedSettingsContextParameter": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "value": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        }
      },
      "xml": {
        "name": "versionedSettingsContextParameter"
      },
      "description": "Represents a Versioned Settings Context Parameter.",
      "x-help-article-name": "Storing Project Settings in Version Control",
      "x-help-article-link": "https://www.jetbrains.com/help/teamcity/storing-project-settings-in-version-control.html",
      "x-object-type": "DataEntity",
      "x-subpackage": ".versionedSettings.",
      "x-is-data": true
    },
    "versionedSettingsContextParameters": {
      "type": "object",
      "properties": {
        "versionedSettingsContextParameter": {
          "type": "array",
          "items": {
            "xml": {
              "name": "versionedSettingsContextParameter"
            },
            "$ref": "#/definitions/versionedSettingsContextParameter"
          },
          "x-is-first-container-var": true
        }
      },
      "xml": {
        "name": "versionedSettingsContextParameters"
      },
      "description": "Represents a Versioned Settings Context Parameters.",
      "x-object-type": "ListEntity",
      "x-help-article-name": "Storing Project Settings in Version Control",
      "x-help-article-link": "https://www.jetbrains.com/help/teamcity/storing-project-settings-in-version-control.html",
      "x-subpackage": ".versionedSettings.",
      "x-is-data": true,
      "x-is-list": true,
      "x-base-entity": "VersionedSettingsContextParameter"
    },
    "versionedSettingsError": {
      "type": "object",
      "properties": {
        "stackTraceLines": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "message": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "type": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "file": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        }
      },
      "xml": {
        "name": "versionedSettingsError"
      },
      "description": "Represents a Versioned Settings Error.",
      "x-help-article-name": "Storing Project Settings in Version Control",
      "x-help-article-link": "https://www.jetbrains.com/help/teamcity/storing-project-settings-in-version-control.html",
      "x-object-type": "DataEntity",
      "x-subpackage": ".versionedSettings.",
      "x-is-data": true
    },
    "versionedSettingsStatus": {
      "type": "object",
      "properties": {
        "missingContextParameters": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "dslOutdated": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "timestamp": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "versionedSettingsError": {
          "type": "array",
          "items": {
            "xml": {
              "name": "versionedSettingsError"
            },
            "$ref": "#/definitions/versionedSettingsError"
          }
        },
        "message": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "type": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "enum": [
            "info",
            "warn"
          ]
        }
      },
      "xml": {
        "name": "versionedSettingsStatus"
      },
      "description": "Represents a Versioned Settings Status.",
      "x-help-article-name": "Storing Project Settings in Version Control",
      "x-help-article-link": "https://www.jetbrains.com/help/teamcity/storing-project-settings-in-version-control.html",
      "x-object-type": "DataEntity",
      "x-subpackage": ".versionedSettings.",
      "x-is-data": true
    },
    "versionedSettingsToken": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "name": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "value": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        }
      },
      "xml": {
        "name": "versionedSettingsToken"
      },
      "description": "Represents a Versioned Settings Token.",
      "x-help-article-name": "Managing Tokens",
      "x-help-article-link": "https://www.jetbrains.com/help/teamcity/storing-project-settings-in-version-control.html#Managing+Tokens",
      "x-object-type": "DataEntity",
      "x-subpackage": ".versionedSettings.",
      "x-is-data": true
    },
    "versionedSettingsTokens": {
      "type": "object",
      "properties": {
        "versionedSettingsToken": {
          "type": "array",
          "items": {
            "xml": {
              "name": "versionedSettingsToken"
            },
            "$ref": "#/definitions/versionedSettingsToken"
          },
          "x-is-first-container-var": true
        }
      },
      "xml": {
        "name": "versionedSettingsTokens"
      },
      "description": "Represents a Versioned Settings Tokens.",
      "x-object-type": "ListEntity",
      "x-help-article-name": "Managing Tokens",
      "x-help-article-link": "https://www.jetbrains.com/help/teamcity/storing-project-settings-in-version-control.html#Managing+Tokens",
      "x-subpackage": ".versionedSettings.",
      "x-is-data": true,
      "x-is-list": true,
      "x-base-entity": "VersionedSettingsToken"
    }
  }
}
