# coding: utf-8

from dohq_teamcity.custom.base_model import TeamCityObject


class TypedValue(TeamCityObject):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'type': 'str',
        'value': 'str'
    }

    attribute_map = {
        'name': 'name',
        'type': 'type',
        'value': 'value'
    }

    def __init__(self, name=None, type=None, value=None, teamcity=None):  # noqa: E501
        """TypedValue - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._type = None
        self._value = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if type is not None:
            self.type = type
        if value is not None:
            self.value = value
        super(TypedValue, self).__init__(teamcity=teamcity)

    @property
    def name(self):
        """Gets the name of this TypedValue.  # noqa: E501


        :return: The name of this TypedValue.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TypedValue.


        :param name: The name of this TypedValue.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this TypedValue.  # noqa: E501


        :return: The type of this TypedValue.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TypedValue.


        :param type: The type of this TypedValue.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def value(self):
        """Gets the value of this TypedValue.  # noqa: E501


        :return: The value of this TypedValue.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this TypedValue.


        :param value: The value of this TypedValue.  # noqa: E501
        :type: str
        """

        self._value = value
