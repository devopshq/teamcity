# coding: utf-8

from dohq_teamcity.custom.base_model import TeamCityObject


class VersionedSettingsConfig(TeamCityObject):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'store_secure_values_outside_vcs': 'bool',
        'import_decision': 'str',
        'portable_dsl': 'bool',
        'allow_ui_editing': 'bool',
        'synchronization_mode': 'str',
        'vcs_root_id': 'str',
        'show_settings_changes': 'bool',
        'build_settings_mode': 'str',
        'format': 'str'
    }

    attribute_map = {
        'store_secure_values_outside_vcs': 'storeSecureValuesOutsideVcs',
        'import_decision': 'importDecision',
        'portable_dsl': 'portableDsl',
        'allow_ui_editing': 'allowUIEditing',
        'synchronization_mode': 'synchronizationMode',
        'vcs_root_id': 'vcsRootId',
        'show_settings_changes': 'showSettingsChanges',
        'build_settings_mode': 'buildSettingsMode',
        'format': 'format'
    }

    def __init__(self, store_secure_values_outside_vcs=None, import_decision=None, portable_dsl=None, allow_ui_editing=None, synchronization_mode=None, vcs_root_id=None, show_settings_changes=None, build_settings_mode=None, format=None, teamcity=None):  # noqa: E501
        """VersionedSettingsConfig - a model defined in Swagger"""  # noqa: E501

        self._store_secure_values_outside_vcs = None
        self._import_decision = None
        self._portable_dsl = None
        self._allow_ui_editing = None
        self._synchronization_mode = None
        self._vcs_root_id = None
        self._show_settings_changes = None
        self._build_settings_mode = None
        self._format = None
        self.discriminator = None

        if store_secure_values_outside_vcs is not None:
            self.store_secure_values_outside_vcs = store_secure_values_outside_vcs
        if import_decision is not None:
            self.import_decision = import_decision
        if portable_dsl is not None:
            self.portable_dsl = portable_dsl
        if allow_ui_editing is not None:
            self.allow_ui_editing = allow_ui_editing
        if synchronization_mode is not None:
            self.synchronization_mode = synchronization_mode
        if vcs_root_id is not None:
            self.vcs_root_id = vcs_root_id
        if show_settings_changes is not None:
            self.show_settings_changes = show_settings_changes
        if build_settings_mode is not None:
            self.build_settings_mode = build_settings_mode
        if format is not None:
            self.format = format
        super(VersionedSettingsConfig, self).__init__(teamcity=teamcity)

    @property
    def store_secure_values_outside_vcs(self):
        """Gets the store_secure_values_outside_vcs of this VersionedSettingsConfig.  # noqa: E501


        :return: The store_secure_values_outside_vcs of this VersionedSettingsConfig.  # noqa: E501
        :rtype: bool
        """
        return self._store_secure_values_outside_vcs

    @store_secure_values_outside_vcs.setter
    def store_secure_values_outside_vcs(self, store_secure_values_outside_vcs):
        """Sets the store_secure_values_outside_vcs of this VersionedSettingsConfig.


        :param store_secure_values_outside_vcs: The store_secure_values_outside_vcs of this VersionedSettingsConfig.  # noqa: E501
        :type: bool
        """

        self._store_secure_values_outside_vcs = store_secure_values_outside_vcs

    @property
    def import_decision(self):
        """Gets the import_decision of this VersionedSettingsConfig.  # noqa: E501


        :return: The import_decision of this VersionedSettingsConfig.  # noqa: E501
        :rtype: str
        """
        return self._import_decision

    @import_decision.setter
    def import_decision(self, import_decision):
        """Sets the import_decision of this VersionedSettingsConfig.


        :param import_decision: The import_decision of this VersionedSettingsConfig.  # noqa: E501
        :type: str
        """
        allowed_values = ["overrideInVCS", "importFromVCS"]  # noqa: E501
        if import_decision not in allowed_values:
            raise ValueError(
                "Invalid value for `import_decision` ({0}), must be one of {1}"  # noqa: E501
                .format(import_decision, allowed_values)
            )

        self._import_decision = import_decision

    @property
    def portable_dsl(self):
        """Gets the portable_dsl of this VersionedSettingsConfig.  # noqa: E501


        :return: The portable_dsl of this VersionedSettingsConfig.  # noqa: E501
        :rtype: bool
        """
        return self._portable_dsl

    @portable_dsl.setter
    def portable_dsl(self, portable_dsl):
        """Sets the portable_dsl of this VersionedSettingsConfig.


        :param portable_dsl: The portable_dsl of this VersionedSettingsConfig.  # noqa: E501
        :type: bool
        """

        self._portable_dsl = portable_dsl

    @property
    def allow_ui_editing(self):
        """Gets the allow_ui_editing of this VersionedSettingsConfig.  # noqa: E501


        :return: The allow_ui_editing of this VersionedSettingsConfig.  # noqa: E501
        :rtype: bool
        """
        return self._allow_ui_editing

    @allow_ui_editing.setter
    def allow_ui_editing(self, allow_ui_editing):
        """Sets the allow_ui_editing of this VersionedSettingsConfig.


        :param allow_ui_editing: The allow_ui_editing of this VersionedSettingsConfig.  # noqa: E501
        :type: bool
        """

        self._allow_ui_editing = allow_ui_editing

    @property
    def synchronization_mode(self):
        """Gets the synchronization_mode of this VersionedSettingsConfig.  # noqa: E501


        :return: The synchronization_mode of this VersionedSettingsConfig.  # noqa: E501
        :rtype: str
        """
        return self._synchronization_mode

    @synchronization_mode.setter
    def synchronization_mode(self, synchronization_mode):
        """Sets the synchronization_mode of this VersionedSettingsConfig.


        :param synchronization_mode: The synchronization_mode of this VersionedSettingsConfig.  # noqa: E501
        :type: str
        """
        allowed_values = ["useParentProjectSettings", "disabled", "enabled"]  # noqa: E501
        if synchronization_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `synchronization_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(synchronization_mode, allowed_values)
            )

        self._synchronization_mode = synchronization_mode

    @property
    def vcs_root_id(self):
        """Gets the vcs_root_id of this VersionedSettingsConfig.  # noqa: E501


        :return: The vcs_root_id of this VersionedSettingsConfig.  # noqa: E501
        :rtype: str
        """
        return self._vcs_root_id

    @vcs_root_id.setter
    def vcs_root_id(self, vcs_root_id):
        """Sets the vcs_root_id of this VersionedSettingsConfig.


        :param vcs_root_id: The vcs_root_id of this VersionedSettingsConfig.  # noqa: E501
        :type: str
        """

        self._vcs_root_id = vcs_root_id

    @property
    def show_settings_changes(self):
        """Gets the show_settings_changes of this VersionedSettingsConfig.  # noqa: E501


        :return: The show_settings_changes of this VersionedSettingsConfig.  # noqa: E501
        :rtype: bool
        """
        return self._show_settings_changes

    @show_settings_changes.setter
    def show_settings_changes(self, show_settings_changes):
        """Sets the show_settings_changes of this VersionedSettingsConfig.


        :param show_settings_changes: The show_settings_changes of this VersionedSettingsConfig.  # noqa: E501
        :type: bool
        """

        self._show_settings_changes = show_settings_changes

    @property
    def build_settings_mode(self):
        """Gets the build_settings_mode of this VersionedSettingsConfig.  # noqa: E501


        :return: The build_settings_mode of this VersionedSettingsConfig.  # noqa: E501
        :rtype: str
        """
        return self._build_settings_mode

    @build_settings_mode.setter
    def build_settings_mode(self, build_settings_mode):
        """Sets the build_settings_mode of this VersionedSettingsConfig.


        :param build_settings_mode: The build_settings_mode of this VersionedSettingsConfig.  # noqa: E501
        :type: str
        """
        allowed_values = ["alwaysUseCurrent", "useCurrentByDefault", "useFromVCS"]  # noqa: E501
        if build_settings_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `build_settings_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(build_settings_mode, allowed_values)
            )

        self._build_settings_mode = build_settings_mode

    @property
    def format(self):
        """Gets the format of this VersionedSettingsConfig.  # noqa: E501


        :return: The format of this VersionedSettingsConfig.  # noqa: E501
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this VersionedSettingsConfig.


        :param format: The format of this VersionedSettingsConfig.  # noqa: E501
        :type: str
        """

        self._format = format
