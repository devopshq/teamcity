# coding: utf-8

from dohq_teamcity.custom.base_model import TeamCityObject


class ParsedTestName(TeamCityObject):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'test_package': 'str',
        'test_suite': 'str',
        'test_class': 'str',
        'test_short_name': 'str',
        'test_name_without_prefix': 'str',
        'test_method_name': 'str',
        'test_name_with_parameters': 'str'
    }

    attribute_map = {
        'test_package': 'testPackage',
        'test_suite': 'testSuite',
        'test_class': 'testClass',
        'test_short_name': 'testShortName',
        'test_name_without_prefix': 'testNameWithoutPrefix',
        'test_method_name': 'testMethodName',
        'test_name_with_parameters': 'testNameWithParameters'
    }

    def __init__(self, test_package=None, test_suite=None, test_class=None, test_short_name=None, test_name_without_prefix=None, test_method_name=None, test_name_with_parameters=None, teamcity=None):  # noqa: E501
        """ParsedTestName - a model defined in Swagger"""  # noqa: E501

        self._test_package = None
        self._test_suite = None
        self._test_class = None
        self._test_short_name = None
        self._test_name_without_prefix = None
        self._test_method_name = None
        self._test_name_with_parameters = None
        self.discriminator = None

        if test_package is not None:
            self.test_package = test_package
        if test_suite is not None:
            self.test_suite = test_suite
        if test_class is not None:
            self.test_class = test_class
        if test_short_name is not None:
            self.test_short_name = test_short_name
        if test_name_without_prefix is not None:
            self.test_name_without_prefix = test_name_without_prefix
        if test_method_name is not None:
            self.test_method_name = test_method_name
        if test_name_with_parameters is not None:
            self.test_name_with_parameters = test_name_with_parameters
        super(ParsedTestName, self).__init__(teamcity=teamcity)

    @property
    def test_package(self):
        """Gets the test_package of this ParsedTestName.  # noqa: E501


        :return: The test_package of this ParsedTestName.  # noqa: E501
        :rtype: str
        """
        return self._test_package

    @test_package.setter
    def test_package(self, test_package):
        """Sets the test_package of this ParsedTestName.


        :param test_package: The test_package of this ParsedTestName.  # noqa: E501
        :type: str
        """

        self._test_package = test_package

    @property
    def test_suite(self):
        """Gets the test_suite of this ParsedTestName.  # noqa: E501


        :return: The test_suite of this ParsedTestName.  # noqa: E501
        :rtype: str
        """
        return self._test_suite

    @test_suite.setter
    def test_suite(self, test_suite):
        """Sets the test_suite of this ParsedTestName.


        :param test_suite: The test_suite of this ParsedTestName.  # noqa: E501
        :type: str
        """

        self._test_suite = test_suite

    @property
    def test_class(self):
        """Gets the test_class of this ParsedTestName.  # noqa: E501


        :return: The test_class of this ParsedTestName.  # noqa: E501
        :rtype: str
        """
        return self._test_class

    @test_class.setter
    def test_class(self, test_class):
        """Sets the test_class of this ParsedTestName.


        :param test_class: The test_class of this ParsedTestName.  # noqa: E501
        :type: str
        """

        self._test_class = test_class

    @property
    def test_short_name(self):
        """Gets the test_short_name of this ParsedTestName.  # noqa: E501


        :return: The test_short_name of this ParsedTestName.  # noqa: E501
        :rtype: str
        """
        return self._test_short_name

    @test_short_name.setter
    def test_short_name(self, test_short_name):
        """Sets the test_short_name of this ParsedTestName.


        :param test_short_name: The test_short_name of this ParsedTestName.  # noqa: E501
        :type: str
        """

        self._test_short_name = test_short_name

    @property
    def test_name_without_prefix(self):
        """Gets the test_name_without_prefix of this ParsedTestName.  # noqa: E501


        :return: The test_name_without_prefix of this ParsedTestName.  # noqa: E501
        :rtype: str
        """
        return self._test_name_without_prefix

    @test_name_without_prefix.setter
    def test_name_without_prefix(self, test_name_without_prefix):
        """Sets the test_name_without_prefix of this ParsedTestName.


        :param test_name_without_prefix: The test_name_without_prefix of this ParsedTestName.  # noqa: E501
        :type: str
        """

        self._test_name_without_prefix = test_name_without_prefix

    @property
    def test_method_name(self):
        """Gets the test_method_name of this ParsedTestName.  # noqa: E501


        :return: The test_method_name of this ParsedTestName.  # noqa: E501
        :rtype: str
        """
        return self._test_method_name

    @test_method_name.setter
    def test_method_name(self, test_method_name):
        """Sets the test_method_name of this ParsedTestName.


        :param test_method_name: The test_method_name of this ParsedTestName.  # noqa: E501
        :type: str
        """

        self._test_method_name = test_method_name

    @property
    def test_name_with_parameters(self):
        """Gets the test_name_with_parameters of this ParsedTestName.  # noqa: E501


        :return: The test_name_with_parameters of this ParsedTestName.  # noqa: E501
        :rtype: str
        """
        return self._test_name_with_parameters

    @test_name_with_parameters.setter
    def test_name_with_parameters(self, test_name_with_parameters):
        """Sets the test_name_with_parameters of this ParsedTestName.


        :param test_name_with_parameters: The test_name_with_parameters of this ParsedTestName.  # noqa: E501
        :type: str
        """

        self._test_name_with_parameters = test_name_with_parameters
