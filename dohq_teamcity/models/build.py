# coding: utf-8

from dohq_teamcity.custom.base_model import TeamCityObject


# from dohq_teamcity.models.agent import Agent  # noqa: F401,E501
# from dohq_teamcity.models.agents import Agents  # noqa: F401,E501
# from dohq_teamcity.models.approval_info import ApprovalInfo  # noqa: F401,E501
# from dohq_teamcity.models.artifact_dependencies import ArtifactDependencies  # noqa: F401,E501
# from dohq_teamcity.models.build import Build  # noqa: F401,E501
# from dohq_teamcity.models.build_changes import BuildChanges  # noqa: F401,E501
# from dohq_teamcity.models.build_triggering_options import BuildTriggeringOptions  # noqa: F401,E501
# from dohq_teamcity.models.build_type import BuildType  # noqa: F401,E501
# from dohq_teamcity.models.builds import Builds  # noqa: F401,E501
# from dohq_teamcity.models.changes import Changes  # noqa: F401,E501
# from dohq_teamcity.models.cloud_images import CloudImages  # noqa: F401,E501
# from dohq_teamcity.models.comment import Comment  # noqa: F401,E501
# from dohq_teamcity.models.customizations import Customizations  # noqa: F401,E501
# from dohq_teamcity.models.datas import Datas  # noqa: F401,E501
# from dohq_teamcity.models.downloaded_artifacts import DownloadedArtifacts  # noqa: F401,E501
# from dohq_teamcity.models.entries import Entries  # noqa: F401,E501
# from dohq_teamcity.models.files import Files  # noqa: F401,E501
# from dohq_teamcity.models.issues_usages import IssuesUsages  # noqa: F401,E501
# from dohq_teamcity.models.items import Items  # noqa: F401,E501
# from dohq_teamcity.models.links import Links  # noqa: F401,E501
# from dohq_teamcity.models.problem_occurrences import ProblemOccurrences  # noqa: F401,E501
# from dohq_teamcity.models.progress_info import ProgressInfo  # noqa: F401,E501
# from dohq_teamcity.models.properties import Properties  # noqa: F401,E501
# from dohq_teamcity.models.related import Related  # noqa: F401,E501
# from dohq_teamcity.models.revision import Revision  # noqa: F401,E501
# from dohq_teamcity.models.revisions import Revisions  # noqa: F401,E501
# from dohq_teamcity.models.tags import Tags  # noqa: F401,E501
# from dohq_teamcity.models.test_occurrences import TestOccurrences  # noqa: F401,E501
# from dohq_teamcity.models.triggered_by import TriggeredBy  # noqa: F401,E501
# from dohq_teamcity.models.user import User  # noqa: F401,E501
# from dohq_teamcity.models.vcs_label import VcsLabel  # noqa: F401,E501


class Build(TeamCityObject):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'task_id': 'int',
        'build_type_id': 'str',
        'build_type_internal_id': 'str',
        'number': 'str',
        'status': 'str',
        'state': 'str',
        'running': 'bool',
        'composite': 'bool',
        'failed_to_start': 'bool',
        'personal': 'bool',
        'percentage_complete': 'int',
        'branch_name': 'str',
        'default_branch': 'bool',
        'unspecified_branch': 'bool',
        'history': 'bool',
        'pinned': 'bool',
        'href': 'str',
        'web_url': 'str',
        'queue_position': 'int',
        'limited_changes_count': 'int',
        'artifacts_directory': 'str',
        'links': 'Links',
        'status_text': 'str',
        'build_type': 'BuildType',
        'comment': 'Comment',
        'tags': 'Tags',
        'pin_info': 'Comment',
        'user': 'User',
        'start_estimate': 'str',
        'wait_reason': 'str',
        'finish_estimate': 'str',
        'delayed_by_build': 'Build',
        'planned_agent': 'Agent',
        'approval_info': 'ApprovalInfo',
        'running_info': 'ProgressInfo',
        'canceled_info': 'Comment',
        'queued_date': 'str',
        'start_date': 'str',
        'finish_date': 'str',
        'triggered': 'TriggeredBy',
        'last_changes': 'Changes',
        'changes': 'Changes',
        'revisions': 'Revisions',
        'versioned_settings_revision': 'Revision',
        'artifact_dependency_changes': 'BuildChanges',
        'agent': 'Agent',
        'compatible_agents': 'Agents',
        'compatible_cloud_images': 'CloudImages',
        'test_occurrences': 'TestOccurrences',
        'problem_occurrences': 'ProblemOccurrences',
        'artifacts': 'Files',
        'related_issues': 'IssuesUsages',
        'properties': 'Properties',
        'resulting_properties': 'Properties',
        'original_properties': 'Properties',
        'start_properties': 'Properties',
        'attributes': 'Entries',
        'statistics': 'Properties',
        'metadata': 'Datas',
        'snapshot_dependencies': 'Builds',
        'artifact_dependencies': 'Builds',
        'custom_artifact_dependencies': 'ArtifactDependencies',
        'settings_hash': 'str',
        'current_settings_hash': 'str',
        'modification_id': 'str',
        'chain_modification_id': 'str',
        'replacement_ids': 'Items',
        'related': 'Related',
        'triggering_options': 'BuildTriggeringOptions',
        'used_by_other_builds': 'bool',
        'status_change_comment': 'Comment',
        'vcs_labels': 'list[VcsLabel]',
        'detached_from_agent': 'bool',
        'finish_on_agent_date': 'str',
        'customized': 'bool',
        'customization': 'Customizations',
        'changes_collecting_in_progress': 'bool',
        'queued_wait_reasons': 'Properties',
        'downloaded_artifacts': 'DownloadedArtifacts',
        'first_build_with_same_changes': 'Build',
        'locator': 'str'
    }

    attribute_map = {
        'id': 'id',
        'task_id': 'taskId',
        'build_type_id': 'buildTypeId',
        'build_type_internal_id': 'buildTypeInternalId',
        'number': 'number',
        'status': 'status',
        'state': 'state',
        'running': 'running',
        'composite': 'composite',
        'failed_to_start': 'failedToStart',
        'personal': 'personal',
        'percentage_complete': 'percentageComplete',
        'branch_name': 'branchName',
        'default_branch': 'defaultBranch',
        'unspecified_branch': 'unspecifiedBranch',
        'history': 'history',
        'pinned': 'pinned',
        'href': 'href',
        'web_url': 'webUrl',
        'queue_position': 'queuePosition',
        'limited_changes_count': 'limitedChangesCount',
        'artifacts_directory': 'artifactsDirectory',
        'links': 'links',
        'status_text': 'statusText',
        'build_type': 'buildType',
        'comment': 'comment',
        'tags': 'tags',
        'pin_info': 'pinInfo',
        'user': 'user',
        'start_estimate': 'startEstimate',
        'wait_reason': 'waitReason',
        'finish_estimate': 'finishEstimate',
        'delayed_by_build': 'delayedByBuild',
        'planned_agent': 'plannedAgent',
        'approval_info': 'approvalInfo',
        'running_info': 'running-info',
        'canceled_info': 'canceledInfo',
        'queued_date': 'queuedDate',
        'start_date': 'startDate',
        'finish_date': 'finishDate',
        'triggered': 'triggered',
        'last_changes': 'lastChanges',
        'changes': 'changes',
        'revisions': 'revisions',
        'versioned_settings_revision': 'versionedSettingsRevision',
        'artifact_dependency_changes': 'artifactDependencyChanges',
        'agent': 'agent',
        'compatible_agents': 'compatibleAgents',
        'compatible_cloud_images': 'compatibleCloudImages',
        'test_occurrences': 'testOccurrences',
        'problem_occurrences': 'problemOccurrences',
        'artifacts': 'artifacts',
        'related_issues': 'relatedIssues',
        'properties': 'properties',
        'resulting_properties': 'resultingProperties',
        'original_properties': 'originalProperties',
        'start_properties': 'startProperties',
        'attributes': 'attributes',
        'statistics': 'statistics',
        'metadata': 'metadata',
        'snapshot_dependencies': 'snapshot-dependencies',
        'artifact_dependencies': 'artifact-dependencies',
        'custom_artifact_dependencies': 'custom-artifact-dependencies',
        'settings_hash': 'settingsHash',
        'current_settings_hash': 'currentSettingsHash',
        'modification_id': 'modificationId',
        'chain_modification_id': 'chainModificationId',
        'replacement_ids': 'replacementIds',
        'related': 'related',
        'triggering_options': 'triggeringOptions',
        'used_by_other_builds': 'usedByOtherBuilds',
        'status_change_comment': 'statusChangeComment',
        'vcs_labels': 'vcsLabels',
        'detached_from_agent': 'detachedFromAgent',
        'finish_on_agent_date': 'finishOnAgentDate',
        'customized': 'customized',
        'customization': 'customization',
        'changes_collecting_in_progress': 'changesCollectingInProgress',
        'queued_wait_reasons': 'queuedWaitReasons',
        'downloaded_artifacts': 'downloadedArtifacts',
        'first_build_with_same_changes': 'firstBuildWithSameChanges',
        'locator': 'locator'
    }

    def __init__(self, id=None, task_id=None, build_type_id=None, build_type_internal_id=None, number=None, status=None, state=None, running=None, composite=None, failed_to_start=None, personal=None, percentage_complete=None, branch_name=None, default_branch=None, unspecified_branch=None, history=None, pinned=None, href=None, web_url=None, queue_position=None, limited_changes_count=None, artifacts_directory=None, links=None, status_text=None, build_type=None, comment=None, tags=None, pin_info=None, user=None, start_estimate=None, wait_reason=None, finish_estimate=None, delayed_by_build=None, planned_agent=None, approval_info=None, running_info=None, canceled_info=None, queued_date=None, start_date=None, finish_date=None, triggered=None, last_changes=None, changes=None, revisions=None, versioned_settings_revision=None, artifact_dependency_changes=None, agent=None, compatible_agents=None, compatible_cloud_images=None, test_occurrences=None, problem_occurrences=None, artifacts=None, related_issues=None, properties=None, resulting_properties=None, original_properties=None, start_properties=None, attributes=None, statistics=None, metadata=None, snapshot_dependencies=None, artifact_dependencies=None, custom_artifact_dependencies=None, settings_hash=None, current_settings_hash=None, modification_id=None, chain_modification_id=None, replacement_ids=None, related=None, triggering_options=None, used_by_other_builds=None, status_change_comment=None, vcs_labels=None, detached_from_agent=None, finish_on_agent_date=None, customized=None, customization=None, changes_collecting_in_progress=None, queued_wait_reasons=None, downloaded_artifacts=None, first_build_with_same_changes=None, locator=None, teamcity=None):  # noqa: E501
        """Build - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._task_id = None
        self._build_type_id = None
        self._build_type_internal_id = None
        self._number = None
        self._status = None
        self._state = None
        self._running = None
        self._composite = None
        self._failed_to_start = None
        self._personal = None
        self._percentage_complete = None
        self._branch_name = None
        self._default_branch = None
        self._unspecified_branch = None
        self._history = None
        self._pinned = None
        self._href = None
        self._web_url = None
        self._queue_position = None
        self._limited_changes_count = None
        self._artifacts_directory = None
        self._links = None
        self._status_text = None
        self._build_type = None
        self._comment = None
        self._tags = None
        self._pin_info = None
        self._user = None
        self._start_estimate = None
        self._wait_reason = None
        self._finish_estimate = None
        self._delayed_by_build = None
        self._planned_agent = None
        self._approval_info = None
        self._running_info = None
        self._canceled_info = None
        self._queued_date = None
        self._start_date = None
        self._finish_date = None
        self._triggered = None
        self._last_changes = None
        self._changes = None
        self._revisions = None
        self._versioned_settings_revision = None
        self._artifact_dependency_changes = None
        self._agent = None
        self._compatible_agents = None
        self._compatible_cloud_images = None
        self._test_occurrences = None
        self._problem_occurrences = None
        self._artifacts = None
        self._related_issues = None
        self._properties = None
        self._resulting_properties = None
        self._original_properties = None
        self._start_properties = None
        self._attributes = None
        self._statistics = None
        self._metadata = None
        self._snapshot_dependencies = None
        self._artifact_dependencies = None
        self._custom_artifact_dependencies = None
        self._settings_hash = None
        self._current_settings_hash = None
        self._modification_id = None
        self._chain_modification_id = None
        self._replacement_ids = None
        self._related = None
        self._triggering_options = None
        self._used_by_other_builds = None
        self._status_change_comment = None
        self._vcs_labels = None
        self._detached_from_agent = None
        self._finish_on_agent_date = None
        self._customized = None
        self._customization = None
        self._changes_collecting_in_progress = None
        self._queued_wait_reasons = None
        self._downloaded_artifacts = None
        self._first_build_with_same_changes = None
        self._locator = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if task_id is not None:
            self.task_id = task_id
        if build_type_id is not None:
            self.build_type_id = build_type_id
        if build_type_internal_id is not None:
            self.build_type_internal_id = build_type_internal_id
        if number is not None:
            self.number = number
        if status is not None:
            self.status = status
        if state is not None:
            self.state = state
        if running is not None:
            self.running = running
        if composite is not None:
            self.composite = composite
        if failed_to_start is not None:
            self.failed_to_start = failed_to_start
        if personal is not None:
            self.personal = personal
        if percentage_complete is not None:
            self.percentage_complete = percentage_complete
        if branch_name is not None:
            self.branch_name = branch_name
        if default_branch is not None:
            self.default_branch = default_branch
        if unspecified_branch is not None:
            self.unspecified_branch = unspecified_branch
        if history is not None:
            self.history = history
        if pinned is not None:
            self.pinned = pinned
        if href is not None:
            self.href = href
        if web_url is not None:
            self.web_url = web_url
        if queue_position is not None:
            self.queue_position = queue_position
        if limited_changes_count is not None:
            self.limited_changes_count = limited_changes_count
        if artifacts_directory is not None:
            self.artifacts_directory = artifacts_directory
        if links is not None:
            self.links = links
        if status_text is not None:
            self.status_text = status_text
        if build_type is not None:
            self.build_type = build_type
        if comment is not None:
            self.comment = comment
        if tags is not None:
            self.tags = tags
        if pin_info is not None:
            self.pin_info = pin_info
        if user is not None:
            self.user = user
        if start_estimate is not None:
            self.start_estimate = start_estimate
        if wait_reason is not None:
            self.wait_reason = wait_reason
        if finish_estimate is not None:
            self.finish_estimate = finish_estimate
        if delayed_by_build is not None:
            self.delayed_by_build = delayed_by_build
        if planned_agent is not None:
            self.planned_agent = planned_agent
        if approval_info is not None:
            self.approval_info = approval_info
        if running_info is not None:
            self.running_info = running_info
        if canceled_info is not None:
            self.canceled_info = canceled_info
        if queued_date is not None:
            self.queued_date = queued_date
        if start_date is not None:
            self.start_date = start_date
        if finish_date is not None:
            self.finish_date = finish_date
        if triggered is not None:
            self.triggered = triggered
        if last_changes is not None:
            self.last_changes = last_changes
        if changes is not None:
            self.changes = changes
        if revisions is not None:
            self.revisions = revisions
        if versioned_settings_revision is not None:
            self.versioned_settings_revision = versioned_settings_revision
        if artifact_dependency_changes is not None:
            self.artifact_dependency_changes = artifact_dependency_changes
        if agent is not None:
            self.agent = agent
        if compatible_agents is not None:
            self.compatible_agents = compatible_agents
        if compatible_cloud_images is not None:
            self.compatible_cloud_images = compatible_cloud_images
        if test_occurrences is not None:
            self.test_occurrences = test_occurrences
        if problem_occurrences is not None:
            self.problem_occurrences = problem_occurrences
        if artifacts is not None:
            self.artifacts = artifacts
        if related_issues is not None:
            self.related_issues = related_issues
        if properties is not None:
            self.properties = properties
        if resulting_properties is not None:
            self.resulting_properties = resulting_properties
        if original_properties is not None:
            self.original_properties = original_properties
        if start_properties is not None:
            self.start_properties = start_properties
        if attributes is not None:
            self.attributes = attributes
        if statistics is not None:
            self.statistics = statistics
        if metadata is not None:
            self.metadata = metadata
        if snapshot_dependencies is not None:
            self.snapshot_dependencies = snapshot_dependencies
        if artifact_dependencies is not None:
            self.artifact_dependencies = artifact_dependencies
        if custom_artifact_dependencies is not None:
            self.custom_artifact_dependencies = custom_artifact_dependencies
        if settings_hash is not None:
            self.settings_hash = settings_hash
        if current_settings_hash is not None:
            self.current_settings_hash = current_settings_hash
        if modification_id is not None:
            self.modification_id = modification_id
        if chain_modification_id is not None:
            self.chain_modification_id = chain_modification_id
        if replacement_ids is not None:
            self.replacement_ids = replacement_ids
        if related is not None:
            self.related = related
        if triggering_options is not None:
            self.triggering_options = triggering_options
        if used_by_other_builds is not None:
            self.used_by_other_builds = used_by_other_builds
        if status_change_comment is not None:
            self.status_change_comment = status_change_comment
        if vcs_labels is not None:
            self.vcs_labels = vcs_labels
        if detached_from_agent is not None:
            self.detached_from_agent = detached_from_agent
        if finish_on_agent_date is not None:
            self.finish_on_agent_date = finish_on_agent_date
        if customized is not None:
            self.customized = customized
        if customization is not None:
            self.customization = customization
        if changes_collecting_in_progress is not None:
            self.changes_collecting_in_progress = changes_collecting_in_progress
        if queued_wait_reasons is not None:
            self.queued_wait_reasons = queued_wait_reasons
        if downloaded_artifacts is not None:
            self.downloaded_artifacts = downloaded_artifacts
        if first_build_with_same_changes is not None:
            self.first_build_with_same_changes = first_build_with_same_changes
        if locator is not None:
            self.locator = locator
        super(Build, self).__init__(teamcity=teamcity)

    @property
    def id(self):
        """Gets the id of this Build.  # noqa: E501


        :return: The id of this Build.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Build.


        :param id: The id of this Build.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def task_id(self):
        """Gets the task_id of this Build.  # noqa: E501


        :return: The task_id of this Build.  # noqa: E501
        :rtype: int
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id):
        """Sets the task_id of this Build.


        :param task_id: The task_id of this Build.  # noqa: E501
        :type: int
        """

        self._task_id = task_id

    @property
    def build_type_id(self):
        """Gets the build_type_id of this Build.  # noqa: E501


        :return: The build_type_id of this Build.  # noqa: E501
        :rtype: str
        """
        return self._build_type_id

    @build_type_id.setter
    def build_type_id(self, build_type_id):
        """Sets the build_type_id of this Build.


        :param build_type_id: The build_type_id of this Build.  # noqa: E501
        :type: str
        """

        self._build_type_id = build_type_id

    @property
    def build_type_internal_id(self):
        """Gets the build_type_internal_id of this Build.  # noqa: E501


        :return: The build_type_internal_id of this Build.  # noqa: E501
        :rtype: str
        """
        return self._build_type_internal_id

    @build_type_internal_id.setter
    def build_type_internal_id(self, build_type_internal_id):
        """Sets the build_type_internal_id of this Build.


        :param build_type_internal_id: The build_type_internal_id of this Build.  # noqa: E501
        :type: str
        """

        self._build_type_internal_id = build_type_internal_id

    @property
    def number(self):
        """Gets the number of this Build.  # noqa: E501


        :return: The number of this Build.  # noqa: E501
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this Build.


        :param number: The number of this Build.  # noqa: E501
        :type: str
        """

        self._number = number

    @property
    def status(self):
        """Gets the status of this Build.  # noqa: E501


        :return: The status of this Build.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Build.


        :param status: The status of this Build.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def state(self):
        """Gets the state of this Build.  # noqa: E501


        :return: The state of this Build.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Build.


        :param state: The state of this Build.  # noqa: E501
        :type: str
        """
        allowed_values = ["queued", "finished", "running", "deleted", "unknown"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def running(self):
        """Gets the running of this Build.  # noqa: E501


        :return: The running of this Build.  # noqa: E501
        :rtype: bool
        """
        return self._running

    @running.setter
    def running(self, running):
        """Sets the running of this Build.


        :param running: The running of this Build.  # noqa: E501
        :type: bool
        """

        self._running = running

    @property
    def composite(self):
        """Gets the composite of this Build.  # noqa: E501


        :return: The composite of this Build.  # noqa: E501
        :rtype: bool
        """
        return self._composite

    @composite.setter
    def composite(self, composite):
        """Sets the composite of this Build.


        :param composite: The composite of this Build.  # noqa: E501
        :type: bool
        """

        self._composite = composite

    @property
    def failed_to_start(self):
        """Gets the failed_to_start of this Build.  # noqa: E501


        :return: The failed_to_start of this Build.  # noqa: E501
        :rtype: bool
        """
        return self._failed_to_start

    @failed_to_start.setter
    def failed_to_start(self, failed_to_start):
        """Sets the failed_to_start of this Build.


        :param failed_to_start: The failed_to_start of this Build.  # noqa: E501
        :type: bool
        """

        self._failed_to_start = failed_to_start

    @property
    def personal(self):
        """Gets the personal of this Build.  # noqa: E501


        :return: The personal of this Build.  # noqa: E501
        :rtype: bool
        """
        return self._personal

    @personal.setter
    def personal(self, personal):
        """Sets the personal of this Build.


        :param personal: The personal of this Build.  # noqa: E501
        :type: bool
        """

        self._personal = personal

    @property
    def percentage_complete(self):
        """Gets the percentage_complete of this Build.  # noqa: E501


        :return: The percentage_complete of this Build.  # noqa: E501
        :rtype: int
        """
        return self._percentage_complete

    @percentage_complete.setter
    def percentage_complete(self, percentage_complete):
        """Sets the percentage_complete of this Build.


        :param percentage_complete: The percentage_complete of this Build.  # noqa: E501
        :type: int
        """

        self._percentage_complete = percentage_complete

    @property
    def branch_name(self):
        """Gets the branch_name of this Build.  # noqa: E501


        :return: The branch_name of this Build.  # noqa: E501
        :rtype: str
        """
        return self._branch_name

    @branch_name.setter
    def branch_name(self, branch_name):
        """Sets the branch_name of this Build.


        :param branch_name: The branch_name of this Build.  # noqa: E501
        :type: str
        """

        self._branch_name = branch_name

    @property
    def default_branch(self):
        """Gets the default_branch of this Build.  # noqa: E501


        :return: The default_branch of this Build.  # noqa: E501
        :rtype: bool
        """
        return self._default_branch

    @default_branch.setter
    def default_branch(self, default_branch):
        """Sets the default_branch of this Build.


        :param default_branch: The default_branch of this Build.  # noqa: E501
        :type: bool
        """

        self._default_branch = default_branch

    @property
    def unspecified_branch(self):
        """Gets the unspecified_branch of this Build.  # noqa: E501


        :return: The unspecified_branch of this Build.  # noqa: E501
        :rtype: bool
        """
        return self._unspecified_branch

    @unspecified_branch.setter
    def unspecified_branch(self, unspecified_branch):
        """Sets the unspecified_branch of this Build.


        :param unspecified_branch: The unspecified_branch of this Build.  # noqa: E501
        :type: bool
        """

        self._unspecified_branch = unspecified_branch

    @property
    def history(self):
        """Gets the history of this Build.  # noqa: E501


        :return: The history of this Build.  # noqa: E501
        :rtype: bool
        """
        return self._history

    @history.setter
    def history(self, history):
        """Sets the history of this Build.


        :param history: The history of this Build.  # noqa: E501
        :type: bool
        """

        self._history = history

    @property
    def pinned(self):
        """Gets the pinned of this Build.  # noqa: E501


        :return: The pinned of this Build.  # noqa: E501
        :rtype: bool
        """
        return self._pinned

    @pinned.setter
    def pinned(self, pinned):
        """Sets the pinned of this Build.


        :param pinned: The pinned of this Build.  # noqa: E501
        :type: bool
        """

        self._pinned = pinned

    @property
    def href(self):
        """Gets the href of this Build.  # noqa: E501


        :return: The href of this Build.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this Build.


        :param href: The href of this Build.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def web_url(self):
        """Gets the web_url of this Build.  # noqa: E501


        :return: The web_url of this Build.  # noqa: E501
        :rtype: str
        """
        return self._web_url

    @web_url.setter
    def web_url(self, web_url):
        """Sets the web_url of this Build.


        :param web_url: The web_url of this Build.  # noqa: E501
        :type: str
        """

        self._web_url = web_url

    @property
    def queue_position(self):
        """Gets the queue_position of this Build.  # noqa: E501


        :return: The queue_position of this Build.  # noqa: E501
        :rtype: int
        """
        return self._queue_position

    @queue_position.setter
    def queue_position(self, queue_position):
        """Sets the queue_position of this Build.


        :param queue_position: The queue_position of this Build.  # noqa: E501
        :type: int
        """

        self._queue_position = queue_position

    @property
    def limited_changes_count(self):
        """Gets the limited_changes_count of this Build.  # noqa: E501


        :return: The limited_changes_count of this Build.  # noqa: E501
        :rtype: int
        """
        return self._limited_changes_count

    @limited_changes_count.setter
    def limited_changes_count(self, limited_changes_count):
        """Sets the limited_changes_count of this Build.


        :param limited_changes_count: The limited_changes_count of this Build.  # noqa: E501
        :type: int
        """

        self._limited_changes_count = limited_changes_count

    @property
    def artifacts_directory(self):
        """Gets the artifacts_directory of this Build.  # noqa: E501


        :return: The artifacts_directory of this Build.  # noqa: E501
        :rtype: str
        """
        return self._artifacts_directory

    @artifacts_directory.setter
    def artifacts_directory(self, artifacts_directory):
        """Sets the artifacts_directory of this Build.


        :param artifacts_directory: The artifacts_directory of this Build.  # noqa: E501
        :type: str
        """

        self._artifacts_directory = artifacts_directory

    @property
    def links(self):
        """Gets the links of this Build.  # noqa: E501


        :return: The links of this Build.  # noqa: E501
        :rtype: Links
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Build.


        :param links: The links of this Build.  # noqa: E501
        :type: Links
        """

        self._links = links

    @property
    def status_text(self):
        """Gets the status_text of this Build.  # noqa: E501


        :return: The status_text of this Build.  # noqa: E501
        :rtype: str
        """
        return self._status_text

    @status_text.setter
    def status_text(self, status_text):
        """Sets the status_text of this Build.


        :param status_text: The status_text of this Build.  # noqa: E501
        :type: str
        """

        self._status_text = status_text

    @property
    def build_type(self):
        """Gets the build_type of this Build.  # noqa: E501


        :return: The build_type of this Build.  # noqa: E501
        :rtype: BuildType
        """
        return self._build_type

    @build_type.setter
    def build_type(self, build_type):
        """Sets the build_type of this Build.


        :param build_type: The build_type of this Build.  # noqa: E501
        :type: BuildType
        """

        self._build_type = build_type

    @property
    def comment(self):
        """Gets the comment of this Build.  # noqa: E501


        :return: The comment of this Build.  # noqa: E501
        :rtype: Comment
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this Build.


        :param comment: The comment of this Build.  # noqa: E501
        :type: Comment
        """

        self._comment = comment

    @property
    def tags(self):
        """Gets the tags of this Build.  # noqa: E501


        :return: The tags of this Build.  # noqa: E501
        :rtype: Tags
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Build.


        :param tags: The tags of this Build.  # noqa: E501
        :type: Tags
        """

        self._tags = tags

    @property
    def pin_info(self):
        """Gets the pin_info of this Build.  # noqa: E501


        :return: The pin_info of this Build.  # noqa: E501
        :rtype: Comment
        """
        return self._pin_info

    @pin_info.setter
    def pin_info(self, pin_info):
        """Sets the pin_info of this Build.


        :param pin_info: The pin_info of this Build.  # noqa: E501
        :type: Comment
        """

        self._pin_info = pin_info

    @property
    def user(self):
        """Gets the user of this Build.  # noqa: E501


        :return: The user of this Build.  # noqa: E501
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Build.


        :param user: The user of this Build.  # noqa: E501
        :type: User
        """

        self._user = user

    @property
    def start_estimate(self):
        """Gets the start_estimate of this Build.  # noqa: E501


        :return: The start_estimate of this Build.  # noqa: E501
        :rtype: str
        """
        return self._start_estimate

    @start_estimate.setter
    def start_estimate(self, start_estimate):
        """Sets the start_estimate of this Build.


        :param start_estimate: The start_estimate of this Build.  # noqa: E501
        :type: str
        """

        self._start_estimate = start_estimate

    @property
    def wait_reason(self):
        """Gets the wait_reason of this Build.  # noqa: E501


        :return: The wait_reason of this Build.  # noqa: E501
        :rtype: str
        """
        return self._wait_reason

    @wait_reason.setter
    def wait_reason(self, wait_reason):
        """Sets the wait_reason of this Build.


        :param wait_reason: The wait_reason of this Build.  # noqa: E501
        :type: str
        """

        self._wait_reason = wait_reason

    @property
    def finish_estimate(self):
        """Gets the finish_estimate of this Build.  # noqa: E501


        :return: The finish_estimate of this Build.  # noqa: E501
        :rtype: str
        """
        return self._finish_estimate

    @finish_estimate.setter
    def finish_estimate(self, finish_estimate):
        """Sets the finish_estimate of this Build.


        :param finish_estimate: The finish_estimate of this Build.  # noqa: E501
        :type: str
        """

        self._finish_estimate = finish_estimate

    @property
    def delayed_by_build(self):
        """Gets the delayed_by_build of this Build.  # noqa: E501


        :return: The delayed_by_build of this Build.  # noqa: E501
        :rtype: Build
        """
        return self._delayed_by_build

    @delayed_by_build.setter
    def delayed_by_build(self, delayed_by_build):
        """Sets the delayed_by_build of this Build.


        :param delayed_by_build: The delayed_by_build of this Build.  # noqa: E501
        :type: Build
        """

        self._delayed_by_build = delayed_by_build

    @property
    def planned_agent(self):
        """Gets the planned_agent of this Build.  # noqa: E501


        :return: The planned_agent of this Build.  # noqa: E501
        :rtype: Agent
        """
        return self._planned_agent

    @planned_agent.setter
    def planned_agent(self, planned_agent):
        """Sets the planned_agent of this Build.


        :param planned_agent: The planned_agent of this Build.  # noqa: E501
        :type: Agent
        """

        self._planned_agent = planned_agent

    @property
    def approval_info(self):
        """Gets the approval_info of this Build.  # noqa: E501


        :return: The approval_info of this Build.  # noqa: E501
        :rtype: ApprovalInfo
        """
        return self._approval_info

    @approval_info.setter
    def approval_info(self, approval_info):
        """Sets the approval_info of this Build.


        :param approval_info: The approval_info of this Build.  # noqa: E501
        :type: ApprovalInfo
        """

        self._approval_info = approval_info

    @property
    def running_info(self):
        """Gets the running_info of this Build.  # noqa: E501


        :return: The running_info of this Build.  # noqa: E501
        :rtype: ProgressInfo
        """
        return self._running_info

    @running_info.setter
    def running_info(self, running_info):
        """Sets the running_info of this Build.


        :param running_info: The running_info of this Build.  # noqa: E501
        :type: ProgressInfo
        """

        self._running_info = running_info

    @property
    def canceled_info(self):
        """Gets the canceled_info of this Build.  # noqa: E501


        :return: The canceled_info of this Build.  # noqa: E501
        :rtype: Comment
        """
        return self._canceled_info

    @canceled_info.setter
    def canceled_info(self, canceled_info):
        """Sets the canceled_info of this Build.


        :param canceled_info: The canceled_info of this Build.  # noqa: E501
        :type: Comment
        """

        self._canceled_info = canceled_info

    @property
    def queued_date(self):
        """Gets the queued_date of this Build.  # noqa: E501


        :return: The queued_date of this Build.  # noqa: E501
        :rtype: str
        """
        return self._queued_date

    @queued_date.setter
    def queued_date(self, queued_date):
        """Sets the queued_date of this Build.


        :param queued_date: The queued_date of this Build.  # noqa: E501
        :type: str
        """

        self._queued_date = queued_date

    @property
    def start_date(self):
        """Gets the start_date of this Build.  # noqa: E501


        :return: The start_date of this Build.  # noqa: E501
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this Build.


        :param start_date: The start_date of this Build.  # noqa: E501
        :type: str
        """

        self._start_date = start_date

    @property
    def finish_date(self):
        """Gets the finish_date of this Build.  # noqa: E501


        :return: The finish_date of this Build.  # noqa: E501
        :rtype: str
        """
        return self._finish_date

    @finish_date.setter
    def finish_date(self, finish_date):
        """Sets the finish_date of this Build.


        :param finish_date: The finish_date of this Build.  # noqa: E501
        :type: str
        """

        self._finish_date = finish_date

    @property
    def triggered(self):
        """Gets the triggered of this Build.  # noqa: E501


        :return: The triggered of this Build.  # noqa: E501
        :rtype: TriggeredBy
        """
        return self._triggered

    @triggered.setter
    def triggered(self, triggered):
        """Sets the triggered of this Build.


        :param triggered: The triggered of this Build.  # noqa: E501
        :type: TriggeredBy
        """

        self._triggered = triggered

    @property
    def last_changes(self):
        """Gets the last_changes of this Build.  # noqa: E501


        :return: The last_changes of this Build.  # noqa: E501
        :rtype: Changes
        """
        return self._last_changes

    @last_changes.setter
    def last_changes(self, last_changes):
        """Sets the last_changes of this Build.


        :param last_changes: The last_changes of this Build.  # noqa: E501
        :type: Changes
        """

        self._last_changes = last_changes

    @property
    def changes(self):
        """Gets the changes of this Build.  # noqa: E501


        :return: The changes of this Build.  # noqa: E501
        :rtype: Changes
        """
        return self._changes

    @changes.setter
    def changes(self, changes):
        """Sets the changes of this Build.


        :param changes: The changes of this Build.  # noqa: E501
        :type: Changes
        """

        self._changes = changes

    @property
    def revisions(self):
        """Gets the revisions of this Build.  # noqa: E501


        :return: The revisions of this Build.  # noqa: E501
        :rtype: Revisions
        """
        return self._revisions

    @revisions.setter
    def revisions(self, revisions):
        """Sets the revisions of this Build.


        :param revisions: The revisions of this Build.  # noqa: E501
        :type: Revisions
        """

        self._revisions = revisions

    @property
    def versioned_settings_revision(self):
        """Gets the versioned_settings_revision of this Build.  # noqa: E501


        :return: The versioned_settings_revision of this Build.  # noqa: E501
        :rtype: Revision
        """
        return self._versioned_settings_revision

    @versioned_settings_revision.setter
    def versioned_settings_revision(self, versioned_settings_revision):
        """Sets the versioned_settings_revision of this Build.


        :param versioned_settings_revision: The versioned_settings_revision of this Build.  # noqa: E501
        :type: Revision
        """

        self._versioned_settings_revision = versioned_settings_revision

    @property
    def artifact_dependency_changes(self):
        """Gets the artifact_dependency_changes of this Build.  # noqa: E501


        :return: The artifact_dependency_changes of this Build.  # noqa: E501
        :rtype: BuildChanges
        """
        return self._artifact_dependency_changes

    @artifact_dependency_changes.setter
    def artifact_dependency_changes(self, artifact_dependency_changes):
        """Sets the artifact_dependency_changes of this Build.


        :param artifact_dependency_changes: The artifact_dependency_changes of this Build.  # noqa: E501
        :type: BuildChanges
        """

        self._artifact_dependency_changes = artifact_dependency_changes

    @property
    def agent(self):
        """Gets the agent of this Build.  # noqa: E501


        :return: The agent of this Build.  # noqa: E501
        :rtype: Agent
        """
        return self._agent

    @agent.setter
    def agent(self, agent):
        """Sets the agent of this Build.


        :param agent: The agent of this Build.  # noqa: E501
        :type: Agent
        """

        self._agent = agent

    @property
    def compatible_agents(self):
        """Gets the compatible_agents of this Build.  # noqa: E501


        :return: The compatible_agents of this Build.  # noqa: E501
        :rtype: Agents
        """
        return self._compatible_agents

    @compatible_agents.setter
    def compatible_agents(self, compatible_agents):
        """Sets the compatible_agents of this Build.


        :param compatible_agents: The compatible_agents of this Build.  # noqa: E501
        :type: Agents
        """

        self._compatible_agents = compatible_agents

    @property
    def compatible_cloud_images(self):
        """Gets the compatible_cloud_images of this Build.  # noqa: E501


        :return: The compatible_cloud_images of this Build.  # noqa: E501
        :rtype: CloudImages
        """
        return self._compatible_cloud_images

    @compatible_cloud_images.setter
    def compatible_cloud_images(self, compatible_cloud_images):
        """Sets the compatible_cloud_images of this Build.


        :param compatible_cloud_images: The compatible_cloud_images of this Build.  # noqa: E501
        :type: CloudImages
        """

        self._compatible_cloud_images = compatible_cloud_images

    @property
    def test_occurrences(self):
        """Gets the test_occurrences of this Build.  # noqa: E501


        :return: The test_occurrences of this Build.  # noqa: E501
        :rtype: TestOccurrences
        """
        return self._test_occurrences

    @test_occurrences.setter
    def test_occurrences(self, test_occurrences):
        """Sets the test_occurrences of this Build.


        :param test_occurrences: The test_occurrences of this Build.  # noqa: E501
        :type: TestOccurrences
        """

        self._test_occurrences = test_occurrences

    @property
    def problem_occurrences(self):
        """Gets the problem_occurrences of this Build.  # noqa: E501


        :return: The problem_occurrences of this Build.  # noqa: E501
        :rtype: ProblemOccurrences
        """
        return self._problem_occurrences

    @problem_occurrences.setter
    def problem_occurrences(self, problem_occurrences):
        """Sets the problem_occurrences of this Build.


        :param problem_occurrences: The problem_occurrences of this Build.  # noqa: E501
        :type: ProblemOccurrences
        """

        self._problem_occurrences = problem_occurrences

    @property
    def artifacts(self):
        """Gets the artifacts of this Build.  # noqa: E501


        :return: The artifacts of this Build.  # noqa: E501
        :rtype: Files
        """
        return self._artifacts

    @artifacts.setter
    def artifacts(self, artifacts):
        """Sets the artifacts of this Build.


        :param artifacts: The artifacts of this Build.  # noqa: E501
        :type: Files
        """

        self._artifacts = artifacts

    @property
    def related_issues(self):
        """Gets the related_issues of this Build.  # noqa: E501


        :return: The related_issues of this Build.  # noqa: E501
        :rtype: IssuesUsages
        """
        return self._related_issues

    @related_issues.setter
    def related_issues(self, related_issues):
        """Sets the related_issues of this Build.


        :param related_issues: The related_issues of this Build.  # noqa: E501
        :type: IssuesUsages
        """

        self._related_issues = related_issues

    @property
    def properties(self):
        """Gets the properties of this Build.  # noqa: E501

        Parameters defined by users. Includes parameters added in custom builds. See \"originalProperties\" for more information.  # noqa: E501

        :return: The properties of this Build.  # noqa: E501
        :rtype: Properties
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this Build.

        Parameters defined by users. Includes parameters added in custom builds. See \"originalProperties\" for more information.  # noqa: E501

        :param properties: The properties of this Build.  # noqa: E501
        :type: Properties
        """

        self._properties = properties

    @property
    def resulting_properties(self):
        """Gets the resulting_properties of this Build.  # noqa: E501

        Actual parameters reported by a build agent after a build finishes. To get the initial parameters reported when a build started, use \"startProperties\" instead.  # noqa: E501

        :return: The resulting_properties of this Build.  # noqa: E501
        :rtype: Properties
        """
        return self._resulting_properties

    @resulting_properties.setter
    def resulting_properties(self, resulting_properties):
        """Sets the resulting_properties of this Build.

        Actual parameters reported by a build agent after a build finishes. To get the initial parameters reported when a build started, use \"startProperties\" instead.  # noqa: E501

        :param resulting_properties: The resulting_properties of this Build.  # noqa: E501
        :type: Properties
        """

        self._resulting_properties = resulting_properties

    @property
    def original_properties(self):
        """Gets the original_properties of this Build.  # noqa: E501

        User-defined parameters from the build configuration (\"BuildType\" in REST API). See \"properties\" for more information.  # noqa: E501

        :return: The original_properties of this Build.  # noqa: E501
        :rtype: Properties
        """
        return self._original_properties

    @original_properties.setter
    def original_properties(self, original_properties):
        """Sets the original_properties of this Build.

        User-defined parameters from the build configuration (\"BuildType\" in REST API). See \"properties\" for more information.  # noqa: E501

        :param original_properties: The original_properties of this Build.  # noqa: E501
        :type: Properties
        """

        self._original_properties = original_properties

    @property
    def start_properties(self):
        """Gets the start_properties of this Build.  # noqa: E501

        Actual parameters reported by a build agent when a build starts. To get the final parameters reported when a build finishes, use \"resultingProperties\" instead.  # noqa: E501

        :return: The start_properties of this Build.  # noqa: E501
        :rtype: Properties
        """
        return self._start_properties

    @start_properties.setter
    def start_properties(self, start_properties):
        """Sets the start_properties of this Build.

        Actual parameters reported by a build agent when a build starts. To get the final parameters reported when a build finishes, use \"resultingProperties\" instead.  # noqa: E501

        :param start_properties: The start_properties of this Build.  # noqa: E501
        :type: Properties
        """

        self._start_properties = start_properties

    @property
    def attributes(self):
        """Gets the attributes of this Build.  # noqa: E501


        :return: The attributes of this Build.  # noqa: E501
        :rtype: Entries
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this Build.


        :param attributes: The attributes of this Build.  # noqa: E501
        :type: Entries
        """

        self._attributes = attributes

    @property
    def statistics(self):
        """Gets the statistics of this Build.  # noqa: E501


        :return: The statistics of this Build.  # noqa: E501
        :rtype: Properties
        """
        return self._statistics

    @statistics.setter
    def statistics(self, statistics):
        """Sets the statistics of this Build.


        :param statistics: The statistics of this Build.  # noqa: E501
        :type: Properties
        """

        self._statistics = statistics

    @property
    def metadata(self):
        """Gets the metadata of this Build.  # noqa: E501


        :return: The metadata of this Build.  # noqa: E501
        :rtype: Datas
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Build.


        :param metadata: The metadata of this Build.  # noqa: E501
        :type: Datas
        """

        self._metadata = metadata

    @property
    def snapshot_dependencies(self):
        """Gets the snapshot_dependencies of this Build.  # noqa: E501


        :return: The snapshot_dependencies of this Build.  # noqa: E501
        :rtype: Builds
        """
        return self._snapshot_dependencies

    @snapshot_dependencies.setter
    def snapshot_dependencies(self, snapshot_dependencies):
        """Sets the snapshot_dependencies of this Build.


        :param snapshot_dependencies: The snapshot_dependencies of this Build.  # noqa: E501
        :type: Builds
        """

        self._snapshot_dependencies = snapshot_dependencies

    @property
    def artifact_dependencies(self):
        """Gets the artifact_dependencies of this Build.  # noqa: E501


        :return: The artifact_dependencies of this Build.  # noqa: E501
        :rtype: Builds
        """
        return self._artifact_dependencies

    @artifact_dependencies.setter
    def artifact_dependencies(self, artifact_dependencies):
        """Sets the artifact_dependencies of this Build.


        :param artifact_dependencies: The artifact_dependencies of this Build.  # noqa: E501
        :type: Builds
        """

        self._artifact_dependencies = artifact_dependencies

    @property
    def custom_artifact_dependencies(self):
        """Gets the custom_artifact_dependencies of this Build.  # noqa: E501


        :return: The custom_artifact_dependencies of this Build.  # noqa: E501
        :rtype: ArtifactDependencies
        """
        return self._custom_artifact_dependencies

    @custom_artifact_dependencies.setter
    def custom_artifact_dependencies(self, custom_artifact_dependencies):
        """Sets the custom_artifact_dependencies of this Build.


        :param custom_artifact_dependencies: The custom_artifact_dependencies of this Build.  # noqa: E501
        :type: ArtifactDependencies
        """

        self._custom_artifact_dependencies = custom_artifact_dependencies

    @property
    def settings_hash(self):
        """Gets the settings_hash of this Build.  # noqa: E501


        :return: The settings_hash of this Build.  # noqa: E501
        :rtype: str
        """
        return self._settings_hash

    @settings_hash.setter
    def settings_hash(self, settings_hash):
        """Sets the settings_hash of this Build.


        :param settings_hash: The settings_hash of this Build.  # noqa: E501
        :type: str
        """

        self._settings_hash = settings_hash

    @property
    def current_settings_hash(self):
        """Gets the current_settings_hash of this Build.  # noqa: E501


        :return: The current_settings_hash of this Build.  # noqa: E501
        :rtype: str
        """
        return self._current_settings_hash

    @current_settings_hash.setter
    def current_settings_hash(self, current_settings_hash):
        """Sets the current_settings_hash of this Build.


        :param current_settings_hash: The current_settings_hash of this Build.  # noqa: E501
        :type: str
        """

        self._current_settings_hash = current_settings_hash

    @property
    def modification_id(self):
        """Gets the modification_id of this Build.  # noqa: E501


        :return: The modification_id of this Build.  # noqa: E501
        :rtype: str
        """
        return self._modification_id

    @modification_id.setter
    def modification_id(self, modification_id):
        """Sets the modification_id of this Build.


        :param modification_id: The modification_id of this Build.  # noqa: E501
        :type: str
        """

        self._modification_id = modification_id

    @property
    def chain_modification_id(self):
        """Gets the chain_modification_id of this Build.  # noqa: E501


        :return: The chain_modification_id of this Build.  # noqa: E501
        :rtype: str
        """
        return self._chain_modification_id

    @chain_modification_id.setter
    def chain_modification_id(self, chain_modification_id):
        """Sets the chain_modification_id of this Build.


        :param chain_modification_id: The chain_modification_id of this Build.  # noqa: E501
        :type: str
        """

        self._chain_modification_id = chain_modification_id

    @property
    def replacement_ids(self):
        """Gets the replacement_ids of this Build.  # noqa: E501


        :return: The replacement_ids of this Build.  # noqa: E501
        :rtype: Items
        """
        return self._replacement_ids

    @replacement_ids.setter
    def replacement_ids(self, replacement_ids):
        """Sets the replacement_ids of this Build.


        :param replacement_ids: The replacement_ids of this Build.  # noqa: E501
        :type: Items
        """

        self._replacement_ids = replacement_ids

    @property
    def related(self):
        """Gets the related of this Build.  # noqa: E501


        :return: The related of this Build.  # noqa: E501
        :rtype: Related
        """
        return self._related

    @related.setter
    def related(self, related):
        """Sets the related of this Build.


        :param related: The related of this Build.  # noqa: E501
        :type: Related
        """

        self._related = related

    @property
    def triggering_options(self):
        """Gets the triggering_options of this Build.  # noqa: E501


        :return: The triggering_options of this Build.  # noqa: E501
        :rtype: BuildTriggeringOptions
        """
        return self._triggering_options

    @triggering_options.setter
    def triggering_options(self, triggering_options):
        """Sets the triggering_options of this Build.


        :param triggering_options: The triggering_options of this Build.  # noqa: E501
        :type: BuildTriggeringOptions
        """

        self._triggering_options = triggering_options

    @property
    def used_by_other_builds(self):
        """Gets the used_by_other_builds of this Build.  # noqa: E501


        :return: The used_by_other_builds of this Build.  # noqa: E501
        :rtype: bool
        """
        return self._used_by_other_builds

    @used_by_other_builds.setter
    def used_by_other_builds(self, used_by_other_builds):
        """Sets the used_by_other_builds of this Build.


        :param used_by_other_builds: The used_by_other_builds of this Build.  # noqa: E501
        :type: bool
        """

        self._used_by_other_builds = used_by_other_builds

    @property
    def status_change_comment(self):
        """Gets the status_change_comment of this Build.  # noqa: E501


        :return: The status_change_comment of this Build.  # noqa: E501
        :rtype: Comment
        """
        return self._status_change_comment

    @status_change_comment.setter
    def status_change_comment(self, status_change_comment):
        """Sets the status_change_comment of this Build.


        :param status_change_comment: The status_change_comment of this Build.  # noqa: E501
        :type: Comment
        """

        self._status_change_comment = status_change_comment

    @property
    def vcs_labels(self):
        """Gets the vcs_labels of this Build.  # noqa: E501


        :return: The vcs_labels of this Build.  # noqa: E501
        :rtype: list[VcsLabel]
        """
        return self._vcs_labels

    @vcs_labels.setter
    def vcs_labels(self, vcs_labels):
        """Sets the vcs_labels of this Build.


        :param vcs_labels: The vcs_labels of this Build.  # noqa: E501
        :type: list[VcsLabel]
        """

        self._vcs_labels = vcs_labels

    @property
    def detached_from_agent(self):
        """Gets the detached_from_agent of this Build.  # noqa: E501


        :return: The detached_from_agent of this Build.  # noqa: E501
        :rtype: bool
        """
        return self._detached_from_agent

    @detached_from_agent.setter
    def detached_from_agent(self, detached_from_agent):
        """Sets the detached_from_agent of this Build.


        :param detached_from_agent: The detached_from_agent of this Build.  # noqa: E501
        :type: bool
        """

        self._detached_from_agent = detached_from_agent

    @property
    def finish_on_agent_date(self):
        """Gets the finish_on_agent_date of this Build.  # noqa: E501


        :return: The finish_on_agent_date of this Build.  # noqa: E501
        :rtype: str
        """
        return self._finish_on_agent_date

    @finish_on_agent_date.setter
    def finish_on_agent_date(self, finish_on_agent_date):
        """Sets the finish_on_agent_date of this Build.


        :param finish_on_agent_date: The finish_on_agent_date of this Build.  # noqa: E501
        :type: str
        """

        self._finish_on_agent_date = finish_on_agent_date

    @property
    def customized(self):
        """Gets the customized of this Build.  # noqa: E501


        :return: The customized of this Build.  # noqa: E501
        :rtype: bool
        """
        return self._customized

    @customized.setter
    def customized(self, customized):
        """Sets the customized of this Build.


        :param customized: The customized of this Build.  # noqa: E501
        :type: bool
        """

        self._customized = customized

    @property
    def customization(self):
        """Gets the customization of this Build.  # noqa: E501


        :return: The customization of this Build.  # noqa: E501
        :rtype: Customizations
        """
        return self._customization

    @customization.setter
    def customization(self, customization):
        """Sets the customization of this Build.


        :param customization: The customization of this Build.  # noqa: E501
        :type: Customizations
        """

        self._customization = customization

    @property
    def changes_collecting_in_progress(self):
        """Gets the changes_collecting_in_progress of this Build.  # noqa: E501


        :return: The changes_collecting_in_progress of this Build.  # noqa: E501
        :rtype: bool
        """
        return self._changes_collecting_in_progress

    @changes_collecting_in_progress.setter
    def changes_collecting_in_progress(self, changes_collecting_in_progress):
        """Sets the changes_collecting_in_progress of this Build.


        :param changes_collecting_in_progress: The changes_collecting_in_progress of this Build.  # noqa: E501
        :type: bool
        """

        self._changes_collecting_in_progress = changes_collecting_in_progress

    @property
    def queued_wait_reasons(self):
        """Gets the queued_wait_reasons of this Build.  # noqa: E501


        :return: The queued_wait_reasons of this Build.  # noqa: E501
        :rtype: Properties
        """
        return self._queued_wait_reasons

    @queued_wait_reasons.setter
    def queued_wait_reasons(self, queued_wait_reasons):
        """Sets the queued_wait_reasons of this Build.


        :param queued_wait_reasons: The queued_wait_reasons of this Build.  # noqa: E501
        :type: Properties
        """

        self._queued_wait_reasons = queued_wait_reasons

    @property
    def downloaded_artifacts(self):
        """Gets the downloaded_artifacts of this Build.  # noqa: E501


        :return: The downloaded_artifacts of this Build.  # noqa: E501
        :rtype: DownloadedArtifacts
        """
        return self._downloaded_artifacts

    @downloaded_artifacts.setter
    def downloaded_artifacts(self, downloaded_artifacts):
        """Sets the downloaded_artifacts of this Build.


        :param downloaded_artifacts: The downloaded_artifacts of this Build.  # noqa: E501
        :type: DownloadedArtifacts
        """

        self._downloaded_artifacts = downloaded_artifacts

    @property
    def first_build_with_same_changes(self):
        """Gets the first_build_with_same_changes of this Build.  # noqa: E501


        :return: The first_build_with_same_changes of this Build.  # noqa: E501
        :rtype: Build
        """
        return self._first_build_with_same_changes

    @first_build_with_same_changes.setter
    def first_build_with_same_changes(self, first_build_with_same_changes):
        """Sets the first_build_with_same_changes of this Build.


        :param first_build_with_same_changes: The first_build_with_same_changes of this Build.  # noqa: E501
        :type: Build
        """

        self._first_build_with_same_changes = first_build_with_same_changes

    @property
    def locator(self):
        """Gets the locator of this Build.  # noqa: E501


        :return: The locator of this Build.  # noqa: E501
        :rtype: str
        """
        return self._locator

    @locator.setter
    def locator(self, locator):
        """Sets the locator of this Build.


        :param locator: The locator of this Build.  # noqa: E501
        :type: str
        """

        self._locator = locator
