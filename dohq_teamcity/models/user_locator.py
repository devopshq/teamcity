# coding: utf-8

from dohq_teamcity.custom.base_model import TeamCityObject


class UserLocator(TeamCityObject):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'affected_group': 'str',
        'current': 'str',
        'email': 'str',
        'group': 'str',
        'id': 'str',
        'item': 'str',
        'last_login': 'datetime',
        'name': 'str',
        '_property': 'str',
        'role': 'str',
        'username': 'str'
    }

    attribute_map = {
        'affected_group': 'affectedGroup',
        'current': 'current',
        'email': 'email',
        'group': 'group',
        'id': 'id',
        'item': 'item',
        'last_login': 'lastLogin',
        'name': 'name',
        '_property': 'property',
        'role': 'role',
        'username': 'username'
    }

    def __init__(self, affected_group=None, current=None, email=None, group=None, id=None, item=None, last_login=None, name=None, _property=None, role=None, username=None, teamcity=None):  # noqa: E501
        """UserLocator - a model defined in Swagger"""  # noqa: E501

        self._affected_group = None
        self._current = None
        self._email = None
        self._group = None
        self._id = None
        self._item = None
        self._last_login = None
        self._name = None
        self.__property = None
        self._role = None
        self._username = None
        self.discriminator = None

        if affected_group is not None:
            self.affected_group = affected_group
        if current is not None:
            self.current = current
        if email is not None:
            self.email = email
        if group is not None:
            self.group = group
        if id is not None:
            self.id = id
        if item is not None:
            self.item = item
        if last_login is not None:
            self.last_login = last_login
        if name is not None:
            self.name = name
        if _property is not None:
            self._property = _property
        if role is not None:
            self.role = role
        if username is not None:
            self.username = username
        super(UserLocator, self).__init__(teamcity=teamcity)

    @property
    def affected_group(self):
        """Gets the affected_group of this UserLocator.  # noqa: E501

        User group (direct or indirect parent) locator.  # noqa: E501

        :return: The affected_group of this UserLocator.  # noqa: E501
        :rtype: str
        """
        return self._affected_group

    @affected_group.setter
    def affected_group(self, affected_group):
        """Sets the affected_group of this UserLocator.

        User group (direct or indirect parent) locator.  # noqa: E501

        :param affected_group: The affected_group of this UserLocator.  # noqa: E501
        :type: str
        """

        self._affected_group = affected_group

    @property
    def current(self):
        """Gets the current of this UserLocator.  # noqa: E501

        Return user that has issued this request.  # noqa: E501

        :return: The current of this UserLocator.  # noqa: E501
        :rtype: str
        """
        return self._current

    @current.setter
    def current(self, current):
        """Sets the current of this UserLocator.

        Return user that has issued this request.  # noqa: E501

        :param current: The current of this UserLocator.  # noqa: E501
        :type: str
        """

        self._current = current

    @property
    def email(self):
        """Gets the email of this UserLocator.  # noqa: E501


        :return: The email of this UserLocator.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserLocator.


        :param email: The email of this UserLocator.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def group(self):
        """Gets the group of this UserLocator.  # noqa: E501

        User group (direct parent) locator.  # noqa: E501

        :return: The group of this UserLocator.  # noqa: E501
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this UserLocator.

        User group (direct parent) locator.  # noqa: E501

        :param group: The group of this UserLocator.  # noqa: E501
        :type: str
        """

        self._group = group

    @property
    def id(self):
        """Gets the id of this UserLocator.  # noqa: E501


        :return: The id of this UserLocator.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserLocator.


        :param id: The id of this UserLocator.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def item(self):
        """Gets the item of this UserLocator.  # noqa: E501

        Supply multiple locators and return a union of the results.  # noqa: E501

        :return: The item of this UserLocator.  # noqa: E501
        :rtype: str
        """
        return self._item

    @item.setter
    def item(self, item):
        """Sets the item of this UserLocator.

        Supply multiple locators and return a union of the results.  # noqa: E501

        :param item: The item of this UserLocator.  # noqa: E501
        :type: str
        """

        self._item = item

    @property
    def last_login(self):
        """Gets the last_login of this UserLocator.  # noqa: E501


        :return: The last_login of this UserLocator.  # noqa: E501
        :rtype: datetime
        """
        return self._last_login

    @last_login.setter
    def last_login(self, last_login):
        """Sets the last_login of this UserLocator.


        :param last_login: The last_login of this UserLocator.  # noqa: E501
        :type: datetime
        """

        self._last_login = last_login

    @property
    def name(self):
        """Gets the name of this UserLocator.  # noqa: E501


        :return: The name of this UserLocator.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UserLocator.


        :param name: The name of this UserLocator.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def _property(self):
        """Gets the _property of this UserLocator.  # noqa: E501


        :return: The _property of this UserLocator.  # noqa: E501
        :rtype: str
        """
        return self.__property

    @_property.setter
    def _property(self, _property):
        """Sets the _property of this UserLocator.


        :param _property: The _property of this UserLocator.  # noqa: E501
        :type: str
        """
        allowed_values = ["exists", "not-exists", "equals", "does-not-equal", "starts-with", "contains", "does-not-contain", "ends-with", "any", "matches", "does-not-match", "more-than", "no-more-than", "less-than", "no-less-than", "ver-more-than", "ver-no-more-than", "ver-less-than", "ver-no-less-than"]  # noqa: E501
        if _property not in allowed_values:
            raise ValueError(
                "Invalid value for `_property` ({0}), must be one of {1}"  # noqa: E501
                .format(_property, allowed_values)
            )

        self.__property = _property

    @property
    def role(self):
        """Gets the role of this UserLocator.  # noqa: E501

        Role locator.  # noqa: E501

        :return: The role of this UserLocator.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this UserLocator.

        Role locator.  # noqa: E501

        :param role: The role of this UserLocator.  # noqa: E501
        :type: str
        """

        self._role = role

    @property
    def username(self):
        """Gets the username of this UserLocator.  # noqa: E501


        :return: The username of this UserLocator.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this UserLocator.


        :param username: The username of this UserLocator.  # noqa: E501
        :type: str
        """

        self._username = username
