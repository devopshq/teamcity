# coding: utf-8

from dohq_teamcity.custom.base_model import TeamCityObject


# from dohq_teamcity.models.cron import Cron  # noqa: F401,E501
# from dohq_teamcity.models.daily import Daily  # noqa: F401,E501


class Cleanup(TeamCityObject):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'enabled': 'bool',
        'max_cleanup_duration': 'int',
        'daily': 'Daily',
        'cron': 'Cron'
    }

    attribute_map = {
        'enabled': 'enabled',
        'max_cleanup_duration': 'maxCleanupDuration',
        'daily': 'daily',
        'cron': 'cron'
    }

    def __init__(self, enabled=None, max_cleanup_duration=None, daily=None, cron=None, teamcity=None):  # noqa: E501
        """Cleanup - a model defined in Swagger"""  # noqa: E501

        self._enabled = None
        self._max_cleanup_duration = None
        self._daily = None
        self._cron = None
        self.discriminator = None

        if enabled is not None:
            self.enabled = enabled
        if max_cleanup_duration is not None:
            self.max_cleanup_duration = max_cleanup_duration
        if daily is not None:
            self.daily = daily
        if cron is not None:
            self.cron = cron
        super(Cleanup, self).__init__(teamcity=teamcity)

    @property
    def enabled(self):
        """Gets the enabled of this Cleanup.  # noqa: E501


        :return: The enabled of this Cleanup.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this Cleanup.


        :param enabled: The enabled of this Cleanup.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def max_cleanup_duration(self):
        """Gets the max_cleanup_duration of this Cleanup.  # noqa: E501


        :return: The max_cleanup_duration of this Cleanup.  # noqa: E501
        :rtype: int
        """
        return self._max_cleanup_duration

    @max_cleanup_duration.setter
    def max_cleanup_duration(self, max_cleanup_duration):
        """Sets the max_cleanup_duration of this Cleanup.


        :param max_cleanup_duration: The max_cleanup_duration of this Cleanup.  # noqa: E501
        :type: int
        """

        self._max_cleanup_duration = max_cleanup_duration

    @property
    def daily(self):
        """Gets the daily of this Cleanup.  # noqa: E501


        :return: The daily of this Cleanup.  # noqa: E501
        :rtype: Daily
        """
        return self._daily

    @daily.setter
    def daily(self, daily):
        """Sets the daily of this Cleanup.


        :param daily: The daily of this Cleanup.  # noqa: E501
        :type: Daily
        """

        self._daily = daily

    @property
    def cron(self):
        """Gets the cron of this Cleanup.  # noqa: E501


        :return: The cron of this Cleanup.  # noqa: E501
        :rtype: Cron
        """
        return self._cron

    @cron.setter
    def cron(self, cron):
        """Sets the cron of this Cleanup.


        :param cron: The cron of this Cleanup.  # noqa: E501
        :type: Cron
        """

        self._cron = cron
