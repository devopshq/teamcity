# coding: utf-8

from dohq_teamcity.custom.base_model import TeamCityObject


class BuildTypeLocator(TeamCityObject):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'affected_project': 'str',
        'build': 'str',
        'count': 'int',
        'id': 'str',
        'internal_id': 'str',
        'item': 'str',
        'name': 'str',
        'paused': 'bool',
        'project': 'str',
        'start': 'int',
        'template': 'str',
        'template_flag': 'bool',
        'uuid': 'str',
        'vcs_root': 'str',
        'vcs_root_instance': 'str'
    }

    attribute_map = {
        'affected_project': 'affectedProject',
        'build': 'build',
        'count': 'count',
        'id': 'id',
        'internal_id': 'internalId',
        'item': 'item',
        'name': 'name',
        'paused': 'paused',
        'project': 'project',
        'start': 'start',
        'template': 'template',
        'template_flag': 'templateFlag',
        'uuid': 'uuid',
        'vcs_root': 'vcsRoot',
        'vcs_root_instance': 'vcsRootInstance'
    }

    def __init__(self, affected_project=None, build=None, count=None, id=None, internal_id=None, item=None, name=None, paused=None, project=None, start=None, template=None, template_flag=None, uuid=None, vcs_root=None, vcs_root_instance=None, teamcity=None):  # noqa: E501
        """BuildTypeLocator - a model defined in Swagger"""  # noqa: E501

        self._affected_project = None
        self._build = None
        self._count = None
        self._id = None
        self._internal_id = None
        self._item = None
        self._name = None
        self._paused = None
        self._project = None
        self._start = None
        self._template = None
        self._template_flag = None
        self._uuid = None
        self._vcs_root = None
        self._vcs_root_instance = None
        self.discriminator = None

        if affected_project is not None:
            self.affected_project = affected_project
        if build is not None:
            self.build = build
        if count is not None:
            self.count = count
        if id is not None:
            self.id = id
        if internal_id is not None:
            self.internal_id = internal_id
        if item is not None:
            self.item = item
        if name is not None:
            self.name = name
        if paused is not None:
            self.paused = paused
        if project is not None:
            self.project = project
        if start is not None:
            self.start = start
        if template is not None:
            self.template = template
        if template_flag is not None:
            self.template_flag = template_flag
        if uuid is not None:
            self.uuid = uuid
        if vcs_root is not None:
            self.vcs_root = vcs_root
        if vcs_root_instance is not None:
            self.vcs_root_instance = vcs_root_instance
        super(BuildTypeLocator, self).__init__(teamcity=teamcity)

    @property
    def affected_project(self):
        """Gets the affected_project of this BuildTypeLocator.  # noqa: E501

        Project (direct or indirect parent) locator.  # noqa: E501

        :return: The affected_project of this BuildTypeLocator.  # noqa: E501
        :rtype: str
        """
        return self._affected_project

    @affected_project.setter
    def affected_project(self, affected_project):
        """Sets the affected_project of this BuildTypeLocator.

        Project (direct or indirect parent) locator.  # noqa: E501

        :param affected_project: The affected_project of this BuildTypeLocator.  # noqa: E501
        :type: str
        """

        self._affected_project = affected_project

    @property
    def build(self):
        """Gets the build of this BuildTypeLocator.  # noqa: E501

        Build locator.  # noqa: E501

        :return: The build of this BuildTypeLocator.  # noqa: E501
        :rtype: str
        """
        return self._build

    @build.setter
    def build(self, build):
        """Sets the build of this BuildTypeLocator.

        Build locator.  # noqa: E501

        :param build: The build of this BuildTypeLocator.  # noqa: E501
        :type: str
        """

        self._build = build

    @property
    def count(self):
        """Gets the count of this BuildTypeLocator.  # noqa: E501

        For paginated calls, how many entities to return per page.  # noqa: E501

        :return: The count of this BuildTypeLocator.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this BuildTypeLocator.

        For paginated calls, how many entities to return per page.  # noqa: E501

        :param count: The count of this BuildTypeLocator.  # noqa: E501
        :type: int
        """

        self._count = count

    @property
    def id(self):
        """Gets the id of this BuildTypeLocator.  # noqa: E501


        :return: The id of this BuildTypeLocator.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BuildTypeLocator.


        :param id: The id of this BuildTypeLocator.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def internal_id(self):
        """Gets the internal_id of this BuildTypeLocator.  # noqa: E501


        :return: The internal_id of this BuildTypeLocator.  # noqa: E501
        :rtype: str
        """
        return self._internal_id

    @internal_id.setter
    def internal_id(self, internal_id):
        """Sets the internal_id of this BuildTypeLocator.


        :param internal_id: The internal_id of this BuildTypeLocator.  # noqa: E501
        :type: str
        """

        self._internal_id = internal_id

    @property
    def item(self):
        """Gets the item of this BuildTypeLocator.  # noqa: E501

        Supply multiple locators and return a union of the results.  # noqa: E501

        :return: The item of this BuildTypeLocator.  # noqa: E501
        :rtype: str
        """
        return self._item

    @item.setter
    def item(self, item):
        """Sets the item of this BuildTypeLocator.

        Supply multiple locators and return a union of the results.  # noqa: E501

        :param item: The item of this BuildTypeLocator.  # noqa: E501
        :type: str
        """

        self._item = item

    @property
    def name(self):
        """Gets the name of this BuildTypeLocator.  # noqa: E501


        :return: The name of this BuildTypeLocator.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BuildTypeLocator.


        :param name: The name of this BuildTypeLocator.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def paused(self):
        """Gets the paused of this BuildTypeLocator.  # noqa: E501

        Is paused.  # noqa: E501

        :return: The paused of this BuildTypeLocator.  # noqa: E501
        :rtype: bool
        """
        return self._paused

    @paused.setter
    def paused(self, paused):
        """Sets the paused of this BuildTypeLocator.

        Is paused.  # noqa: E501

        :param paused: The paused of this BuildTypeLocator.  # noqa: E501
        :type: bool
        """

        self._paused = paused

    @property
    def project(self):
        """Gets the project of this BuildTypeLocator.  # noqa: E501

        Project (direct parent) locator.  # noqa: E501

        :return: The project of this BuildTypeLocator.  # noqa: E501
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this BuildTypeLocator.

        Project (direct parent) locator.  # noqa: E501

        :param project: The project of this BuildTypeLocator.  # noqa: E501
        :type: str
        """

        self._project = project

    @property
    def start(self):
        """Gets the start of this BuildTypeLocator.  # noqa: E501

        For paginated calls, from which entity to start rendering the page.  # noqa: E501

        :return: The start of this BuildTypeLocator.  # noqa: E501
        :rtype: int
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this BuildTypeLocator.

        For paginated calls, from which entity to start rendering the page.  # noqa: E501

        :param start: The start of this BuildTypeLocator.  # noqa: E501
        :type: int
        """

        self._start = start

    @property
    def template(self):
        """Gets the template of this BuildTypeLocator.  # noqa: E501

        Base template locator.  # noqa: E501

        :return: The template of this BuildTypeLocator.  # noqa: E501
        :rtype: str
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this BuildTypeLocator.

        Base template locator.  # noqa: E501

        :param template: The template of this BuildTypeLocator.  # noqa: E501
        :type: str
        """

        self._template = template

    @property
    def template_flag(self):
        """Gets the template_flag of this BuildTypeLocator.  # noqa: E501

        Is a template.  # noqa: E501

        :return: The template_flag of this BuildTypeLocator.  # noqa: E501
        :rtype: bool
        """
        return self._template_flag

    @template_flag.setter
    def template_flag(self, template_flag):
        """Sets the template_flag of this BuildTypeLocator.

        Is a template.  # noqa: E501

        :param template_flag: The template_flag of this BuildTypeLocator.  # noqa: E501
        :type: bool
        """

        self._template_flag = template_flag

    @property
    def uuid(self):
        """Gets the uuid of this BuildTypeLocator.  # noqa: E501


        :return: The uuid of this BuildTypeLocator.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this BuildTypeLocator.


        :param uuid: The uuid of this BuildTypeLocator.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def vcs_root(self):
        """Gets the vcs_root of this BuildTypeLocator.  # noqa: E501

        VCS root locator.  # noqa: E501

        :return: The vcs_root of this BuildTypeLocator.  # noqa: E501
        :rtype: str
        """
        return self._vcs_root

    @vcs_root.setter
    def vcs_root(self, vcs_root):
        """Sets the vcs_root of this BuildTypeLocator.

        VCS root locator.  # noqa: E501

        :param vcs_root: The vcs_root of this BuildTypeLocator.  # noqa: E501
        :type: str
        """

        self._vcs_root = vcs_root

    @property
    def vcs_root_instance(self):
        """Gets the vcs_root_instance of this BuildTypeLocator.  # noqa: E501

        VCS root instance locator.  # noqa: E501

        :return: The vcs_root_instance of this BuildTypeLocator.  # noqa: E501
        :rtype: str
        """
        return self._vcs_root_instance

    @vcs_root_instance.setter
    def vcs_root_instance(self, vcs_root_instance):
        """Sets the vcs_root_instance of this BuildTypeLocator.

        VCS root instance locator.  # noqa: E501

        :param vcs_root_instance: The vcs_root_instance of this BuildTypeLocator.  # noqa: E501
        :type: str
        """

        self._vcs_root_instance = vcs_root_instance
