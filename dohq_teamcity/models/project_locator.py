# coding: utf-8

from dohq_teamcity.custom.base_model import TeamCityObject


class ProjectLocator(TeamCityObject):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'affected_project': 'str',
        'archived': 'bool',
        'build': 'str',
        'build_type': 'str',
        'count': 'int',
        'default_template': 'str',
        'id': 'str',
        'internal_id': 'str',
        'item': 'str',
        'name': 'str',
        'pool': 'str',
        'project': 'str',
        'project_feature': 'str',
        'start': 'int',
        'uuid': 'str',
        'vcs_root': 'str',
        'virtual': 'bool'
    }

    attribute_map = {
        'affected_project': 'affectedProject',
        'archived': 'archived',
        'build': 'build',
        'build_type': 'buildType',
        'count': 'count',
        'default_template': 'defaultTemplate',
        'id': 'id',
        'internal_id': 'internalId',
        'item': 'item',
        'name': 'name',
        'pool': 'pool',
        'project': 'project',
        'project_feature': 'projectFeature',
        'start': 'start',
        'uuid': 'uuid',
        'vcs_root': 'vcsRoot',
        'virtual': 'virtual'
    }

    def __init__(self, affected_project=None, archived=None, build=None, build_type=None, count=None, default_template=None, id=None, internal_id=None, item=None, name=None, pool=None, project=None, project_feature=None, start=None, uuid=None, vcs_root=None, virtual=None, teamcity=None):  # noqa: E501
        """ProjectLocator - a model defined in Swagger"""  # noqa: E501

        self._affected_project = None
        self._archived = None
        self._build = None
        self._build_type = None
        self._count = None
        self._default_template = None
        self._id = None
        self._internal_id = None
        self._item = None
        self._name = None
        self._pool = None
        self._project = None
        self._project_feature = None
        self._start = None
        self._uuid = None
        self._vcs_root = None
        self._virtual = None
        self.discriminator = None

        if affected_project is not None:
            self.affected_project = affected_project
        if archived is not None:
            self.archived = archived
        if build is not None:
            self.build = build
        if build_type is not None:
            self.build_type = build_type
        if count is not None:
            self.count = count
        if default_template is not None:
            self.default_template = default_template
        if id is not None:
            self.id = id
        if internal_id is not None:
            self.internal_id = internal_id
        if item is not None:
            self.item = item
        if name is not None:
            self.name = name
        if pool is not None:
            self.pool = pool
        if project is not None:
            self.project = project
        if project_feature is not None:
            self.project_feature = project_feature
        if start is not None:
            self.start = start
        if uuid is not None:
            self.uuid = uuid
        if vcs_root is not None:
            self.vcs_root = vcs_root
        if virtual is not None:
            self.virtual = virtual
        super(ProjectLocator, self).__init__(teamcity=teamcity)

    @property
    def affected_project(self):
        """Gets the affected_project of this ProjectLocator.  # noqa: E501

        Project (direct or indirect parent) locator.  # noqa: E501

        :return: The affected_project of this ProjectLocator.  # noqa: E501
        :rtype: str
        """
        return self._affected_project

    @affected_project.setter
    def affected_project(self, affected_project):
        """Sets the affected_project of this ProjectLocator.

        Project (direct or indirect parent) locator.  # noqa: E501

        :param affected_project: The affected_project of this ProjectLocator.  # noqa: E501
        :type: str
        """

        self._affected_project = affected_project

    @property
    def archived(self):
        """Gets the archived of this ProjectLocator.  # noqa: E501

        Is archived.  # noqa: E501

        :return: The archived of this ProjectLocator.  # noqa: E501
        :rtype: bool
        """
        return self._archived

    @archived.setter
    def archived(self, archived):
        """Sets the archived of this ProjectLocator.

        Is archived.  # noqa: E501

        :param archived: The archived of this ProjectLocator.  # noqa: E501
        :type: bool
        """

        self._archived = archived

    @property
    def build(self):
        """Gets the build of this ProjectLocator.  # noqa: E501

        Build locator.  # noqa: E501

        :return: The build of this ProjectLocator.  # noqa: E501
        :rtype: str
        """
        return self._build

    @build.setter
    def build(self, build):
        """Sets the build of this ProjectLocator.

        Build locator.  # noqa: E501

        :param build: The build of this ProjectLocator.  # noqa: E501
        :type: str
        """

        self._build = build

    @property
    def build_type(self):
        """Gets the build_type of this ProjectLocator.  # noqa: E501

        Build type locator.  # noqa: E501

        :return: The build_type of this ProjectLocator.  # noqa: E501
        :rtype: str
        """
        return self._build_type

    @build_type.setter
    def build_type(self, build_type):
        """Sets the build_type of this ProjectLocator.

        Build type locator.  # noqa: E501

        :param build_type: The build_type of this ProjectLocator.  # noqa: E501
        :type: str
        """

        self._build_type = build_type

    @property
    def count(self):
        """Gets the count of this ProjectLocator.  # noqa: E501

        For paginated calls, how many entities to return per page.  # noqa: E501

        :return: The count of this ProjectLocator.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this ProjectLocator.

        For paginated calls, how many entities to return per page.  # noqa: E501

        :param count: The count of this ProjectLocator.  # noqa: E501
        :type: int
        """

        self._count = count

    @property
    def default_template(self):
        """Gets the default_template of this ProjectLocator.  # noqa: E501

        Default template locator.  # noqa: E501

        :return: The default_template of this ProjectLocator.  # noqa: E501
        :rtype: str
        """
        return self._default_template

    @default_template.setter
    def default_template(self, default_template):
        """Sets the default_template of this ProjectLocator.

        Default template locator.  # noqa: E501

        :param default_template: The default_template of this ProjectLocator.  # noqa: E501
        :type: str
        """

        self._default_template = default_template

    @property
    def id(self):
        """Gets the id of this ProjectLocator.  # noqa: E501


        :return: The id of this ProjectLocator.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProjectLocator.


        :param id: The id of this ProjectLocator.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def internal_id(self):
        """Gets the internal_id of this ProjectLocator.  # noqa: E501


        :return: The internal_id of this ProjectLocator.  # noqa: E501
        :rtype: str
        """
        return self._internal_id

    @internal_id.setter
    def internal_id(self, internal_id):
        """Sets the internal_id of this ProjectLocator.


        :param internal_id: The internal_id of this ProjectLocator.  # noqa: E501
        :type: str
        """

        self._internal_id = internal_id

    @property
    def item(self):
        """Gets the item of this ProjectLocator.  # noqa: E501

        Supply multiple locators and return a union of the results.  # noqa: E501

        :return: The item of this ProjectLocator.  # noqa: E501
        :rtype: str
        """
        return self._item

    @item.setter
    def item(self, item):
        """Sets the item of this ProjectLocator.

        Supply multiple locators and return a union of the results.  # noqa: E501

        :param item: The item of this ProjectLocator.  # noqa: E501
        :type: str
        """

        self._item = item

    @property
    def name(self):
        """Gets the name of this ProjectLocator.  # noqa: E501


        :return: The name of this ProjectLocator.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProjectLocator.


        :param name: The name of this ProjectLocator.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def pool(self):
        """Gets the pool of this ProjectLocator.  # noqa: E501

        Associated agent pool locator.  # noqa: E501

        :return: The pool of this ProjectLocator.  # noqa: E501
        :rtype: str
        """
        return self._pool

    @pool.setter
    def pool(self, pool):
        """Sets the pool of this ProjectLocator.

        Associated agent pool locator.  # noqa: E501

        :param pool: The pool of this ProjectLocator.  # noqa: E501
        :type: str
        """

        self._pool = pool

    @property
    def project(self):
        """Gets the project of this ProjectLocator.  # noqa: E501

        Project (direct parent) locator.  # noqa: E501

        :return: The project of this ProjectLocator.  # noqa: E501
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this ProjectLocator.

        Project (direct parent) locator.  # noqa: E501

        :param project: The project of this ProjectLocator.  # noqa: E501
        :type: str
        """

        self._project = project

    @property
    def project_feature(self):
        """Gets the project_feature of this ProjectLocator.  # noqa: E501

        Project feature locator.  # noqa: E501

        :return: The project_feature of this ProjectLocator.  # noqa: E501
        :rtype: str
        """
        return self._project_feature

    @project_feature.setter
    def project_feature(self, project_feature):
        """Sets the project_feature of this ProjectLocator.

        Project feature locator.  # noqa: E501

        :param project_feature: The project_feature of this ProjectLocator.  # noqa: E501
        :type: str
        """

        self._project_feature = project_feature

    @property
    def start(self):
        """Gets the start of this ProjectLocator.  # noqa: E501

        For paginated calls, from which entity to start rendering the page.  # noqa: E501

        :return: The start of this ProjectLocator.  # noqa: E501
        :rtype: int
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this ProjectLocator.

        For paginated calls, from which entity to start rendering the page.  # noqa: E501

        :param start: The start of this ProjectLocator.  # noqa: E501
        :type: int
        """

        self._start = start

    @property
    def uuid(self):
        """Gets the uuid of this ProjectLocator.  # noqa: E501


        :return: The uuid of this ProjectLocator.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this ProjectLocator.


        :param uuid: The uuid of this ProjectLocator.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def vcs_root(self):
        """Gets the vcs_root of this ProjectLocator.  # noqa: E501

        VCS root locator.  # noqa: E501

        :return: The vcs_root of this ProjectLocator.  # noqa: E501
        :rtype: str
        """
        return self._vcs_root

    @vcs_root.setter
    def vcs_root(self, vcs_root):
        """Sets the vcs_root of this ProjectLocator.

        VCS root locator.  # noqa: E501

        :param vcs_root: The vcs_root of this ProjectLocator.  # noqa: E501
        :type: str
        """

        self._vcs_root = vcs_root

    @property
    def virtual(self):
        """Gets the virtual of this ProjectLocator.  # noqa: E501

        Is virtual (default=false).  # noqa: E501

        :return: The virtual of this ProjectLocator.  # noqa: E501
        :rtype: bool
        """
        return self._virtual

    @virtual.setter
    def virtual(self, virtual):
        """Sets the virtual of this ProjectLocator.

        Is virtual (default=false).  # noqa: E501

        :param virtual: The virtual of this ProjectLocator.  # noqa: E501
        :type: bool
        """

        self._virtual = virtual
