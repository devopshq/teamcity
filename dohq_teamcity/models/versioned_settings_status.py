# coding: utf-8

from dohq_teamcity.custom.base_model import TeamCityObject


# from dohq_teamcity.models.versioned_settings_error import VersionedSettingsError  # noqa: F401,E501


class VersionedSettingsStatus(TeamCityObject):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'missing_context_parameters': 'list[str]',
        'dsl_outdated': 'bool',
        'timestamp': 'str',
        'versioned_settings_error': 'list[VersionedSettingsError]',
        'message': 'str',
        'type': 'str'
    }

    attribute_map = {
        'missing_context_parameters': 'missingContextParameters',
        'dsl_outdated': 'dslOutdated',
        'timestamp': 'timestamp',
        'versioned_settings_error': 'versionedSettingsError',
        'message': 'message',
        'type': 'type'
    }

    def __init__(self, missing_context_parameters=None, dsl_outdated=None, timestamp=None, versioned_settings_error=None, message=None, type=None, teamcity=None):  # noqa: E501
        """VersionedSettingsStatus - a model defined in Swagger"""  # noqa: E501

        self._missing_context_parameters = None
        self._dsl_outdated = None
        self._timestamp = None
        self._versioned_settings_error = None
        self._message = None
        self._type = None
        self.discriminator = None

        if missing_context_parameters is not None:
            self.missing_context_parameters = missing_context_parameters
        if dsl_outdated is not None:
            self.dsl_outdated = dsl_outdated
        if timestamp is not None:
            self.timestamp = timestamp
        if versioned_settings_error is not None:
            self.versioned_settings_error = versioned_settings_error
        if message is not None:
            self.message = message
        if type is not None:
            self.type = type
        super(VersionedSettingsStatus, self).__init__(teamcity=teamcity)

    @property
    def missing_context_parameters(self):
        """Gets the missing_context_parameters of this VersionedSettingsStatus.  # noqa: E501


        :return: The missing_context_parameters of this VersionedSettingsStatus.  # noqa: E501
        :rtype: list[str]
        """
        return self._missing_context_parameters

    @missing_context_parameters.setter
    def missing_context_parameters(self, missing_context_parameters):
        """Sets the missing_context_parameters of this VersionedSettingsStatus.


        :param missing_context_parameters: The missing_context_parameters of this VersionedSettingsStatus.  # noqa: E501
        :type: list[str]
        """

        self._missing_context_parameters = missing_context_parameters

    @property
    def dsl_outdated(self):
        """Gets the dsl_outdated of this VersionedSettingsStatus.  # noqa: E501


        :return: The dsl_outdated of this VersionedSettingsStatus.  # noqa: E501
        :rtype: bool
        """
        return self._dsl_outdated

    @dsl_outdated.setter
    def dsl_outdated(self, dsl_outdated):
        """Sets the dsl_outdated of this VersionedSettingsStatus.


        :param dsl_outdated: The dsl_outdated of this VersionedSettingsStatus.  # noqa: E501
        :type: bool
        """

        self._dsl_outdated = dsl_outdated

    @property
    def timestamp(self):
        """Gets the timestamp of this VersionedSettingsStatus.  # noqa: E501


        :return: The timestamp of this VersionedSettingsStatus.  # noqa: E501
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this VersionedSettingsStatus.


        :param timestamp: The timestamp of this VersionedSettingsStatus.  # noqa: E501
        :type: str
        """

        self._timestamp = timestamp

    @property
    def versioned_settings_error(self):
        """Gets the versioned_settings_error of this VersionedSettingsStatus.  # noqa: E501


        :return: The versioned_settings_error of this VersionedSettingsStatus.  # noqa: E501
        :rtype: list[VersionedSettingsError]
        """
        return self._versioned_settings_error

    @versioned_settings_error.setter
    def versioned_settings_error(self, versioned_settings_error):
        """Sets the versioned_settings_error of this VersionedSettingsStatus.


        :param versioned_settings_error: The versioned_settings_error of this VersionedSettingsStatus.  # noqa: E501
        :type: list[VersionedSettingsError]
        """

        self._versioned_settings_error = versioned_settings_error

    @property
    def message(self):
        """Gets the message of this VersionedSettingsStatus.  # noqa: E501


        :return: The message of this VersionedSettingsStatus.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this VersionedSettingsStatus.


        :param message: The message of this VersionedSettingsStatus.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def type(self):
        """Gets the type of this VersionedSettingsStatus.  # noqa: E501


        :return: The type of this VersionedSettingsStatus.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this VersionedSettingsStatus.


        :param type: The type of this VersionedSettingsStatus.  # noqa: E501
        :type: str
        """
        allowed_values = ["info", "warn"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type
