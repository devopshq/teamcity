# coding: utf-8

from dohq_teamcity.custom.base_model import TeamCityObject


class ChangeLocator(TeamCityObject):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'affected_project': 'str',
        'build': 'str',
        'build_type': 'str',
        'comment': 'str',
        'count': 'int',
        'file': 'str',
        'id': 'str',
        'internal_version': 'str',
        'item': 'str',
        'pending': 'bool',
        'project': 'str',
        'since_change': 'str',
        'start': 'int',
        'user': 'str',
        'username': 'str',
        'vcs_root': 'str',
        'vcs_root_instance': 'str',
        'version': 'str'
    }

    attribute_map = {
        'affected_project': 'affectedProject',
        'build': 'build',
        'build_type': 'buildType',
        'comment': 'comment',
        'count': 'count',
        'file': 'file',
        'id': 'id',
        'internal_version': 'internalVersion',
        'item': 'item',
        'pending': 'pending',
        'project': 'project',
        'since_change': 'sinceChange',
        'start': 'start',
        'user': 'user',
        'username': 'username',
        'vcs_root': 'vcsRoot',
        'vcs_root_instance': 'vcsRootInstance',
        'version': 'version'
    }

    def __init__(self, affected_project=None, build=None, build_type=None, comment=None, count=None, file=None, id=None, internal_version=None, item=None, pending=None, project=None, since_change=None, start=None, user=None, username=None, vcs_root=None, vcs_root_instance=None, version=None, teamcity=None):  # noqa: E501
        """ChangeLocator - a model defined in Swagger"""  # noqa: E501

        self._affected_project = None
        self._build = None
        self._build_type = None
        self._comment = None
        self._count = None
        self._file = None
        self._id = None
        self._internal_version = None
        self._item = None
        self._pending = None
        self._project = None
        self._since_change = None
        self._start = None
        self._user = None
        self._username = None
        self._vcs_root = None
        self._vcs_root_instance = None
        self._version = None
        self.discriminator = None

        if affected_project is not None:
            self.affected_project = affected_project
        if build is not None:
            self.build = build
        if build_type is not None:
            self.build_type = build_type
        if comment is not None:
            self.comment = comment
        if count is not None:
            self.count = count
        if file is not None:
            self.file = file
        if id is not None:
            self.id = id
        if internal_version is not None:
            self.internal_version = internal_version
        if item is not None:
            self.item = item
        if pending is not None:
            self.pending = pending
        if project is not None:
            self.project = project
        if since_change is not None:
            self.since_change = since_change
        if start is not None:
            self.start = start
        if user is not None:
            self.user = user
        if username is not None:
            self.username = username
        if vcs_root is not None:
            self.vcs_root = vcs_root
        if vcs_root_instance is not None:
            self.vcs_root_instance = vcs_root_instance
        if version is not None:
            self.version = version
        super(ChangeLocator, self).__init__(teamcity=teamcity)

    @property
    def affected_project(self):
        """Gets the affected_project of this ChangeLocator.  # noqa: E501

        Project (direct or indirect parent) locator.  # noqa: E501

        :return: The affected_project of this ChangeLocator.  # noqa: E501
        :rtype: str
        """
        return self._affected_project

    @affected_project.setter
    def affected_project(self, affected_project):
        """Sets the affected_project of this ChangeLocator.

        Project (direct or indirect parent) locator.  # noqa: E501

        :param affected_project: The affected_project of this ChangeLocator.  # noqa: E501
        :type: str
        """

        self._affected_project = affected_project

    @property
    def build(self):
        """Gets the build of this ChangeLocator.  # noqa: E501

        Build locator.  # noqa: E501

        :return: The build of this ChangeLocator.  # noqa: E501
        :rtype: str
        """
        return self._build

    @build.setter
    def build(self, build):
        """Sets the build of this ChangeLocator.

        Build locator.  # noqa: E501

        :param build: The build of this ChangeLocator.  # noqa: E501
        :type: str
        """

        self._build = build

    @property
    def build_type(self):
        """Gets the build_type of this ChangeLocator.  # noqa: E501

        Build type locator.  # noqa: E501

        :return: The build_type of this ChangeLocator.  # noqa: E501
        :rtype: str
        """
        return self._build_type

    @build_type.setter
    def build_type(self, build_type):
        """Sets the build_type of this ChangeLocator.

        Build type locator.  # noqa: E501

        :param build_type: The build_type of this ChangeLocator.  # noqa: E501
        :type: str
        """

        self._build_type = build_type

    @property
    def comment(self):
        """Gets the comment of this ChangeLocator.  # noqa: E501


        :return: The comment of this ChangeLocator.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this ChangeLocator.


        :param comment: The comment of this ChangeLocator.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def count(self):
        """Gets the count of this ChangeLocator.  # noqa: E501

        For paginated calls, how many entities to return per page.  # noqa: E501

        :return: The count of this ChangeLocator.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this ChangeLocator.

        For paginated calls, how many entities to return per page.  # noqa: E501

        :param count: The count of this ChangeLocator.  # noqa: E501
        :type: int
        """

        self._count = count

    @property
    def file(self):
        """Gets the file of this ChangeLocator.  # noqa: E501


        :return: The file of this ChangeLocator.  # noqa: E501
        :rtype: str
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this ChangeLocator.


        :param file: The file of this ChangeLocator.  # noqa: E501
        :type: str
        """

        self._file = file

    @property
    def id(self):
        """Gets the id of this ChangeLocator.  # noqa: E501

        Entity ID.  # noqa: E501

        :return: The id of this ChangeLocator.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ChangeLocator.

        Entity ID.  # noqa: E501

        :param id: The id of this ChangeLocator.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def internal_version(self):
        """Gets the internal_version of this ChangeLocator.  # noqa: E501

        Commit SHA.  # noqa: E501

        :return: The internal_version of this ChangeLocator.  # noqa: E501
        :rtype: str
        """
        return self._internal_version

    @internal_version.setter
    def internal_version(self, internal_version):
        """Sets the internal_version of this ChangeLocator.

        Commit SHA.  # noqa: E501

        :param internal_version: The internal_version of this ChangeLocator.  # noqa: E501
        :type: str
        """

        self._internal_version = internal_version

    @property
    def item(self):
        """Gets the item of this ChangeLocator.  # noqa: E501

        Supply multiple locators and return a union of the results.  # noqa: E501

        :return: The item of this ChangeLocator.  # noqa: E501
        :rtype: str
        """
        return self._item

    @item.setter
    def item(self, item):
        """Sets the item of this ChangeLocator.

        Supply multiple locators and return a union of the results.  # noqa: E501

        :param item: The item of this ChangeLocator.  # noqa: E501
        :type: str
        """

        self._item = item

    @property
    def pending(self):
        """Gets the pending of this ChangeLocator.  # noqa: E501

        Is pending.  # noqa: E501

        :return: The pending of this ChangeLocator.  # noqa: E501
        :rtype: bool
        """
        return self._pending

    @pending.setter
    def pending(self, pending):
        """Sets the pending of this ChangeLocator.

        Is pending.  # noqa: E501

        :param pending: The pending of this ChangeLocator.  # noqa: E501
        :type: bool
        """

        self._pending = pending

    @property
    def project(self):
        """Gets the project of this ChangeLocator.  # noqa: E501

        Project locator.  # noqa: E501

        :return: The project of this ChangeLocator.  # noqa: E501
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this ChangeLocator.

        Project locator.  # noqa: E501

        :param project: The project of this ChangeLocator.  # noqa: E501
        :type: str
        """

        self._project = project

    @property
    def since_change(self):
        """Gets the since_change of this ChangeLocator.  # noqa: E501

        Commit SHA since which the changes should be returned.  # noqa: E501

        :return: The since_change of this ChangeLocator.  # noqa: E501
        :rtype: str
        """
        return self._since_change

    @since_change.setter
    def since_change(self, since_change):
        """Sets the since_change of this ChangeLocator.

        Commit SHA since which the changes should be returned.  # noqa: E501

        :param since_change: The since_change of this ChangeLocator.  # noqa: E501
        :type: str
        """

        self._since_change = since_change

    @property
    def start(self):
        """Gets the start of this ChangeLocator.  # noqa: E501

        For paginated calls, from which entity to start rendering the page.  # noqa: E501

        :return: The start of this ChangeLocator.  # noqa: E501
        :rtype: int
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this ChangeLocator.

        For paginated calls, from which entity to start rendering the page.  # noqa: E501

        :param start: The start of this ChangeLocator.  # noqa: E501
        :type: int
        """

        self._start = start

    @property
    def user(self):
        """Gets the user of this ChangeLocator.  # noqa: E501

        User locator.  # noqa: E501

        :return: The user of this ChangeLocator.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this ChangeLocator.

        User locator.  # noqa: E501

        :param user: The user of this ChangeLocator.  # noqa: E501
        :type: str
        """

        self._user = user

    @property
    def username(self):
        """Gets the username of this ChangeLocator.  # noqa: E501

        VCS side username.  # noqa: E501

        :return: The username of this ChangeLocator.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this ChangeLocator.

        VCS side username.  # noqa: E501

        :param username: The username of this ChangeLocator.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def vcs_root(self):
        """Gets the vcs_root of this ChangeLocator.  # noqa: E501

        VCS root locator.  # noqa: E501

        :return: The vcs_root of this ChangeLocator.  # noqa: E501
        :rtype: str
        """
        return self._vcs_root

    @vcs_root.setter
    def vcs_root(self, vcs_root):
        """Sets the vcs_root of this ChangeLocator.

        VCS root locator.  # noqa: E501

        :param vcs_root: The vcs_root of this ChangeLocator.  # noqa: E501
        :type: str
        """

        self._vcs_root = vcs_root

    @property
    def vcs_root_instance(self):
        """Gets the vcs_root_instance of this ChangeLocator.  # noqa: E501

        VCS instance locator.  # noqa: E501

        :return: The vcs_root_instance of this ChangeLocator.  # noqa: E501
        :rtype: str
        """
        return self._vcs_root_instance

    @vcs_root_instance.setter
    def vcs_root_instance(self, vcs_root_instance):
        """Sets the vcs_root_instance of this ChangeLocator.

        VCS instance locator.  # noqa: E501

        :param vcs_root_instance: The vcs_root_instance of this ChangeLocator.  # noqa: E501
        :type: str
        """

        self._vcs_root_instance = vcs_root_instance

    @property
    def version(self):
        """Gets the version of this ChangeLocator.  # noqa: E501


        :return: The version of this ChangeLocator.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ChangeLocator.


        :param version: The version of this ChangeLocator.  # noqa: E501
        :type: str
        """

        self._version = version
