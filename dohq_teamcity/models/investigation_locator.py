# coding: utf-8

from dohq_teamcity.custom.base_model import TeamCityObject


class InvestigationLocator(TeamCityObject):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'affected_project': 'str',
        'assignee': 'str',
        'assignment_project': 'str',
        'build_type': 'str',
        'count': 'int',
        'item': 'str',
        'lookup_limit': 'int',
        'problem': 'str',
        'reporter': 'str',
        'resolution': 'str',
        'since_date': 'datetime',
        'start': 'int',
        'state': 'str',
        'test': 'str',
        'type': 'str'
    }

    attribute_map = {
        'affected_project': 'affectedProject',
        'assignee': 'assignee',
        'assignment_project': 'assignmentProject',
        'build_type': 'buildType',
        'count': 'count',
        'item': 'item',
        'lookup_limit': 'lookupLimit',
        'problem': 'problem',
        'reporter': 'reporter',
        'resolution': 'resolution',
        'since_date': 'sinceDate',
        'start': 'start',
        'state': 'state',
        'test': 'test',
        'type': 'type'
    }

    def __init__(self, affected_project=None, assignee=None, assignment_project=None, build_type=None, count=None, item=None, lookup_limit=None, problem=None, reporter=None, resolution=None, since_date=None, start=None, state=None, test=None, type=None, teamcity=None):  # noqa: E501
        """InvestigationLocator - a model defined in Swagger"""  # noqa: E501

        self._affected_project = None
        self._assignee = None
        self._assignment_project = None
        self._build_type = None
        self._count = None
        self._item = None
        self._lookup_limit = None
        self._problem = None
        self._reporter = None
        self._resolution = None
        self._since_date = None
        self._start = None
        self._state = None
        self._test = None
        self._type = None
        self.discriminator = None

        if affected_project is not None:
            self.affected_project = affected_project
        if assignee is not None:
            self.assignee = assignee
        if assignment_project is not None:
            self.assignment_project = assignment_project
        if build_type is not None:
            self.build_type = build_type
        if count is not None:
            self.count = count
        if item is not None:
            self.item = item
        if lookup_limit is not None:
            self.lookup_limit = lookup_limit
        if problem is not None:
            self.problem = problem
        if reporter is not None:
            self.reporter = reporter
        if resolution is not None:
            self.resolution = resolution
        if since_date is not None:
            self.since_date = since_date
        if start is not None:
            self.start = start
        if state is not None:
            self.state = state
        if test is not None:
            self.test = test
        if type is not None:
            self.type = type
        super(InvestigationLocator, self).__init__(teamcity=teamcity)

    @property
    def affected_project(self):
        """Gets the affected_project of this InvestigationLocator.  # noqa: E501

        Project (direct or indirect parent) locator.  # noqa: E501

        :return: The affected_project of this InvestigationLocator.  # noqa: E501
        :rtype: str
        """
        return self._affected_project

    @affected_project.setter
    def affected_project(self, affected_project):
        """Sets the affected_project of this InvestigationLocator.

        Project (direct or indirect parent) locator.  # noqa: E501

        :param affected_project: The affected_project of this InvestigationLocator.  # noqa: E501
        :type: str
        """

        self._affected_project = affected_project

    @property
    def assignee(self):
        """Gets the assignee of this InvestigationLocator.  # noqa: E501


        :return: The assignee of this InvestigationLocator.  # noqa: E501
        :rtype: str
        """
        return self._assignee

    @assignee.setter
    def assignee(self, assignee):
        """Sets the assignee of this InvestigationLocator.


        :param assignee: The assignee of this InvestigationLocator.  # noqa: E501
        :type: str
        """

        self._assignee = assignee

    @property
    def assignment_project(self):
        """Gets the assignment_project of this InvestigationLocator.  # noqa: E501

        Project (direct parent) locator.  # noqa: E501

        :return: The assignment_project of this InvestigationLocator.  # noqa: E501
        :rtype: str
        """
        return self._assignment_project

    @assignment_project.setter
    def assignment_project(self, assignment_project):
        """Sets the assignment_project of this InvestigationLocator.

        Project (direct parent) locator.  # noqa: E501

        :param assignment_project: The assignment_project of this InvestigationLocator.  # noqa: E501
        :type: str
        """

        self._assignment_project = assignment_project

    @property
    def build_type(self):
        """Gets the build_type of this InvestigationLocator.  # noqa: E501

        Build type locator.  # noqa: E501

        :return: The build_type of this InvestigationLocator.  # noqa: E501
        :rtype: str
        """
        return self._build_type

    @build_type.setter
    def build_type(self, build_type):
        """Sets the build_type of this InvestigationLocator.

        Build type locator.  # noqa: E501

        :param build_type: The build_type of this InvestigationLocator.  # noqa: E501
        :type: str
        """

        self._build_type = build_type

    @property
    def count(self):
        """Gets the count of this InvestigationLocator.  # noqa: E501

        For paginated calls, how many entities to return per page.  # noqa: E501

        :return: The count of this InvestigationLocator.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this InvestigationLocator.

        For paginated calls, how many entities to return per page.  # noqa: E501

        :param count: The count of this InvestigationLocator.  # noqa: E501
        :type: int
        """

        self._count = count

    @property
    def item(self):
        """Gets the item of this InvestigationLocator.  # noqa: E501

        Supply multiple locators and return a union of the results.  # noqa: E501

        :return: The item of this InvestigationLocator.  # noqa: E501
        :rtype: str
        """
        return self._item

    @item.setter
    def item(self, item):
        """Sets the item of this InvestigationLocator.

        Supply multiple locators and return a union of the results.  # noqa: E501

        :param item: The item of this InvestigationLocator.  # noqa: E501
        :type: str
        """

        self._item = item

    @property
    def lookup_limit(self):
        """Gets the lookup_limit of this InvestigationLocator.  # noqa: E501

        Limit processing to the latest `<lookupLimit>` entities.  # noqa: E501

        :return: The lookup_limit of this InvestigationLocator.  # noqa: E501
        :rtype: int
        """
        return self._lookup_limit

    @lookup_limit.setter
    def lookup_limit(self, lookup_limit):
        """Sets the lookup_limit of this InvestigationLocator.

        Limit processing to the latest `<lookupLimit>` entities.  # noqa: E501

        :param lookup_limit: The lookup_limit of this InvestigationLocator.  # noqa: E501
        :type: int
        """

        self._lookup_limit = lookup_limit

    @property
    def problem(self):
        """Gets the problem of this InvestigationLocator.  # noqa: E501

        Problem locator.  # noqa: E501

        :return: The problem of this InvestigationLocator.  # noqa: E501
        :rtype: str
        """
        return self._problem

    @problem.setter
    def problem(self, problem):
        """Sets the problem of this InvestigationLocator.

        Problem locator.  # noqa: E501

        :param problem: The problem of this InvestigationLocator.  # noqa: E501
        :type: str
        """

        self._problem = problem

    @property
    def reporter(self):
        """Gets the reporter of this InvestigationLocator.  # noqa: E501


        :return: The reporter of this InvestigationLocator.  # noqa: E501
        :rtype: str
        """
        return self._reporter

    @reporter.setter
    def reporter(self, reporter):
        """Sets the reporter of this InvestigationLocator.


        :param reporter: The reporter of this InvestigationLocator.  # noqa: E501
        :type: str
        """

        self._reporter = reporter

    @property
    def resolution(self):
        """Gets the resolution of this InvestigationLocator.  # noqa: E501


        :return: The resolution of this InvestigationLocator.  # noqa: E501
        :rtype: str
        """
        return self._resolution

    @resolution.setter
    def resolution(self, resolution):
        """Sets the resolution of this InvestigationLocator.


        :param resolution: The resolution of this InvestigationLocator.  # noqa: E501
        :type: str
        """
        allowed_values = ["manually", "whenFixed", "atTime"]  # noqa: E501
        if resolution not in allowed_values:
            raise ValueError(
                "Invalid value for `resolution` ({0}), must be one of {1}"  # noqa: E501
                .format(resolution, allowed_values)
            )

        self._resolution = resolution

    @property
    def since_date(self):
        """Gets the since_date of this InvestigationLocator.  # noqa: E501

        yyyyMMddTHHmmss+ZZZZ  # noqa: E501

        :return: The since_date of this InvestigationLocator.  # noqa: E501
        :rtype: datetime
        """
        return self._since_date

    @since_date.setter
    def since_date(self, since_date):
        """Sets the since_date of this InvestigationLocator.

        yyyyMMddTHHmmss+ZZZZ  # noqa: E501

        :param since_date: The since_date of this InvestigationLocator.  # noqa: E501
        :type: datetime
        """

        self._since_date = since_date

    @property
    def start(self):
        """Gets the start of this InvestigationLocator.  # noqa: E501

        For paginated calls, from which entity to start rendering the page.  # noqa: E501

        :return: The start of this InvestigationLocator.  # noqa: E501
        :rtype: int
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this InvestigationLocator.

        For paginated calls, from which entity to start rendering the page.  # noqa: E501

        :param start: The start of this InvestigationLocator.  # noqa: E501
        :type: int
        """

        self._start = start

    @property
    def state(self):
        """Gets the state of this InvestigationLocator.  # noqa: E501


        :return: The state of this InvestigationLocator.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this InvestigationLocator.


        :param state: The state of this InvestigationLocator.  # noqa: E501
        :type: str
        """
        allowed_values = ["taken", "fixed", "given_up", "none"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def test(self):
        """Gets the test of this InvestigationLocator.  # noqa: E501

        Test locator.  # noqa: E501

        :return: The test of this InvestigationLocator.  # noqa: E501
        :rtype: str
        """
        return self._test

    @test.setter
    def test(self, test):
        """Sets the test of this InvestigationLocator.

        Test locator.  # noqa: E501

        :param test: The test of this InvestigationLocator.  # noqa: E501
        :type: str
        """

        self._test = test

    @property
    def type(self):
        """Gets the type of this InvestigationLocator.  # noqa: E501


        :return: The type of this InvestigationLocator.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InvestigationLocator.


        :param type: The type of this InvestigationLocator.  # noqa: E501
        :type: str
        """
        allowed_values = ["test", "problem", "anyProblem", "unknown"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type
