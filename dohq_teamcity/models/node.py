# coding: utf-8

from dohq_teamcity.custom.base_model import TeamCityObject


# from dohq_teamcity.models.disabled_responsibilities import DisabledResponsibilities  # noqa: F401,E501
# from dohq_teamcity.models.effective_responsibilities import EffectiveResponsibilities  # noqa: F401,E501
# from dohq_teamcity.models.enabled_responsibilities import EnabledResponsibilities  # noqa: F401,E501


class Node(TeamCityObject):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'url': 'str',
        'state': 'str',
        'role': 'str',
        'current': 'bool',
        'enabled_responsibilities': 'EnabledResponsibilities',
        'disabled_responsibilities': 'DisabledResponsibilities',
        'effective_responsibilities': 'EffectiveResponsibilities'
    }

    attribute_map = {
        'id': 'id',
        'url': 'url',
        'state': 'state',
        'role': 'role',
        'current': 'current',
        'enabled_responsibilities': 'enabledResponsibilities',
        'disabled_responsibilities': 'disabledResponsibilities',
        'effective_responsibilities': 'effectiveResponsibilities'
    }

    def __init__(self, id=None, url=None, state=None, role=None, current=None, enabled_responsibilities=None, disabled_responsibilities=None, effective_responsibilities=None, teamcity=None):  # noqa: E501
        """Node - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._url = None
        self._state = None
        self._role = None
        self._current = None
        self._enabled_responsibilities = None
        self._disabled_responsibilities = None
        self._effective_responsibilities = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if url is not None:
            self.url = url
        if state is not None:
            self.state = state
        if role is not None:
            self.role = role
        if current is not None:
            self.current = current
        if enabled_responsibilities is not None:
            self.enabled_responsibilities = enabled_responsibilities
        if disabled_responsibilities is not None:
            self.disabled_responsibilities = disabled_responsibilities
        if effective_responsibilities is not None:
            self.effective_responsibilities = effective_responsibilities
        super(Node, self).__init__(teamcity=teamcity)

    @property
    def id(self):
        """Gets the id of this Node.  # noqa: E501


        :return: The id of this Node.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Node.


        :param id: The id of this Node.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def url(self):
        """Gets the url of this Node.  # noqa: E501


        :return: The url of this Node.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Node.


        :param url: The url of this Node.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def state(self):
        """Gets the state of this Node.  # noqa: E501


        :return: The state of this Node.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Node.


        :param state: The state of this Node.  # noqa: E501
        :type: str
        """
        allowed_values = ["online", "offline", "stopping", "starting"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def role(self):
        """Gets the role of this Node.  # noqa: E501


        :return: The role of this Node.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this Node.


        :param role: The role of this Node.  # noqa: E501
        :type: str
        """

        self._role = role

    @property
    def current(self):
        """Gets the current of this Node.  # noqa: E501


        :return: The current of this Node.  # noqa: E501
        :rtype: bool
        """
        return self._current

    @current.setter
    def current(self, current):
        """Sets the current of this Node.


        :param current: The current of this Node.  # noqa: E501
        :type: bool
        """

        self._current = current

    @property
    def enabled_responsibilities(self):
        """Gets the enabled_responsibilities of this Node.  # noqa: E501


        :return: The enabled_responsibilities of this Node.  # noqa: E501
        :rtype: EnabledResponsibilities
        """
        return self._enabled_responsibilities

    @enabled_responsibilities.setter
    def enabled_responsibilities(self, enabled_responsibilities):
        """Sets the enabled_responsibilities of this Node.


        :param enabled_responsibilities: The enabled_responsibilities of this Node.  # noqa: E501
        :type: EnabledResponsibilities
        """

        self._enabled_responsibilities = enabled_responsibilities

    @property
    def disabled_responsibilities(self):
        """Gets the disabled_responsibilities of this Node.  # noqa: E501


        :return: The disabled_responsibilities of this Node.  # noqa: E501
        :rtype: DisabledResponsibilities
        """
        return self._disabled_responsibilities

    @disabled_responsibilities.setter
    def disabled_responsibilities(self, disabled_responsibilities):
        """Sets the disabled_responsibilities of this Node.


        :param disabled_responsibilities: The disabled_responsibilities of this Node.  # noqa: E501
        :type: DisabledResponsibilities
        """

        self._disabled_responsibilities = disabled_responsibilities

    @property
    def effective_responsibilities(self):
        """Gets the effective_responsibilities of this Node.  # noqa: E501


        :return: The effective_responsibilities of this Node.  # noqa: E501
        :rtype: EffectiveResponsibilities
        """
        return self._effective_responsibilities

    @effective_responsibilities.setter
    def effective_responsibilities(self, effective_responsibilities):
        """Sets the effective_responsibilities of this Node.


        :param effective_responsibilities: The effective_responsibilities of this Node.  # noqa: E501
        :type: EffectiveResponsibilities
        """

        self._effective_responsibilities = effective_responsibilities
