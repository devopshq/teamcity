# coding: utf-8

from dohq_teamcity.custom.base_model import TeamCityObject


# from dohq_teamcity.models.health_category import HealthCategory  # noqa: F401,E501


class HealthItem(TeamCityObject):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'identity': 'str',
        'severity': 'str',
        'health_category': 'HealthCategory'
    }

    attribute_map = {
        'identity': 'identity',
        'severity': 'severity',
        'health_category': 'healthCategory'
    }

    def __init__(self, identity=None, severity=None, health_category=None, teamcity=None):  # noqa: E501
        """HealthItem - a model defined in Swagger"""  # noqa: E501

        self._identity = None
        self._severity = None
        self._health_category = None
        self.discriminator = None

        if identity is not None:
            self.identity = identity
        if severity is not None:
            self.severity = severity
        if health_category is not None:
            self.health_category = health_category
        super(HealthItem, self).__init__(teamcity=teamcity)

    @property
    def identity(self):
        """Gets the identity of this HealthItem.  # noqa: E501


        :return: The identity of this HealthItem.  # noqa: E501
        :rtype: str
        """
        return self._identity

    @identity.setter
    def identity(self, identity):
        """Sets the identity of this HealthItem.


        :param identity: The identity of this HealthItem.  # noqa: E501
        :type: str
        """

        self._identity = identity

    @property
    def severity(self):
        """Gets the severity of this HealthItem.  # noqa: E501


        :return: The severity of this HealthItem.  # noqa: E501
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this HealthItem.


        :param severity: The severity of this HealthItem.  # noqa: E501
        :type: str
        """
        allowed_values = ["INFO", "WARN", "ERROR"]  # noqa: E501
        if severity not in allowed_values:
            raise ValueError(
                "Invalid value for `severity` ({0}), must be one of {1}"  # noqa: E501
                .format(severity, allowed_values)
            )

        self._severity = severity

    @property
    def health_category(self):
        """Gets the health_category of this HealthItem.  # noqa: E501


        :return: The health_category of this HealthItem.  # noqa: E501
        :rtype: HealthCategory
        """
        return self._health_category

    @health_category.setter
    def health_category(self, health_category):
        """Sets the health_category of this HealthItem.


        :param health_category: The health_category of this HealthItem.  # noqa: E501
        :type: HealthCategory
        """

        self._health_category = health_category
