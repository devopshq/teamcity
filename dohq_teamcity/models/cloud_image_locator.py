# coding: utf-8

from dohq_teamcity.custom.base_model import TeamCityObject


class CloudImageLocator(TeamCityObject):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'affected_project': 'str',
        'agent': 'str',
        'agent_pool': 'str',
        'compatible_build_promotion': 'str',
        'compatible_build_type': 'str',
        'id': 'str',
        'instance': 'str',
        'item': 'str',
        'name': 'str',
        'profile': 'str',
        'project': 'str',
        '_property': 'str'
    }

    attribute_map = {
        'affected_project': 'affectedProject',
        'agent': 'agent',
        'agent_pool': 'agentPool',
        'compatible_build_promotion': 'compatibleBuildPromotion',
        'compatible_build_type': 'compatibleBuildType',
        'id': 'id',
        'instance': 'instance',
        'item': 'item',
        'name': 'name',
        'profile': 'profile',
        'project': 'project',
        '_property': 'property'
    }

    def __init__(self, affected_project=None, agent=None, agent_pool=None, compatible_build_promotion=None, compatible_build_type=None, id=None, instance=None, item=None, name=None, profile=None, project=None, _property=None, teamcity=None):  # noqa: E501
        """CloudImageLocator - a model defined in Swagger"""  # noqa: E501

        self._affected_project = None
        self._agent = None
        self._agent_pool = None
        self._compatible_build_promotion = None
        self._compatible_build_type = None
        self._id = None
        self._instance = None
        self._item = None
        self._name = None
        self._profile = None
        self._project = None
        self.__property = None
        self.discriminator = None

        if affected_project is not None:
            self.affected_project = affected_project
        if agent is not None:
            self.agent = agent
        if agent_pool is not None:
            self.agent_pool = agent_pool
        if compatible_build_promotion is not None:
            self.compatible_build_promotion = compatible_build_promotion
        if compatible_build_type is not None:
            self.compatible_build_type = compatible_build_type
        if id is not None:
            self.id = id
        if instance is not None:
            self.instance = instance
        if item is not None:
            self.item = item
        if name is not None:
            self.name = name
        if profile is not None:
            self.profile = profile
        if project is not None:
            self.project = project
        if _property is not None:
            self._property = _property
        super(CloudImageLocator, self).__init__(teamcity=teamcity)

    @property
    def affected_project(self):
        """Gets the affected_project of this CloudImageLocator.  # noqa: E501

        Project (direct or indirect parent) locator.  # noqa: E501

        :return: The affected_project of this CloudImageLocator.  # noqa: E501
        :rtype: str
        """
        return self._affected_project

    @affected_project.setter
    def affected_project(self, affected_project):
        """Sets the affected_project of this CloudImageLocator.

        Project (direct or indirect parent) locator.  # noqa: E501

        :param affected_project: The affected_project of this CloudImageLocator.  # noqa: E501
        :type: str
        """

        self._affected_project = affected_project

    @property
    def agent(self):
        """Gets the agent of this CloudImageLocator.  # noqa: E501

        Agent locator.  # noqa: E501

        :return: The agent of this CloudImageLocator.  # noqa: E501
        :rtype: str
        """
        return self._agent

    @agent.setter
    def agent(self, agent):
        """Sets the agent of this CloudImageLocator.

        Agent locator.  # noqa: E501

        :param agent: The agent of this CloudImageLocator.  # noqa: E501
        :type: str
        """

        self._agent = agent

    @property
    def agent_pool(self):
        """Gets the agent_pool of this CloudImageLocator.  # noqa: E501

        Agent pool locator.  # noqa: E501

        :return: The agent_pool of this CloudImageLocator.  # noqa: E501
        :rtype: str
        """
        return self._agent_pool

    @agent_pool.setter
    def agent_pool(self, agent_pool):
        """Sets the agent_pool of this CloudImageLocator.

        Agent pool locator.  # noqa: E501

        :param agent_pool: The agent_pool of this CloudImageLocator.  # noqa: E501
        :type: str
        """

        self._agent_pool = agent_pool

    @property
    def compatible_build_promotion(self):
        """Gets the compatible_build_promotion of this CloudImageLocator.  # noqa: E501

        Build promotion locator  # noqa: E501

        :return: The compatible_build_promotion of this CloudImageLocator.  # noqa: E501
        :rtype: str
        """
        return self._compatible_build_promotion

    @compatible_build_promotion.setter
    def compatible_build_promotion(self, compatible_build_promotion):
        """Sets the compatible_build_promotion of this CloudImageLocator.

        Build promotion locator  # noqa: E501

        :param compatible_build_promotion: The compatible_build_promotion of this CloudImageLocator.  # noqa: E501
        :type: str
        """

        self._compatible_build_promotion = compatible_build_promotion

    @property
    def compatible_build_type(self):
        """Gets the compatible_build_type of this CloudImageLocator.  # noqa: E501

        Build type locator  # noqa: E501

        :return: The compatible_build_type of this CloudImageLocator.  # noqa: E501
        :rtype: str
        """
        return self._compatible_build_type

    @compatible_build_type.setter
    def compatible_build_type(self, compatible_build_type):
        """Sets the compatible_build_type of this CloudImageLocator.

        Build type locator  # noqa: E501

        :param compatible_build_type: The compatible_build_type of this CloudImageLocator.  # noqa: E501
        :type: str
        """

        self._compatible_build_type = compatible_build_type

    @property
    def id(self):
        """Gets the id of this CloudImageLocator.  # noqa: E501


        :return: The id of this CloudImageLocator.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CloudImageLocator.


        :param id: The id of this CloudImageLocator.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def instance(self):
        """Gets the instance of this CloudImageLocator.  # noqa: E501

        Cloud instance locator.  # noqa: E501

        :return: The instance of this CloudImageLocator.  # noqa: E501
        :rtype: str
        """
        return self._instance

    @instance.setter
    def instance(self, instance):
        """Sets the instance of this CloudImageLocator.

        Cloud instance locator.  # noqa: E501

        :param instance: The instance of this CloudImageLocator.  # noqa: E501
        :type: str
        """

        self._instance = instance

    @property
    def item(self):
        """Gets the item of this CloudImageLocator.  # noqa: E501

        Supply multiple locators and return a union of the results.  # noqa: E501

        :return: The item of this CloudImageLocator.  # noqa: E501
        :rtype: str
        """
        return self._item

    @item.setter
    def item(self, item):
        """Sets the item of this CloudImageLocator.

        Supply multiple locators and return a union of the results.  # noqa: E501

        :param item: The item of this CloudImageLocator.  # noqa: E501
        :type: str
        """

        self._item = item

    @property
    def name(self):
        """Gets the name of this CloudImageLocator.  # noqa: E501


        :return: The name of this CloudImageLocator.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CloudImageLocator.


        :param name: The name of this CloudImageLocator.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def profile(self):
        """Gets the profile of this CloudImageLocator.  # noqa: E501

        Cloud profile locator.  # noqa: E501

        :return: The profile of this CloudImageLocator.  # noqa: E501
        :rtype: str
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """Sets the profile of this CloudImageLocator.

        Cloud profile locator.  # noqa: E501

        :param profile: The profile of this CloudImageLocator.  # noqa: E501
        :type: str
        """

        self._profile = profile

    @property
    def project(self):
        """Gets the project of this CloudImageLocator.  # noqa: E501

        Project locator.  # noqa: E501

        :return: The project of this CloudImageLocator.  # noqa: E501
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this CloudImageLocator.

        Project locator.  # noqa: E501

        :param project: The project of this CloudImageLocator.  # noqa: E501
        :type: str
        """

        self._project = project

    @property
    def _property(self):
        """Gets the _property of this CloudImageLocator.  # noqa: E501


        :return: The _property of this CloudImageLocator.  # noqa: E501
        :rtype: str
        """
        return self.__property

    @_property.setter
    def _property(self, _property):
        """Sets the _property of this CloudImageLocator.


        :param _property: The _property of this CloudImageLocator.  # noqa: E501
        :type: str
        """
        allowed_values = ["exists", "not-exists", "equals", "does-not-equal", "starts-with", "contains", "does-not-contain", "ends-with", "any", "matches", "does-not-match", "more-than", "no-more-than", "less-than", "no-less-than", "ver-more-than", "ver-no-more-than", "ver-less-than", "ver-no-less-than"]  # noqa: E501
        if _property not in allowed_values:
            raise ValueError(
                "Invalid value for `_property` ({0}), must be one of {1}"  # noqa: E501
                .format(_property, allowed_values)
            )

        self.__property = _property
