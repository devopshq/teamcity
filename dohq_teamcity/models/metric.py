# coding: utf-8

from dohq_teamcity.custom.base_model import TeamCityObject


# from dohq_teamcity.models.metric_tags import MetricTags  # noqa: F401,E501
# from dohq_teamcity.models.metric_values import MetricValues  # noqa: F401,E501


class Metric(TeamCityObject):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'prometheus_name': 'str',
        'metric_values': 'MetricValues',
        'metric_tags': 'MetricTags'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'prometheus_name': 'prometheusName',
        'metric_values': 'metricValues',
        'metric_tags': 'metricTags'
    }

    def __init__(self, name=None, description=None, prometheus_name=None, metric_values=None, metric_tags=None, teamcity=None):  # noqa: E501
        """Metric - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._description = None
        self._prometheus_name = None
        self._metric_values = None
        self._metric_tags = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if prometheus_name is not None:
            self.prometheus_name = prometheus_name
        if metric_values is not None:
            self.metric_values = metric_values
        if metric_tags is not None:
            self.metric_tags = metric_tags
        super(Metric, self).__init__(teamcity=teamcity)

    @property
    def name(self):
        """Gets the name of this Metric.  # noqa: E501


        :return: The name of this Metric.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Metric.


        :param name: The name of this Metric.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this Metric.  # noqa: E501


        :return: The description of this Metric.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Metric.


        :param description: The description of this Metric.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def prometheus_name(self):
        """Gets the prometheus_name of this Metric.  # noqa: E501


        :return: The prometheus_name of this Metric.  # noqa: E501
        :rtype: str
        """
        return self._prometheus_name

    @prometheus_name.setter
    def prometheus_name(self, prometheus_name):
        """Sets the prometheus_name of this Metric.


        :param prometheus_name: The prometheus_name of this Metric.  # noqa: E501
        :type: str
        """

        self._prometheus_name = prometheus_name

    @property
    def metric_values(self):
        """Gets the metric_values of this Metric.  # noqa: E501


        :return: The metric_values of this Metric.  # noqa: E501
        :rtype: MetricValues
        """
        return self._metric_values

    @metric_values.setter
    def metric_values(self, metric_values):
        """Sets the metric_values of this Metric.


        :param metric_values: The metric_values of this Metric.  # noqa: E501
        :type: MetricValues
        """

        self._metric_values = metric_values

    @property
    def metric_tags(self):
        """Gets the metric_tags of this Metric.  # noqa: E501


        :return: The metric_tags of this Metric.  # noqa: E501
        :rtype: MetricTags
        """
        return self._metric_tags

    @metric_tags.setter
    def metric_tags(self, metric_tags):
        """Sets the metric_tags of this Metric.


        :param metric_tags: The metric_tags of this Metric.  # noqa: E501
        :type: MetricTags
        """

        self._metric_tags = metric_tags
