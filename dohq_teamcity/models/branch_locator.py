# coding: utf-8

from dohq_teamcity.custom.base_model import TeamCityObject


class BranchLocator(TeamCityObject):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'branched': 'str',
        'build': 'str',
        'build_type': 'str',
        'default': 'str',
        'item': 'str',
        'name': 'str',
        'policy': 'str'
    }

    attribute_map = {
        'branched': 'branched',
        'build': 'build',
        'build_type': 'buildType',
        'default': 'default',
        'item': 'item',
        'name': 'name',
        'policy': 'policy'
    }

    def __init__(self, branched=None, build=None, build_type=None, default=None, item=None, name=None, policy=None, teamcity=None):  # noqa: E501
        """BranchLocator - a model defined in Swagger"""  # noqa: E501

        self._branched = None
        self._build = None
        self._build_type = None
        self._default = None
        self._item = None
        self._name = None
        self._policy = None
        self.discriminator = None

        if branched is not None:
            self.branched = branched
        if build is not None:
            self.build = build
        if build_type is not None:
            self.build_type = build_type
        if default is not None:
            self.default = default
        if item is not None:
            self.item = item
        if name is not None:
            self.name = name
        if policy is not None:
            self.policy = policy
        super(BranchLocator, self).__init__(teamcity=teamcity)

    @property
    def branched(self):
        """Gets the branched of this BranchLocator.  # noqa: E501

        Is feature branch.  # noqa: E501

        :return: The branched of this BranchLocator.  # noqa: E501
        :rtype: str
        """
        return self._branched

    @branched.setter
    def branched(self, branched):
        """Sets the branched of this BranchLocator.

        Is feature branch.  # noqa: E501

        :param branched: The branched of this BranchLocator.  # noqa: E501
        :type: str
        """

        self._branched = branched

    @property
    def build(self):
        """Gets the build of this BranchLocator.  # noqa: E501

        Build locator.  # noqa: E501

        :return: The build of this BranchLocator.  # noqa: E501
        :rtype: str
        """
        return self._build

    @build.setter
    def build(self, build):
        """Sets the build of this BranchLocator.

        Build locator.  # noqa: E501

        :param build: The build of this BranchLocator.  # noqa: E501
        :type: str
        """

        self._build = build

    @property
    def build_type(self):
        """Gets the build_type of this BranchLocator.  # noqa: E501

        Build type locator.  # noqa: E501

        :return: The build_type of this BranchLocator.  # noqa: E501
        :rtype: str
        """
        return self._build_type

    @build_type.setter
    def build_type(self, build_type):
        """Sets the build_type of this BranchLocator.

        Build type locator.  # noqa: E501

        :param build_type: The build_type of this BranchLocator.  # noqa: E501
        :type: str
        """

        self._build_type = build_type

    @property
    def default(self):
        """Gets the default of this BranchLocator.  # noqa: E501

        Is default branch.  # noqa: E501

        :return: The default of this BranchLocator.  # noqa: E501
        :rtype: str
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this BranchLocator.

        Is default branch.  # noqa: E501

        :param default: The default of this BranchLocator.  # noqa: E501
        :type: str
        """

        self._default = default

    @property
    def item(self):
        """Gets the item of this BranchLocator.  # noqa: E501

        Supply multiple locators and return a union of the results.  # noqa: E501

        :return: The item of this BranchLocator.  # noqa: E501
        :rtype: str
        """
        return self._item

    @item.setter
    def item(self, item):
        """Sets the item of this BranchLocator.

        Supply multiple locators and return a union of the results.  # noqa: E501

        :param item: The item of this BranchLocator.  # noqa: E501
        :type: str
        """

        self._item = item

    @property
    def name(self):
        """Gets the name of this BranchLocator.  # noqa: E501


        :return: The name of this BranchLocator.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BranchLocator.


        :param name: The name of this BranchLocator.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def policy(self):
        """Gets the policy of this BranchLocator.  # noqa: E501


        :return: The policy of this BranchLocator.  # noqa: E501
        :rtype: str
        """
        return self._policy

    @policy.setter
    def policy(self, policy):
        """Sets the policy of this BranchLocator.


        :param policy: The policy of this BranchLocator.  # noqa: E501
        :type: str
        """
        allowed_values = ["VCS_BRANCHES", "ACTIVE_VCS_BRANCHES", "HISTORY_BRANCHES", "ACTIVE_HISTORY_BRANCHES", "ACTIVE_HISTORY_AND_ACTIVE_VCS_BRANCHES", "ALL_BRANCHES"]  # noqa: E501
        if policy not in allowed_values:
            raise ValueError(
                "Invalid value for `policy` ({0}), must be one of {1}"  # noqa: E501
                .format(policy, allowed_values)
            )

        self._policy = policy
