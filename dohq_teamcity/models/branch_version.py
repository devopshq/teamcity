# coding: utf-8

from dohq_teamcity.custom.base_model import TeamCityObject


# from dohq_teamcity.models.builds import Builds  # noqa: F401,E501


class BranchVersion(TeamCityObject):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'version': 'str',
        'unspecified': 'bool',
        'group_flag': 'bool',
        'builds': 'Builds',
        'last_activity': 'str',
        'internal_name': 'str',
        'name': 'str',
        'default': 'bool',
        'active': 'bool'
    }

    attribute_map = {
        'version': 'version',
        'unspecified': 'unspecified',
        'group_flag': 'groupFlag',
        'builds': 'builds',
        'last_activity': 'lastActivity',
        'internal_name': 'internalName',
        'name': 'name',
        'default': 'default',
        'active': 'active'
    }

    def __init__(self, version=None, unspecified=None, group_flag=None, builds=None, last_activity=None, internal_name=None, name=None, default=None, active=None, teamcity=None):  # noqa: E501
        """BranchVersion - a model defined in Swagger"""  # noqa: E501

        self._version = None
        self._unspecified = None
        self._group_flag = None
        self._builds = None
        self._last_activity = None
        self._internal_name = None
        self._name = None
        self._default = None
        self._active = None
        self.discriminator = None

        if version is not None:
            self.version = version
        if unspecified is not None:
            self.unspecified = unspecified
        if group_flag is not None:
            self.group_flag = group_flag
        if builds is not None:
            self.builds = builds
        if last_activity is not None:
            self.last_activity = last_activity
        if internal_name is not None:
            self.internal_name = internal_name
        if name is not None:
            self.name = name
        if default is not None:
            self.default = default
        if active is not None:
            self.active = active
        super(BranchVersion, self).__init__(teamcity=teamcity)

    @property
    def version(self):
        """Gets the version of this BranchVersion.  # noqa: E501


        :return: The version of this BranchVersion.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this BranchVersion.


        :param version: The version of this BranchVersion.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def unspecified(self):
        """Gets the unspecified of this BranchVersion.  # noqa: E501


        :return: The unspecified of this BranchVersion.  # noqa: E501
        :rtype: bool
        """
        return self._unspecified

    @unspecified.setter
    def unspecified(self, unspecified):
        """Sets the unspecified of this BranchVersion.


        :param unspecified: The unspecified of this BranchVersion.  # noqa: E501
        :type: bool
        """

        self._unspecified = unspecified

    @property
    def group_flag(self):
        """Gets the group_flag of this BranchVersion.  # noqa: E501


        :return: The group_flag of this BranchVersion.  # noqa: E501
        :rtype: bool
        """
        return self._group_flag

    @group_flag.setter
    def group_flag(self, group_flag):
        """Sets the group_flag of this BranchVersion.


        :param group_flag: The group_flag of this BranchVersion.  # noqa: E501
        :type: bool
        """

        self._group_flag = group_flag

    @property
    def builds(self):
        """Gets the builds of this BranchVersion.  # noqa: E501


        :return: The builds of this BranchVersion.  # noqa: E501
        :rtype: Builds
        """
        return self._builds

    @builds.setter
    def builds(self, builds):
        """Sets the builds of this BranchVersion.


        :param builds: The builds of this BranchVersion.  # noqa: E501
        :type: Builds
        """

        self._builds = builds

    @property
    def last_activity(self):
        """Gets the last_activity of this BranchVersion.  # noqa: E501


        :return: The last_activity of this BranchVersion.  # noqa: E501
        :rtype: str
        """
        return self._last_activity

    @last_activity.setter
    def last_activity(self, last_activity):
        """Sets the last_activity of this BranchVersion.


        :param last_activity: The last_activity of this BranchVersion.  # noqa: E501
        :type: str
        """

        self._last_activity = last_activity

    @property
    def internal_name(self):
        """Gets the internal_name of this BranchVersion.  # noqa: E501


        :return: The internal_name of this BranchVersion.  # noqa: E501
        :rtype: str
        """
        return self._internal_name

    @internal_name.setter
    def internal_name(self, internal_name):
        """Sets the internal_name of this BranchVersion.


        :param internal_name: The internal_name of this BranchVersion.  # noqa: E501
        :type: str
        """

        self._internal_name = internal_name

    @property
    def name(self):
        """Gets the name of this BranchVersion.  # noqa: E501


        :return: The name of this BranchVersion.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BranchVersion.


        :param name: The name of this BranchVersion.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def default(self):
        """Gets the default of this BranchVersion.  # noqa: E501


        :return: The default of this BranchVersion.  # noqa: E501
        :rtype: bool
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this BranchVersion.


        :param default: The default of this BranchVersion.  # noqa: E501
        :type: bool
        """

        self._default = default

    @property
    def active(self):
        """Gets the active of this BranchVersion.  # noqa: E501


        :return: The active of this BranchVersion.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this BranchVersion.


        :param active: The active of this BranchVersion.  # noqa: E501
        :type: bool
        """

        self._active = active
