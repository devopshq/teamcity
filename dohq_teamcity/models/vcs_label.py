# coding: utf-8

from dohq_teamcity.custom.base_model import TeamCityObject


# from dohq_teamcity.models.vcs_root_instance import VcsRootInstance  # noqa: F401,E501


class VcsLabel(TeamCityObject):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'text': 'str',
        'failure_reason': 'str',
        'status': 'str',
        'build_id': 'int',
        'vcs_root_instance': 'VcsRootInstance'
    }

    attribute_map = {
        'text': 'text',
        'failure_reason': 'failureReason',
        'status': 'status',
        'build_id': 'buildId',
        'vcs_root_instance': 'vcs-root-instance'
    }

    def __init__(self, text=None, failure_reason=None, status=None, build_id=None, vcs_root_instance=None, teamcity=None):  # noqa: E501
        """VcsLabel - a model defined in Swagger"""  # noqa: E501

        self._text = None
        self._failure_reason = None
        self._status = None
        self._build_id = None
        self._vcs_root_instance = None
        self.discriminator = None

        if text is not None:
            self.text = text
        if failure_reason is not None:
            self.failure_reason = failure_reason
        if status is not None:
            self.status = status
        if build_id is not None:
            self.build_id = build_id
        if vcs_root_instance is not None:
            self.vcs_root_instance = vcs_root_instance
        super(VcsLabel, self).__init__(teamcity=teamcity)

    @property
    def text(self):
        """Gets the text of this VcsLabel.  # noqa: E501


        :return: The text of this VcsLabel.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this VcsLabel.


        :param text: The text of this VcsLabel.  # noqa: E501
        :type: str
        """

        self._text = text

    @property
    def failure_reason(self):
        """Gets the failure_reason of this VcsLabel.  # noqa: E501


        :return: The failure_reason of this VcsLabel.  # noqa: E501
        :rtype: str
        """
        return self._failure_reason

    @failure_reason.setter
    def failure_reason(self, failure_reason):
        """Sets the failure_reason of this VcsLabel.


        :param failure_reason: The failure_reason of this VcsLabel.  # noqa: E501
        :type: str
        """

        self._failure_reason = failure_reason

    @property
    def status(self):
        """Gets the status of this VcsLabel.  # noqa: E501


        :return: The status of this VcsLabel.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this VcsLabel.


        :param status: The status of this VcsLabel.  # noqa: E501
        :type: str
        """
        allowed_values = ["UNKNOWN", "SUCCESSFUL_SET", "IS_BEING_SET", "FAILED", "DISABLED_FOR_THE_ROOT", "LABELING_NOT_SUPPORTED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def build_id(self):
        """Gets the build_id of this VcsLabel.  # noqa: E501


        :return: The build_id of this VcsLabel.  # noqa: E501
        :rtype: int
        """
        return self._build_id

    @build_id.setter
    def build_id(self, build_id):
        """Sets the build_id of this VcsLabel.


        :param build_id: The build_id of this VcsLabel.  # noqa: E501
        :type: int
        """

        self._build_id = build_id

    @property
    def vcs_root_instance(self):
        """Gets the vcs_root_instance of this VcsLabel.  # noqa: E501


        :return: The vcs_root_instance of this VcsLabel.  # noqa: E501
        :rtype: VcsRootInstance
        """
        return self._vcs_root_instance

    @vcs_root_instance.setter
    def vcs_root_instance(self, vcs_root_instance):
        """Sets the vcs_root_instance of this VcsLabel.


        :param vcs_root_instance: The vcs_root_instance of this VcsLabel.  # noqa: E501
        :type: VcsRootInstance
        """

        self._vcs_root_instance = vcs_root_instance
