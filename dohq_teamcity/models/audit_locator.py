# coding: utf-8

from dohq_teamcity.custom.base_model import TeamCityObject


class AuditLocator(TeamCityObject):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action': 'str',
        'affected_project': 'str',
        'build_type': 'str',
        'count': 'int',
        'id': 'str',
        'item': 'str',
        'lookup_limit': 'int',
        'start': 'int',
        'system_action': 'str',
        'user': 'str'
    }

    attribute_map = {
        'action': 'action',
        'affected_project': 'affectedProject',
        'build_type': 'buildType',
        'count': 'count',
        'id': 'id',
        'item': 'item',
        'lookup_limit': 'lookupLimit',
        'start': 'start',
        'system_action': 'systemAction',
        'user': 'user'
    }

    def __init__(self, action=None, affected_project=None, build_type=None, count=None, id=None, item=None, lookup_limit=None, start=None, system_action=None, user=None, teamcity=None):  # noqa: E501
        """AuditLocator - a model defined in Swagger"""  # noqa: E501

        self._action = None
        self._affected_project = None
        self._build_type = None
        self._count = None
        self._id = None
        self._item = None
        self._lookup_limit = None
        self._start = None
        self._system_action = None
        self._user = None
        self.discriminator = None

        if action is not None:
            self.action = action
        if affected_project is not None:
            self.affected_project = affected_project
        if build_type is not None:
            self.build_type = build_type
        if count is not None:
            self.count = count
        if id is not None:
            self.id = id
        if item is not None:
            self.item = item
        if lookup_limit is not None:
            self.lookup_limit = lookup_limit
        if start is not None:
            self.start = start
        if system_action is not None:
            self.system_action = system_action
        if user is not None:
            self.user = user
        super(AuditLocator, self).__init__(teamcity=teamcity)

    @property
    def action(self):
        """Gets the action of this AuditLocator.  # noqa: E501

        Use `$help` to get the full list of supported actions.  # noqa: E501

        :return: The action of this AuditLocator.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this AuditLocator.

        Use `$help` to get the full list of supported actions.  # noqa: E501

        :param action: The action of this AuditLocator.  # noqa: E501
        :type: str
        """

        self._action = action

    @property
    def affected_project(self):
        """Gets the affected_project of this AuditLocator.  # noqa: E501

        Related project locator.  # noqa: E501

        :return: The affected_project of this AuditLocator.  # noqa: E501
        :rtype: str
        """
        return self._affected_project

    @affected_project.setter
    def affected_project(self, affected_project):
        """Sets the affected_project of this AuditLocator.

        Related project locator.  # noqa: E501

        :param affected_project: The affected_project of this AuditLocator.  # noqa: E501
        :type: str
        """

        self._affected_project = affected_project

    @property
    def build_type(self):
        """Gets the build_type of this AuditLocator.  # noqa: E501

        Related build type or template locator.  # noqa: E501

        :return: The build_type of this AuditLocator.  # noqa: E501
        :rtype: str
        """
        return self._build_type

    @build_type.setter
    def build_type(self, build_type):
        """Sets the build_type of this AuditLocator.

        Related build type or template locator.  # noqa: E501

        :param build_type: The build_type of this AuditLocator.  # noqa: E501
        :type: str
        """

        self._build_type = build_type

    @property
    def count(self):
        """Gets the count of this AuditLocator.  # noqa: E501

        For paginated calls, how many entities to return per page.  # noqa: E501

        :return: The count of this AuditLocator.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this AuditLocator.

        For paginated calls, how many entities to return per page.  # noqa: E501

        :param count: The count of this AuditLocator.  # noqa: E501
        :type: int
        """

        self._count = count

    @property
    def id(self):
        """Gets the id of this AuditLocator.  # noqa: E501


        :return: The id of this AuditLocator.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AuditLocator.


        :param id: The id of this AuditLocator.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def item(self):
        """Gets the item of this AuditLocator.  # noqa: E501

        Supply multiple locators and return a union of the results.  # noqa: E501

        :return: The item of this AuditLocator.  # noqa: E501
        :rtype: str
        """
        return self._item

    @item.setter
    def item(self, item):
        """Sets the item of this AuditLocator.

        Supply multiple locators and return a union of the results.  # noqa: E501

        :param item: The item of this AuditLocator.  # noqa: E501
        :type: str
        """

        self._item = item

    @property
    def lookup_limit(self):
        """Gets the lookup_limit of this AuditLocator.  # noqa: E501

        Limit processing to the latest `<lookupLimit>` entities.  # noqa: E501

        :return: The lookup_limit of this AuditLocator.  # noqa: E501
        :rtype: int
        """
        return self._lookup_limit

    @lookup_limit.setter
    def lookup_limit(self, lookup_limit):
        """Sets the lookup_limit of this AuditLocator.

        Limit processing to the latest `<lookupLimit>` entities.  # noqa: E501

        :param lookup_limit: The lookup_limit of this AuditLocator.  # noqa: E501
        :type: int
        """

        self._lookup_limit = lookup_limit

    @property
    def start(self):
        """Gets the start of this AuditLocator.  # noqa: E501

        For paginated calls, from which entity to start rendering the page.  # noqa: E501

        :return: The start of this AuditLocator.  # noqa: E501
        :rtype: int
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this AuditLocator.

        For paginated calls, from which entity to start rendering the page.  # noqa: E501

        :param start: The start of this AuditLocator.  # noqa: E501
        :type: int
        """

        self._start = start

    @property
    def system_action(self):
        """Gets the system_action of this AuditLocator.  # noqa: E501


        :return: The system_action of this AuditLocator.  # noqa: E501
        :rtype: str
        """
        return self._system_action

    @system_action.setter
    def system_action(self, system_action):
        """Sets the system_action of this AuditLocator.


        :param system_action: The system_action of this AuditLocator.  # noqa: E501
        :type: str
        """

        self._system_action = system_action

    @property
    def user(self):
        """Gets the user of this AuditLocator.  # noqa: E501

        Locator of user who caused the audit event.  # noqa: E501

        :return: The user of this AuditLocator.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this AuditLocator.

        Locator of user who caused the audit event.  # noqa: E501

        :param user: The user of this AuditLocator.  # noqa: E501
        :type: str
        """

        self._user = user
