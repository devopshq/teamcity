# coding: utf-8

from dohq_teamcity.custom.base_model import TeamCityObject


# from dohq_teamcity.models.build import Build  # noqa: F401,E501
# from dohq_teamcity.models.mute import Mute  # noqa: F401,E501
# from dohq_teamcity.models.problem import Problem  # noqa: F401,E501


class ProblemOccurrence(TeamCityObject):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'type': 'str',
        'identity': 'str',
        'href': 'str',
        'muted': 'bool',
        'currently_investigated': 'bool',
        'currently_muted': 'bool',
        'log_anchor': 'str',
        'new_failure': 'bool',
        'details': 'str',
        'additional_data': 'str',
        'problem': 'Problem',
        'mute': 'Mute',
        'build': 'Build'
    }

    attribute_map = {
        'id': 'id',
        'type': 'type',
        'identity': 'identity',
        'href': 'href',
        'muted': 'muted',
        'currently_investigated': 'currentlyInvestigated',
        'currently_muted': 'currentlyMuted',
        'log_anchor': 'logAnchor',
        'new_failure': 'newFailure',
        'details': 'details',
        'additional_data': 'additionalData',
        'problem': 'problem',
        'mute': 'mute',
        'build': 'build'
    }

    def __init__(self, id=None, type=None, identity=None, href=None, muted=None, currently_investigated=None, currently_muted=None, log_anchor=None, new_failure=None, details=None, additional_data=None, problem=None, mute=None, build=None, teamcity=None):  # noqa: E501
        """ProblemOccurrence - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._type = None
        self._identity = None
        self._href = None
        self._muted = None
        self._currently_investigated = None
        self._currently_muted = None
        self._log_anchor = None
        self._new_failure = None
        self._details = None
        self._additional_data = None
        self._problem = None
        self._mute = None
        self._build = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if type is not None:
            self.type = type
        if identity is not None:
            self.identity = identity
        if href is not None:
            self.href = href
        if muted is not None:
            self.muted = muted
        if currently_investigated is not None:
            self.currently_investigated = currently_investigated
        if currently_muted is not None:
            self.currently_muted = currently_muted
        if log_anchor is not None:
            self.log_anchor = log_anchor
        if new_failure is not None:
            self.new_failure = new_failure
        if details is not None:
            self.details = details
        if additional_data is not None:
            self.additional_data = additional_data
        if problem is not None:
            self.problem = problem
        if mute is not None:
            self.mute = mute
        if build is not None:
            self.build = build
        super(ProblemOccurrence, self).__init__(teamcity=teamcity)

    @property
    def id(self):
        """Gets the id of this ProblemOccurrence.  # noqa: E501


        :return: The id of this ProblemOccurrence.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProblemOccurrence.


        :param id: The id of this ProblemOccurrence.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this ProblemOccurrence.  # noqa: E501


        :return: The type of this ProblemOccurrence.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ProblemOccurrence.


        :param type: The type of this ProblemOccurrence.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def identity(self):
        """Gets the identity of this ProblemOccurrence.  # noqa: E501


        :return: The identity of this ProblemOccurrence.  # noqa: E501
        :rtype: str
        """
        return self._identity

    @identity.setter
    def identity(self, identity):
        """Sets the identity of this ProblemOccurrence.


        :param identity: The identity of this ProblemOccurrence.  # noqa: E501
        :type: str
        """

        self._identity = identity

    @property
    def href(self):
        """Gets the href of this ProblemOccurrence.  # noqa: E501


        :return: The href of this ProblemOccurrence.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this ProblemOccurrence.


        :param href: The href of this ProblemOccurrence.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def muted(self):
        """Gets the muted of this ProblemOccurrence.  # noqa: E501


        :return: The muted of this ProblemOccurrence.  # noqa: E501
        :rtype: bool
        """
        return self._muted

    @muted.setter
    def muted(self, muted):
        """Sets the muted of this ProblemOccurrence.


        :param muted: The muted of this ProblemOccurrence.  # noqa: E501
        :type: bool
        """

        self._muted = muted

    @property
    def currently_investigated(self):
        """Gets the currently_investigated of this ProblemOccurrence.  # noqa: E501


        :return: The currently_investigated of this ProblemOccurrence.  # noqa: E501
        :rtype: bool
        """
        return self._currently_investigated

    @currently_investigated.setter
    def currently_investigated(self, currently_investigated):
        """Sets the currently_investigated of this ProblemOccurrence.


        :param currently_investigated: The currently_investigated of this ProblemOccurrence.  # noqa: E501
        :type: bool
        """

        self._currently_investigated = currently_investigated

    @property
    def currently_muted(self):
        """Gets the currently_muted of this ProblemOccurrence.  # noqa: E501


        :return: The currently_muted of this ProblemOccurrence.  # noqa: E501
        :rtype: bool
        """
        return self._currently_muted

    @currently_muted.setter
    def currently_muted(self, currently_muted):
        """Sets the currently_muted of this ProblemOccurrence.


        :param currently_muted: The currently_muted of this ProblemOccurrence.  # noqa: E501
        :type: bool
        """

        self._currently_muted = currently_muted

    @property
    def log_anchor(self):
        """Gets the log_anchor of this ProblemOccurrence.  # noqa: E501


        :return: The log_anchor of this ProblemOccurrence.  # noqa: E501
        :rtype: str
        """
        return self._log_anchor

    @log_anchor.setter
    def log_anchor(self, log_anchor):
        """Sets the log_anchor of this ProblemOccurrence.


        :param log_anchor: The log_anchor of this ProblemOccurrence.  # noqa: E501
        :type: str
        """

        self._log_anchor = log_anchor

    @property
    def new_failure(self):
        """Gets the new_failure of this ProblemOccurrence.  # noqa: E501


        :return: The new_failure of this ProblemOccurrence.  # noqa: E501
        :rtype: bool
        """
        return self._new_failure

    @new_failure.setter
    def new_failure(self, new_failure):
        """Sets the new_failure of this ProblemOccurrence.


        :param new_failure: The new_failure of this ProblemOccurrence.  # noqa: E501
        :type: bool
        """

        self._new_failure = new_failure

    @property
    def details(self):
        """Gets the details of this ProblemOccurrence.  # noqa: E501


        :return: The details of this ProblemOccurrence.  # noqa: E501
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this ProblemOccurrence.


        :param details: The details of this ProblemOccurrence.  # noqa: E501
        :type: str
        """

        self._details = details

    @property
    def additional_data(self):
        """Gets the additional_data of this ProblemOccurrence.  # noqa: E501


        :return: The additional_data of this ProblemOccurrence.  # noqa: E501
        :rtype: str
        """
        return self._additional_data

    @additional_data.setter
    def additional_data(self, additional_data):
        """Sets the additional_data of this ProblemOccurrence.


        :param additional_data: The additional_data of this ProblemOccurrence.  # noqa: E501
        :type: str
        """

        self._additional_data = additional_data

    @property
    def problem(self):
        """Gets the problem of this ProblemOccurrence.  # noqa: E501


        :return: The problem of this ProblemOccurrence.  # noqa: E501
        :rtype: Problem
        """
        return self._problem

    @problem.setter
    def problem(self, problem):
        """Sets the problem of this ProblemOccurrence.


        :param problem: The problem of this ProblemOccurrence.  # noqa: E501
        :type: Problem
        """

        self._problem = problem

    @property
    def mute(self):
        """Gets the mute of this ProblemOccurrence.  # noqa: E501


        :return: The mute of this ProblemOccurrence.  # noqa: E501
        :rtype: Mute
        """
        return self._mute

    @mute.setter
    def mute(self, mute):
        """Sets the mute of this ProblemOccurrence.


        :param mute: The mute of this ProblemOccurrence.  # noqa: E501
        :type: Mute
        """

        self._mute = mute

    @property
    def build(self):
        """Gets the build of this ProblemOccurrence.  # noqa: E501


        :return: The build of this ProblemOccurrence.  # noqa: E501
        :rtype: Build
        """
        return self._build

    @build.setter
    def build(self, build):
        """Sets the build of this ProblemOccurrence.


        :param build: The build of this ProblemOccurrence.  # noqa: E501
        :type: Build
        """

        self._build = build
