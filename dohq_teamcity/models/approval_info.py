# coding: utf-8

from dohq_teamcity.custom.base_model import TeamCityObject


# from dohq_teamcity.models.group_approvals import GroupApprovals  # noqa: F401,E501
# from dohq_teamcity.models.user_approvals import UserApprovals  # noqa: F401,E501


class ApprovalInfo(TeamCityObject):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'timeout_timestamp': 'str',
        'configuration_valid': 'bool',
        'can_be_approved_by_current_user': 'bool',
        'user_approvals': 'UserApprovals',
        'group_approvals': 'GroupApprovals',
        'status': 'str'
    }

    attribute_map = {
        'timeout_timestamp': 'timeoutTimestamp',
        'configuration_valid': 'configurationValid',
        'can_be_approved_by_current_user': 'canBeApprovedByCurrentUser',
        'user_approvals': 'userApprovals',
        'group_approvals': 'groupApprovals',
        'status': 'status'
    }

    def __init__(self, timeout_timestamp=None, configuration_valid=None, can_be_approved_by_current_user=None, user_approvals=None, group_approvals=None, status=None, teamcity=None):  # noqa: E501
        """ApprovalInfo - a model defined in Swagger"""  # noqa: E501

        self._timeout_timestamp = None
        self._configuration_valid = None
        self._can_be_approved_by_current_user = None
        self._user_approvals = None
        self._group_approvals = None
        self._status = None
        self.discriminator = None

        if timeout_timestamp is not None:
            self.timeout_timestamp = timeout_timestamp
        if configuration_valid is not None:
            self.configuration_valid = configuration_valid
        if can_be_approved_by_current_user is not None:
            self.can_be_approved_by_current_user = can_be_approved_by_current_user
        if user_approvals is not None:
            self.user_approvals = user_approvals
        if group_approvals is not None:
            self.group_approvals = group_approvals
        if status is not None:
            self.status = status
        super(ApprovalInfo, self).__init__(teamcity=teamcity)

    @property
    def timeout_timestamp(self):
        """Gets the timeout_timestamp of this ApprovalInfo.  # noqa: E501


        :return: The timeout_timestamp of this ApprovalInfo.  # noqa: E501
        :rtype: str
        """
        return self._timeout_timestamp

    @timeout_timestamp.setter
    def timeout_timestamp(self, timeout_timestamp):
        """Sets the timeout_timestamp of this ApprovalInfo.


        :param timeout_timestamp: The timeout_timestamp of this ApprovalInfo.  # noqa: E501
        :type: str
        """

        self._timeout_timestamp = timeout_timestamp

    @property
    def configuration_valid(self):
        """Gets the configuration_valid of this ApprovalInfo.  # noqa: E501


        :return: The configuration_valid of this ApprovalInfo.  # noqa: E501
        :rtype: bool
        """
        return self._configuration_valid

    @configuration_valid.setter
    def configuration_valid(self, configuration_valid):
        """Sets the configuration_valid of this ApprovalInfo.


        :param configuration_valid: The configuration_valid of this ApprovalInfo.  # noqa: E501
        :type: bool
        """

        self._configuration_valid = configuration_valid

    @property
    def can_be_approved_by_current_user(self):
        """Gets the can_be_approved_by_current_user of this ApprovalInfo.  # noqa: E501


        :return: The can_be_approved_by_current_user of this ApprovalInfo.  # noqa: E501
        :rtype: bool
        """
        return self._can_be_approved_by_current_user

    @can_be_approved_by_current_user.setter
    def can_be_approved_by_current_user(self, can_be_approved_by_current_user):
        """Sets the can_be_approved_by_current_user of this ApprovalInfo.


        :param can_be_approved_by_current_user: The can_be_approved_by_current_user of this ApprovalInfo.  # noqa: E501
        :type: bool
        """

        self._can_be_approved_by_current_user = can_be_approved_by_current_user

    @property
    def user_approvals(self):
        """Gets the user_approvals of this ApprovalInfo.  # noqa: E501


        :return: The user_approvals of this ApprovalInfo.  # noqa: E501
        :rtype: UserApprovals
        """
        return self._user_approvals

    @user_approvals.setter
    def user_approvals(self, user_approvals):
        """Sets the user_approvals of this ApprovalInfo.


        :param user_approvals: The user_approvals of this ApprovalInfo.  # noqa: E501
        :type: UserApprovals
        """

        self._user_approvals = user_approvals

    @property
    def group_approvals(self):
        """Gets the group_approvals of this ApprovalInfo.  # noqa: E501


        :return: The group_approvals of this ApprovalInfo.  # noqa: E501
        :rtype: GroupApprovals
        """
        return self._group_approvals

    @group_approvals.setter
    def group_approvals(self, group_approvals):
        """Sets the group_approvals of this ApprovalInfo.


        :param group_approvals: The group_approvals of this ApprovalInfo.  # noqa: E501
        :type: GroupApprovals
        """

        self._group_approvals = group_approvals

    @property
    def status(self):
        """Gets the status of this ApprovalInfo.  # noqa: E501


        :return: The status of this ApprovalInfo.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ApprovalInfo.


        :param status: The status of this ApprovalInfo.  # noqa: E501
        :type: str
        """
        allowed_values = ["waitingForApproval", "approved", "timedOut", "canceled"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status
