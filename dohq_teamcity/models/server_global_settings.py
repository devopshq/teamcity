# coding: utf-8

from dohq_teamcity.custom.base_model import TeamCityObject


class ServerGlobalSettings(TeamCityObject):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'use_encryption': 'bool',
        'default_vcs_check_interval': 'int',
        'enforce_default_vcs_check_interval': 'bool',
        'artifacts_domain_isolation': 'bool',
        'artifacts_url': 'str',
        'max_artifact_size': 'int',
        'max_artifacts_number': 'int',
        'encryption_key': 'str',
        'artifact_directories': 'str',
        'root_url': 'str',
        'default_quiet_period': 'int',
        'default_execution_timeout': 'int'
    }

    attribute_map = {
        'use_encryption': 'useEncryption',
        'default_vcs_check_interval': 'defaultVCSCheckInterval',
        'enforce_default_vcs_check_interval': 'enforceDefaultVCSCheckInterval',
        'artifacts_domain_isolation': 'artifactsDomainIsolation',
        'artifacts_url': 'artifactsUrl',
        'max_artifact_size': 'maxArtifactSize',
        'max_artifacts_number': 'maxArtifactsNumber',
        'encryption_key': 'encryptionKey',
        'artifact_directories': 'artifactDirectories',
        'root_url': 'rootUrl',
        'default_quiet_period': 'defaultQuietPeriod',
        'default_execution_timeout': 'defaultExecutionTimeout'
    }

    def __init__(self, use_encryption=None, default_vcs_check_interval=None, enforce_default_vcs_check_interval=None, artifacts_domain_isolation=None, artifacts_url=None, max_artifact_size=None, max_artifacts_number=None, encryption_key=None, artifact_directories=None, root_url=None, default_quiet_period=None, default_execution_timeout=None, teamcity=None):  # noqa: E501
        """ServerGlobalSettings - a model defined in Swagger"""  # noqa: E501

        self._use_encryption = None
        self._default_vcs_check_interval = None
        self._enforce_default_vcs_check_interval = None
        self._artifacts_domain_isolation = None
        self._artifacts_url = None
        self._max_artifact_size = None
        self._max_artifacts_number = None
        self._encryption_key = None
        self._artifact_directories = None
        self._root_url = None
        self._default_quiet_period = None
        self._default_execution_timeout = None
        self.discriminator = None

        if use_encryption is not None:
            self.use_encryption = use_encryption
        if default_vcs_check_interval is not None:
            self.default_vcs_check_interval = default_vcs_check_interval
        if enforce_default_vcs_check_interval is not None:
            self.enforce_default_vcs_check_interval = enforce_default_vcs_check_interval
        if artifacts_domain_isolation is not None:
            self.artifacts_domain_isolation = artifacts_domain_isolation
        if artifacts_url is not None:
            self.artifacts_url = artifacts_url
        if max_artifact_size is not None:
            self.max_artifact_size = max_artifact_size
        if max_artifacts_number is not None:
            self.max_artifacts_number = max_artifacts_number
        if encryption_key is not None:
            self.encryption_key = encryption_key
        if artifact_directories is not None:
            self.artifact_directories = artifact_directories
        if root_url is not None:
            self.root_url = root_url
        if default_quiet_period is not None:
            self.default_quiet_period = default_quiet_period
        if default_execution_timeout is not None:
            self.default_execution_timeout = default_execution_timeout
        super(ServerGlobalSettings, self).__init__(teamcity=teamcity)

    @property
    def use_encryption(self):
        """Gets the use_encryption of this ServerGlobalSettings.  # noqa: E501


        :return: The use_encryption of this ServerGlobalSettings.  # noqa: E501
        :rtype: bool
        """
        return self._use_encryption

    @use_encryption.setter
    def use_encryption(self, use_encryption):
        """Sets the use_encryption of this ServerGlobalSettings.


        :param use_encryption: The use_encryption of this ServerGlobalSettings.  # noqa: E501
        :type: bool
        """

        self._use_encryption = use_encryption

    @property
    def default_vcs_check_interval(self):
        """Gets the default_vcs_check_interval of this ServerGlobalSettings.  # noqa: E501


        :return: The default_vcs_check_interval of this ServerGlobalSettings.  # noqa: E501
        :rtype: int
        """
        return self._default_vcs_check_interval

    @default_vcs_check_interval.setter
    def default_vcs_check_interval(self, default_vcs_check_interval):
        """Sets the default_vcs_check_interval of this ServerGlobalSettings.


        :param default_vcs_check_interval: The default_vcs_check_interval of this ServerGlobalSettings.  # noqa: E501
        :type: int
        """

        self._default_vcs_check_interval = default_vcs_check_interval

    @property
    def enforce_default_vcs_check_interval(self):
        """Gets the enforce_default_vcs_check_interval of this ServerGlobalSettings.  # noqa: E501


        :return: The enforce_default_vcs_check_interval of this ServerGlobalSettings.  # noqa: E501
        :rtype: bool
        """
        return self._enforce_default_vcs_check_interval

    @enforce_default_vcs_check_interval.setter
    def enforce_default_vcs_check_interval(self, enforce_default_vcs_check_interval):
        """Sets the enforce_default_vcs_check_interval of this ServerGlobalSettings.


        :param enforce_default_vcs_check_interval: The enforce_default_vcs_check_interval of this ServerGlobalSettings.  # noqa: E501
        :type: bool
        """

        self._enforce_default_vcs_check_interval = enforce_default_vcs_check_interval

    @property
    def artifacts_domain_isolation(self):
        """Gets the artifacts_domain_isolation of this ServerGlobalSettings.  # noqa: E501


        :return: The artifacts_domain_isolation of this ServerGlobalSettings.  # noqa: E501
        :rtype: bool
        """
        return self._artifacts_domain_isolation

    @artifacts_domain_isolation.setter
    def artifacts_domain_isolation(self, artifacts_domain_isolation):
        """Sets the artifacts_domain_isolation of this ServerGlobalSettings.


        :param artifacts_domain_isolation: The artifacts_domain_isolation of this ServerGlobalSettings.  # noqa: E501
        :type: bool
        """

        self._artifacts_domain_isolation = artifacts_domain_isolation

    @property
    def artifacts_url(self):
        """Gets the artifacts_url of this ServerGlobalSettings.  # noqa: E501


        :return: The artifacts_url of this ServerGlobalSettings.  # noqa: E501
        :rtype: str
        """
        return self._artifacts_url

    @artifacts_url.setter
    def artifacts_url(self, artifacts_url):
        """Sets the artifacts_url of this ServerGlobalSettings.


        :param artifacts_url: The artifacts_url of this ServerGlobalSettings.  # noqa: E501
        :type: str
        """

        self._artifacts_url = artifacts_url

    @property
    def max_artifact_size(self):
        """Gets the max_artifact_size of this ServerGlobalSettings.  # noqa: E501


        :return: The max_artifact_size of this ServerGlobalSettings.  # noqa: E501
        :rtype: int
        """
        return self._max_artifact_size

    @max_artifact_size.setter
    def max_artifact_size(self, max_artifact_size):
        """Sets the max_artifact_size of this ServerGlobalSettings.


        :param max_artifact_size: The max_artifact_size of this ServerGlobalSettings.  # noqa: E501
        :type: int
        """

        self._max_artifact_size = max_artifact_size

    @property
    def max_artifacts_number(self):
        """Gets the max_artifacts_number of this ServerGlobalSettings.  # noqa: E501


        :return: The max_artifacts_number of this ServerGlobalSettings.  # noqa: E501
        :rtype: int
        """
        return self._max_artifacts_number

    @max_artifacts_number.setter
    def max_artifacts_number(self, max_artifacts_number):
        """Sets the max_artifacts_number of this ServerGlobalSettings.


        :param max_artifacts_number: The max_artifacts_number of this ServerGlobalSettings.  # noqa: E501
        :type: int
        """

        self._max_artifacts_number = max_artifacts_number

    @property
    def encryption_key(self):
        """Gets the encryption_key of this ServerGlobalSettings.  # noqa: E501


        :return: The encryption_key of this ServerGlobalSettings.  # noqa: E501
        :rtype: str
        """
        return self._encryption_key

    @encryption_key.setter
    def encryption_key(self, encryption_key):
        """Sets the encryption_key of this ServerGlobalSettings.


        :param encryption_key: The encryption_key of this ServerGlobalSettings.  # noqa: E501
        :type: str
        """

        self._encryption_key = encryption_key

    @property
    def artifact_directories(self):
        """Gets the artifact_directories of this ServerGlobalSettings.  # noqa: E501


        :return: The artifact_directories of this ServerGlobalSettings.  # noqa: E501
        :rtype: str
        """
        return self._artifact_directories

    @artifact_directories.setter
    def artifact_directories(self, artifact_directories):
        """Sets the artifact_directories of this ServerGlobalSettings.


        :param artifact_directories: The artifact_directories of this ServerGlobalSettings.  # noqa: E501
        :type: str
        """

        self._artifact_directories = artifact_directories

    @property
    def root_url(self):
        """Gets the root_url of this ServerGlobalSettings.  # noqa: E501


        :return: The root_url of this ServerGlobalSettings.  # noqa: E501
        :rtype: str
        """
        return self._root_url

    @root_url.setter
    def root_url(self, root_url):
        """Sets the root_url of this ServerGlobalSettings.


        :param root_url: The root_url of this ServerGlobalSettings.  # noqa: E501
        :type: str
        """

        self._root_url = root_url

    @property
    def default_quiet_period(self):
        """Gets the default_quiet_period of this ServerGlobalSettings.  # noqa: E501


        :return: The default_quiet_period of this ServerGlobalSettings.  # noqa: E501
        :rtype: int
        """
        return self._default_quiet_period

    @default_quiet_period.setter
    def default_quiet_period(self, default_quiet_period):
        """Sets the default_quiet_period of this ServerGlobalSettings.


        :param default_quiet_period: The default_quiet_period of this ServerGlobalSettings.  # noqa: E501
        :type: int
        """

        self._default_quiet_period = default_quiet_period

    @property
    def default_execution_timeout(self):
        """Gets the default_execution_timeout of this ServerGlobalSettings.  # noqa: E501


        :return: The default_execution_timeout of this ServerGlobalSettings.  # noqa: E501
        :rtype: int
        """
        return self._default_execution_timeout

    @default_execution_timeout.setter
    def default_execution_timeout(self, default_execution_timeout):
        """Sets the default_execution_timeout of this ServerGlobalSettings.


        :param default_execution_timeout: The default_execution_timeout of this ServerGlobalSettings.  # noqa: E501
        :type: int
        """

        self._default_execution_timeout = default_execution_timeout
