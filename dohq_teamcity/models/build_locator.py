# coding: utf-8

from dohq_teamcity.custom.base_model import TeamCityObject


class BuildLocator(TeamCityObject):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'affected_project': 'str',
        'agent': 'str',
        'agent_type_id': 'int',
        'any': 'bool',
        'artifact_dependency': 'str',
        'branch': 'str',
        'build_type': 'str',
        'canceled': 'bool',
        'compatible_agent': 'str',
        'composite': 'bool',
        'count': 'int',
        'default_filter': 'bool',
        'failed_to_start': 'bool',
        'finish_date': 'str',
        'finished': 'bool',
        'hanging': 'bool',
        'history': 'bool',
        'id': 'str',
        'item': 'str',
        'lookup_limit': 'int',
        'number': 'str',
        'personal': 'bool',
        'pinned': 'bool',
        'project': 'str',
        '_property': 'str',
        'queued': 'bool',
        'queued_date': 'str',
        'revision': 'str',
        'running': 'bool',
        'snapshot_dependency': 'str',
        'start': 'int',
        'start_date': 'str',
        'state': 'str',
        'status': 'str',
        'tag': 'str',
        'task_id': 'int',
        'user': 'str'
    }

    attribute_map = {
        'affected_project': 'affectedProject',
        'agent': 'agent',
        'agent_type_id': 'agentTypeId',
        'any': 'any',
        'artifact_dependency': 'artifactDependency',
        'branch': 'branch',
        'build_type': 'buildType',
        'canceled': 'canceled',
        'compatible_agent': 'compatibleAgent',
        'composite': 'composite',
        'count': 'count',
        'default_filter': 'defaultFilter',
        'failed_to_start': 'failedToStart',
        'finish_date': 'finishDate',
        'finished': 'finished',
        'hanging': 'hanging',
        'history': 'history',
        'id': 'id',
        'item': 'item',
        'lookup_limit': 'lookupLimit',
        'number': 'number',
        'personal': 'personal',
        'pinned': 'pinned',
        'project': 'project',
        '_property': 'property',
        'queued': 'queued',
        'queued_date': 'queuedDate',
        'revision': 'revision',
        'running': 'running',
        'snapshot_dependency': 'snapshotDependency',
        'start': 'start',
        'start_date': 'startDate',
        'state': 'state',
        'status': 'status',
        'tag': 'tag',
        'task_id': 'taskId',
        'user': 'user'
    }

    def __init__(self, affected_project=None, agent=None, agent_type_id=None, any=None, artifact_dependency=None, branch=None, build_type=None, canceled=None, compatible_agent=None, composite=None, count=None, default_filter=None, failed_to_start=None, finish_date=None, finished=None, hanging=None, history=None, id=None, item=None, lookup_limit=None, number=None, personal=None, pinned=None, project=None, _property=None, queued=None, queued_date=None, revision=None, running=None, snapshot_dependency=None, start=None, start_date=None, state=None, status=None, tag=None, task_id=None, user=None, teamcity=None):  # noqa: E501
        """BuildLocator - a model defined in Swagger"""  # noqa: E501

        self._affected_project = None
        self._agent = None
        self._agent_type_id = None
        self._any = None
        self._artifact_dependency = None
        self._branch = None
        self._build_type = None
        self._canceled = None
        self._compatible_agent = None
        self._composite = None
        self._count = None
        self._default_filter = None
        self._failed_to_start = None
        self._finish_date = None
        self._finished = None
        self._hanging = None
        self._history = None
        self._id = None
        self._item = None
        self._lookup_limit = None
        self._number = None
        self._personal = None
        self._pinned = None
        self._project = None
        self.__property = None
        self._queued = None
        self._queued_date = None
        self._revision = None
        self._running = None
        self._snapshot_dependency = None
        self._start = None
        self._start_date = None
        self._state = None
        self._status = None
        self._tag = None
        self._task_id = None
        self._user = None
        self.discriminator = None

        if affected_project is not None:
            self.affected_project = affected_project
        if agent is not None:
            self.agent = agent
        if agent_type_id is not None:
            self.agent_type_id = agent_type_id
        if any is not None:
            self.any = any
        if artifact_dependency is not None:
            self.artifact_dependency = artifact_dependency
        if branch is not None:
            self.branch = branch
        if build_type is not None:
            self.build_type = build_type
        if canceled is not None:
            self.canceled = canceled
        if compatible_agent is not None:
            self.compatible_agent = compatible_agent
        if composite is not None:
            self.composite = composite
        if count is not None:
            self.count = count
        if default_filter is not None:
            self.default_filter = default_filter
        if failed_to_start is not None:
            self.failed_to_start = failed_to_start
        if finish_date is not None:
            self.finish_date = finish_date
        if finished is not None:
            self.finished = finished
        if hanging is not None:
            self.hanging = hanging
        if history is not None:
            self.history = history
        if id is not None:
            self.id = id
        if item is not None:
            self.item = item
        if lookup_limit is not None:
            self.lookup_limit = lookup_limit
        if number is not None:
            self.number = number
        if personal is not None:
            self.personal = personal
        if pinned is not None:
            self.pinned = pinned
        if project is not None:
            self.project = project
        if _property is not None:
            self._property = _property
        if queued is not None:
            self.queued = queued
        if queued_date is not None:
            self.queued_date = queued_date
        if revision is not None:
            self.revision = revision
        if running is not None:
            self.running = running
        if snapshot_dependency is not None:
            self.snapshot_dependency = snapshot_dependency
        if start is not None:
            self.start = start
        if start_date is not None:
            self.start_date = start_date
        if state is not None:
            self.state = state
        if status is not None:
            self.status = status
        if tag is not None:
            self.tag = tag
        if task_id is not None:
            self.task_id = task_id
        if user is not None:
            self.user = user
        super(BuildLocator, self).__init__(teamcity=teamcity)

    @property
    def affected_project(self):
        """Gets the affected_project of this BuildLocator.  # noqa: E501

        Project (direct or indirect parent) locator.  # noqa: E501

        :return: The affected_project of this BuildLocator.  # noqa: E501
        :rtype: str
        """
        return self._affected_project

    @affected_project.setter
    def affected_project(self, affected_project):
        """Sets the affected_project of this BuildLocator.

        Project (direct or indirect parent) locator.  # noqa: E501

        :param affected_project: The affected_project of this BuildLocator.  # noqa: E501
        :type: str
        """

        self._affected_project = affected_project

    @property
    def agent(self):
        """Gets the agent of this BuildLocator.  # noqa: E501

        Agent locator.  # noqa: E501

        :return: The agent of this BuildLocator.  # noqa: E501
        :rtype: str
        """
        return self._agent

    @agent.setter
    def agent(self, agent):
        """Sets the agent of this BuildLocator.

        Agent locator.  # noqa: E501

        :param agent: The agent of this BuildLocator.  # noqa: E501
        :type: str
        """

        self._agent = agent

    @property
    def agent_type_id(self):
        """Gets the agent_type_id of this BuildLocator.  # noqa: E501

        typeId of agent used to execute build.  # noqa: E501

        :return: The agent_type_id of this BuildLocator.  # noqa: E501
        :rtype: int
        """
        return self._agent_type_id

    @agent_type_id.setter
    def agent_type_id(self, agent_type_id):
        """Sets the agent_type_id of this BuildLocator.

        typeId of agent used to execute build.  # noqa: E501

        :param agent_type_id: The agent_type_id of this BuildLocator.  # noqa: E501
        :type: int
        """

        self._agent_type_id = agent_type_id

    @property
    def any(self):
        """Gets the any of this BuildLocator.  # noqa: E501

        State can be any.  # noqa: E501

        :return: The any of this BuildLocator.  # noqa: E501
        :rtype: bool
        """
        return self._any

    @any.setter
    def any(self, any):
        """Sets the any of this BuildLocator.

        State can be any.  # noqa: E501

        :param any: The any of this BuildLocator.  # noqa: E501
        :type: bool
        """

        self._any = any

    @property
    def artifact_dependency(self):
        """Gets the artifact_dependency of this BuildLocator.  # noqa: E501


        :return: The artifact_dependency of this BuildLocator.  # noqa: E501
        :rtype: str
        """
        return self._artifact_dependency

    @artifact_dependency.setter
    def artifact_dependency(self, artifact_dependency):
        """Sets the artifact_dependency of this BuildLocator.


        :param artifact_dependency: The artifact_dependency of this BuildLocator.  # noqa: E501
        :type: str
        """

        self._artifact_dependency = artifact_dependency

    @property
    def branch(self):
        """Gets the branch of this BuildLocator.  # noqa: E501

        Branch locator.  # noqa: E501

        :return: The branch of this BuildLocator.  # noqa: E501
        :rtype: str
        """
        return self._branch

    @branch.setter
    def branch(self, branch):
        """Sets the branch of this BuildLocator.

        Branch locator.  # noqa: E501

        :param branch: The branch of this BuildLocator.  # noqa: E501
        :type: str
        """

        self._branch = branch

    @property
    def build_type(self):
        """Gets the build_type of this BuildLocator.  # noqa: E501

        Build type locator.  # noqa: E501

        :return: The build_type of this BuildLocator.  # noqa: E501
        :rtype: str
        """
        return self._build_type

    @build_type.setter
    def build_type(self, build_type):
        """Sets the build_type of this BuildLocator.

        Build type locator.  # noqa: E501

        :param build_type: The build_type of this BuildLocator.  # noqa: E501
        :type: str
        """

        self._build_type = build_type

    @property
    def canceled(self):
        """Gets the canceled of this BuildLocator.  # noqa: E501

        Is canceled.  # noqa: E501

        :return: The canceled of this BuildLocator.  # noqa: E501
        :rtype: bool
        """
        return self._canceled

    @canceled.setter
    def canceled(self, canceled):
        """Sets the canceled of this BuildLocator.

        Is canceled.  # noqa: E501

        :param canceled: The canceled of this BuildLocator.  # noqa: E501
        :type: bool
        """

        self._canceled = canceled

    @property
    def compatible_agent(self):
        """Gets the compatible_agent of this BuildLocator.  # noqa: E501

        Agent locator.  # noqa: E501

        :return: The compatible_agent of this BuildLocator.  # noqa: E501
        :rtype: str
        """
        return self._compatible_agent

    @compatible_agent.setter
    def compatible_agent(self, compatible_agent):
        """Sets the compatible_agent of this BuildLocator.

        Agent locator.  # noqa: E501

        :param compatible_agent: The compatible_agent of this BuildLocator.  # noqa: E501
        :type: str
        """

        self._compatible_agent = compatible_agent

    @property
    def composite(self):
        """Gets the composite of this BuildLocator.  # noqa: E501

        Is composite.  # noqa: E501

        :return: The composite of this BuildLocator.  # noqa: E501
        :rtype: bool
        """
        return self._composite

    @composite.setter
    def composite(self, composite):
        """Sets the composite of this BuildLocator.

        Is composite.  # noqa: E501

        :param composite: The composite of this BuildLocator.  # noqa: E501
        :type: bool
        """

        self._composite = composite

    @property
    def count(self):
        """Gets the count of this BuildLocator.  # noqa: E501

        For paginated calls, how many entities to return per page.  # noqa: E501

        :return: The count of this BuildLocator.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this BuildLocator.

        For paginated calls, how many entities to return per page.  # noqa: E501

        :param count: The count of this BuildLocator.  # noqa: E501
        :type: int
        """

        self._count = count

    @property
    def default_filter(self):
        """Gets the default_filter of this BuildLocator.  # noqa: E501

        If true, applies default filter which returns only \"normal\" builds (finished builds which are not canceled, not failed-to-start, not personal, and on default branch (in branched build configurations)).  # noqa: E501

        :return: The default_filter of this BuildLocator.  # noqa: E501
        :rtype: bool
        """
        return self._default_filter

    @default_filter.setter
    def default_filter(self, default_filter):
        """Sets the default_filter of this BuildLocator.

        If true, applies default filter which returns only \"normal\" builds (finished builds which are not canceled, not failed-to-start, not personal, and on default branch (in branched build configurations)).  # noqa: E501

        :param default_filter: The default_filter of this BuildLocator.  # noqa: E501
        :type: bool
        """

        self._default_filter = default_filter

    @property
    def failed_to_start(self):
        """Gets the failed_to_start of this BuildLocator.  # noqa: E501

        Is failed to start.  # noqa: E501

        :return: The failed_to_start of this BuildLocator.  # noqa: E501
        :rtype: bool
        """
        return self._failed_to_start

    @failed_to_start.setter
    def failed_to_start(self, failed_to_start):
        """Sets the failed_to_start of this BuildLocator.

        Is failed to start.  # noqa: E501

        :param failed_to_start: The failed_to_start of this BuildLocator.  # noqa: E501
        :type: bool
        """

        self._failed_to_start = failed_to_start

    @property
    def finish_date(self):
        """Gets the finish_date of this BuildLocator.  # noqa: E501

        Requires either date or build dimension.  # noqa: E501

        :return: The finish_date of this BuildLocator.  # noqa: E501
        :rtype: str
        """
        return self._finish_date

    @finish_date.setter
    def finish_date(self, finish_date):
        """Sets the finish_date of this BuildLocator.

        Requires either date or build dimension.  # noqa: E501

        :param finish_date: The finish_date of this BuildLocator.  # noqa: E501
        :type: str
        """

        self._finish_date = finish_date

    @property
    def finished(self):
        """Gets the finished of this BuildLocator.  # noqa: E501

        Is finished.  # noqa: E501

        :return: The finished of this BuildLocator.  # noqa: E501
        :rtype: bool
        """
        return self._finished

    @finished.setter
    def finished(self, finished):
        """Sets the finished of this BuildLocator.

        Is finished.  # noqa: E501

        :param finished: The finished of this BuildLocator.  # noqa: E501
        :type: bool
        """

        self._finished = finished

    @property
    def hanging(self):
        """Gets the hanging of this BuildLocator.  # noqa: E501

        Is hanging.  # noqa: E501

        :return: The hanging of this BuildLocator.  # noqa: E501
        :rtype: bool
        """
        return self._hanging

    @hanging.setter
    def hanging(self, hanging):
        """Sets the hanging of this BuildLocator.

        Is hanging.  # noqa: E501

        :param hanging: The hanging of this BuildLocator.  # noqa: E501
        :type: bool
        """

        self._hanging = hanging

    @property
    def history(self):
        """Gets the history of this BuildLocator.  # noqa: E501

        Is history build.  # noqa: E501

        :return: The history of this BuildLocator.  # noqa: E501
        :rtype: bool
        """
        return self._history

    @history.setter
    def history(self, history):
        """Sets the history of this BuildLocator.

        Is history build.  # noqa: E501

        :param history: The history of this BuildLocator.  # noqa: E501
        :type: bool
        """

        self._history = history

    @property
    def id(self):
        """Gets the id of this BuildLocator.  # noqa: E501

        Entity ID.  # noqa: E501

        :return: The id of this BuildLocator.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BuildLocator.

        Entity ID.  # noqa: E501

        :param id: The id of this BuildLocator.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def item(self):
        """Gets the item of this BuildLocator.  # noqa: E501

        Supply multiple locators and return a union of the results.  # noqa: E501

        :return: The item of this BuildLocator.  # noqa: E501
        :rtype: str
        """
        return self._item

    @item.setter
    def item(self, item):
        """Sets the item of this BuildLocator.

        Supply multiple locators and return a union of the results.  # noqa: E501

        :param item: The item of this BuildLocator.  # noqa: E501
        :type: str
        """

        self._item = item

    @property
    def lookup_limit(self):
        """Gets the lookup_limit of this BuildLocator.  # noqa: E501

        Limit processing to the latest `<lookupLimit>` entities.  # noqa: E501

        :return: The lookup_limit of this BuildLocator.  # noqa: E501
        :rtype: int
        """
        return self._lookup_limit

    @lookup_limit.setter
    def lookup_limit(self, lookup_limit):
        """Sets the lookup_limit of this BuildLocator.

        Limit processing to the latest `<lookupLimit>` entities.  # noqa: E501

        :param lookup_limit: The lookup_limit of this BuildLocator.  # noqa: E501
        :type: int
        """

        self._lookup_limit = lookup_limit

    @property
    def number(self):
        """Gets the number of this BuildLocator.  # noqa: E501

        Build number string.  # noqa: E501

        :return: The number of this BuildLocator.  # noqa: E501
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this BuildLocator.

        Build number string.  # noqa: E501

        :param number: The number of this BuildLocator.  # noqa: E501
        :type: str
        """

        self._number = number

    @property
    def personal(self):
        """Gets the personal of this BuildLocator.  # noqa: E501

        Is a personal build.  # noqa: E501

        :return: The personal of this BuildLocator.  # noqa: E501
        :rtype: bool
        """
        return self._personal

    @personal.setter
    def personal(self, personal):
        """Sets the personal of this BuildLocator.

        Is a personal build.  # noqa: E501

        :param personal: The personal of this BuildLocator.  # noqa: E501
        :type: bool
        """

        self._personal = personal

    @property
    def pinned(self):
        """Gets the pinned of this BuildLocator.  # noqa: E501

        Is pinned.  # noqa: E501

        :return: The pinned of this BuildLocator.  # noqa: E501
        :rtype: bool
        """
        return self._pinned

    @pinned.setter
    def pinned(self, pinned):
        """Sets the pinned of this BuildLocator.

        Is pinned.  # noqa: E501

        :param pinned: The pinned of this BuildLocator.  # noqa: E501
        :type: bool
        """

        self._pinned = pinned

    @property
    def project(self):
        """Gets the project of this BuildLocator.  # noqa: E501

        Project (direct parent) locator.  # noqa: E501

        :return: The project of this BuildLocator.  # noqa: E501
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this BuildLocator.

        Project (direct parent) locator.  # noqa: E501

        :param project: The project of this BuildLocator.  # noqa: E501
        :type: str
        """

        self._project = project

    @property
    def _property(self):
        """Gets the _property of this BuildLocator.  # noqa: E501


        :return: The _property of this BuildLocator.  # noqa: E501
        :rtype: str
        """
        return self.__property

    @_property.setter
    def _property(self, _property):
        """Sets the _property of this BuildLocator.


        :param _property: The _property of this BuildLocator.  # noqa: E501
        :type: str
        """
        allowed_values = ["exists", "not-exists", "equals", "does-not-equal", "starts-with", "contains", "does-not-contain", "ends-with", "any", "matches", "does-not-match", "more-than", "no-more-than", "less-than", "no-less-than", "ver-more-than", "ver-no-more-than", "ver-less-than", "ver-no-less-than"]  # noqa: E501
        if _property not in allowed_values:
            raise ValueError(
                "Invalid value for `_property` ({0}), must be one of {1}"  # noqa: E501
                .format(_property, allowed_values)
            )

        self.__property = _property

    @property
    def queued(self):
        """Gets the queued of this BuildLocator.  # noqa: E501

        Is queued.  # noqa: E501

        :return: The queued of this BuildLocator.  # noqa: E501
        :rtype: bool
        """
        return self._queued

    @queued.setter
    def queued(self, queued):
        """Sets the queued of this BuildLocator.

        Is queued.  # noqa: E501

        :param queued: The queued of this BuildLocator.  # noqa: E501
        :type: bool
        """

        self._queued = queued

    @property
    def queued_date(self):
        """Gets the queued_date of this BuildLocator.  # noqa: E501

        Requires either date or build dimension.  # noqa: E501

        :return: The queued_date of this BuildLocator.  # noqa: E501
        :rtype: str
        """
        return self._queued_date

    @queued_date.setter
    def queued_date(self, queued_date):
        """Sets the queued_date of this BuildLocator.

        Requires either date or build dimension.  # noqa: E501

        :param queued_date: The queued_date of this BuildLocator.  # noqa: E501
        :type: str
        """

        self._queued_date = queued_date

    @property
    def revision(self):
        """Gets the revision of this BuildLocator.  # noqa: E501

        Build revision.  # noqa: E501

        :return: The revision of this BuildLocator.  # noqa: E501
        :rtype: str
        """
        return self._revision

    @revision.setter
    def revision(self, revision):
        """Sets the revision of this BuildLocator.

        Build revision.  # noqa: E501

        :param revision: The revision of this BuildLocator.  # noqa: E501
        :type: str
        """

        self._revision = revision

    @property
    def running(self):
        """Gets the running of this BuildLocator.  # noqa: E501

        Is running.  # noqa: E501

        :return: The running of this BuildLocator.  # noqa: E501
        :rtype: bool
        """
        return self._running

    @running.setter
    def running(self, running):
        """Sets the running of this BuildLocator.

        Is running.  # noqa: E501

        :param running: The running of this BuildLocator.  # noqa: E501
        :type: bool
        """

        self._running = running

    @property
    def snapshot_dependency(self):
        """Gets the snapshot_dependency of this BuildLocator.  # noqa: E501


        :return: The snapshot_dependency of this BuildLocator.  # noqa: E501
        :rtype: str
        """
        return self._snapshot_dependency

    @snapshot_dependency.setter
    def snapshot_dependency(self, snapshot_dependency):
        """Sets the snapshot_dependency of this BuildLocator.


        :param snapshot_dependency: The snapshot_dependency of this BuildLocator.  # noqa: E501
        :type: str
        """

        self._snapshot_dependency = snapshot_dependency

    @property
    def start(self):
        """Gets the start of this BuildLocator.  # noqa: E501

        For paginated calls, from which entity to start rendering the page.  # noqa: E501

        :return: The start of this BuildLocator.  # noqa: E501
        :rtype: int
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this BuildLocator.

        For paginated calls, from which entity to start rendering the page.  # noqa: E501

        :param start: The start of this BuildLocator.  # noqa: E501
        :type: int
        """

        self._start = start

    @property
    def start_date(self):
        """Gets the start_date of this BuildLocator.  # noqa: E501

        Requires either date or build dimension.  # noqa: E501

        :return: The start_date of this BuildLocator.  # noqa: E501
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this BuildLocator.

        Requires either date or build dimension.  # noqa: E501

        :param start_date: The start_date of this BuildLocator.  # noqa: E501
        :type: str
        """

        self._start_date = start_date

    @property
    def state(self):
        """Gets the state of this BuildLocator.  # noqa: E501


        :return: The state of this BuildLocator.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this BuildLocator.


        :param state: The state of this BuildLocator.  # noqa: E501
        :type: str
        """
        allowed_values = ["queued", "running", "finished", "any"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def status(self):
        """Gets the status of this BuildLocator.  # noqa: E501

        Status text.  # noqa: E501

        :return: The status of this BuildLocator.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this BuildLocator.

        Status text.  # noqa: E501

        :param status: The status of this BuildLocator.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def tag(self):
        """Gets the tag of this BuildLocator.  # noqa: E501

        Tag locator.  # noqa: E501

        :return: The tag of this BuildLocator.  # noqa: E501
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this BuildLocator.

        Tag locator.  # noqa: E501

        :param tag: The tag of this BuildLocator.  # noqa: E501
        :type: str
        """

        self._tag = tag

    @property
    def task_id(self):
        """Gets the task_id of this BuildLocator.  # noqa: E501

        ID of a build or build promotion.  # noqa: E501

        :return: The task_id of this BuildLocator.  # noqa: E501
        :rtype: int
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id):
        """Sets the task_id of this BuildLocator.

        ID of a build or build promotion.  # noqa: E501

        :param task_id: The task_id of this BuildLocator.  # noqa: E501
        :type: int
        """

        self._task_id = task_id

    @property
    def user(self):
        """Gets the user of this BuildLocator.  # noqa: E501

        For personal builds checks the owner of the build, triggerring user in other cases.  # noqa: E501

        :return: The user of this BuildLocator.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this BuildLocator.

        For personal builds checks the owner of the build, triggerring user in other cases.  # noqa: E501

        :param user: The user of this BuildLocator.  # noqa: E501
        :type: str
        """

        self._user = user
