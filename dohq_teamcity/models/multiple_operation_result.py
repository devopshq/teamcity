# coding: utf-8

from dohq_teamcity.custom.base_model import TeamCityObject


# from dohq_teamcity.models.operation_result import OperationResult  # noqa: F401,E501


class MultipleOperationResult(TeamCityObject):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'count': 'int',
        'error_count': 'int',
        'operation_result': 'list[OperationResult]'
    }

    attribute_map = {
        'count': 'count',
        'error_count': 'errorCount',
        'operation_result': 'operationResult'
    }

    def __init__(self, count=None, error_count=None, operation_result=None, teamcity=None):  # noqa: E501
        """MultipleOperationResult - a model defined in Swagger"""  # noqa: E501

        self._count = None
        self._error_count = None
        self._operation_result = None
        self.discriminator = None

        if count is not None:
            self.count = count
        if error_count is not None:
            self.error_count = error_count
        if operation_result is not None:
            self.operation_result = operation_result
        super(MultipleOperationResult, self).__init__(teamcity=teamcity)

    @property
    def count(self):
        """Gets the count of this MultipleOperationResult.  # noqa: E501


        :return: The count of this MultipleOperationResult.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this MultipleOperationResult.


        :param count: The count of this MultipleOperationResult.  # noqa: E501
        :type: int
        """

        self._count = count

    @property
    def error_count(self):
        """Gets the error_count of this MultipleOperationResult.  # noqa: E501


        :return: The error_count of this MultipleOperationResult.  # noqa: E501
        :rtype: int
        """
        return self._error_count

    @error_count.setter
    def error_count(self, error_count):
        """Sets the error_count of this MultipleOperationResult.


        :param error_count: The error_count of this MultipleOperationResult.  # noqa: E501
        :type: int
        """

        self._error_count = error_count

    @property
    def operation_result(self):
        """Gets the operation_result of this MultipleOperationResult.  # noqa: E501


        :return: The operation_result of this MultipleOperationResult.  # noqa: E501
        :rtype: list[OperationResult]
        """
        return self._operation_result

    @operation_result.setter
    def operation_result(self, operation_result):
        """Sets the operation_result of this MultipleOperationResult.


        :param operation_result: The operation_result of this MultipleOperationResult.  # noqa: E501
        :type: list[OperationResult]
        """

        self._operation_result = operation_result
