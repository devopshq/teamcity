# coding: utf-8

"""
    TeamCity REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2018.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import
from dohq_teamcity.custom.base_model import TeamCityObject

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from dohq_teamcity.models.builds import Builds  # noqa: F401,E501
from dohq_teamcity.models.change import Change  # noqa: F401,E501
from dohq_teamcity.models.changes import Changes  # noqa: F401,E501
from dohq_teamcity.models.entries import Entries  # noqa: F401,E501
from dohq_teamcity.models.issues import Issues  # noqa: F401,E501
from dohq_teamcity.models.items import Items  # noqa: F401,E501
from dohq_teamcity.models.vcs_root_instance import VcsRootInstance  # noqa: F401,E501


class ChangeApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """
    base_name = 'Change'

    def __init__(self, api_client=None):
        self.api_client = api_client

    def get_all_changes(self, **kwargs):  # noqa: E501
        """Get all changes.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_changes(async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str locator:
        :param str fields:
        :return: Changes
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_all_changes_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.__get_all_changes_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_change(self, change_locator, **kwargs):  # noqa: E501
        """Get change matching the locator.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_change(change_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str change_locator: (required)
        :param str fields:
        :return: Change
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_change_with_http_info(change_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_change_with_http_info(change_locator, **kwargs)  # noqa: E501
            return data

    def get_change_attributes(self, change_locator, **kwargs):  # noqa: E501
        """Get attributes of the matching change.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_change_attributes(change_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str change_locator: (required)
        :param str fields:
        :return: Entries
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_change_attributes_with_http_info(change_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_change_attributes_with_http_info(change_locator, **kwargs)  # noqa: E501
            return data

    def get_change_duplicates(self, change_locator, **kwargs):  # noqa: E501
        """Get duplicates of the matching change.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_change_duplicates(change_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str change_locator: (required)
        :param str fields:
        :return: Changes
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_change_duplicates_with_http_info(change_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_change_duplicates_with_http_info(change_locator, **kwargs)  # noqa: E501
            return data

    def get_change_field(self, change_locator, field, **kwargs):  # noqa: E501
        """Get a field of the matching change.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_change_field(change_locator, field, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str change_locator: (required)
        :param str field: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_change_field_with_http_info(change_locator, field, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_change_field_with_http_info(change_locator, field, **kwargs)  # noqa: E501
            return data

    def get_change_first_builds(self, change_locator, **kwargs):  # noqa: E501
        """Get first builds of the matching change.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_change_first_builds(change_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str change_locator: (required)
        :param str fields:
        :return: Builds
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_change_first_builds_with_http_info(change_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_change_first_builds_with_http_info(change_locator, **kwargs)  # noqa: E501
            return data

    def get_change_issue(self, change_locator, **kwargs):  # noqa: E501
        """Get issues of the matching change.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_change_issue(change_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str change_locator: (required)
        :return: Issues
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_change_issue_with_http_info(change_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_change_issue_with_http_info(change_locator, **kwargs)  # noqa: E501
            return data

    def get_change_parent_changes(self, change_locator, **kwargs):  # noqa: E501
        """Get parent changes of the matching change.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_change_parent_changes(change_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str change_locator: (required)
        :param str fields:
        :return: Changes
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_change_parent_changes_with_http_info(change_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_change_parent_changes_with_http_info(change_locator, **kwargs)  # noqa: E501
            return data

    def get_change_parent_revisions(self, change_locator, **kwargs):  # noqa: E501
        """Get parent revisions of the matching change.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_change_parent_revisions(change_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str change_locator: (required)
        :return: Items
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_change_parent_revisions_with_http_info(change_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_change_parent_revisions_with_http_info(change_locator, **kwargs)  # noqa: E501
            return data

    def get_change_vcs_root(self, change_locator, **kwargs):  # noqa: E501
        """Get a VCS root instance of the matching change.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_change_vcs_root(change_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str change_locator: (required)
        :param str fields:
        :return: VcsRootInstance
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_change_vcs_root_with_http_info(change_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_change_vcs_root_with_http_info(change_locator, **kwargs)  # noqa: E501
            return data

    def __get_all_changes_with_http_info(self, **kwargs):  # noqa: E501
        """Get all changes.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_all_changes_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str locator:
        :param str fields:
        :return: Changes
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_changes" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'locator' in params:
            query_params.append(('locator', params['locator']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/changes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Changes',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_change_with_http_info(self, change_locator, **kwargs):  # noqa: E501
        """Get change matching the locator.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_change_with_http_info(change_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str change_locator: (required)
        :param str fields:
        :return: Change
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['change_locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_change" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'change_locator' is set
        if ('change_locator' not in params or
                params['change_locator'] is None):
            raise ValueError("Missing the required parameter `change_locator` when calling `get_change`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'change_locator' in params:
            if isinstance(params['change_locator'], TeamCityObject):
                path_params['changeLocator'] = params['change_locator'].locator_id
            else:
                path_params['changeLocator'] = params['change_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/changes/{changeLocator}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Change',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_change_attributes_with_http_info(self, change_locator, **kwargs):  # noqa: E501
        """Get attributes of the matching change.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_change_attributes_with_http_info(change_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str change_locator: (required)
        :param str fields:
        :return: Entries
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['change_locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_change_attributes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'change_locator' is set
        if ('change_locator' not in params or
                params['change_locator'] is None):
            raise ValueError("Missing the required parameter `change_locator` when calling `get_change_attributes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'change_locator' in params:
            if isinstance(params['change_locator'], TeamCityObject):
                path_params['changeLocator'] = params['change_locator'].locator_id
            else:
                path_params['changeLocator'] = params['change_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/changes/{changeLocator}/attributes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Entries',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_change_duplicates_with_http_info(self, change_locator, **kwargs):  # noqa: E501
        """Get duplicates of the matching change.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_change_duplicates_with_http_info(change_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str change_locator: (required)
        :param str fields:
        :return: Changes
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['change_locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_change_duplicates" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'change_locator' is set
        if ('change_locator' not in params or
                params['change_locator'] is None):
            raise ValueError("Missing the required parameter `change_locator` when calling `get_change_duplicates`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'change_locator' in params:
            if isinstance(params['change_locator'], TeamCityObject):
                path_params['changeLocator'] = params['change_locator'].locator_id
            else:
                path_params['changeLocator'] = params['change_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/changes/{changeLocator}/duplicates', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Changes',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_change_field_with_http_info(self, change_locator, field, **kwargs):  # noqa: E501
        """Get a field of the matching change.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_change_field_with_http_info(change_locator, field, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str change_locator: (required)
        :param str field: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['change_locator', 'field']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_change_field" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'change_locator' is set
        if ('change_locator' not in params or
                params['change_locator'] is None):
            raise ValueError("Missing the required parameter `change_locator` when calling `get_change_field`")  # noqa: E501
        # verify the required parameter 'field' is set
        if ('field' not in params or
                params['field'] is None):
            raise ValueError("Missing the required parameter `field` when calling `get_change_field`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'change_locator' in params:
            if isinstance(params['change_locator'], TeamCityObject):
                path_params['changeLocator'] = params['change_locator'].locator_id
            else:
                path_params['changeLocator'] = params['change_locator']  # noqa: E501
        if 'field' in params:
            if isinstance(params['field'], TeamCityObject):
                path_params['field'] = params['field'].locator_id
            else:
                path_params['field'] = params['field']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/changes/{changeLocator}/{field}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_change_first_builds_with_http_info(self, change_locator, **kwargs):  # noqa: E501
        """Get first builds of the matching change.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_change_first_builds_with_http_info(change_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str change_locator: (required)
        :param str fields:
        :return: Builds
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['change_locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_change_first_builds" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'change_locator' is set
        if ('change_locator' not in params or
                params['change_locator'] is None):
            raise ValueError("Missing the required parameter `change_locator` when calling `get_change_first_builds`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'change_locator' in params:
            if isinstance(params['change_locator'], TeamCityObject):
                path_params['changeLocator'] = params['change_locator'].locator_id
            else:
                path_params['changeLocator'] = params['change_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/changes/{changeLocator}/firstBuilds', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Builds',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_change_issue_with_http_info(self, change_locator, **kwargs):  # noqa: E501
        """Get issues of the matching change.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_change_issue_with_http_info(change_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str change_locator: (required)
        :return: Issues
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['change_locator']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_change_issue" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'change_locator' is set
        if ('change_locator' not in params or
                params['change_locator'] is None):
            raise ValueError("Missing the required parameter `change_locator` when calling `get_change_issue`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'change_locator' in params:
            if isinstance(params['change_locator'], TeamCityObject):
                path_params['changeLocator'] = params['change_locator'].locator_id
            else:
                path_params['changeLocator'] = params['change_locator']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/changes/{changeLocator}/issues', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Issues',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_change_parent_changes_with_http_info(self, change_locator, **kwargs):  # noqa: E501
        """Get parent changes of the matching change.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_change_parent_changes_with_http_info(change_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str change_locator: (required)
        :param str fields:
        :return: Changes
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['change_locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_change_parent_changes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'change_locator' is set
        if ('change_locator' not in params or
                params['change_locator'] is None):
            raise ValueError("Missing the required parameter `change_locator` when calling `get_change_parent_changes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'change_locator' in params:
            if isinstance(params['change_locator'], TeamCityObject):
                path_params['changeLocator'] = params['change_locator'].locator_id
            else:
                path_params['changeLocator'] = params['change_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/changes/{changeLocator}/parentChanges', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Changes',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_change_parent_revisions_with_http_info(self, change_locator, **kwargs):  # noqa: E501
        """Get parent revisions of the matching change.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_change_parent_revisions_with_http_info(change_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str change_locator: (required)
        :return: Items
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['change_locator']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_change_parent_revisions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'change_locator' is set
        if ('change_locator' not in params or
                params['change_locator'] is None):
            raise ValueError("Missing the required parameter `change_locator` when calling `get_change_parent_revisions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'change_locator' in params:
            if isinstance(params['change_locator'], TeamCityObject):
                path_params['changeLocator'] = params['change_locator'].locator_id
            else:
                path_params['changeLocator'] = params['change_locator']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/changes/{changeLocator}/parentRevisions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Items',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_change_vcs_root_with_http_info(self, change_locator, **kwargs):  # noqa: E501
        """Get a VCS root instance of the matching change.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_change_vcs_root_with_http_info(change_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str change_locator: (required)
        :param str fields:
        :return: VcsRootInstance
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['change_locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_change_vcs_root" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'change_locator' is set
        if ('change_locator' not in params or
                params['change_locator'] is None):
            raise ValueError("Missing the required parameter `change_locator` when calling `get_change_vcs_root`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'change_locator' in params:
            if isinstance(params['change_locator'], TeamCityObject):
                path_params['changeLocator'] = params['change_locator'].locator_id
            else:
                path_params['changeLocator'] = params['change_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/changes/{changeLocator}/vcsRootInstance', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VcsRootInstance',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
