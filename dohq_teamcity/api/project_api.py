# coding: utf-8

"""
    TeamCity REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2018.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import
from dohq_teamcity.custom.base_model import TeamCityObject

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from dohq_teamcity.models.agent_pool import AgentPool  # noqa: F401,E501
from dohq_teamcity.models.agent_pools import AgentPools  # noqa: F401,E501
from dohq_teamcity.models.branches import Branches  # noqa: F401,E501
from dohq_teamcity.models.build_type import BuildType  # noqa: F401,E501
from dohq_teamcity.models.build_types import BuildTypes  # noqa: F401,E501
from dohq_teamcity.models.model_property import ModelProperty  # noqa: F401,E501
from dohq_teamcity.models.new_build_type_description import NewBuildTypeDescription  # noqa: F401,E501
from dohq_teamcity.models.new_project_description import NewProjectDescription  # noqa: F401,E501
from dohq_teamcity.models.project import Project  # noqa: F401,E501
from dohq_teamcity.models.project_feature import ProjectFeature  # noqa: F401,E501
from dohq_teamcity.models.project_features import ProjectFeatures  # noqa: F401,E501
from dohq_teamcity.models.projects import Projects  # noqa: F401,E501
from dohq_teamcity.models.properties import Properties  # noqa: F401,E501
from dohq_teamcity.models.type import Type  # noqa: F401,E501


class ProjectApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """
    base_name = 'Project'

    def __init__(self, api_client=None):
        self.api_client = api_client

    def add_agent_pools_project(self, project_locator, **kwargs):  # noqa: E501
        """Assign the matching project to the agent pool.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_agent_pools_project(project_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str project_locator: (required)
        :param AgentPool body:
        :return: AgentPool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__add_agent_pools_project_with_http_info(project_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__add_agent_pools_project_with_http_info(project_locator, **kwargs)  # noqa: E501
            return data

    def add_build_type(self, project_locator, **kwargs):  # noqa: E501
        """Add a build configuration to the matching project.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_build_type(project_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str project_locator: (required)
        :param NewBuildTypeDescription body:
        :param str fields:
        :return: BuildType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__add_build_type_with_http_info(project_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__add_build_type_with_http_info(project_locator, **kwargs)  # noqa: E501
            return data

    def add_feature(self, project_locator, **kwargs):  # noqa: E501
        """Add a feature.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_feature(project_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str project_locator: (required)
        :param ProjectFeature body:
        :param str fields:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__add_feature_with_http_info(project_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__add_feature_with_http_info(project_locator, **kwargs)  # noqa: E501
            return data

    def add_project(self, **kwargs):  # noqa: E501
        """Create a new project.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_project(async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param NewProjectDescription body:
        :return: Project
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__add_project_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.__add_project_with_http_info(**kwargs)  # noqa: E501
            return data

    def add_secure_token(self, project_locator, **kwargs):  # noqa: E501
        """Create a new secure token for the matching project.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_secure_token(project_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str project_locator: (required)
        :param str body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__add_secure_token_with_http_info(project_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__add_secure_token_with_http_info(project_locator, **kwargs)  # noqa: E501
            return data

    def add_template(self, project_locator, **kwargs):  # noqa: E501
        """Add a build configuration template to the matching project.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_template(project_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str project_locator: (required)
        :param NewBuildTypeDescription body:
        :param str fields:
        :return: BuildType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__add_template_with_http_info(project_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__add_template_with_http_info(project_locator, **kwargs)  # noqa: E501
            return data

    def create_build_parameter(self, project_locator, **kwargs):  # noqa: E501
        """Create a build parameter.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_build_parameter(project_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str project_locator: (required)
        :param ModelProperty body:
        :param str fields:
        :return: ModelProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__create_build_parameter_with_http_info(project_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__create_build_parameter_with_http_info(project_locator, **kwargs)  # noqa: E501
            return data

    def delete_build_parameter(self, name, project_locator, **kwargs):  # noqa: E501
        """Delete build parameter.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_build_parameter(name, project_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str name: (required)
        :param str project_locator: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__delete_build_parameter_with_http_info(name, project_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__delete_build_parameter_with_http_info(name, project_locator, **kwargs)  # noqa: E501
            return data

    def delete_build_parameters(self, project_locator, **kwargs):  # noqa: E501
        """Delete all build parameters.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_build_parameters(project_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str project_locator: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__delete_build_parameters_with_http_info(project_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__delete_build_parameters_with_http_info(project_locator, **kwargs)  # noqa: E501
            return data

    def delete_feature(self, feature_locator, project_locator, **kwargs):  # noqa: E501
        """Delete a matching feature.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_feature(feature_locator, project_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str feature_locator: (required)
        :param str project_locator: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__delete_feature_with_http_info(feature_locator, project_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__delete_feature_with_http_info(feature_locator, project_locator, **kwargs)  # noqa: E501
            return data

    def delete_project(self, project_locator, **kwargs):  # noqa: E501
        """Delete project matching the locator.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_project(project_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str project_locator: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__delete_project_with_http_info(project_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__delete_project_with_http_info(project_locator, **kwargs)  # noqa: E501
            return data

    def get_agent_pools_project(self, project_locator, **kwargs):  # noqa: E501
        """Get agent pools appointed to the matching project.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_agent_pools_project(project_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str project_locator: (required)
        :param str fields:
        :return: AgentPools
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_agent_pools_project_with_http_info(project_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_agent_pools_project_with_http_info(project_locator, **kwargs)  # noqa: E501
            return data

    def get_all_branches(self, project_locator, **kwargs):  # noqa: E501
        """Get all branches of the matching project.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_branches(project_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str project_locator: (required)
        :param str locator:
        :param str fields:
        :return: Branches
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_all_branches_with_http_info(project_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_all_branches_with_http_info(project_locator, **kwargs)  # noqa: E501
            return data

    def get_all_build_types_ordered(self, project_locator, **kwargs):  # noqa: E501
        """Get all build configurations from the matching project, with custom ordering applied.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_build_types_ordered(project_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str project_locator: (required)
        :param str field:
        :return: BuildTypes
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_all_build_types_ordered_with_http_info(project_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_all_build_types_ordered_with_http_info(project_locator, **kwargs)  # noqa: E501
            return data

    def get_all_projects(self, **kwargs):  # noqa: E501
        """Get all projects.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_projects(async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str locator:
        :param str fields:
        :return: Projects
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_all_projects_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.__get_all_projects_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_all_subprojects_ordered(self, project_locator, **kwargs):  # noqa: E501
        """Get all subprojects of the matching project, with custom ordering applied.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_subprojects_ordered(project_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str project_locator: (required)
        :param str field:
        :return: Projects
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_all_subprojects_ordered_with_http_info(project_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_all_subprojects_ordered_with_http_info(project_locator, **kwargs)  # noqa: E501
            return data

    def get_build_parameter(self, name, project_locator, **kwargs):  # noqa: E501
        """Get build parameter.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_build_parameter(name, project_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str name: (required)
        :param str project_locator: (required)
        :param str fields:
        :return: ModelProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_build_parameter_with_http_info(name, project_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_build_parameter_with_http_info(name, project_locator, **kwargs)  # noqa: E501
            return data

    def get_build_parameter_specification(self, name, project_locator, **kwargs):  # noqa: E501
        """Get build parameter specification.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_build_parameter_specification(name, project_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str name: (required)
        :param str project_locator: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_build_parameter_specification_with_http_info(name, project_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_build_parameter_specification_with_http_info(name, project_locator, **kwargs)  # noqa: E501
            return data

    def get_build_parameter_type(self, name, project_locator, **kwargs):  # noqa: E501
        """Get type of build parameter.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_build_parameter_type(name, project_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str name: (required)
        :param str project_locator: (required)
        :return: Type
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_build_parameter_type_with_http_info(name, project_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_build_parameter_type_with_http_info(name, project_locator, **kwargs)  # noqa: E501
            return data

    def get_build_parameter_value(self, name, project_locator, **kwargs):  # noqa: E501
        """Get value of build parameter.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_build_parameter_value(name, project_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str name: (required)
        :param str project_locator: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_build_parameter_value_with_http_info(name, project_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_build_parameter_value_with_http_info(name, project_locator, **kwargs)  # noqa: E501
            return data

    def get_build_parameters(self, project_locator, **kwargs):  # noqa: E501
        """Get build parameters.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_build_parameters(project_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str project_locator: (required)
        :param str locator:
        :param str fields:
        :return: Properties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_build_parameters_with_http_info(project_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_build_parameters_with_http_info(project_locator, **kwargs)  # noqa: E501
            return data

    def get_default_template(self, project_locator, **kwargs):  # noqa: E501
        """Get the default template of the matching project.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_default_template(project_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str project_locator: (required)
        :param str fields:
        :return: BuildType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_default_template_with_http_info(project_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_default_template_with_http_info(project_locator, **kwargs)  # noqa: E501
            return data

    def get_feature(self, feature_locator, project_locator, **kwargs):  # noqa: E501
        """Get a matching feature.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_feature(feature_locator, project_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str feature_locator: (required)
        :param str project_locator: (required)
        :param str fields:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_feature_with_http_info(feature_locator, project_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_feature_with_http_info(feature_locator, project_locator, **kwargs)  # noqa: E501
            return data

    def get_features(self, project_locator, **kwargs):  # noqa: E501
        """Get all features.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_features(project_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str project_locator: (required)
        :param str locator:
        :param str fields:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_features_with_http_info(project_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_features_with_http_info(project_locator, **kwargs)  # noqa: E501
            return data

    def get_project(self, project_locator, **kwargs):  # noqa: E501
        """Get project matching the locator.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_project(project_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str project_locator: (required)
        :param str fields:
        :return: Project
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_project_with_http_info(project_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_project_with_http_info(project_locator, **kwargs)  # noqa: E501
            return data

    def get_project_field(self, project_locator, field, **kwargs):  # noqa: E501
        """Get a field of the matching project.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_project_field(project_locator, field, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str project_locator: (required)
        :param str field: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_project_field_with_http_info(project_locator, field, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_project_field_with_http_info(project_locator, field, **kwargs)  # noqa: E501
            return data

    def get_project_parent_project(self, project_locator, **kwargs):  # noqa: E501
        """Get the parent project of the matching project.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_project_parent_project(project_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str project_locator: (required)
        :param str fields:
        :return: Project
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_project_parent_project_with_http_info(project_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_project_parent_project_with_http_info(project_locator, **kwargs)  # noqa: E501
            return data

    def get_project_settings_file(self, project_locator, **kwargs):  # noqa: E501
        """Get the settings file of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_project_settings_file(project_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str project_locator: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_project_settings_file_with_http_info(project_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_project_settings_file_with_http_info(project_locator, **kwargs)  # noqa: E501
            return data

    def get_project_templates(self, project_locator, **kwargs):  # noqa: E501
        """Get all templates of the matching project.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_project_templates(project_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str project_locator: (required)
        :param str fields:
        :return: BuildTypes
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_project_templates_with_http_info(project_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_project_templates_with_http_info(project_locator, **kwargs)  # noqa: E501
            return data

    def get_secure_value(self, project_locator, token, **kwargs):  # noqa: E501
        """Get a secure token of the matching project.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_secure_value(project_locator, token, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str project_locator: (required)
        :param str token: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_secure_value_with_http_info(project_locator, token, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_secure_value_with_http_info(project_locator, token, **kwargs)  # noqa: E501
            return data

    def remove_default_template(self, project_locator, **kwargs):  # noqa: E501
        """Remove the default template from the matching project.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_default_template(project_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str project_locator: (required)
        :param str fields:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__remove_default_template_with_http_info(project_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__remove_default_template_with_http_info(project_locator, **kwargs)  # noqa: E501
            return data

    def remove_project_from_agent_pool(self, project_locator, agent_pool_locator, **kwargs):  # noqa: E501
        """Unassign a project from the matching agent pool.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_project_from_agent_pool(project_locator, agent_pool_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str project_locator: (required)
        :param str agent_pool_locator: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__remove_project_from_agent_pool_with_http_info(project_locator, agent_pool_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__remove_project_from_agent_pool_with_http_info(project_locator, agent_pool_locator, **kwargs)  # noqa: E501
            return data

    def set_agent_pools_project(self, project_locator, **kwargs):  # noqa: E501
        """Update agent pools apppointed to the matching project.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_agent_pools_project(project_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str project_locator: (required)
        :param AgentPools body:
        :param str fields:
        :return: AgentPools
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__set_agent_pools_project_with_http_info(project_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__set_agent_pools_project_with_http_info(project_locator, **kwargs)  # noqa: E501
            return data

    def set_build_types_order(self, project_locator, **kwargs):  # noqa: E501
        """Update custom ordering of build configurations of the matching project.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_build_types_order(project_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str project_locator: (required)
        :param BuildTypes body:
        :param str field:
        :return: BuildTypes
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__set_build_types_order_with_http_info(project_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__set_build_types_order_with_http_info(project_locator, **kwargs)  # noqa: E501
            return data

    def set_default_template(self, project_locator, **kwargs):  # noqa: E501
        """Update the default template of the matching project.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_default_template(project_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str project_locator: (required)
        :param BuildType body:
        :param str fields:
        :return: BuildType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__set_default_template_with_http_info(project_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__set_default_template_with_http_info(project_locator, **kwargs)  # noqa: E501
            return data

    def set_parent_project(self, project_locator, **kwargs):  # noqa: E501
        """Update the parent project of the matching project.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_parent_project(project_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str project_locator: (required)
        :param Project body:
        :param str fields:
        :return: Project
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__set_parent_project_with_http_info(project_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__set_parent_project_with_http_info(project_locator, **kwargs)  # noqa: E501
            return data

    def set_project_field(self, project_locator, field, **kwargs):  # noqa: E501
        """Update a field of the matching project.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_project_field(project_locator, field, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str project_locator: (required)
        :param str field: (required)
        :param str body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__set_project_field_with_http_info(project_locator, field, **kwargs)  # noqa: E501
        else:
            (data) = self.__set_project_field_with_http_info(project_locator, field, **kwargs)  # noqa: E501
            return data

    def set_subprojects_order(self, project_locator, **kwargs):  # noqa: E501
        """Update custom ordering of subprojects of the matching project.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_subprojects_order(project_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str project_locator: (required)
        :param Projects body:
        :param str field:
        :return: Projects
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__set_subprojects_order_with_http_info(project_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__set_subprojects_order_with_http_info(project_locator, **kwargs)  # noqa: E501
            return data

    def update_build_parameter(self, name, project_locator, **kwargs):  # noqa: E501
        """Update build parameter.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_build_parameter(name, project_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str name: (required)
        :param str project_locator: (required)
        :param ModelProperty body:
        :param str fields:
        :return: ModelProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__update_build_parameter_with_http_info(name, project_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__update_build_parameter_with_http_info(name, project_locator, **kwargs)  # noqa: E501
            return data

    def update_build_parameter_specification(self, name, project_locator, **kwargs):  # noqa: E501
        """Update build parameter specification.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_build_parameter_specification(name, project_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str name: (required)
        :param str project_locator: (required)
        :param str body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__update_build_parameter_specification_with_http_info(name, project_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__update_build_parameter_specification_with_http_info(name, project_locator, **kwargs)  # noqa: E501
            return data

    def update_build_parameter_type(self, name, project_locator, **kwargs):  # noqa: E501
        """Update type of build parameter.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_build_parameter_type(name, project_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str name: (required)
        :param str project_locator: (required)
        :param Type body:
        :return: Type
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__update_build_parameter_type_with_http_info(name, project_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__update_build_parameter_type_with_http_info(name, project_locator, **kwargs)  # noqa: E501
            return data

    def update_build_parameter_value(self, name, project_locator, **kwargs):  # noqa: E501
        """Update value of build parameter.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_build_parameter_value(name, project_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str name: (required)
        :param str project_locator: (required)
        :param str body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__update_build_parameter_value_with_http_info(name, project_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__update_build_parameter_value_with_http_info(name, project_locator, **kwargs)  # noqa: E501
            return data

    def update_build_parameters(self, project_locator, **kwargs):  # noqa: E501
        """Update build parameters.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_build_parameters(project_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str project_locator: (required)
        :param Properties body:
        :param str fields:
        :return: Properties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__update_build_parameters_with_http_info(project_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__update_build_parameters_with_http_info(project_locator, **kwargs)  # noqa: E501
            return data

    def update_feature(self, feature_locator, project_locator, **kwargs):  # noqa: E501
        """Update a matching feature.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_feature(feature_locator, project_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str feature_locator: (required)
        :param str project_locator: (required)
        :param ProjectFeature body:
        :param str fields:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__update_feature_with_http_info(feature_locator, project_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__update_feature_with_http_info(feature_locator, project_locator, **kwargs)  # noqa: E501
            return data

    def update_features(self, project_locator, **kwargs):  # noqa: E501
        """Update all features.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_features(project_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str project_locator: (required)
        :param ProjectFeatures body:
        :param str fields:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__update_features_with_http_info(project_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__update_features_with_http_info(project_locator, **kwargs)  # noqa: E501
            return data

    def __add_agent_pools_project_with_http_info(self, project_locator, **kwargs):  # noqa: E501
        """Assign the matching project to the agent pool.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__add_agent_pools_project_with_http_info(project_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_locator: (required)
        :param AgentPool body:
        :return: AgentPool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_locator', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_agent_pools_project" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_locator' is set
        if ('project_locator' not in params or
                params['project_locator'] is None):
            raise ValueError("Missing the required parameter `project_locator` when calling `add_agent_pools_project`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_locator' in params:
            if isinstance(params['project_locator'], TeamCityObject):
                path_params['projectLocator'] = params['project_locator'].locator_id
            else:
                path_params['projectLocator'] = params['project_locator']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/projects/{projectLocator}/agentPools', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AgentPool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __add_build_type_with_http_info(self, project_locator, **kwargs):  # noqa: E501
        """Add a build configuration to the matching project.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__add_build_type_with_http_info(project_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_locator: (required)
        :param NewBuildTypeDescription body:
        :param str fields:
        :return: BuildType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_locator', 'body', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_build_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_locator' is set
        if ('project_locator' not in params or
                params['project_locator'] is None):
            raise ValueError("Missing the required parameter `project_locator` when calling `add_build_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_locator' in params:
            if isinstance(params['project_locator'], TeamCityObject):
                path_params['projectLocator'] = params['project_locator'].locator_id
            else:
                path_params['projectLocator'] = params['project_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/projects/{projectLocator}/buildTypes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BuildType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __add_feature_with_http_info(self, project_locator, **kwargs):  # noqa: E501
        """Add a feature.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__add_feature_with_http_info(project_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_locator: (required)
        :param ProjectFeature body:
        :param str fields:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_locator', 'body', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_feature" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_locator' is set
        if ('project_locator' not in params or
                params['project_locator'] is None):
            raise ValueError("Missing the required parameter `project_locator` when calling `add_feature`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_locator' in params:
            if isinstance(params['project_locator'], TeamCityObject):
                path_params['projectLocator'] = params['project_locator'].locator_id
            else:
                path_params['projectLocator'] = params['project_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/projects/{projectLocator}/projectFeatures', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __add_project_with_http_info(self, **kwargs):  # noqa: E501
        """Create a new project.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__add_project_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NewProjectDescription body:
        :return: Project
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_project" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/projects', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Project',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __add_secure_token_with_http_info(self, project_locator, **kwargs):  # noqa: E501
        """Create a new secure token for the matching project.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__add_secure_token_with_http_info(project_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_locator: (required)
        :param str body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_locator', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_secure_token" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_locator' is set
        if ('project_locator' not in params or
                params['project_locator'] is None):
            raise ValueError("Missing the required parameter `project_locator` when calling `add_secure_token`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_locator' in params:
            if isinstance(params['project_locator'], TeamCityObject):
                path_params['projectLocator'] = params['project_locator'].locator_id
            else:
                path_params['projectLocator'] = params['project_locator']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/projects/{projectLocator}/secure/tokens', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __add_template_with_http_info(self, project_locator, **kwargs):  # noqa: E501
        """Add a build configuration template to the matching project.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__add_template_with_http_info(project_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_locator: (required)
        :param NewBuildTypeDescription body:
        :param str fields:
        :return: BuildType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_locator', 'body', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_template" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_locator' is set
        if ('project_locator' not in params or
                params['project_locator'] is None):
            raise ValueError("Missing the required parameter `project_locator` when calling `add_template`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_locator' in params:
            if isinstance(params['project_locator'], TeamCityObject):
                path_params['projectLocator'] = params['project_locator'].locator_id
            else:
                path_params['projectLocator'] = params['project_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/projects/{projectLocator}/templates', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BuildType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __create_build_parameter_with_http_info(self, project_locator, **kwargs):  # noqa: E501
        """Create a build parameter.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__create_build_parameter_with_http_info(project_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_locator: (required)
        :param ModelProperty body:
        :param str fields:
        :return: ModelProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_locator', 'body', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_build_parameter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_locator' is set
        if ('project_locator' not in params or
                params['project_locator'] is None):
            raise ValueError("Missing the required parameter `project_locator` when calling `create_build_parameter`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_locator' in params:
            if isinstance(params['project_locator'], TeamCityObject):
                path_params['projectLocator'] = params['project_locator'].locator_id
            else:
                path_params['projectLocator'] = params['project_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/projects/{projectLocator}/parameters', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ModelProperty',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __delete_build_parameter_with_http_info(self, name, project_locator, **kwargs):  # noqa: E501
        """Delete build parameter.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__delete_build_parameter_with_http_info(name, project_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :param str project_locator: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'project_locator']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_build_parameter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_build_parameter`")  # noqa: E501
        # verify the required parameter 'project_locator' is set
        if ('project_locator' not in params or
                params['project_locator'] is None):
            raise ValueError("Missing the required parameter `project_locator` when calling `delete_build_parameter`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            if isinstance(params['name'], TeamCityObject):
                path_params['name'] = params['name'].locator_id
            else:
                path_params['name'] = params['name']  # noqa: E501
        if 'project_locator' in params:
            if isinstance(params['project_locator'], TeamCityObject):
                path_params['projectLocator'] = params['project_locator'].locator_id
            else:
                path_params['projectLocator'] = params['project_locator']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/projects/{projectLocator}/parameters/{name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __delete_build_parameters_with_http_info(self, project_locator, **kwargs):  # noqa: E501
        """Delete all build parameters.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__delete_build_parameters_with_http_info(project_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_locator: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_locator']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_build_parameters" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_locator' is set
        if ('project_locator' not in params or
                params['project_locator'] is None):
            raise ValueError("Missing the required parameter `project_locator` when calling `delete_build_parameters`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_locator' in params:
            if isinstance(params['project_locator'], TeamCityObject):
                path_params['projectLocator'] = params['project_locator'].locator_id
            else:
                path_params['projectLocator'] = params['project_locator']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/projects/{projectLocator}/parameters', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __delete_feature_with_http_info(self, feature_locator, project_locator, **kwargs):  # noqa: E501
        """Delete a matching feature.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__delete_feature_with_http_info(feature_locator, project_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str feature_locator: (required)
        :param str project_locator: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['feature_locator', 'project_locator']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_feature" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'feature_locator' is set
        if ('feature_locator' not in params or
                params['feature_locator'] is None):
            raise ValueError("Missing the required parameter `feature_locator` when calling `delete_feature`")  # noqa: E501
        # verify the required parameter 'project_locator' is set
        if ('project_locator' not in params or
                params['project_locator'] is None):
            raise ValueError("Missing the required parameter `project_locator` when calling `delete_feature`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'feature_locator' in params:
            if isinstance(params['feature_locator'], TeamCityObject):
                path_params['featureLocator'] = params['feature_locator'].locator_id
            else:
                path_params['featureLocator'] = params['feature_locator']  # noqa: E501
        if 'project_locator' in params:
            if isinstance(params['project_locator'], TeamCityObject):
                path_params['projectLocator'] = params['project_locator'].locator_id
            else:
                path_params['projectLocator'] = params['project_locator']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/projects/{projectLocator}/projectFeatures/{featureLocator}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __delete_project_with_http_info(self, project_locator, **kwargs):  # noqa: E501
        """Delete project matching the locator.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__delete_project_with_http_info(project_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_locator: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_locator']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_project" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_locator' is set
        if ('project_locator' not in params or
                params['project_locator'] is None):
            raise ValueError("Missing the required parameter `project_locator` when calling `delete_project`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_locator' in params:
            if isinstance(params['project_locator'], TeamCityObject):
                path_params['projectLocator'] = params['project_locator'].locator_id
            else:
                path_params['projectLocator'] = params['project_locator']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/projects/{projectLocator}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_agent_pools_project_with_http_info(self, project_locator, **kwargs):  # noqa: E501
        """Get agent pools appointed to the matching project.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_agent_pools_project_with_http_info(project_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_locator: (required)
        :param str fields:
        :return: AgentPools
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_agent_pools_project" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_locator' is set
        if ('project_locator' not in params or
                params['project_locator'] is None):
            raise ValueError("Missing the required parameter `project_locator` when calling `get_agent_pools_project`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_locator' in params:
            if isinstance(params['project_locator'], TeamCityObject):
                path_params['projectLocator'] = params['project_locator'].locator_id
            else:
                path_params['projectLocator'] = params['project_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/projects/{projectLocator}/agentPools', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AgentPools',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_all_branches_with_http_info(self, project_locator, **kwargs):  # noqa: E501
        """Get all branches of the matching project.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_all_branches_with_http_info(project_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_locator: (required)
        :param str locator:
        :param str fields:
        :return: Branches
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_locator', 'locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_branches" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_locator' is set
        if ('project_locator' not in params or
                params['project_locator'] is None):
            raise ValueError("Missing the required parameter `project_locator` when calling `get_all_branches`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_locator' in params:
            if isinstance(params['project_locator'], TeamCityObject):
                path_params['projectLocator'] = params['project_locator'].locator_id
            else:
                path_params['projectLocator'] = params['project_locator']  # noqa: E501

        query_params = []
        if 'locator' in params:
            query_params.append(('locator', params['locator']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/projects/{projectLocator}/branches', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Branches',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_all_build_types_ordered_with_http_info(self, project_locator, **kwargs):  # noqa: E501
        """Get all build configurations from the matching project, with custom ordering applied.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_all_build_types_ordered_with_http_info(project_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_locator: (required)
        :param str field:
        :return: BuildTypes
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_locator', 'field']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_build_types_ordered" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_locator' is set
        if ('project_locator' not in params or
                params['project_locator'] is None):
            raise ValueError("Missing the required parameter `project_locator` when calling `get_all_build_types_ordered`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_locator' in params:
            if isinstance(params['project_locator'], TeamCityObject):
                path_params['projectLocator'] = params['project_locator'].locator_id
            else:
                path_params['projectLocator'] = params['project_locator']  # noqa: E501

        query_params = []
        if 'field' in params:
            query_params.append(('field', params['field']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/projects/{projectLocator}/order/buildTypes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BuildTypes',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_all_projects_with_http_info(self, **kwargs):  # noqa: E501
        """Get all projects.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_all_projects_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str locator:
        :param str fields:
        :return: Projects
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_projects" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'locator' in params:
            query_params.append(('locator', params['locator']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/projects', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Projects',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_all_subprojects_ordered_with_http_info(self, project_locator, **kwargs):  # noqa: E501
        """Get all subprojects of the matching project, with custom ordering applied.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_all_subprojects_ordered_with_http_info(project_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_locator: (required)
        :param str field:
        :return: Projects
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_locator', 'field']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_subprojects_ordered" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_locator' is set
        if ('project_locator' not in params or
                params['project_locator'] is None):
            raise ValueError("Missing the required parameter `project_locator` when calling `get_all_subprojects_ordered`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_locator' in params:
            if isinstance(params['project_locator'], TeamCityObject):
                path_params['projectLocator'] = params['project_locator'].locator_id
            else:
                path_params['projectLocator'] = params['project_locator']  # noqa: E501

        query_params = []
        if 'field' in params:
            query_params.append(('field', params['field']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/projects/{projectLocator}/order/projects', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Projects',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_build_parameter_with_http_info(self, name, project_locator, **kwargs):  # noqa: E501
        """Get build parameter.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_build_parameter_with_http_info(name, project_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :param str project_locator: (required)
        :param str fields:
        :return: ModelProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'project_locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_build_parameter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_build_parameter`")  # noqa: E501
        # verify the required parameter 'project_locator' is set
        if ('project_locator' not in params or
                params['project_locator'] is None):
            raise ValueError("Missing the required parameter `project_locator` when calling `get_build_parameter`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            if isinstance(params['name'], TeamCityObject):
                path_params['name'] = params['name'].locator_id
            else:
                path_params['name'] = params['name']  # noqa: E501
        if 'project_locator' in params:
            if isinstance(params['project_locator'], TeamCityObject):
                path_params['projectLocator'] = params['project_locator'].locator_id
            else:
                path_params['projectLocator'] = params['project_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/projects/{projectLocator}/parameters/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ModelProperty',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_build_parameter_specification_with_http_info(self, name, project_locator, **kwargs):  # noqa: E501
        """Get build parameter specification.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_build_parameter_specification_with_http_info(name, project_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :param str project_locator: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'project_locator']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_build_parameter_specification" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_build_parameter_specification`")  # noqa: E501
        # verify the required parameter 'project_locator' is set
        if ('project_locator' not in params or
                params['project_locator'] is None):
            raise ValueError("Missing the required parameter `project_locator` when calling `get_build_parameter_specification`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            if isinstance(params['name'], TeamCityObject):
                path_params['name'] = params['name'].locator_id
            else:
                path_params['name'] = params['name']  # noqa: E501
        if 'project_locator' in params:
            if isinstance(params['project_locator'], TeamCityObject):
                path_params['projectLocator'] = params['project_locator'].locator_id
            else:
                path_params['projectLocator'] = params['project_locator']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/projects/{projectLocator}/parameters/{name}/type/rawValue', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_build_parameter_type_with_http_info(self, name, project_locator, **kwargs):  # noqa: E501
        """Get type of build parameter.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_build_parameter_type_with_http_info(name, project_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :param str project_locator: (required)
        :return: Type
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'project_locator']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_build_parameter_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_build_parameter_type`")  # noqa: E501
        # verify the required parameter 'project_locator' is set
        if ('project_locator' not in params or
                params['project_locator'] is None):
            raise ValueError("Missing the required parameter `project_locator` when calling `get_build_parameter_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            if isinstance(params['name'], TeamCityObject):
                path_params['name'] = params['name'].locator_id
            else:
                path_params['name'] = params['name']  # noqa: E501
        if 'project_locator' in params:
            if isinstance(params['project_locator'], TeamCityObject):
                path_params['projectLocator'] = params['project_locator'].locator_id
            else:
                path_params['projectLocator'] = params['project_locator']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/projects/{projectLocator}/parameters/{name}/type', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Type',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_build_parameter_value_with_http_info(self, name, project_locator, **kwargs):  # noqa: E501
        """Get value of build parameter.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_build_parameter_value_with_http_info(name, project_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :param str project_locator: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'project_locator']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_build_parameter_value" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_build_parameter_value`")  # noqa: E501
        # verify the required parameter 'project_locator' is set
        if ('project_locator' not in params or
                params['project_locator'] is None):
            raise ValueError("Missing the required parameter `project_locator` when calling `get_build_parameter_value`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            if isinstance(params['name'], TeamCityObject):
                path_params['name'] = params['name'].locator_id
            else:
                path_params['name'] = params['name']  # noqa: E501
        if 'project_locator' in params:
            if isinstance(params['project_locator'], TeamCityObject):
                path_params['projectLocator'] = params['project_locator'].locator_id
            else:
                path_params['projectLocator'] = params['project_locator']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/projects/{projectLocator}/parameters/{name}/value', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_build_parameters_with_http_info(self, project_locator, **kwargs):  # noqa: E501
        """Get build parameters.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_build_parameters_with_http_info(project_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_locator: (required)
        :param str locator:
        :param str fields:
        :return: Properties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_locator', 'locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_build_parameters" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_locator' is set
        if ('project_locator' not in params or
                params['project_locator'] is None):
            raise ValueError("Missing the required parameter `project_locator` when calling `get_build_parameters`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_locator' in params:
            if isinstance(params['project_locator'], TeamCityObject):
                path_params['projectLocator'] = params['project_locator'].locator_id
            else:
                path_params['projectLocator'] = params['project_locator']  # noqa: E501

        query_params = []
        if 'locator' in params:
            query_params.append(('locator', params['locator']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/projects/{projectLocator}/parameters', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Properties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_default_template_with_http_info(self, project_locator, **kwargs):  # noqa: E501
        """Get the default template of the matching project.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_default_template_with_http_info(project_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_locator: (required)
        :param str fields:
        :return: BuildType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_default_template" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_locator' is set
        if ('project_locator' not in params or
                params['project_locator'] is None):
            raise ValueError("Missing the required parameter `project_locator` when calling `get_default_template`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_locator' in params:
            if isinstance(params['project_locator'], TeamCityObject):
                path_params['projectLocator'] = params['project_locator'].locator_id
            else:
                path_params['projectLocator'] = params['project_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/projects/{projectLocator}/defaultTemplate', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BuildType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_feature_with_http_info(self, feature_locator, project_locator, **kwargs):  # noqa: E501
        """Get a matching feature.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_feature_with_http_info(feature_locator, project_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str feature_locator: (required)
        :param str project_locator: (required)
        :param str fields:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['feature_locator', 'project_locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_feature" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'feature_locator' is set
        if ('feature_locator' not in params or
                params['feature_locator'] is None):
            raise ValueError("Missing the required parameter `feature_locator` when calling `get_feature`")  # noqa: E501
        # verify the required parameter 'project_locator' is set
        if ('project_locator' not in params or
                params['project_locator'] is None):
            raise ValueError("Missing the required parameter `project_locator` when calling `get_feature`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'feature_locator' in params:
            if isinstance(params['feature_locator'], TeamCityObject):
                path_params['featureLocator'] = params['feature_locator'].locator_id
            else:
                path_params['featureLocator'] = params['feature_locator']  # noqa: E501
        if 'project_locator' in params:
            if isinstance(params['project_locator'], TeamCityObject):
                path_params['projectLocator'] = params['project_locator'].locator_id
            else:
                path_params['projectLocator'] = params['project_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/projects/{projectLocator}/projectFeatures/{featureLocator}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_features_with_http_info(self, project_locator, **kwargs):  # noqa: E501
        """Get all features.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_features_with_http_info(project_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_locator: (required)
        :param str locator:
        :param str fields:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_locator', 'locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_features" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_locator' is set
        if ('project_locator' not in params or
                params['project_locator'] is None):
            raise ValueError("Missing the required parameter `project_locator` when calling `get_features`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_locator' in params:
            if isinstance(params['project_locator'], TeamCityObject):
                path_params['projectLocator'] = params['project_locator'].locator_id
            else:
                path_params['projectLocator'] = params['project_locator']  # noqa: E501

        query_params = []
        if 'locator' in params:
            query_params.append(('locator', params['locator']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/projects/{projectLocator}/projectFeatures', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_project_with_http_info(self, project_locator, **kwargs):  # noqa: E501
        """Get project matching the locator.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_project_with_http_info(project_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_locator: (required)
        :param str fields:
        :return: Project
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_project" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_locator' is set
        if ('project_locator' not in params or
                params['project_locator'] is None):
            raise ValueError("Missing the required parameter `project_locator` when calling `get_project`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_locator' in params:
            if isinstance(params['project_locator'], TeamCityObject):
                path_params['projectLocator'] = params['project_locator'].locator_id
            else:
                path_params['projectLocator'] = params['project_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/projects/{projectLocator}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Project',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_project_field_with_http_info(self, project_locator, field, **kwargs):  # noqa: E501
        """Get a field of the matching project.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_project_field_with_http_info(project_locator, field, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_locator: (required)
        :param str field: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_locator', 'field']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_project_field" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_locator' is set
        if ('project_locator' not in params or
                params['project_locator'] is None):
            raise ValueError("Missing the required parameter `project_locator` when calling `get_project_field`")  # noqa: E501
        # verify the required parameter 'field' is set
        if ('field' not in params or
                params['field'] is None):
            raise ValueError("Missing the required parameter `field` when calling `get_project_field`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_locator' in params:
            if isinstance(params['project_locator'], TeamCityObject):
                path_params['projectLocator'] = params['project_locator'].locator_id
            else:
                path_params['projectLocator'] = params['project_locator']  # noqa: E501
        if 'field' in params:
            if isinstance(params['field'], TeamCityObject):
                path_params['field'] = params['field'].locator_id
            else:
                path_params['field'] = params['field']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/projects/{projectLocator}/{field}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_project_parent_project_with_http_info(self, project_locator, **kwargs):  # noqa: E501
        """Get the parent project of the matching project.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_project_parent_project_with_http_info(project_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_locator: (required)
        :param str fields:
        :return: Project
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_project_parent_project" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_locator' is set
        if ('project_locator' not in params or
                params['project_locator'] is None):
            raise ValueError("Missing the required parameter `project_locator` when calling `get_project_parent_project`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_locator' in params:
            if isinstance(params['project_locator'], TeamCityObject):
                path_params['projectLocator'] = params['project_locator'].locator_id
            else:
                path_params['projectLocator'] = params['project_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/projects/{projectLocator}/parentProject', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Project',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_project_settings_file_with_http_info(self, project_locator, **kwargs):  # noqa: E501
        """Get the settings file of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_project_settings_file_with_http_info(project_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_locator: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_locator']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_project_settings_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_locator' is set
        if ('project_locator' not in params or
                params['project_locator'] is None):
            raise ValueError("Missing the required parameter `project_locator` when calling `get_project_settings_file`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_locator' in params:
            if isinstance(params['project_locator'], TeamCityObject):
                path_params['projectLocator'] = params['project_locator'].locator_id
            else:
                path_params['projectLocator'] = params['project_locator']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/projects/{projectLocator}/settingsFile', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_project_templates_with_http_info(self, project_locator, **kwargs):  # noqa: E501
        """Get all templates of the matching project.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_project_templates_with_http_info(project_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_locator: (required)
        :param str fields:
        :return: BuildTypes
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_project_templates" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_locator' is set
        if ('project_locator' not in params or
                params['project_locator'] is None):
            raise ValueError("Missing the required parameter `project_locator` when calling `get_project_templates`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_locator' in params:
            if isinstance(params['project_locator'], TeamCityObject):
                path_params['projectLocator'] = params['project_locator'].locator_id
            else:
                path_params['projectLocator'] = params['project_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/projects/{projectLocator}/templates', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BuildTypes',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_secure_value_with_http_info(self, project_locator, token, **kwargs):  # noqa: E501
        """Get a secure token of the matching project.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_secure_value_with_http_info(project_locator, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_locator: (required)
        :param str token: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_locator', 'token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_secure_value" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_locator' is set
        if ('project_locator' not in params or
                params['project_locator'] is None):
            raise ValueError("Missing the required parameter `project_locator` when calling `get_secure_value`")  # noqa: E501
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `get_secure_value`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_locator' in params:
            if isinstance(params['project_locator'], TeamCityObject):
                path_params['projectLocator'] = params['project_locator'].locator_id
            else:
                path_params['projectLocator'] = params['project_locator']  # noqa: E501
        if 'token' in params:
            if isinstance(params['token'], TeamCityObject):
                path_params['token'] = params['token'].locator_id
            else:
                path_params['token'] = params['token']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/projects/{projectLocator}/secure/values/{token}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __remove_default_template_with_http_info(self, project_locator, **kwargs):  # noqa: E501
        """Remove the default template from the matching project.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__remove_default_template_with_http_info(project_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_locator: (required)
        :param str fields:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_default_template" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_locator' is set
        if ('project_locator' not in params or
                params['project_locator'] is None):
            raise ValueError("Missing the required parameter `project_locator` when calling `remove_default_template`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_locator' in params:
            if isinstance(params['project_locator'], TeamCityObject):
                path_params['projectLocator'] = params['project_locator'].locator_id
            else:
                path_params['projectLocator'] = params['project_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/projects/{projectLocator}/defaultTemplate', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __remove_project_from_agent_pool_with_http_info(self, project_locator, agent_pool_locator, **kwargs):  # noqa: E501
        """Unassign a project from the matching agent pool.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__remove_project_from_agent_pool_with_http_info(project_locator, agent_pool_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_locator: (required)
        :param str agent_pool_locator: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_locator', 'agent_pool_locator']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_project_from_agent_pool" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_locator' is set
        if ('project_locator' not in params or
                params['project_locator'] is None):
            raise ValueError("Missing the required parameter `project_locator` when calling `remove_project_from_agent_pool`")  # noqa: E501
        # verify the required parameter 'agent_pool_locator' is set
        if ('agent_pool_locator' not in params or
                params['agent_pool_locator'] is None):
            raise ValueError("Missing the required parameter `agent_pool_locator` when calling `remove_project_from_agent_pool`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_locator' in params:
            if isinstance(params['project_locator'], TeamCityObject):
                path_params['projectLocator'] = params['project_locator'].locator_id
            else:
                path_params['projectLocator'] = params['project_locator']  # noqa: E501
        if 'agent_pool_locator' in params:
            if isinstance(params['agent_pool_locator'], TeamCityObject):
                path_params['agentPoolLocator'] = params['agent_pool_locator'].locator_id
            else:
                path_params['agentPoolLocator'] = params['agent_pool_locator']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/projects/{projectLocator}/agentPools/{agentPoolLocator}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __set_agent_pools_project_with_http_info(self, project_locator, **kwargs):  # noqa: E501
        """Update agent pools apppointed to the matching project.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__set_agent_pools_project_with_http_info(project_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_locator: (required)
        :param AgentPools body:
        :param str fields:
        :return: AgentPools
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_locator', 'body', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_agent_pools_project" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_locator' is set
        if ('project_locator' not in params or
                params['project_locator'] is None):
            raise ValueError("Missing the required parameter `project_locator` when calling `set_agent_pools_project`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_locator' in params:
            if isinstance(params['project_locator'], TeamCityObject):
                path_params['projectLocator'] = params['project_locator'].locator_id
            else:
                path_params['projectLocator'] = params['project_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/projects/{projectLocator}/agentPools', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AgentPools',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __set_build_types_order_with_http_info(self, project_locator, **kwargs):  # noqa: E501
        """Update custom ordering of build configurations of the matching project.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__set_build_types_order_with_http_info(project_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_locator: (required)
        :param BuildTypes body:
        :param str field:
        :return: BuildTypes
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_locator', 'body', 'field']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_build_types_order" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_locator' is set
        if ('project_locator' not in params or
                params['project_locator'] is None):
            raise ValueError("Missing the required parameter `project_locator` when calling `set_build_types_order`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_locator' in params:
            if isinstance(params['project_locator'], TeamCityObject):
                path_params['projectLocator'] = params['project_locator'].locator_id
            else:
                path_params['projectLocator'] = params['project_locator']  # noqa: E501

        query_params = []
        if 'field' in params:
            query_params.append(('field', params['field']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/projects/{projectLocator}/order/buildTypes', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BuildTypes',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __set_default_template_with_http_info(self, project_locator, **kwargs):  # noqa: E501
        """Update the default template of the matching project.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__set_default_template_with_http_info(project_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_locator: (required)
        :param BuildType body:
        :param str fields:
        :return: BuildType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_locator', 'body', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_default_template" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_locator' is set
        if ('project_locator' not in params or
                params['project_locator'] is None):
            raise ValueError("Missing the required parameter `project_locator` when calling `set_default_template`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_locator' in params:
            if isinstance(params['project_locator'], TeamCityObject):
                path_params['projectLocator'] = params['project_locator'].locator_id
            else:
                path_params['projectLocator'] = params['project_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/projects/{projectLocator}/defaultTemplate', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BuildType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __set_parent_project_with_http_info(self, project_locator, **kwargs):  # noqa: E501
        """Update the parent project of the matching project.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__set_parent_project_with_http_info(project_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_locator: (required)
        :param Project body:
        :param str fields:
        :return: Project
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_locator', 'body', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_parent_project" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_locator' is set
        if ('project_locator' not in params or
                params['project_locator'] is None):
            raise ValueError("Missing the required parameter `project_locator` when calling `set_parent_project`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_locator' in params:
            if isinstance(params['project_locator'], TeamCityObject):
                path_params['projectLocator'] = params['project_locator'].locator_id
            else:
                path_params['projectLocator'] = params['project_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/projects/{projectLocator}/parentProject', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Project',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __set_project_field_with_http_info(self, project_locator, field, **kwargs):  # noqa: E501
        """Update a field of the matching project.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__set_project_field_with_http_info(project_locator, field, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_locator: (required)
        :param str field: (required)
        :param str body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_locator', 'field', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_project_field" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_locator' is set
        if ('project_locator' not in params or
                params['project_locator'] is None):
            raise ValueError("Missing the required parameter `project_locator` when calling `set_project_field`")  # noqa: E501
        # verify the required parameter 'field' is set
        if ('field' not in params or
                params['field'] is None):
            raise ValueError("Missing the required parameter `field` when calling `set_project_field`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_locator' in params:
            if isinstance(params['project_locator'], TeamCityObject):
                path_params['projectLocator'] = params['project_locator'].locator_id
            else:
                path_params['projectLocator'] = params['project_locator']  # noqa: E501
        if 'field' in params:
            if isinstance(params['field'], TeamCityObject):
                path_params['field'] = params['field'].locator_id
            else:
                path_params['field'] = params['field']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/projects/{projectLocator}/{field}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __set_subprojects_order_with_http_info(self, project_locator, **kwargs):  # noqa: E501
        """Update custom ordering of subprojects of the matching project.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__set_subprojects_order_with_http_info(project_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_locator: (required)
        :param Projects body:
        :param str field:
        :return: Projects
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_locator', 'body', 'field']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_subprojects_order" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_locator' is set
        if ('project_locator' not in params or
                params['project_locator'] is None):
            raise ValueError("Missing the required parameter `project_locator` when calling `set_subprojects_order`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_locator' in params:
            if isinstance(params['project_locator'], TeamCityObject):
                path_params['projectLocator'] = params['project_locator'].locator_id
            else:
                path_params['projectLocator'] = params['project_locator']  # noqa: E501

        query_params = []
        if 'field' in params:
            query_params.append(('field', params['field']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/projects/{projectLocator}/order/projects', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Projects',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __update_build_parameter_with_http_info(self, name, project_locator, **kwargs):  # noqa: E501
        """Update build parameter.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__update_build_parameter_with_http_info(name, project_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :param str project_locator: (required)
        :param ModelProperty body:
        :param str fields:
        :return: ModelProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'project_locator', 'body', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_build_parameter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `update_build_parameter`")  # noqa: E501
        # verify the required parameter 'project_locator' is set
        if ('project_locator' not in params or
                params['project_locator'] is None):
            raise ValueError("Missing the required parameter `project_locator` when calling `update_build_parameter`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            if isinstance(params['name'], TeamCityObject):
                path_params['name'] = params['name'].locator_id
            else:
                path_params['name'] = params['name']  # noqa: E501
        if 'project_locator' in params:
            if isinstance(params['project_locator'], TeamCityObject):
                path_params['projectLocator'] = params['project_locator'].locator_id
            else:
                path_params['projectLocator'] = params['project_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/projects/{projectLocator}/parameters/{name}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ModelProperty',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __update_build_parameter_specification_with_http_info(self, name, project_locator, **kwargs):  # noqa: E501
        """Update build parameter specification.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__update_build_parameter_specification_with_http_info(name, project_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :param str project_locator: (required)
        :param str body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'project_locator', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_build_parameter_specification" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `update_build_parameter_specification`")  # noqa: E501
        # verify the required parameter 'project_locator' is set
        if ('project_locator' not in params or
                params['project_locator'] is None):
            raise ValueError("Missing the required parameter `project_locator` when calling `update_build_parameter_specification`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            if isinstance(params['name'], TeamCityObject):
                path_params['name'] = params['name'].locator_id
            else:
                path_params['name'] = params['name']  # noqa: E501
        if 'project_locator' in params:
            if isinstance(params['project_locator'], TeamCityObject):
                path_params['projectLocator'] = params['project_locator'].locator_id
            else:
                path_params['projectLocator'] = params['project_locator']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/projects/{projectLocator}/parameters/{name}/type/rawValue', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __update_build_parameter_type_with_http_info(self, name, project_locator, **kwargs):  # noqa: E501
        """Update type of build parameter.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__update_build_parameter_type_with_http_info(name, project_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :param str project_locator: (required)
        :param Type body:
        :return: Type
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'project_locator', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_build_parameter_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `update_build_parameter_type`")  # noqa: E501
        # verify the required parameter 'project_locator' is set
        if ('project_locator' not in params or
                params['project_locator'] is None):
            raise ValueError("Missing the required parameter `project_locator` when calling `update_build_parameter_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            if isinstance(params['name'], TeamCityObject):
                path_params['name'] = params['name'].locator_id
            else:
                path_params['name'] = params['name']  # noqa: E501
        if 'project_locator' in params:
            if isinstance(params['project_locator'], TeamCityObject):
                path_params['projectLocator'] = params['project_locator'].locator_id
            else:
                path_params['projectLocator'] = params['project_locator']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/projects/{projectLocator}/parameters/{name}/type', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Type',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __update_build_parameter_value_with_http_info(self, name, project_locator, **kwargs):  # noqa: E501
        """Update value of build parameter.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__update_build_parameter_value_with_http_info(name, project_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :param str project_locator: (required)
        :param str body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'project_locator', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_build_parameter_value" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `update_build_parameter_value`")  # noqa: E501
        # verify the required parameter 'project_locator' is set
        if ('project_locator' not in params or
                params['project_locator'] is None):
            raise ValueError("Missing the required parameter `project_locator` when calling `update_build_parameter_value`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            if isinstance(params['name'], TeamCityObject):
                path_params['name'] = params['name'].locator_id
            else:
                path_params['name'] = params['name']  # noqa: E501
        if 'project_locator' in params:
            if isinstance(params['project_locator'], TeamCityObject):
                path_params['projectLocator'] = params['project_locator'].locator_id
            else:
                path_params['projectLocator'] = params['project_locator']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/projects/{projectLocator}/parameters/{name}/value', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __update_build_parameters_with_http_info(self, project_locator, **kwargs):  # noqa: E501
        """Update build parameters.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__update_build_parameters_with_http_info(project_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_locator: (required)
        :param Properties body:
        :param str fields:
        :return: Properties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_locator', 'body', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_build_parameters" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_locator' is set
        if ('project_locator' not in params or
                params['project_locator'] is None):
            raise ValueError("Missing the required parameter `project_locator` when calling `update_build_parameters`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_locator' in params:
            if isinstance(params['project_locator'], TeamCityObject):
                path_params['projectLocator'] = params['project_locator'].locator_id
            else:
                path_params['projectLocator'] = params['project_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/projects/{projectLocator}/parameters', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Properties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __update_feature_with_http_info(self, feature_locator, project_locator, **kwargs):  # noqa: E501
        """Update a matching feature.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__update_feature_with_http_info(feature_locator, project_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str feature_locator: (required)
        :param str project_locator: (required)
        :param ProjectFeature body:
        :param str fields:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['feature_locator', 'project_locator', 'body', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_feature" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'feature_locator' is set
        if ('feature_locator' not in params or
                params['feature_locator'] is None):
            raise ValueError("Missing the required parameter `feature_locator` when calling `update_feature`")  # noqa: E501
        # verify the required parameter 'project_locator' is set
        if ('project_locator' not in params or
                params['project_locator'] is None):
            raise ValueError("Missing the required parameter `project_locator` when calling `update_feature`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'feature_locator' in params:
            if isinstance(params['feature_locator'], TeamCityObject):
                path_params['featureLocator'] = params['feature_locator'].locator_id
            else:
                path_params['featureLocator'] = params['feature_locator']  # noqa: E501
        if 'project_locator' in params:
            if isinstance(params['project_locator'], TeamCityObject):
                path_params['projectLocator'] = params['project_locator'].locator_id
            else:
                path_params['projectLocator'] = params['project_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/projects/{projectLocator}/projectFeatures/{featureLocator}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __update_features_with_http_info(self, project_locator, **kwargs):  # noqa: E501
        """Update all features.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__update_features_with_http_info(project_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_locator: (required)
        :param ProjectFeatures body:
        :param str fields:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_locator', 'body', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_features" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_locator' is set
        if ('project_locator' not in params or
                params['project_locator'] is None):
            raise ValueError("Missing the required parameter `project_locator` when calling `update_features`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_locator' in params:
            if isinstance(params['project_locator'], TeamCityObject):
                path_params['projectLocator'] = params['project_locator'].locator_id
            else:
                path_params['projectLocator'] = params['project_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/projects/{projectLocator}/projectFeatures', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
