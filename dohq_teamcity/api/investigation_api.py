# coding: utf-8

"""
    TeamCity REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2018.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import
from dohq_teamcity.custom.base_model import TeamCityObject

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from dohq_teamcity.models.investigation import Investigation  # noqa: F401,E501
from dohq_teamcity.models.investigations import Investigations  # noqa: F401,E501


class InvestigationApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """
    base_name = 'Investigation'

    def __init__(self, api_client=None):
        self.api_client = api_client

    def add_investigation(self, **kwargs):  # noqa: E501
        """Create a new investigation.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_investigation(async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param Investigation body:
        :param str fields:
        :return: Investigation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__add_investigation_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.__add_investigation_with_http_info(**kwargs)  # noqa: E501
            return data

    def add_multiple_investigations(self, **kwargs):  # noqa: E501
        """Create multiple new investigations.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_multiple_investigations(async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param Investigations body:
        :param str fields:
        :return: Investigations
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__add_multiple_investigations_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.__add_multiple_investigations_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_investigation(self, investigation_locator, **kwargs):  # noqa: E501
        """Delete investigation matching the locator.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_investigation(investigation_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str investigation_locator: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__delete_investigation_with_http_info(investigation_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__delete_investigation_with_http_info(investigation_locator, **kwargs)  # noqa: E501
            return data

    def get_all_investigations(self, **kwargs):  # noqa: E501
        """Get all investigations.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_investigations(async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str locator:
        :param str fields:
        :return: Investigations
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_all_investigations_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.__get_all_investigations_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_investigation(self, investigation_locator, **kwargs):  # noqa: E501
        """Get investigation matching the locator.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_investigation(investigation_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str investigation_locator: (required)
        :param str fields:
        :return: Investigation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_investigation_with_http_info(investigation_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_investigation_with_http_info(investigation_locator, **kwargs)  # noqa: E501
            return data

    def replace_investigation(self, investigation_locator, **kwargs):  # noqa: E501
        """Update investigation matching the locator.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_investigation(investigation_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str investigation_locator: (required)
        :param Investigation body:
        :param str fields:
        :return: Investigation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__replace_investigation_with_http_info(investigation_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__replace_investigation_with_http_info(investigation_locator, **kwargs)  # noqa: E501
            return data

    def __add_investigation_with_http_info(self, **kwargs):  # noqa: E501
        """Create a new investigation.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__add_investigation_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Investigation body:
        :param str fields:
        :return: Investigation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_investigation" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/investigations', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Investigation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __add_multiple_investigations_with_http_info(self, **kwargs):  # noqa: E501
        """Create multiple new investigations.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__add_multiple_investigations_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Investigations body:
        :param str fields:
        :return: Investigations
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_multiple_investigations" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/investigations/multiple', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Investigations',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __delete_investigation_with_http_info(self, investigation_locator, **kwargs):  # noqa: E501
        """Delete investigation matching the locator.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__delete_investigation_with_http_info(investigation_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str investigation_locator: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['investigation_locator']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_investigation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'investigation_locator' is set
        if ('investigation_locator' not in params or
                params['investigation_locator'] is None):
            raise ValueError("Missing the required parameter `investigation_locator` when calling `delete_investigation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'investigation_locator' in params:
            if isinstance(params['investigation_locator'], TeamCityObject):
                path_params['investigationLocator'] = params['investigation_locator'].locator_id
            else:
                path_params['investigationLocator'] = params['investigation_locator']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/investigations/{investigationLocator}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_all_investigations_with_http_info(self, **kwargs):  # noqa: E501
        """Get all investigations.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_all_investigations_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str locator:
        :param str fields:
        :return: Investigations
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_investigations" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'locator' in params:
            query_params.append(('locator', params['locator']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/investigations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Investigations',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_investigation_with_http_info(self, investigation_locator, **kwargs):  # noqa: E501
        """Get investigation matching the locator.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_investigation_with_http_info(investigation_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str investigation_locator: (required)
        :param str fields:
        :return: Investigation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['investigation_locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_investigation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'investigation_locator' is set
        if ('investigation_locator' not in params or
                params['investigation_locator'] is None):
            raise ValueError("Missing the required parameter `investigation_locator` when calling `get_investigation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'investigation_locator' in params:
            if isinstance(params['investigation_locator'], TeamCityObject):
                path_params['investigationLocator'] = params['investigation_locator'].locator_id
            else:
                path_params['investigationLocator'] = params['investigation_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/investigations/{investigationLocator}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Investigation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __replace_investigation_with_http_info(self, investigation_locator, **kwargs):  # noqa: E501
        """Update investigation matching the locator.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__replace_investigation_with_http_info(investigation_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str investigation_locator: (required)
        :param Investigation body:
        :param str fields:
        :return: Investigation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['investigation_locator', 'body', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_investigation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'investigation_locator' is set
        if ('investigation_locator' not in params or
                params['investigation_locator'] is None):
            raise ValueError("Missing the required parameter `investigation_locator` when calling `replace_investigation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'investigation_locator' in params:
            if isinstance(params['investigation_locator'], TeamCityObject):
                path_params['investigationLocator'] = params['investigation_locator'].locator_id
            else:
                path_params['investigationLocator'] = params['investigation_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/investigations/{investigationLocator}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Investigation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
