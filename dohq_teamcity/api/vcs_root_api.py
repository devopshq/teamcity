# coding: utf-8

"""
    TeamCity REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2018.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import
from dohq_teamcity.custom.base_model import TeamCityObject

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from dohq_teamcity.models.properties import Properties  # noqa: F401,E501
from dohq_teamcity.models.vcs_root import VcsRoot  # noqa: F401,E501
from dohq_teamcity.models.vcs_root_instances import VcsRootInstances  # noqa: F401,E501
from dohq_teamcity.models.vcs_roots import VcsRoots  # noqa: F401,E501


class VcsRootApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """
    base_name = 'VcsRoot'

    def __init__(self, api_client=None):
        self.api_client = api_client

    def add_vcs_root(self, **kwargs):  # noqa: E501
        """Add a new VCS root.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_vcs_root(async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param VcsRoot body:
        :param str fields:
        :return: VcsRoot
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__add_vcs_root_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.__add_vcs_root_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_all_vcs_root_properties(self, vcs_root_locator, **kwargs):  # noqa: E501
        """Delete all properties of the matching VCS root.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_all_vcs_root_properties(vcs_root_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str vcs_root_locator: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__delete_all_vcs_root_properties_with_http_info(vcs_root_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__delete_all_vcs_root_properties_with_http_info(vcs_root_locator, **kwargs)  # noqa: E501
            return data

    def delete_vcs_root(self, vcs_root_locator, **kwargs):  # noqa: E501
        """Remove VCS root matching the locator.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_vcs_root(vcs_root_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str vcs_root_locator: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__delete_vcs_root_with_http_info(vcs_root_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__delete_vcs_root_with_http_info(vcs_root_locator, **kwargs)  # noqa: E501
            return data

    def delete_vcs_root_property(self, vcs_root_locator, name, **kwargs):  # noqa: E501
        """Delete a property of the matching VCS root.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_vcs_root_property(vcs_root_locator, name, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str vcs_root_locator: (required)
        :param str name: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__delete_vcs_root_property_with_http_info(vcs_root_locator, name, **kwargs)  # noqa: E501
        else:
            (data) = self.__delete_vcs_root_property_with_http_info(vcs_root_locator, name, **kwargs)  # noqa: E501
            return data

    def get_all_vcs_root_properties(self, vcs_root_locator, **kwargs):  # noqa: E501
        """Get all properties of the matching VCS root.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_vcs_root_properties(vcs_root_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str vcs_root_locator: (required)
        :param str fields:
        :return: Properties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_all_vcs_root_properties_with_http_info(vcs_root_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_all_vcs_root_properties_with_http_info(vcs_root_locator, **kwargs)  # noqa: E501
            return data

    def get_all_vcs_roots(self, **kwargs):  # noqa: E501
        """Get all VCS roots.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_vcs_roots(async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str locator:
        :param str fields:
        :return: VcsRoots
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_all_vcs_roots_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.__get_all_vcs_roots_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_root_endpoints(self, vcs_root_locator, **kwargs):  # noqa: E501
        """Get root endpoints.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_root_endpoints(vcs_root_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str vcs_root_locator: (required)
        :param str fields:
        :return: VcsRoot
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_root_endpoints_with_http_info(vcs_root_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_root_endpoints_with_http_info(vcs_root_locator, **kwargs)  # noqa: E501
            return data

    def get_vcs_root_field(self, vcs_root_locator, field, **kwargs):  # noqa: E501
        """Get a field of the matching VCS root.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vcs_root_field(vcs_root_locator, field, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str vcs_root_locator: (required)
        :param str field: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_vcs_root_field_with_http_info(vcs_root_locator, field, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_vcs_root_field_with_http_info(vcs_root_locator, field, **kwargs)  # noqa: E501
            return data

    def get_vcs_root_instances(self, vcs_root_locator, **kwargs):  # noqa: E501
        """Get all VCS root instances of the matching VCS root.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vcs_root_instances(vcs_root_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str vcs_root_locator: (required)
        :param str fields:
        :return: VcsRootInstances
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_vcs_root_instances_with_http_info(vcs_root_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_vcs_root_instances_with_http_info(vcs_root_locator, **kwargs)  # noqa: E501
            return data

    def get_vcs_root_property(self, vcs_root_locator, name, **kwargs):  # noqa: E501
        """Get a property on the matching VCS root.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vcs_root_property(vcs_root_locator, name, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str vcs_root_locator: (required)
        :param str name: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_vcs_root_property_with_http_info(vcs_root_locator, name, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_vcs_root_property_with_http_info(vcs_root_locator, name, **kwargs)  # noqa: E501
            return data

    def get_vcs_root_settings_file(self, vcs_root_locator, **kwargs):  # noqa: E501
        """Get the settings file of the matching VCS root.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vcs_root_settings_file(vcs_root_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str vcs_root_locator: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_vcs_root_settings_file_with_http_info(vcs_root_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_vcs_root_settings_file_with_http_info(vcs_root_locator, **kwargs)  # noqa: E501
            return data

    def set_vcs_root_field(self, vcs_root_locator, field, **kwargs):  # noqa: E501
        """Update a field of the matching VCS root.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_vcs_root_field(vcs_root_locator, field, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str vcs_root_locator: (required)
        :param str field: (required)
        :param str body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__set_vcs_root_field_with_http_info(vcs_root_locator, field, **kwargs)  # noqa: E501
        else:
            (data) = self.__set_vcs_root_field_with_http_info(vcs_root_locator, field, **kwargs)  # noqa: E501
            return data

    def set_vcs_root_properties(self, vcs_root_locator, **kwargs):  # noqa: E501
        """Update all properties of the matching VCS root.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_vcs_root_properties(vcs_root_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str vcs_root_locator: (required)
        :param Properties body:
        :param str fields:
        :return: Properties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__set_vcs_root_properties_with_http_info(vcs_root_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__set_vcs_root_properties_with_http_info(vcs_root_locator, **kwargs)  # noqa: E501
            return data

    def set_vcs_root_property(self, vcs_root_locator, name, **kwargs):  # noqa: E501
        """Update a property of the matching VCS root.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_vcs_root_property(vcs_root_locator, name, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str vcs_root_locator: (required)
        :param str name: (required)
        :param str body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__set_vcs_root_property_with_http_info(vcs_root_locator, name, **kwargs)  # noqa: E501
        else:
            (data) = self.__set_vcs_root_property_with_http_info(vcs_root_locator, name, **kwargs)  # noqa: E501
            return data

    def __add_vcs_root_with_http_info(self, **kwargs):  # noqa: E501
        """Add a new VCS root.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__add_vcs_root_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VcsRoot body:
        :param str fields:
        :return: VcsRoot
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_vcs_root" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/vcs-roots', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VcsRoot',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __delete_all_vcs_root_properties_with_http_info(self, vcs_root_locator, **kwargs):  # noqa: E501
        """Delete all properties of the matching VCS root.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__delete_all_vcs_root_properties_with_http_info(vcs_root_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vcs_root_locator: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vcs_root_locator']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_all_vcs_root_properties" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vcs_root_locator' is set
        if ('vcs_root_locator' not in params or
                params['vcs_root_locator'] is None):
            raise ValueError("Missing the required parameter `vcs_root_locator` when calling `delete_all_vcs_root_properties`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vcs_root_locator' in params:
            if isinstance(params['vcs_root_locator'], TeamCityObject):
                path_params['vcsRootLocator'] = params['vcs_root_locator'].locator_id
            else:
                path_params['vcsRootLocator'] = params['vcs_root_locator']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/vcs-roots/{vcsRootLocator}/properties', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __delete_vcs_root_with_http_info(self, vcs_root_locator, **kwargs):  # noqa: E501
        """Remove VCS root matching the locator.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__delete_vcs_root_with_http_info(vcs_root_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vcs_root_locator: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vcs_root_locator']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_vcs_root" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vcs_root_locator' is set
        if ('vcs_root_locator' not in params or
                params['vcs_root_locator'] is None):
            raise ValueError("Missing the required parameter `vcs_root_locator` when calling `delete_vcs_root`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vcs_root_locator' in params:
            if isinstance(params['vcs_root_locator'], TeamCityObject):
                path_params['vcsRootLocator'] = params['vcs_root_locator'].locator_id
            else:
                path_params['vcsRootLocator'] = params['vcs_root_locator']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/vcs-roots/{vcsRootLocator}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __delete_vcs_root_property_with_http_info(self, vcs_root_locator, name, **kwargs):  # noqa: E501
        """Delete a property of the matching VCS root.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__delete_vcs_root_property_with_http_info(vcs_root_locator, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vcs_root_locator: (required)
        :param str name: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vcs_root_locator', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_vcs_root_property" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vcs_root_locator' is set
        if ('vcs_root_locator' not in params or
                params['vcs_root_locator'] is None):
            raise ValueError("Missing the required parameter `vcs_root_locator` when calling `delete_vcs_root_property`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_vcs_root_property`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vcs_root_locator' in params:
            if isinstance(params['vcs_root_locator'], TeamCityObject):
                path_params['vcsRootLocator'] = params['vcs_root_locator'].locator_id
            else:
                path_params['vcsRootLocator'] = params['vcs_root_locator']  # noqa: E501
        if 'name' in params:
            if isinstance(params['name'], TeamCityObject):
                path_params['name'] = params['name'].locator_id
            else:
                path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/vcs-roots/{vcsRootLocator}/properties/{name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_all_vcs_root_properties_with_http_info(self, vcs_root_locator, **kwargs):  # noqa: E501
        """Get all properties of the matching VCS root.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_all_vcs_root_properties_with_http_info(vcs_root_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vcs_root_locator: (required)
        :param str fields:
        :return: Properties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vcs_root_locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_vcs_root_properties" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vcs_root_locator' is set
        if ('vcs_root_locator' not in params or
                params['vcs_root_locator'] is None):
            raise ValueError("Missing the required parameter `vcs_root_locator` when calling `get_all_vcs_root_properties`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vcs_root_locator' in params:
            if isinstance(params['vcs_root_locator'], TeamCityObject):
                path_params['vcsRootLocator'] = params['vcs_root_locator'].locator_id
            else:
                path_params['vcsRootLocator'] = params['vcs_root_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/vcs-roots/{vcsRootLocator}/properties', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Properties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_all_vcs_roots_with_http_info(self, **kwargs):  # noqa: E501
        """Get all VCS roots.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_all_vcs_roots_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str locator:
        :param str fields:
        :return: VcsRoots
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_vcs_roots" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'locator' in params:
            query_params.append(('locator', params['locator']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/vcs-roots', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VcsRoots',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_root_endpoints_with_http_info(self, vcs_root_locator, **kwargs):  # noqa: E501
        """Get root endpoints.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_root_endpoints_with_http_info(vcs_root_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vcs_root_locator: (required)
        :param str fields:
        :return: VcsRoot
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vcs_root_locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_root_endpoints" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vcs_root_locator' is set
        if ('vcs_root_locator' not in params or
                params['vcs_root_locator'] is None):
            raise ValueError("Missing the required parameter `vcs_root_locator` when calling `get_root_endpoints`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vcs_root_locator' in params:
            if isinstance(params['vcs_root_locator'], TeamCityObject):
                path_params['vcsRootLocator'] = params['vcs_root_locator'].locator_id
            else:
                path_params['vcsRootLocator'] = params['vcs_root_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/vcs-roots/{vcsRootLocator}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VcsRoot',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_vcs_root_field_with_http_info(self, vcs_root_locator, field, **kwargs):  # noqa: E501
        """Get a field of the matching VCS root.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_vcs_root_field_with_http_info(vcs_root_locator, field, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vcs_root_locator: (required)
        :param str field: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vcs_root_locator', 'field']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_vcs_root_field" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vcs_root_locator' is set
        if ('vcs_root_locator' not in params or
                params['vcs_root_locator'] is None):
            raise ValueError("Missing the required parameter `vcs_root_locator` when calling `get_vcs_root_field`")  # noqa: E501
        # verify the required parameter 'field' is set
        if ('field' not in params or
                params['field'] is None):
            raise ValueError("Missing the required parameter `field` when calling `get_vcs_root_field`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vcs_root_locator' in params:
            if isinstance(params['vcs_root_locator'], TeamCityObject):
                path_params['vcsRootLocator'] = params['vcs_root_locator'].locator_id
            else:
                path_params['vcsRootLocator'] = params['vcs_root_locator']  # noqa: E501
        if 'field' in params:
            if isinstance(params['field'], TeamCityObject):
                path_params['field'] = params['field'].locator_id
            else:
                path_params['field'] = params['field']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/vcs-roots/{vcsRootLocator}/{field}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_vcs_root_instances_with_http_info(self, vcs_root_locator, **kwargs):  # noqa: E501
        """Get all VCS root instances of the matching VCS root.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_vcs_root_instances_with_http_info(vcs_root_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vcs_root_locator: (required)
        :param str fields:
        :return: VcsRootInstances
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vcs_root_locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_vcs_root_instances" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vcs_root_locator' is set
        if ('vcs_root_locator' not in params or
                params['vcs_root_locator'] is None):
            raise ValueError("Missing the required parameter `vcs_root_locator` when calling `get_vcs_root_instances`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vcs_root_locator' in params:
            if isinstance(params['vcs_root_locator'], TeamCityObject):
                path_params['vcsRootLocator'] = params['vcs_root_locator'].locator_id
            else:
                path_params['vcsRootLocator'] = params['vcs_root_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/vcs-roots/{vcsRootLocator}/instances', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VcsRootInstances',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_vcs_root_property_with_http_info(self, vcs_root_locator, name, **kwargs):  # noqa: E501
        """Get a property on the matching VCS root.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_vcs_root_property_with_http_info(vcs_root_locator, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vcs_root_locator: (required)
        :param str name: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vcs_root_locator', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_vcs_root_property" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vcs_root_locator' is set
        if ('vcs_root_locator' not in params or
                params['vcs_root_locator'] is None):
            raise ValueError("Missing the required parameter `vcs_root_locator` when calling `get_vcs_root_property`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_vcs_root_property`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vcs_root_locator' in params:
            if isinstance(params['vcs_root_locator'], TeamCityObject):
                path_params['vcsRootLocator'] = params['vcs_root_locator'].locator_id
            else:
                path_params['vcsRootLocator'] = params['vcs_root_locator']  # noqa: E501
        if 'name' in params:
            if isinstance(params['name'], TeamCityObject):
                path_params['name'] = params['name'].locator_id
            else:
                path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/vcs-roots/{vcsRootLocator}/properties/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_vcs_root_settings_file_with_http_info(self, vcs_root_locator, **kwargs):  # noqa: E501
        """Get the settings file of the matching VCS root.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_vcs_root_settings_file_with_http_info(vcs_root_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vcs_root_locator: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vcs_root_locator']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_vcs_root_settings_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vcs_root_locator' is set
        if ('vcs_root_locator' not in params or
                params['vcs_root_locator'] is None):
            raise ValueError("Missing the required parameter `vcs_root_locator` when calling `get_vcs_root_settings_file`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vcs_root_locator' in params:
            if isinstance(params['vcs_root_locator'], TeamCityObject):
                path_params['vcsRootLocator'] = params['vcs_root_locator'].locator_id
            else:
                path_params['vcsRootLocator'] = params['vcs_root_locator']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/vcs-roots/{vcsRootLocator}/settingsFile', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __set_vcs_root_field_with_http_info(self, vcs_root_locator, field, **kwargs):  # noqa: E501
        """Update a field of the matching VCS root.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__set_vcs_root_field_with_http_info(vcs_root_locator, field, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vcs_root_locator: (required)
        :param str field: (required)
        :param str body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vcs_root_locator', 'field', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_vcs_root_field" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vcs_root_locator' is set
        if ('vcs_root_locator' not in params or
                params['vcs_root_locator'] is None):
            raise ValueError("Missing the required parameter `vcs_root_locator` when calling `set_vcs_root_field`")  # noqa: E501
        # verify the required parameter 'field' is set
        if ('field' not in params or
                params['field'] is None):
            raise ValueError("Missing the required parameter `field` when calling `set_vcs_root_field`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vcs_root_locator' in params:
            if isinstance(params['vcs_root_locator'], TeamCityObject):
                path_params['vcsRootLocator'] = params['vcs_root_locator'].locator_id
            else:
                path_params['vcsRootLocator'] = params['vcs_root_locator']  # noqa: E501
        if 'field' in params:
            if isinstance(params['field'], TeamCityObject):
                path_params['field'] = params['field'].locator_id
            else:
                path_params['field'] = params['field']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/vcs-roots/{vcsRootLocator}/{field}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __set_vcs_root_properties_with_http_info(self, vcs_root_locator, **kwargs):  # noqa: E501
        """Update all properties of the matching VCS root.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__set_vcs_root_properties_with_http_info(vcs_root_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vcs_root_locator: (required)
        :param Properties body:
        :param str fields:
        :return: Properties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vcs_root_locator', 'body', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_vcs_root_properties" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vcs_root_locator' is set
        if ('vcs_root_locator' not in params or
                params['vcs_root_locator'] is None):
            raise ValueError("Missing the required parameter `vcs_root_locator` when calling `set_vcs_root_properties`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vcs_root_locator' in params:
            if isinstance(params['vcs_root_locator'], TeamCityObject):
                path_params['vcsRootLocator'] = params['vcs_root_locator'].locator_id
            else:
                path_params['vcsRootLocator'] = params['vcs_root_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/vcs-roots/{vcsRootLocator}/properties', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Properties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __set_vcs_root_property_with_http_info(self, vcs_root_locator, name, **kwargs):  # noqa: E501
        """Update a property of the matching VCS root.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__set_vcs_root_property_with_http_info(vcs_root_locator, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vcs_root_locator: (required)
        :param str name: (required)
        :param str body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vcs_root_locator', 'name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_vcs_root_property" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vcs_root_locator' is set
        if ('vcs_root_locator' not in params or
                params['vcs_root_locator'] is None):
            raise ValueError("Missing the required parameter `vcs_root_locator` when calling `set_vcs_root_property`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `set_vcs_root_property`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vcs_root_locator' in params:
            if isinstance(params['vcs_root_locator'], TeamCityObject):
                path_params['vcsRootLocator'] = params['vcs_root_locator'].locator_id
            else:
                path_params['vcsRootLocator'] = params['vcs_root_locator']  # noqa: E501
        if 'name' in params:
            if isinstance(params['name'], TeamCityObject):
                path_params['name'] = params['name'].locator_id
            else:
                path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/vcs-roots/{vcsRootLocator}/properties/{name}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
