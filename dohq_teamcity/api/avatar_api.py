# coding: utf-8

"""
    TeamCity REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2018.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import
from dohq_teamcity.custom.base_model import TeamCityObject

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from dohq_teamcity.models.file import file  # noqa: F401,E501


class AvatarApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """
    base_name = 'Avatar'

    def __init__(self, api_client=None):
        self.api_client = api_client

    def delete_avatar(self, user_locator, **kwargs):  # noqa: E501
        """Delete a users avatar  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_avatar(user_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str user_locator: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__delete_avatar_with_http_info(user_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__delete_avatar_with_http_info(user_locator, **kwargs)  # noqa: E501
            return data

    def get_avatar(self, user_locator, size, **kwargs):  # noqa: E501
        """Get a users avatar  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_avatar(user_locator, size, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str user_locator: (required)
        :param int size: avatar's size (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_avatar_with_http_info(user_locator, size, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_avatar_with_http_info(user_locator, size, **kwargs)  # noqa: E501
            return data

    def get_avatar_with_hash(self, user_locator, size, hash, **kwargs):  # noqa: E501
        """Get a users avatar  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_avatar_with_hash(user_locator, size, hash, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str user_locator: (required)
        :param int size: avatar's size (required)
        :param str hash: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_avatar_with_hash_with_http_info(user_locator, size, hash, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_avatar_with_hash_with_http_info(user_locator, size, hash, **kwargs)  # noqa: E501
            return data

    def put_avatar(self, user_locator, **kwargs):  # noqa: E501
        """Update a users avatar  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_avatar(user_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str user_locator: (required)
        :param file avatar:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__put_avatar_with_http_info(user_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__put_avatar_with_http_info(user_locator, **kwargs)  # noqa: E501
            return data

    def __delete_avatar_with_http_info(self, user_locator, **kwargs):  # noqa: E501
        """Delete a users avatar  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__delete_avatar_with_http_info(user_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_locator: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_locator']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_avatar" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_locator' is set
        if ('user_locator' not in params or
                params['user_locator'] is None):
            raise ValueError("Missing the required parameter `user_locator` when calling `delete_avatar`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_locator' in params:
            if isinstance(params['user_locator'], TeamCityObject):
                path_params['userLocator'] = params['user_locator'].locator_id
            else:
                path_params['userLocator'] = params['user_locator']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/avatars/{userLocator}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_avatar_with_http_info(self, user_locator, size, **kwargs):  # noqa: E501
        """Get a users avatar  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_avatar_with_http_info(user_locator, size, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_locator: (required)
        :param int size: avatar's size (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_locator', 'size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_avatar" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_locator' is set
        if ('user_locator' not in params or
                params['user_locator'] is None):
            raise ValueError("Missing the required parameter `user_locator` when calling `get_avatar`")  # noqa: E501
        # verify the required parameter 'size' is set
        if ('size' not in params or
                params['size'] is None):
            raise ValueError("Missing the required parameter `size` when calling `get_avatar`")  # noqa: E501

        if 'size' in params and params['size'] > 300:  # noqa: E501
            raise ValueError("Invalid value for parameter `size` when calling `get_avatar`, must be a value less than or equal to `300`")  # noqa: E501
        if 'size' in params and params['size'] < 2:  # noqa: E501
            raise ValueError("Invalid value for parameter `size` when calling `get_avatar`, must be a value greater than or equal to `2`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'user_locator' in params:
            if isinstance(params['user_locator'], TeamCityObject):
                path_params['userLocator'] = params['user_locator'].locator_id
            else:
                path_params['userLocator'] = params['user_locator']  # noqa: E501
        if 'size' in params:
            if isinstance(params['size'], TeamCityObject):
                path_params['size'] = params['size'].locator_id
            else:
                path_params['size'] = params['size']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['image/png'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/avatars/{userLocator}/{size}/avatar.png', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_avatar_with_hash_with_http_info(self, user_locator, size, hash, **kwargs):  # noqa: E501
        """Get a users avatar  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_avatar_with_hash_with_http_info(user_locator, size, hash, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_locator: (required)
        :param int size: avatar's size (required)
        :param str hash: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_locator', 'size', 'hash']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_avatar_with_hash" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_locator' is set
        if ('user_locator' not in params or
                params['user_locator'] is None):
            raise ValueError("Missing the required parameter `user_locator` when calling `get_avatar_with_hash`")  # noqa: E501
        # verify the required parameter 'size' is set
        if ('size' not in params or
                params['size'] is None):
            raise ValueError("Missing the required parameter `size` when calling `get_avatar_with_hash`")  # noqa: E501
        # verify the required parameter 'hash' is set
        if ('hash' not in params or
                params['hash'] is None):
            raise ValueError("Missing the required parameter `hash` when calling `get_avatar_with_hash`")  # noqa: E501

        if 'size' in params and params['size'] > 300:  # noqa: E501
            raise ValueError("Invalid value for parameter `size` when calling `get_avatar_with_hash`, must be a value less than or equal to `300`")  # noqa: E501
        if 'size' in params and params['size'] < 2:  # noqa: E501
            raise ValueError("Invalid value for parameter `size` when calling `get_avatar_with_hash`, must be a value greater than or equal to `2`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'user_locator' in params:
            if isinstance(params['user_locator'], TeamCityObject):
                path_params['userLocator'] = params['user_locator'].locator_id
            else:
                path_params['userLocator'] = params['user_locator']  # noqa: E501
        if 'size' in params:
            if isinstance(params['size'], TeamCityObject):
                path_params['size'] = params['size'].locator_id
            else:
                path_params['size'] = params['size']  # noqa: E501
        if 'hash' in params:
            if isinstance(params['hash'], TeamCityObject):
                path_params['hash'] = params['hash'].locator_id
            else:
                path_params['hash'] = params['hash']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['image/png'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/avatars/{userLocator}/{size}/avatar.{hash}.png', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __put_avatar_with_http_info(self, user_locator, **kwargs):  # noqa: E501
        """Update a users avatar  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__put_avatar_with_http_info(user_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_locator: (required)
        :param file avatar:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_locator', 'avatar']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_avatar" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_locator' is set
        if ('user_locator' not in params or
                params['user_locator'] is None):
            raise ValueError("Missing the required parameter `user_locator` when calling `put_avatar`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_locator' in params:
            if isinstance(params['user_locator'], TeamCityObject):
                path_params['userLocator'] = params['user_locator'].locator_id
            else:
                path_params['userLocator'] = params['user_locator']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'avatar' in params:
            local_var_files['avatar'] = params['avatar']  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/avatars/{userLocator}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
