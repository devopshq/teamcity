# coding: utf-8

"""
    TeamCity REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2018.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import
from dohq_teamcity.custom.base_model import TeamCityObject

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from dohq_teamcity.models.build import Build  # noqa: F401,E501
from dohq_teamcity.models.build_cancel_request import BuildCancelRequest  # noqa: F401,E501
from dohq_teamcity.models.build_changes import BuildChanges  # noqa: F401,E501
from dohq_teamcity.models.builds import Builds  # noqa: F401,E501
from dohq_teamcity.models.comment import Comment  # noqa: F401,E501
from dohq_teamcity.models.file import File  # noqa: F401,E501
from dohq_teamcity.models.files import Files  # noqa: F401,E501
from dohq_teamcity.models.issues_usages import IssuesUsages  # noqa: F401,E501
from dohq_teamcity.models.model_property import ModelProperty  # noqa: F401,E501
from dohq_teamcity.models.problem_occurrences import ProblemOccurrences  # noqa: F401,E501
from dohq_teamcity.models.properties import Properties  # noqa: F401,E501
from dohq_teamcity.models.tags import Tags  # noqa: F401,E501
from dohq_teamcity.models.test_occurrences import TestOccurrences  # noqa: F401,E501
from dohq_teamcity.models.file import file  # noqa: F401,E501


class BuildApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """
    base_name = 'Build'

    def __init__(self, api_client=None):
        self.api_client = api_client

    def add_tags(self, build_locator, **kwargs):  # noqa: E501
        """add_tags  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_tags(build_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str build_locator: (required)
        :param Tags body:
        :param str fields:
        :return: Tags
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__add_tags_with_http_info(build_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__add_tags_with_http_info(build_locator, **kwargs)  # noqa: E501
            return data

    def cancel_build(self, build_locator, **kwargs):  # noqa: E501
        """cancel_build  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cancel_build(build_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str build_locator: (required)
        :param BuildCancelRequest body:
        :param str fields:
        :return: Build
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__cancel_build_with_http_info(build_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__cancel_build_with_http_info(build_locator, **kwargs)  # noqa: E501
            return data

    def cancel_build_0(self, build_locator, **kwargs):  # noqa: E501
        """cancel_build_0  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cancel_build_0(build_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str build_locator: (required)
        :return: BuildCancelRequest
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__cancel_build_0_with_http_info(build_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__cancel_build_0_with_http_info(build_locator, **kwargs)  # noqa: E501
            return data

    def delete_all_parameters(self, build_locator, **kwargs):  # noqa: E501
        """delete_all_parameters  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_all_parameters(build_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str build_locator: (required)
        :param str fields:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__delete_all_parameters_with_http_info(build_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__delete_all_parameters_with_http_info(build_locator, **kwargs)  # noqa: E501
            return data

    def delete_build(self, build_locator, **kwargs):  # noqa: E501
        """delete_build  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_build(build_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str build_locator: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__delete_build_with_http_info(build_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__delete_build_with_http_info(build_locator, **kwargs)  # noqa: E501
            return data

    def delete_builds(self, **kwargs):  # noqa: E501
        """delete_builds  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_builds(async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str locator:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__delete_builds_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.__delete_builds_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_comment(self, build_locator, **kwargs):  # noqa: E501
        """delete_comment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_comment(build_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str build_locator: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__delete_comment_with_http_info(build_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__delete_comment_with_http_info(build_locator, **kwargs)  # noqa: E501
            return data

    def delete_parameter(self, name, build_locator, **kwargs):  # noqa: E501
        """delete_parameter  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_parameter(name, build_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str name: (required)
        :param str build_locator: (required)
        :param str fields:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__delete_parameter_with_http_info(name, build_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__delete_parameter_with_http_info(name, build_locator, **kwargs)  # noqa: E501
            return data

    def get_artifact_dependency_changes(self, build_locator, **kwargs):  # noqa: E501
        """get_artifact_dependency_changes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_artifact_dependency_changes(build_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str build_locator: (required)
        :param str fields:
        :return: BuildChanges
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_artifact_dependency_changes_with_http_info(build_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_artifact_dependency_changes_with_http_info(build_locator, **kwargs)  # noqa: E501
            return data

    def get_artifacts_directory(self, build_locator, **kwargs):  # noqa: E501
        """get_artifacts_directory  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_artifacts_directory(build_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str build_locator: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_artifacts_directory_with_http_info(build_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_artifacts_directory_with_http_info(build_locator, **kwargs)  # noqa: E501
            return data

    def get_build_number(self, build_locator, **kwargs):  # noqa: E501
        """get_build_number  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_build_number(build_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str build_locator: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_build_number_with_http_info(build_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_build_number_with_http_info(build_locator, **kwargs)  # noqa: E501
            return data

    def get_build_status_text(self, build_locator, **kwargs):  # noqa: E501
        """get_build_status_text  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_build_status_text(build_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str build_locator: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_build_status_text_with_http_info(build_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_build_status_text_with_http_info(build_locator, **kwargs)  # noqa: E501
            return data

    def get_canceled_info(self, build_locator, **kwargs):  # noqa: E501
        """get_canceled_info  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_canceled_info(build_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str build_locator: (required)
        :param str fields:
        :return: Comment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_canceled_info_with_http_info(build_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_canceled_info_with_http_info(build_locator, **kwargs)  # noqa: E501
            return data

    def get_children(self, path, build_locator, **kwargs):  # noqa: E501
        """get_children  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_children(path, build_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str path: (required)
        :param str build_locator: (required)
        :param str base_path:
        :param str locator:
        :param str fields:
        :param bool resolve_parameters:
        :param bool log_build_usage:
        :return: Files
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_children_with_http_info(path, build_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_children_with_http_info(path, build_locator, **kwargs)  # noqa: E501
            return data

    def get_children_alias(self, path, build_locator, **kwargs):  # noqa: E501
        """get_children_alias  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_children_alias(path, build_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str path: (required)
        :param str build_locator: (required)
        :param str base_path:
        :param str locator:
        :param str fields:
        :param bool resolve_parameters:
        :param bool log_build_usage:
        :return: Files
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_children_alias_with_http_info(path, build_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_children_alias_with_http_info(path, build_locator, **kwargs)  # noqa: E501
            return data

    def get_content(self, path, build_locator, **kwargs):  # noqa: E501
        """get_content  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_content(path, build_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str path: (required)
        :param str build_locator: (required)
        :param str response_builder:
        :param bool resolve_parameters:
        :param bool log_build_usage:
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_content_with_http_info(path, build_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_content_with_http_info(path, build_locator, **kwargs)  # noqa: E501
            return data

    def get_content_alias(self, path, build_locator, **kwargs):  # noqa: E501
        """get_content_alias  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_content_alias(path, build_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str path: (required)
        :param str build_locator: (required)
        :param bool resolve_parameters:
        :param bool log_build_usage:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_content_alias_with_http_info(path, build_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_content_alias_with_http_info(path, build_locator, **kwargs)  # noqa: E501
            return data

    def get_metadata(self, path, build_locator, **kwargs):  # noqa: E501
        """get_metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_metadata(path, build_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str path: (required)
        :param str build_locator: (required)
        :param str fields:
        :param bool resolve_parameters:
        :param bool log_build_usage:
        :return: File
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_metadata_with_http_info(path, build_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_metadata_with_http_info(path, build_locator, **kwargs)  # noqa: E501
            return data

    def get_parameter(self, name, build_locator, **kwargs):  # noqa: E501
        """get_parameter  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_parameter(name, build_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str name: (required)
        :param str build_locator: (required)
        :param str fields:
        :param str fields2:
        :return: ModelProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_parameter_with_http_info(name, build_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_parameter_with_http_info(name, build_locator, **kwargs)  # noqa: E501
            return data

    def get_parameter_0(self, build_locator, property_name, **kwargs):  # noqa: E501
        """get_parameter_0  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_parameter_0(build_locator, property_name, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str build_locator: (required)
        :param str property_name: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_parameter_0_with_http_info(build_locator, property_name, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_parameter_0_with_http_info(build_locator, property_name, **kwargs)  # noqa: E501
            return data

    def get_parameter_value_long(self, name, build_locator, **kwargs):  # noqa: E501
        """get_parameter_value_long  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_parameter_value_long(name, build_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str name: (required)
        :param str build_locator: (required)
        :param str fields:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_parameter_value_long_with_http_info(name, build_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_parameter_value_long_with_http_info(name, build_locator, **kwargs)  # noqa: E501
            return data

    def get_parameters(self, build_locator, **kwargs):  # noqa: E501
        """get_parameters  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_parameters(build_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str build_locator: (required)
        :param str locator:
        :param str fields:
        :param str fields2:
        :return: Properties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_parameters_with_http_info(build_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_parameters_with_http_info(build_locator, **kwargs)  # noqa: E501
            return data

    def get_pinned(self, build_locator, **kwargs):  # noqa: E501
        """get_pinned  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pinned(build_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str build_locator: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_pinned_with_http_info(build_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_pinned_with_http_info(build_locator, **kwargs)  # noqa: E501
            return data

    def get_problems(self, build_locator, **kwargs):  # noqa: E501
        """get_problems  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_problems(build_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str build_locator: (required)
        :param str fields:
        :return: ProblemOccurrences
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_problems_with_http_info(build_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_problems_with_http_info(build_locator, **kwargs)  # noqa: E501
            return data

    def get_resolved_parameter(self, build_locator, value, **kwargs):  # noqa: E501
        """get_resolved_parameter  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_resolved_parameter(build_locator, value, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str build_locator: (required)
        :param str value: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_resolved_parameter_with_http_info(build_locator, value, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_resolved_parameter_with_http_info(build_locator, value, **kwargs)  # noqa: E501
            return data

    def get_root(self, build_locator, **kwargs):  # noqa: E501
        """get_root  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_root(build_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str build_locator: (required)
        :param str base_path:
        :param str locator:
        :param str fields:
        :param bool resolve_parameters:
        :param bool log_build_usage:
        :return: Files
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_root_with_http_info(build_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_root_with_http_info(build_locator, **kwargs)  # noqa: E501
            return data

    def get_tests(self, build_locator, **kwargs):  # noqa: E501
        """get_tests  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tests(build_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str build_locator: (required)
        :param str fields:
        :return: TestOccurrences
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_tests_with_http_info(build_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_tests_with_http_info(build_locator, **kwargs)  # noqa: E501
            return data

    def get_zipped(self, path, build_locator, **kwargs):  # noqa: E501
        """get_zipped  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_zipped(path, build_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str path: (required)
        :param str build_locator: (required)
        :param str base_path:
        :param str locator:
        :param str name:
        :param bool resolve_parameters:
        :param bool log_build_usage:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_zipped_with_http_info(path, build_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_zipped_with_http_info(path, build_locator, **kwargs)  # noqa: E501
            return data

    def pin_build(self, build_locator, **kwargs):  # noqa: E501
        """pin_build  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pin_build(build_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str build_locator: (required)
        :param str body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__pin_build_with_http_info(build_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__pin_build_with_http_info(build_locator, **kwargs)  # noqa: E501
            return data

    def replace_comment(self, build_locator, **kwargs):  # noqa: E501
        """replace_comment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_comment(build_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str build_locator: (required)
        :param str body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__replace_comment_with_http_info(build_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__replace_comment_with_http_info(build_locator, **kwargs)  # noqa: E501
            return data

    def replace_tags(self, build_locator, **kwargs):  # noqa: E501
        """replace_tags  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_tags(build_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str build_locator: (required)
        :param str locator:
        :param Tags body:
        :param str fields:
        :return: Tags
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__replace_tags_with_http_info(build_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__replace_tags_with_http_info(build_locator, **kwargs)  # noqa: E501
            return data

    def reset_build_finish_parameters(self, build_locator, **kwargs):  # noqa: E501
        """reset_build_finish_parameters  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reset_build_finish_parameters(build_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str build_locator: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__reset_build_finish_parameters_with_http_info(build_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__reset_build_finish_parameters_with_http_info(build_locator, **kwargs)  # noqa: E501
            return data

    def serve_aggregated_build_status(self, build_locator, **kwargs):  # noqa: E501
        """serve_aggregated_build_status  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.serve_aggregated_build_status(build_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str build_locator: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__serve_aggregated_build_status_with_http_info(build_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__serve_aggregated_build_status_with_http_info(build_locator, **kwargs)  # noqa: E501
            return data

    def serve_aggregated_build_status_icon(self, build_locator, suffix, **kwargs):  # noqa: E501
        """serve_aggregated_build_status_icon  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.serve_aggregated_build_status_icon(build_locator, suffix, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str build_locator: (required)
        :param str suffix: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__serve_aggregated_build_status_icon_with_http_info(build_locator, suffix, **kwargs)  # noqa: E501
        else:
            (data) = self.__serve_aggregated_build_status_icon_with_http_info(build_locator, suffix, **kwargs)  # noqa: E501
            return data

    def serve_all_builds(self, **kwargs):  # noqa: E501
        """serve_all_builds  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.serve_all_builds(async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str build_type:
        :param str status:
        :param str triggered_by_user:
        :param bool include_personal:
        :param bool include_canceled:
        :param bool only_pinned:
        :param list[str] tag:
        :param str agent_name:
        :param str since_build:
        :param str since_date:
        :param int start:
        :param int count:
        :param str locator:
        :param str fields:
        :return: Builds
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__serve_all_builds_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.__serve_all_builds_with_http_info(**kwargs)  # noqa: E501
            return data

    def serve_build(self, build_locator, **kwargs):  # noqa: E501
        """serve_build  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.serve_build(build_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str build_locator: (required)
        :param str fields:
        :return: Build
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__serve_build_with_http_info(build_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__serve_build_with_http_info(build_locator, **kwargs)  # noqa: E501
            return data

    def serve_build_actual_parameters(self, build_locator, **kwargs):  # noqa: E501
        """serve_build_actual_parameters  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.serve_build_actual_parameters(build_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str build_locator: (required)
        :param str fields:
        :return: Properties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__serve_build_actual_parameters_with_http_info(build_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__serve_build_actual_parameters_with_http_info(build_locator, **kwargs)  # noqa: E501
            return data

    def serve_build_field_by_build_only(self, build_locator, field, **kwargs):  # noqa: E501
        """serve_build_field_by_build_only  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.serve_build_field_by_build_only(build_locator, field, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str build_locator: (required)
        :param str field: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__serve_build_field_by_build_only_with_http_info(build_locator, field, **kwargs)  # noqa: E501
        else:
            (data) = self.__serve_build_field_by_build_only_with_http_info(build_locator, field, **kwargs)  # noqa: E501
            return data

    def serve_build_related_issues(self, build_locator, **kwargs):  # noqa: E501
        """serve_build_related_issues  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.serve_build_related_issues(build_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str build_locator: (required)
        :param str fields:
        :return: IssuesUsages
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__serve_build_related_issues_with_http_info(build_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__serve_build_related_issues_with_http_info(build_locator, **kwargs)  # noqa: E501
            return data

    def serve_build_related_issues_old(self, build_locator, **kwargs):  # noqa: E501
        """serve_build_related_issues_old  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.serve_build_related_issues_old(build_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str build_locator: (required)
        :param str fields:
        :return: IssuesUsages
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__serve_build_related_issues_old_with_http_info(build_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__serve_build_related_issues_old_with_http_info(build_locator, **kwargs)  # noqa: E501
            return data

    def serve_build_statistic_value(self, build_locator, name, **kwargs):  # noqa: E501
        """serve_build_statistic_value  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.serve_build_statistic_value(build_locator, name, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str build_locator: (required)
        :param str name: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__serve_build_statistic_value_with_http_info(build_locator, name, **kwargs)  # noqa: E501
        else:
            (data) = self.__serve_build_statistic_value_with_http_info(build_locator, name, **kwargs)  # noqa: E501
            return data

    def serve_build_statistic_values(self, build_locator, **kwargs):  # noqa: E501
        """serve_build_statistic_values  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.serve_build_statistic_values(build_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str build_locator: (required)
        :param str fields:
        :return: Properties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__serve_build_statistic_values_with_http_info(build_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__serve_build_statistic_values_with_http_info(build_locator, **kwargs)  # noqa: E501
            return data

    def serve_build_status_icon(self, build_locator, suffix, **kwargs):  # noqa: E501
        """serve_build_status_icon  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.serve_build_status_icon(build_locator, suffix, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str build_locator: (required)
        :param str suffix: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__serve_build_status_icon_with_http_info(build_locator, suffix, **kwargs)  # noqa: E501
        else:
            (data) = self.__serve_build_status_icon_with_http_info(build_locator, suffix, **kwargs)  # noqa: E501
            return data

    def serve_source_file(self, build_locator, file_name, **kwargs):  # noqa: E501
        """serve_source_file  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.serve_source_file(build_locator, file_name, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str build_locator: (required)
        :param str file_name: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__serve_source_file_with_http_info(build_locator, file_name, **kwargs)  # noqa: E501
        else:
            (data) = self.__serve_source_file_with_http_info(build_locator, file_name, **kwargs)  # noqa: E501
            return data

    def serve_tags(self, build_locator, **kwargs):  # noqa: E501
        """serve_tags  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.serve_tags(build_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str build_locator: (required)
        :param str locator:
        :param str fields:
        :return: Tags
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__serve_tags_with_http_info(build_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__serve_tags_with_http_info(build_locator, **kwargs)  # noqa: E501
            return data

    def set_build_number(self, build_locator, **kwargs):  # noqa: E501
        """set_build_number  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_build_number(build_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str build_locator: (required)
        :param str body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__set_build_number_with_http_info(build_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__set_build_number_with_http_info(build_locator, **kwargs)  # noqa: E501
            return data

    def set_build_status_text(self, build_locator, **kwargs):  # noqa: E501
        """set_build_status_text  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_build_status_text(build_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str build_locator: (required)
        :param str body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__set_build_status_text_with_http_info(build_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__set_build_status_text_with_http_info(build_locator, **kwargs)  # noqa: E501
            return data

    def set_parameter(self, build_locator, **kwargs):  # noqa: E501
        """set_parameter  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_parameter(build_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str build_locator: (required)
        :param ModelProperty body:
        :param str fields:
        :param str fields2:
        :return: ModelProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__set_parameter_with_http_info(build_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__set_parameter_with_http_info(build_locator, **kwargs)  # noqa: E501
            return data

    def set_parameter_0(self, name, build_locator, **kwargs):  # noqa: E501
        """set_parameter_0  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_parameter_0(name, build_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str name: (required)
        :param str build_locator: (required)
        :param ModelProperty body:
        :param str fields:
        :param str fields2:
        :return: ModelProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__set_parameter_0_with_http_info(name, build_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__set_parameter_0_with_http_info(name, build_locator, **kwargs)  # noqa: E501
            return data

    def set_parameter_value_long(self, name, build_locator, **kwargs):  # noqa: E501
        """set_parameter_value_long  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_parameter_value_long(name, build_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str name: (required)
        :param str build_locator: (required)
        :param str body:
        :param str fields:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__set_parameter_value_long_with_http_info(name, build_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__set_parameter_value_long_with_http_info(name, build_locator, **kwargs)  # noqa: E501
            return data

    def set_parameters(self, build_locator, **kwargs):  # noqa: E501
        """set_parameters  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_parameters(build_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str build_locator: (required)
        :param Properties body:
        :param str fields:
        :param str fields2:
        :return: Properties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__set_parameters_with_http_info(build_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__set_parameters_with_http_info(build_locator, **kwargs)  # noqa: E501
            return data

    def unpin_build(self, build_locator, **kwargs):  # noqa: E501
        """unpin_build  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unpin_build(build_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str build_locator: (required)
        :param str body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__unpin_build_with_http_info(build_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__unpin_build_with_http_info(build_locator, **kwargs)  # noqa: E501
            return data

    def __add_tags_with_http_info(self, build_locator, **kwargs):  # noqa: E501
        """add_tags  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__add_tags_with_http_info(build_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str build_locator: (required)
        :param Tags body:
        :param str fields:
        :return: Tags
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['build_locator', 'body', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_tags" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'build_locator' is set
        if ('build_locator' not in params or
                params['build_locator'] is None):
            raise ValueError("Missing the required parameter `build_locator` when calling `add_tags`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'build_locator' in params:
            if isinstance(params['build_locator'], TeamCityObject):
                path_params['buildLocator'] = params['build_locator'].locator_id
            else:
                path_params['buildLocator'] = params['build_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/builds/{buildLocator}/tags', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Tags',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __cancel_build_with_http_info(self, build_locator, **kwargs):  # noqa: E501
        """cancel_build  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__cancel_build_with_http_info(build_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str build_locator: (required)
        :param BuildCancelRequest body:
        :param str fields:
        :return: Build
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['build_locator', 'body', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cancel_build" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'build_locator' is set
        if ('build_locator' not in params or
                params['build_locator'] is None):
            raise ValueError("Missing the required parameter `build_locator` when calling `cancel_build`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'build_locator' in params:
            if isinstance(params['build_locator'], TeamCityObject):
                path_params['buildLocator'] = params['build_locator'].locator_id
            else:
                path_params['buildLocator'] = params['build_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/builds/{buildLocator}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Build',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __cancel_build_0_with_http_info(self, build_locator, **kwargs):  # noqa: E501
        """cancel_build_0  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__cancel_build_0_with_http_info(build_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str build_locator: (required)
        :return: BuildCancelRequest
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['build_locator']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cancel_build_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'build_locator' is set
        if ('build_locator' not in params or
                params['build_locator'] is None):
            raise ValueError("Missing the required parameter `build_locator` when calling `cancel_build_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'build_locator' in params:
            if isinstance(params['build_locator'], TeamCityObject):
                path_params['buildLocator'] = params['build_locator'].locator_id
            else:
                path_params['buildLocator'] = params['build_locator']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/builds/{buildLocator}/example/buildCancelRequest', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BuildCancelRequest',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __delete_all_parameters_with_http_info(self, build_locator, **kwargs):  # noqa: E501
        """delete_all_parameters  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__delete_all_parameters_with_http_info(build_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str build_locator: (required)
        :param str fields:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['build_locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_all_parameters" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'build_locator' is set
        if ('build_locator' not in params or
                params['build_locator'] is None):
            raise ValueError("Missing the required parameter `build_locator` when calling `delete_all_parameters`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'build_locator' in params:
            if isinstance(params['build_locator'], TeamCityObject):
                path_params['buildLocator'] = params['build_locator'].locator_id
            else:
                path_params['buildLocator'] = params['build_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/builds/{buildLocator}/attributes', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __delete_build_with_http_info(self, build_locator, **kwargs):  # noqa: E501
        """delete_build  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__delete_build_with_http_info(build_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str build_locator: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['build_locator']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_build" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'build_locator' is set
        if ('build_locator' not in params or
                params['build_locator'] is None):
            raise ValueError("Missing the required parameter `build_locator` when calling `delete_build`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'build_locator' in params:
            if isinstance(params['build_locator'], TeamCityObject):
                path_params['buildLocator'] = params['build_locator'].locator_id
            else:
                path_params['buildLocator'] = params['build_locator']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/builds/{buildLocator}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __delete_builds_with_http_info(self, **kwargs):  # noqa: E501
        """delete_builds  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__delete_builds_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str locator:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['locator']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_builds" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'locator' in params:
            query_params.append(('locator', params['locator']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/builds', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __delete_comment_with_http_info(self, build_locator, **kwargs):  # noqa: E501
        """delete_comment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__delete_comment_with_http_info(build_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str build_locator: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['build_locator']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_comment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'build_locator' is set
        if ('build_locator' not in params or
                params['build_locator'] is None):
            raise ValueError("Missing the required parameter `build_locator` when calling `delete_comment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'build_locator' in params:
            if isinstance(params['build_locator'], TeamCityObject):
                path_params['buildLocator'] = params['build_locator'].locator_id
            else:
                path_params['buildLocator'] = params['build_locator']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/builds/{buildLocator}/comment', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __delete_parameter_with_http_info(self, name, build_locator, **kwargs):  # noqa: E501
        """delete_parameter  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__delete_parameter_with_http_info(name, build_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :param str build_locator: (required)
        :param str fields:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'build_locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_parameter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_parameter`")  # noqa: E501
        # verify the required parameter 'build_locator' is set
        if ('build_locator' not in params or
                params['build_locator'] is None):
            raise ValueError("Missing the required parameter `build_locator` when calling `delete_parameter`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            if isinstance(params['name'], TeamCityObject):
                path_params['name'] = params['name'].locator_id
            else:
                path_params['name'] = params['name']  # noqa: E501
        if 'build_locator' in params:
            if isinstance(params['build_locator'], TeamCityObject):
                path_params['buildLocator'] = params['build_locator'].locator_id
            else:
                path_params['buildLocator'] = params['build_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/builds/{buildLocator}/attributes/{name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_artifact_dependency_changes_with_http_info(self, build_locator, **kwargs):  # noqa: E501
        """get_artifact_dependency_changes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_artifact_dependency_changes_with_http_info(build_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str build_locator: (required)
        :param str fields:
        :return: BuildChanges
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['build_locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_artifact_dependency_changes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'build_locator' is set
        if ('build_locator' not in params or
                params['build_locator'] is None):
            raise ValueError("Missing the required parameter `build_locator` when calling `get_artifact_dependency_changes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'build_locator' in params:
            if isinstance(params['build_locator'], TeamCityObject):
                path_params['buildLocator'] = params['build_locator'].locator_id
            else:
                path_params['buildLocator'] = params['build_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/builds/{buildLocator}/artifactDependencyChanges', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BuildChanges',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_artifacts_directory_with_http_info(self, build_locator, **kwargs):  # noqa: E501
        """get_artifacts_directory  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_artifacts_directory_with_http_info(build_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str build_locator: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['build_locator']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_artifacts_directory" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'build_locator' is set
        if ('build_locator' not in params or
                params['build_locator'] is None):
            raise ValueError("Missing the required parameter `build_locator` when calling `get_artifacts_directory`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'build_locator' in params:
            if isinstance(params['build_locator'], TeamCityObject):
                path_params['buildLocator'] = params['build_locator'].locator_id
            else:
                path_params['buildLocator'] = params['build_locator']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/builds/{buildLocator}/artifactsDirectory', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_build_number_with_http_info(self, build_locator, **kwargs):  # noqa: E501
        """get_build_number  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_build_number_with_http_info(build_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str build_locator: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['build_locator']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_build_number" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'build_locator' is set
        if ('build_locator' not in params or
                params['build_locator'] is None):
            raise ValueError("Missing the required parameter `build_locator` when calling `get_build_number`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'build_locator' in params:
            if isinstance(params['build_locator'], TeamCityObject):
                path_params['buildLocator'] = params['build_locator'].locator_id
            else:
                path_params['buildLocator'] = params['build_locator']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/builds/{buildLocator}/number', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_build_status_text_with_http_info(self, build_locator, **kwargs):  # noqa: E501
        """get_build_status_text  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_build_status_text_with_http_info(build_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str build_locator: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['build_locator']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_build_status_text" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'build_locator' is set
        if ('build_locator' not in params or
                params['build_locator'] is None):
            raise ValueError("Missing the required parameter `build_locator` when calling `get_build_status_text`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'build_locator' in params:
            if isinstance(params['build_locator'], TeamCityObject):
                path_params['buildLocator'] = params['build_locator'].locator_id
            else:
                path_params['buildLocator'] = params['build_locator']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/builds/{buildLocator}/statusText', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_canceled_info_with_http_info(self, build_locator, **kwargs):  # noqa: E501
        """get_canceled_info  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_canceled_info_with_http_info(build_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str build_locator: (required)
        :param str fields:
        :return: Comment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['build_locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_canceled_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'build_locator' is set
        if ('build_locator' not in params or
                params['build_locator'] is None):
            raise ValueError("Missing the required parameter `build_locator` when calling `get_canceled_info`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'build_locator' in params:
            if isinstance(params['build_locator'], TeamCityObject):
                path_params['buildLocator'] = params['build_locator'].locator_id
            else:
                path_params['buildLocator'] = params['build_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/builds/{buildLocator}/canceledInfo', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Comment',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_children_with_http_info(self, path, build_locator, **kwargs):  # noqa: E501
        """get_children  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_children_with_http_info(path, build_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str path: (required)
        :param str build_locator: (required)
        :param str base_path:
        :param str locator:
        :param str fields:
        :param bool resolve_parameters:
        :param bool log_build_usage:
        :return: Files
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['path', 'build_locator', 'base_path', 'locator', 'fields', 'resolve_parameters', 'log_build_usage']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_children" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'path' is set
        if ('path' not in params or
                params['path'] is None):
            raise ValueError("Missing the required parameter `path` when calling `get_children`")  # noqa: E501
        # verify the required parameter 'build_locator' is set
        if ('build_locator' not in params or
                params['build_locator'] is None):
            raise ValueError("Missing the required parameter `build_locator` when calling `get_children`")  # noqa: E501

        if 'path' in params and not re.search('(\/.*)?', params['path']):  # noqa: E501
            raise ValueError("Invalid value for parameter `path` when calling `get_children`, must conform to the pattern `/(\/.*)?/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'path' in params:
            if isinstance(params['path'], TeamCityObject):
                path_params['path'] = params['path'].locator_id
            else:
                path_params['path'] = params['path']  # noqa: E501
        if 'build_locator' in params:
            if isinstance(params['build_locator'], TeamCityObject):
                path_params['buildLocator'] = params['build_locator'].locator_id
            else:
                path_params['buildLocator'] = params['build_locator']  # noqa: E501

        query_params = []
        if 'base_path' in params:
            query_params.append(('basePath', params['base_path']))  # noqa: E501
        if 'locator' in params:
            query_params.append(('locator', params['locator']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
        if 'resolve_parameters' in params:
            query_params.append(('resolveParameters', params['resolve_parameters']))  # noqa: E501
        if 'log_build_usage' in params:
            query_params.append(('logBuildUsage', params['log_build_usage']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/builds/{buildLocator}/artifacts/children{path}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Files',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_children_alias_with_http_info(self, path, build_locator, **kwargs):  # noqa: E501
        """get_children_alias  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_children_alias_with_http_info(path, build_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str path: (required)
        :param str build_locator: (required)
        :param str base_path:
        :param str locator:
        :param str fields:
        :param bool resolve_parameters:
        :param bool log_build_usage:
        :return: Files
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['path', 'build_locator', 'base_path', 'locator', 'fields', 'resolve_parameters', 'log_build_usage']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_children_alias" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'path' is set
        if ('path' not in params or
                params['path'] is None):
            raise ValueError("Missing the required parameter `path` when calling `get_children_alias`")  # noqa: E501
        # verify the required parameter 'build_locator' is set
        if ('build_locator' not in params or
                params['build_locator'] is None):
            raise ValueError("Missing the required parameter `build_locator` when calling `get_children_alias`")  # noqa: E501

        if 'path' in params and not re.search('(.*)?', params['path']):  # noqa: E501
            raise ValueError("Invalid value for parameter `path` when calling `get_children_alias`, must conform to the pattern `/(.*)?/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'path' in params:
            if isinstance(params['path'], TeamCityObject):
                path_params['path'] = params['path'].locator_id
            else:
                path_params['path'] = params['path']  # noqa: E501
        if 'build_locator' in params:
            if isinstance(params['build_locator'], TeamCityObject):
                path_params['buildLocator'] = params['build_locator'].locator_id
            else:
                path_params['buildLocator'] = params['build_locator']  # noqa: E501

        query_params = []
        if 'base_path' in params:
            query_params.append(('basePath', params['base_path']))  # noqa: E501
        if 'locator' in params:
            query_params.append(('locator', params['locator']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
        if 'resolve_parameters' in params:
            query_params.append(('resolveParameters', params['resolve_parameters']))  # noqa: E501
        if 'log_build_usage' in params:
            query_params.append(('logBuildUsage', params['log_build_usage']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/builds/{buildLocator}/artifacts/{path}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Files',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_content_with_http_info(self, path, build_locator, **kwargs):  # noqa: E501
        """get_content  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_content_with_http_info(path, build_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str path: (required)
        :param str build_locator: (required)
        :param str response_builder:
        :param bool resolve_parameters:
        :param bool log_build_usage:
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['path', 'build_locator', 'response_builder', 'resolve_parameters', 'log_build_usage']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_content" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'path' is set
        if ('path' not in params or
                params['path'] is None):
            raise ValueError("Missing the required parameter `path` when calling `get_content`")  # noqa: E501
        # verify the required parameter 'build_locator' is set
        if ('build_locator' not in params or
                params['build_locator'] is None):
            raise ValueError("Missing the required parameter `build_locator` when calling `get_content`")  # noqa: E501

        if 'path' in params and not re.search('(\/.*)?', params['path']):  # noqa: E501
            raise ValueError("Invalid value for parameter `path` when calling `get_content`, must conform to the pattern `/(\/.*)?/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'path' in params:
            if isinstance(params['path'], TeamCityObject):
                path_params['path'] = params['path'].locator_id
            else:
                path_params['path'] = params['path']  # noqa: E501
        if 'build_locator' in params:
            if isinstance(params['build_locator'], TeamCityObject):
                path_params['buildLocator'] = params['build_locator'].locator_id
            else:
                path_params['buildLocator'] = params['build_locator']  # noqa: E501

        query_params = []
        if 'response_builder' in params:
            query_params.append(('responseBuilder', params['response_builder']))  # noqa: E501
        if 'resolve_parameters' in params:
            query_params.append(('resolveParameters', params['resolve_parameters']))  # noqa: E501
        if 'log_build_usage' in params:
            query_params.append(('logBuildUsage', params['log_build_usage']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/builds/{buildLocator}/artifacts/content{path}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_content_alias_with_http_info(self, path, build_locator, **kwargs):  # noqa: E501
        """get_content_alias  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_content_alias_with_http_info(path, build_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str path: (required)
        :param str build_locator: (required)
        :param bool resolve_parameters:
        :param bool log_build_usage:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['path', 'build_locator', 'resolve_parameters', 'log_build_usage']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_content_alias" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'path' is set
        if ('path' not in params or
                params['path'] is None):
            raise ValueError("Missing the required parameter `path` when calling `get_content_alias`")  # noqa: E501
        # verify the required parameter 'build_locator' is set
        if ('build_locator' not in params or
                params['build_locator'] is None):
            raise ValueError("Missing the required parameter `build_locator` when calling `get_content_alias`")  # noqa: E501

        if 'path' in params and not re.search('(\/.*)?', params['path']):  # noqa: E501
            raise ValueError("Invalid value for parameter `path` when calling `get_content_alias`, must conform to the pattern `/(\/.*)?/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'path' in params:
            if isinstance(params['path'], TeamCityObject):
                path_params['path'] = params['path'].locator_id
            else:
                path_params['path'] = params['path']  # noqa: E501
        if 'build_locator' in params:
            if isinstance(params['build_locator'], TeamCityObject):
                path_params['buildLocator'] = params['build_locator'].locator_id
            else:
                path_params['buildLocator'] = params['build_locator']  # noqa: E501

        query_params = []
        if 'resolve_parameters' in params:
            query_params.append(('resolveParameters', params['resolve_parameters']))  # noqa: E501
        if 'log_build_usage' in params:
            query_params.append(('logBuildUsage', params['log_build_usage']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/builds/{buildLocator}/artifacts/files{path}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_metadata_with_http_info(self, path, build_locator, **kwargs):  # noqa: E501
        """get_metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_metadata_with_http_info(path, build_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str path: (required)
        :param str build_locator: (required)
        :param str fields:
        :param bool resolve_parameters:
        :param bool log_build_usage:
        :return: File
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['path', 'build_locator', 'fields', 'resolve_parameters', 'log_build_usage']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_metadata" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'path' is set
        if ('path' not in params or
                params['path'] is None):
            raise ValueError("Missing the required parameter `path` when calling `get_metadata`")  # noqa: E501
        # verify the required parameter 'build_locator' is set
        if ('build_locator' not in params or
                params['build_locator'] is None):
            raise ValueError("Missing the required parameter `build_locator` when calling `get_metadata`")  # noqa: E501

        if 'path' in params and not re.search('(\/.*)?', params['path']):  # noqa: E501
            raise ValueError("Invalid value for parameter `path` when calling `get_metadata`, must conform to the pattern `/(\/.*)?/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'path' in params:
            if isinstance(params['path'], TeamCityObject):
                path_params['path'] = params['path'].locator_id
            else:
                path_params['path'] = params['path']  # noqa: E501
        if 'build_locator' in params:
            if isinstance(params['build_locator'], TeamCityObject):
                path_params['buildLocator'] = params['build_locator'].locator_id
            else:
                path_params['buildLocator'] = params['build_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
        if 'resolve_parameters' in params:
            query_params.append(('resolveParameters', params['resolve_parameters']))  # noqa: E501
        if 'log_build_usage' in params:
            query_params.append(('logBuildUsage', params['log_build_usage']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/builds/{buildLocator}/artifacts/metadata{path}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='File',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_parameter_with_http_info(self, name, build_locator, **kwargs):  # noqa: E501
        """get_parameter  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_parameter_with_http_info(name, build_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :param str build_locator: (required)
        :param str fields:
        :param str fields2:
        :return: ModelProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'build_locator', 'fields', 'fields2']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_parameter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_parameter`")  # noqa: E501
        # verify the required parameter 'build_locator' is set
        if ('build_locator' not in params or
                params['build_locator'] is None):
            raise ValueError("Missing the required parameter `build_locator` when calling `get_parameter`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            if isinstance(params['name'], TeamCityObject):
                path_params['name'] = params['name'].locator_id
            else:
                path_params['name'] = params['name']  # noqa: E501
        if 'build_locator' in params:
            if isinstance(params['build_locator'], TeamCityObject):
                path_params['buildLocator'] = params['build_locator'].locator_id
            else:
                path_params['buildLocator'] = params['build_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
        if 'fields2' in params:
            query_params.append(('fields', params['fields2']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/builds/{buildLocator}/attributes/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ModelProperty',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_parameter_0_with_http_info(self, build_locator, property_name, **kwargs):  # noqa: E501
        """get_parameter_0  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_parameter_0_with_http_info(build_locator, property_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str build_locator: (required)
        :param str property_name: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['build_locator', 'property_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_parameter_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'build_locator' is set
        if ('build_locator' not in params or
                params['build_locator'] is None):
            raise ValueError("Missing the required parameter `build_locator` when calling `get_parameter_0`")  # noqa: E501
        # verify the required parameter 'property_name' is set
        if ('property_name' not in params or
                params['property_name'] is None):
            raise ValueError("Missing the required parameter `property_name` when calling `get_parameter_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'build_locator' in params:
            if isinstance(params['build_locator'], TeamCityObject):
                path_params['buildLocator'] = params['build_locator'].locator_id
            else:
                path_params['buildLocator'] = params['build_locator']  # noqa: E501
        if 'property_name' in params:
            if isinstance(params['property_name'], TeamCityObject):
                path_params['propertyName'] = params['property_name'].locator_id
            else:
                path_params['propertyName'] = params['property_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/builds/{buildLocator}/resulting-properties/{propertyName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_parameter_value_long_with_http_info(self, name, build_locator, **kwargs):  # noqa: E501
        """get_parameter_value_long  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_parameter_value_long_with_http_info(name, build_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :param str build_locator: (required)
        :param str fields:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'build_locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_parameter_value_long" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_parameter_value_long`")  # noqa: E501
        # verify the required parameter 'build_locator' is set
        if ('build_locator' not in params or
                params['build_locator'] is None):
            raise ValueError("Missing the required parameter `build_locator` when calling `get_parameter_value_long`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            if isinstance(params['name'], TeamCityObject):
                path_params['name'] = params['name'].locator_id
            else:
                path_params['name'] = params['name']  # noqa: E501
        if 'build_locator' in params:
            if isinstance(params['build_locator'], TeamCityObject):
                path_params['buildLocator'] = params['build_locator'].locator_id
            else:
                path_params['buildLocator'] = params['build_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/builds/{buildLocator}/attributes/{name}/value', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_parameters_with_http_info(self, build_locator, **kwargs):  # noqa: E501
        """get_parameters  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_parameters_with_http_info(build_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str build_locator: (required)
        :param str locator:
        :param str fields:
        :param str fields2:
        :return: Properties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['build_locator', 'locator', 'fields', 'fields2']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_parameters" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'build_locator' is set
        if ('build_locator' not in params or
                params['build_locator'] is None):
            raise ValueError("Missing the required parameter `build_locator` when calling `get_parameters`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'build_locator' in params:
            if isinstance(params['build_locator'], TeamCityObject):
                path_params['buildLocator'] = params['build_locator'].locator_id
            else:
                path_params['buildLocator'] = params['build_locator']  # noqa: E501

        query_params = []
        if 'locator' in params:
            query_params.append(('locator', params['locator']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
        if 'fields2' in params:
            query_params.append(('fields', params['fields2']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/builds/{buildLocator}/attributes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Properties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_pinned_with_http_info(self, build_locator, **kwargs):  # noqa: E501
        """get_pinned  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_pinned_with_http_info(build_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str build_locator: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['build_locator']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pinned" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'build_locator' is set
        if ('build_locator' not in params or
                params['build_locator'] is None):
            raise ValueError("Missing the required parameter `build_locator` when calling `get_pinned`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'build_locator' in params:
            if isinstance(params['build_locator'], TeamCityObject):
                path_params['buildLocator'] = params['build_locator'].locator_id
            else:
                path_params['buildLocator'] = params['build_locator']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/builds/{buildLocator}/pin', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_problems_with_http_info(self, build_locator, **kwargs):  # noqa: E501
        """get_problems  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_problems_with_http_info(build_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str build_locator: (required)
        :param str fields:
        :return: ProblemOccurrences
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['build_locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_problems" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'build_locator' is set
        if ('build_locator' not in params or
                params['build_locator'] is None):
            raise ValueError("Missing the required parameter `build_locator` when calling `get_problems`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'build_locator' in params:
            if isinstance(params['build_locator'], TeamCityObject):
                path_params['buildLocator'] = params['build_locator'].locator_id
            else:
                path_params['buildLocator'] = params['build_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/builds/{buildLocator}/problemOccurrences', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProblemOccurrences',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_resolved_parameter_with_http_info(self, build_locator, value, **kwargs):  # noqa: E501
        """get_resolved_parameter  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_resolved_parameter_with_http_info(build_locator, value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str build_locator: (required)
        :param str value: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['build_locator', 'value']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_resolved_parameter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'build_locator' is set
        if ('build_locator' not in params or
                params['build_locator'] is None):
            raise ValueError("Missing the required parameter `build_locator` when calling `get_resolved_parameter`")  # noqa: E501
        # verify the required parameter 'value' is set
        if ('value' not in params or
                params['value'] is None):
            raise ValueError("Missing the required parameter `value` when calling `get_resolved_parameter`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'build_locator' in params:
            if isinstance(params['build_locator'], TeamCityObject):
                path_params['buildLocator'] = params['build_locator'].locator_id
            else:
                path_params['buildLocator'] = params['build_locator']  # noqa: E501
        if 'value' in params:
            if isinstance(params['value'], TeamCityObject):
                path_params['value'] = params['value'].locator_id
            else:
                path_params['value'] = params['value']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/builds/{buildLocator}/resolved/{value}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_root_with_http_info(self, build_locator, **kwargs):  # noqa: E501
        """get_root  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_root_with_http_info(build_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str build_locator: (required)
        :param str base_path:
        :param str locator:
        :param str fields:
        :param bool resolve_parameters:
        :param bool log_build_usage:
        :return: Files
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['build_locator', 'base_path', 'locator', 'fields', 'resolve_parameters', 'log_build_usage']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_root" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'build_locator' is set
        if ('build_locator' not in params or
                params['build_locator'] is None):
            raise ValueError("Missing the required parameter `build_locator` when calling `get_root`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'build_locator' in params:
            if isinstance(params['build_locator'], TeamCityObject):
                path_params['buildLocator'] = params['build_locator'].locator_id
            else:
                path_params['buildLocator'] = params['build_locator']  # noqa: E501

        query_params = []
        if 'base_path' in params:
            query_params.append(('basePath', params['base_path']))  # noqa: E501
        if 'locator' in params:
            query_params.append(('locator', params['locator']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
        if 'resolve_parameters' in params:
            query_params.append(('resolveParameters', params['resolve_parameters']))  # noqa: E501
        if 'log_build_usage' in params:
            query_params.append(('logBuildUsage', params['log_build_usage']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/builds/{buildLocator}/artifacts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Files',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_tests_with_http_info(self, build_locator, **kwargs):  # noqa: E501
        """get_tests  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_tests_with_http_info(build_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str build_locator: (required)
        :param str fields:
        :return: TestOccurrences
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['build_locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tests" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'build_locator' is set
        if ('build_locator' not in params or
                params['build_locator'] is None):
            raise ValueError("Missing the required parameter `build_locator` when calling `get_tests`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'build_locator' in params:
            if isinstance(params['build_locator'], TeamCityObject):
                path_params['buildLocator'] = params['build_locator'].locator_id
            else:
                path_params['buildLocator'] = params['build_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/builds/{buildLocator}/testOccurrences', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TestOccurrences',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_zipped_with_http_info(self, path, build_locator, **kwargs):  # noqa: E501
        """get_zipped  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_zipped_with_http_info(path, build_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str path: (required)
        :param str build_locator: (required)
        :param str base_path:
        :param str locator:
        :param str name:
        :param bool resolve_parameters:
        :param bool log_build_usage:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['path', 'build_locator', 'base_path', 'locator', 'name', 'resolve_parameters', 'log_build_usage']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_zipped" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'path' is set
        if ('path' not in params or
                params['path'] is None):
            raise ValueError("Missing the required parameter `path` when calling `get_zipped`")  # noqa: E501
        # verify the required parameter 'build_locator' is set
        if ('build_locator' not in params or
                params['build_locator'] is None):
            raise ValueError("Missing the required parameter `build_locator` when calling `get_zipped`")  # noqa: E501

        if 'path' in params and not re.search('(\/.*)?', params['path']):  # noqa: E501
            raise ValueError("Invalid value for parameter `path` when calling `get_zipped`, must conform to the pattern `/(\/.*)?/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'path' in params:
            if isinstance(params['path'], TeamCityObject):
                path_params['path'] = params['path'].locator_id
            else:
                path_params['path'] = params['path']  # noqa: E501
        if 'build_locator' in params:
            if isinstance(params['build_locator'], TeamCityObject):
                path_params['buildLocator'] = params['build_locator'].locator_id
            else:
                path_params['buildLocator'] = params['build_locator']  # noqa: E501

        query_params = []
        if 'base_path' in params:
            query_params.append(('basePath', params['base_path']))  # noqa: E501
        if 'locator' in params:
            query_params.append(('locator', params['locator']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'resolve_parameters' in params:
            query_params.append(('resolveParameters', params['resolve_parameters']))  # noqa: E501
        if 'log_build_usage' in params:
            query_params.append(('logBuildUsage', params['log_build_usage']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/builds/{buildLocator}/artifacts/archived{path}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __pin_build_with_http_info(self, build_locator, **kwargs):  # noqa: E501
        """pin_build  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__pin_build_with_http_info(build_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str build_locator: (required)
        :param str body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['build_locator', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pin_build" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'build_locator' is set
        if ('build_locator' not in params or
                params['build_locator'] is None):
            raise ValueError("Missing the required parameter `build_locator` when calling `pin_build`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'build_locator' in params:
            if isinstance(params['build_locator'], TeamCityObject):
                path_params['buildLocator'] = params['build_locator'].locator_id
            else:
                path_params['buildLocator'] = params['build_locator']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/builds/{buildLocator}/pin', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __replace_comment_with_http_info(self, build_locator, **kwargs):  # noqa: E501
        """replace_comment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__replace_comment_with_http_info(build_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str build_locator: (required)
        :param str body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['build_locator', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_comment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'build_locator' is set
        if ('build_locator' not in params or
                params['build_locator'] is None):
            raise ValueError("Missing the required parameter `build_locator` when calling `replace_comment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'build_locator' in params:
            if isinstance(params['build_locator'], TeamCityObject):
                path_params['buildLocator'] = params['build_locator'].locator_id
            else:
                path_params['buildLocator'] = params['build_locator']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/builds/{buildLocator}/comment', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __replace_tags_with_http_info(self, build_locator, **kwargs):  # noqa: E501
        """replace_tags  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__replace_tags_with_http_info(build_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str build_locator: (required)
        :param str locator:
        :param Tags body:
        :param str fields:
        :return: Tags
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['build_locator', 'locator', 'body', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_tags" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'build_locator' is set
        if ('build_locator' not in params or
                params['build_locator'] is None):
            raise ValueError("Missing the required parameter `build_locator` when calling `replace_tags`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'build_locator' in params:
            if isinstance(params['build_locator'], TeamCityObject):
                path_params['buildLocator'] = params['build_locator'].locator_id
            else:
                path_params['buildLocator'] = params['build_locator']  # noqa: E501

        query_params = []
        if 'locator' in params:
            query_params.append(('locator', params['locator']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/builds/{buildLocator}/tags', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Tags',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __reset_build_finish_parameters_with_http_info(self, build_locator, **kwargs):  # noqa: E501
        """reset_build_finish_parameters  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__reset_build_finish_parameters_with_http_info(build_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str build_locator: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['build_locator']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reset_build_finish_parameters" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'build_locator' is set
        if ('build_locator' not in params or
                params['build_locator'] is None):
            raise ValueError("Missing the required parameter `build_locator` when calling `reset_build_finish_parameters`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'build_locator' in params:
            if isinstance(params['build_locator'], TeamCityObject):
                path_params['buildLocator'] = params['build_locator'].locator_id
            else:
                path_params['buildLocator'] = params['build_locator']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/builds/{buildLocator}/caches/finishProperties', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __serve_aggregated_build_status_with_http_info(self, build_locator, **kwargs):  # noqa: E501
        """serve_aggregated_build_status  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__serve_aggregated_build_status_with_http_info(build_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str build_locator: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['build_locator']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method serve_aggregated_build_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'build_locator' is set
        if ('build_locator' not in params or
                params['build_locator'] is None):
            raise ValueError("Missing the required parameter `build_locator` when calling `serve_aggregated_build_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'build_locator' in params:
            if isinstance(params['build_locator'], TeamCityObject):
                path_params['buildLocator'] = params['build_locator'].locator_id
            else:
                path_params['buildLocator'] = params['build_locator']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/builds/aggregated/{buildLocator}/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __serve_aggregated_build_status_icon_with_http_info(self, build_locator, suffix, **kwargs):  # noqa: E501
        """serve_aggregated_build_status_icon  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__serve_aggregated_build_status_icon_with_http_info(build_locator, suffix, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str build_locator: (required)
        :param str suffix: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['build_locator', 'suffix']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method serve_aggregated_build_status_icon" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'build_locator' is set
        if ('build_locator' not in params or
                params['build_locator'] is None):
            raise ValueError("Missing the required parameter `build_locator` when calling `serve_aggregated_build_status_icon`")  # noqa: E501
        # verify the required parameter 'suffix' is set
        if ('suffix' not in params or
                params['suffix'] is None):
            raise ValueError("Missing the required parameter `suffix` when calling `serve_aggregated_build_status_icon`")  # noqa: E501

        if 'suffix' in params and not re.search('(.*)?', params['suffix']):  # noqa: E501
            raise ValueError("Invalid value for parameter `suffix` when calling `serve_aggregated_build_status_icon`, must conform to the pattern `/(.*)?/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'build_locator' in params:
            if isinstance(params['build_locator'], TeamCityObject):
                path_params['buildLocator'] = params['build_locator'].locator_id
            else:
                path_params['buildLocator'] = params['build_locator']  # noqa: E501
        if 'suffix' in params:
            if isinstance(params['suffix'], TeamCityObject):
                path_params['suffix'] = params['suffix'].locator_id
            else:
                path_params['suffix'] = params['suffix']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/builds/aggregated/{buildLocator}/statusIcon{suffix}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __serve_all_builds_with_http_info(self, **kwargs):  # noqa: E501
        """serve_all_builds  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__serve_all_builds_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str build_type:
        :param str status:
        :param str triggered_by_user:
        :param bool include_personal:
        :param bool include_canceled:
        :param bool only_pinned:
        :param list[str] tag:
        :param str agent_name:
        :param str since_build:
        :param str since_date:
        :param int start:
        :param int count:
        :param str locator:
        :param str fields:
        :return: Builds
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['build_type', 'status', 'triggered_by_user', 'include_personal', 'include_canceled', 'only_pinned', 'tag', 'agent_name', 'since_build', 'since_date', 'start', 'count', 'locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method serve_all_builds" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'build_type' in params:
            query_params.append(('buildType', params['build_type']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'triggered_by_user' in params:
            query_params.append(('triggeredByUser', params['triggered_by_user']))  # noqa: E501
        if 'include_personal' in params:
            query_params.append(('includePersonal', params['include_personal']))  # noqa: E501
        if 'include_canceled' in params:
            query_params.append(('includeCanceled', params['include_canceled']))  # noqa: E501
        if 'only_pinned' in params:
            query_params.append(('onlyPinned', params['only_pinned']))  # noqa: E501
        if 'tag' in params:
            query_params.append(('tag', params['tag']))  # noqa: E501
            collection_formats['tag'] = 'multi'  # noqa: E501
        if 'agent_name' in params:
            query_params.append(('agentName', params['agent_name']))  # noqa: E501
        if 'since_build' in params:
            query_params.append(('sinceBuild', params['since_build']))  # noqa: E501
        if 'since_date' in params:
            query_params.append(('sinceDate', params['since_date']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'locator' in params:
            query_params.append(('locator', params['locator']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/builds', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Builds',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __serve_build_with_http_info(self, build_locator, **kwargs):  # noqa: E501
        """serve_build  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__serve_build_with_http_info(build_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str build_locator: (required)
        :param str fields:
        :return: Build
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['build_locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method serve_build" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'build_locator' is set
        if ('build_locator' not in params or
                params['build_locator'] is None):
            raise ValueError("Missing the required parameter `build_locator` when calling `serve_build`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'build_locator' in params:
            if isinstance(params['build_locator'], TeamCityObject):
                path_params['buildLocator'] = params['build_locator'].locator_id
            else:
                path_params['buildLocator'] = params['build_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/builds/{buildLocator}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Build',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __serve_build_actual_parameters_with_http_info(self, build_locator, **kwargs):  # noqa: E501
        """serve_build_actual_parameters  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__serve_build_actual_parameters_with_http_info(build_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str build_locator: (required)
        :param str fields:
        :return: Properties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['build_locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method serve_build_actual_parameters" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'build_locator' is set
        if ('build_locator' not in params or
                params['build_locator'] is None):
            raise ValueError("Missing the required parameter `build_locator` when calling `serve_build_actual_parameters`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'build_locator' in params:
            if isinstance(params['build_locator'], TeamCityObject):
                path_params['buildLocator'] = params['build_locator'].locator_id
            else:
                path_params['buildLocator'] = params['build_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/builds/{buildLocator}/resulting-properties', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Properties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __serve_build_field_by_build_only_with_http_info(self, build_locator, field, **kwargs):  # noqa: E501
        """serve_build_field_by_build_only  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__serve_build_field_by_build_only_with_http_info(build_locator, field, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str build_locator: (required)
        :param str field: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['build_locator', 'field']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method serve_build_field_by_build_only" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'build_locator' is set
        if ('build_locator' not in params or
                params['build_locator'] is None):
            raise ValueError("Missing the required parameter `build_locator` when calling `serve_build_field_by_build_only`")  # noqa: E501
        # verify the required parameter 'field' is set
        if ('field' not in params or
                params['field'] is None):
            raise ValueError("Missing the required parameter `field` when calling `serve_build_field_by_build_only`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'build_locator' in params:
            if isinstance(params['build_locator'], TeamCityObject):
                path_params['buildLocator'] = params['build_locator'].locator_id
            else:
                path_params['buildLocator'] = params['build_locator']  # noqa: E501
        if 'field' in params:
            if isinstance(params['field'], TeamCityObject):
                path_params['field'] = params['field'].locator_id
            else:
                path_params['field'] = params['field']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/builds/{buildLocator}/{field}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __serve_build_related_issues_with_http_info(self, build_locator, **kwargs):  # noqa: E501
        """serve_build_related_issues  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__serve_build_related_issues_with_http_info(build_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str build_locator: (required)
        :param str fields:
        :return: IssuesUsages
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['build_locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method serve_build_related_issues" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'build_locator' is set
        if ('build_locator' not in params or
                params['build_locator'] is None):
            raise ValueError("Missing the required parameter `build_locator` when calling `serve_build_related_issues`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'build_locator' in params:
            if isinstance(params['build_locator'], TeamCityObject):
                path_params['buildLocator'] = params['build_locator'].locator_id
            else:
                path_params['buildLocator'] = params['build_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/builds/{buildLocator}/relatedIssues', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IssuesUsages',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __serve_build_related_issues_old_with_http_info(self, build_locator, **kwargs):  # noqa: E501
        """serve_build_related_issues_old  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__serve_build_related_issues_old_with_http_info(build_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str build_locator: (required)
        :param str fields:
        :return: IssuesUsages
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['build_locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method serve_build_related_issues_old" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'build_locator' is set
        if ('build_locator' not in params or
                params['build_locator'] is None):
            raise ValueError("Missing the required parameter `build_locator` when calling `serve_build_related_issues_old`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'build_locator' in params:
            if isinstance(params['build_locator'], TeamCityObject):
                path_params['buildLocator'] = params['build_locator'].locator_id
            else:
                path_params['buildLocator'] = params['build_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/builds/{buildLocator}/related-issues', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IssuesUsages',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __serve_build_statistic_value_with_http_info(self, build_locator, name, **kwargs):  # noqa: E501
        """serve_build_statistic_value  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__serve_build_statistic_value_with_http_info(build_locator, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str build_locator: (required)
        :param str name: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['build_locator', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method serve_build_statistic_value" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'build_locator' is set
        if ('build_locator' not in params or
                params['build_locator'] is None):
            raise ValueError("Missing the required parameter `build_locator` when calling `serve_build_statistic_value`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `serve_build_statistic_value`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'build_locator' in params:
            if isinstance(params['build_locator'], TeamCityObject):
                path_params['buildLocator'] = params['build_locator'].locator_id
            else:
                path_params['buildLocator'] = params['build_locator']  # noqa: E501
        if 'name' in params:
            if isinstance(params['name'], TeamCityObject):
                path_params['name'] = params['name'].locator_id
            else:
                path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/builds/{buildLocator}/statistics/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __serve_build_statistic_values_with_http_info(self, build_locator, **kwargs):  # noqa: E501
        """serve_build_statistic_values  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__serve_build_statistic_values_with_http_info(build_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str build_locator: (required)
        :param str fields:
        :return: Properties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['build_locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method serve_build_statistic_values" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'build_locator' is set
        if ('build_locator' not in params or
                params['build_locator'] is None):
            raise ValueError("Missing the required parameter `build_locator` when calling `serve_build_statistic_values`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'build_locator' in params:
            if isinstance(params['build_locator'], TeamCityObject):
                path_params['buildLocator'] = params['build_locator'].locator_id
            else:
                path_params['buildLocator'] = params['build_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/builds/{buildLocator}/statistics', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Properties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __serve_build_status_icon_with_http_info(self, build_locator, suffix, **kwargs):  # noqa: E501
        """serve_build_status_icon  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__serve_build_status_icon_with_http_info(build_locator, suffix, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str build_locator: (required)
        :param str suffix: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['build_locator', 'suffix']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method serve_build_status_icon" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'build_locator' is set
        if ('build_locator' not in params or
                params['build_locator'] is None):
            raise ValueError("Missing the required parameter `build_locator` when calling `serve_build_status_icon`")  # noqa: E501
        # verify the required parameter 'suffix' is set
        if ('suffix' not in params or
                params['suffix'] is None):
            raise ValueError("Missing the required parameter `suffix` when calling `serve_build_status_icon`")  # noqa: E501

        if 'suffix' in params and not re.search('(.*)?', params['suffix']):  # noqa: E501
            raise ValueError("Invalid value for parameter `suffix` when calling `serve_build_status_icon`, must conform to the pattern `/(.*)?/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'build_locator' in params:
            if isinstance(params['build_locator'], TeamCityObject):
                path_params['buildLocator'] = params['build_locator'].locator_id
            else:
                path_params['buildLocator'] = params['build_locator']  # noqa: E501
        if 'suffix' in params:
            if isinstance(params['suffix'], TeamCityObject):
                path_params['suffix'] = params['suffix'].locator_id
            else:
                path_params['suffix'] = params['suffix']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/builds/{buildLocator}/statusIcon{suffix}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __serve_source_file_with_http_info(self, build_locator, file_name, **kwargs):  # noqa: E501
        """serve_source_file  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__serve_source_file_with_http_info(build_locator, file_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str build_locator: (required)
        :param str file_name: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['build_locator', 'file_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method serve_source_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'build_locator' is set
        if ('build_locator' not in params or
                params['build_locator'] is None):
            raise ValueError("Missing the required parameter `build_locator` when calling `serve_source_file`")  # noqa: E501
        # verify the required parameter 'file_name' is set
        if ('file_name' not in params or
                params['file_name'] is None):
            raise ValueError("Missing the required parameter `file_name` when calling `serve_source_file`")  # noqa: E501

        if 'file_name' in params and not re.search('.+', params['file_name']):  # noqa: E501
            raise ValueError("Invalid value for parameter `file_name` when calling `serve_source_file`, must conform to the pattern `/.+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'build_locator' in params:
            if isinstance(params['build_locator'], TeamCityObject):
                path_params['buildLocator'] = params['build_locator'].locator_id
            else:
                path_params['buildLocator'] = params['build_locator']  # noqa: E501
        if 'file_name' in params:
            if isinstance(params['file_name'], TeamCityObject):
                path_params['fileName'] = params['file_name'].locator_id
            else:
                path_params['fileName'] = params['file_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/builds/{buildLocator}/sources/files/{fileName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __serve_tags_with_http_info(self, build_locator, **kwargs):  # noqa: E501
        """serve_tags  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__serve_tags_with_http_info(build_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str build_locator: (required)
        :param str locator:
        :param str fields:
        :return: Tags
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['build_locator', 'locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method serve_tags" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'build_locator' is set
        if ('build_locator' not in params or
                params['build_locator'] is None):
            raise ValueError("Missing the required parameter `build_locator` when calling `serve_tags`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'build_locator' in params:
            if isinstance(params['build_locator'], TeamCityObject):
                path_params['buildLocator'] = params['build_locator'].locator_id
            else:
                path_params['buildLocator'] = params['build_locator']  # noqa: E501

        query_params = []
        if 'locator' in params:
            query_params.append(('locator', params['locator']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/builds/{buildLocator}/tags', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Tags',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __set_build_number_with_http_info(self, build_locator, **kwargs):  # noqa: E501
        """set_build_number  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__set_build_number_with_http_info(build_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str build_locator: (required)
        :param str body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['build_locator', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_build_number" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'build_locator' is set
        if ('build_locator' not in params or
                params['build_locator'] is None):
            raise ValueError("Missing the required parameter `build_locator` when calling `set_build_number`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'build_locator' in params:
            if isinstance(params['build_locator'], TeamCityObject):
                path_params['buildLocator'] = params['build_locator'].locator_id
            else:
                path_params['buildLocator'] = params['build_locator']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/builds/{buildLocator}/number', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __set_build_status_text_with_http_info(self, build_locator, **kwargs):  # noqa: E501
        """set_build_status_text  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__set_build_status_text_with_http_info(build_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str build_locator: (required)
        :param str body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['build_locator', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_build_status_text" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'build_locator' is set
        if ('build_locator' not in params or
                params['build_locator'] is None):
            raise ValueError("Missing the required parameter `build_locator` when calling `set_build_status_text`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'build_locator' in params:
            if isinstance(params['build_locator'], TeamCityObject):
                path_params['buildLocator'] = params['build_locator'].locator_id
            else:
                path_params['buildLocator'] = params['build_locator']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/builds/{buildLocator}/statusText', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __set_parameter_with_http_info(self, build_locator, **kwargs):  # noqa: E501
        """set_parameter  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__set_parameter_with_http_info(build_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str build_locator: (required)
        :param ModelProperty body:
        :param str fields:
        :param str fields2:
        :return: ModelProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['build_locator', 'body', 'fields', 'fields2']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_parameter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'build_locator' is set
        if ('build_locator' not in params or
                params['build_locator'] is None):
            raise ValueError("Missing the required parameter `build_locator` when calling `set_parameter`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'build_locator' in params:
            if isinstance(params['build_locator'], TeamCityObject):
                path_params['buildLocator'] = params['build_locator'].locator_id
            else:
                path_params['buildLocator'] = params['build_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
        if 'fields2' in params:
            query_params.append(('fields', params['fields2']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/builds/{buildLocator}/attributes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ModelProperty',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __set_parameter_0_with_http_info(self, name, build_locator, **kwargs):  # noqa: E501
        """set_parameter_0  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__set_parameter_0_with_http_info(name, build_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :param str build_locator: (required)
        :param ModelProperty body:
        :param str fields:
        :param str fields2:
        :return: ModelProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'build_locator', 'body', 'fields', 'fields2']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_parameter_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `set_parameter_0`")  # noqa: E501
        # verify the required parameter 'build_locator' is set
        if ('build_locator' not in params or
                params['build_locator'] is None):
            raise ValueError("Missing the required parameter `build_locator` when calling `set_parameter_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            if isinstance(params['name'], TeamCityObject):
                path_params['name'] = params['name'].locator_id
            else:
                path_params['name'] = params['name']  # noqa: E501
        if 'build_locator' in params:
            if isinstance(params['build_locator'], TeamCityObject):
                path_params['buildLocator'] = params['build_locator'].locator_id
            else:
                path_params['buildLocator'] = params['build_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
        if 'fields2' in params:
            query_params.append(('fields', params['fields2']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/builds/{buildLocator}/attributes/{name}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ModelProperty',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __set_parameter_value_long_with_http_info(self, name, build_locator, **kwargs):  # noqa: E501
        """set_parameter_value_long  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__set_parameter_value_long_with_http_info(name, build_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :param str build_locator: (required)
        :param str body:
        :param str fields:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'build_locator', 'body', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_parameter_value_long" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `set_parameter_value_long`")  # noqa: E501
        # verify the required parameter 'build_locator' is set
        if ('build_locator' not in params or
                params['build_locator'] is None):
            raise ValueError("Missing the required parameter `build_locator` when calling `set_parameter_value_long`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            if isinstance(params['name'], TeamCityObject):
                path_params['name'] = params['name'].locator_id
            else:
                path_params['name'] = params['name']  # noqa: E501
        if 'build_locator' in params:
            if isinstance(params['build_locator'], TeamCityObject):
                path_params['buildLocator'] = params['build_locator'].locator_id
            else:
                path_params['buildLocator'] = params['build_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/builds/{buildLocator}/attributes/{name}/value', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __set_parameters_with_http_info(self, build_locator, **kwargs):  # noqa: E501
        """set_parameters  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__set_parameters_with_http_info(build_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str build_locator: (required)
        :param Properties body:
        :param str fields:
        :param str fields2:
        :return: Properties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['build_locator', 'body', 'fields', 'fields2']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_parameters" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'build_locator' is set
        if ('build_locator' not in params or
                params['build_locator'] is None):
            raise ValueError("Missing the required parameter `build_locator` when calling `set_parameters`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'build_locator' in params:
            if isinstance(params['build_locator'], TeamCityObject):
                path_params['buildLocator'] = params['build_locator'].locator_id
            else:
                path_params['buildLocator'] = params['build_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
        if 'fields2' in params:
            query_params.append(('fields', params['fields2']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/builds/{buildLocator}/attributes', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Properties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __unpin_build_with_http_info(self, build_locator, **kwargs):  # noqa: E501
        """unpin_build  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__unpin_build_with_http_info(build_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str build_locator: (required)
        :param str body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['build_locator', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method unpin_build" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'build_locator' is set
        if ('build_locator' not in params or
                params['build_locator'] is None):
            raise ValueError("Missing the required parameter `build_locator` when calling `unpin_build`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'build_locator' in params:
            if isinstance(params['build_locator'], TeamCityObject):
                path_params['buildLocator'] = params['build_locator'].locator_id
            else:
                path_params['buildLocator'] = params['build_locator']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/builds/{buildLocator}/pin', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
