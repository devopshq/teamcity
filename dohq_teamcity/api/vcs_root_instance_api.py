# coding: utf-8

"""
    TeamCity REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2018.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import
from dohq_teamcity.custom.base_model import TeamCityObject

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from dohq_teamcity.models.entries import Entries  # noqa: F401,E501
from dohq_teamcity.models.file import File  # noqa: F401,E501
from dohq_teamcity.models.files import Files  # noqa: F401,E501
from dohq_teamcity.models.properties import Properties  # noqa: F401,E501
from dohq_teamcity.models.vcs_root_instance import VcsRootInstance  # noqa: F401,E501
from dohq_teamcity.models.vcs_root_instances import VcsRootInstances  # noqa: F401,E501


class VcsRootInstanceApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """
    base_name = 'VcsRootInstance'

    def __init__(self, api_client=None):
        self.api_client = api_client

    def delete_instance_field(self, vcs_root_instance_locator, field, **kwargs):  # noqa: E501
        """delete_instance_field  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_instance_field(vcs_root_instance_locator, field, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str vcs_root_instance_locator: (required)
        :param str field: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__delete_instance_field_with_http_info(vcs_root_instance_locator, field, **kwargs)  # noqa: E501
        else:
            (data) = self.__delete_instance_field_with_http_info(vcs_root_instance_locator, field, **kwargs)  # noqa: E501
            return data

    def delete_repository_state(self, vcs_root_instance_locator, **kwargs):  # noqa: E501
        """delete_repository_state  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_repository_state(vcs_root_instance_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str vcs_root_instance_locator: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__delete_repository_state_with_http_info(vcs_root_instance_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__delete_repository_state_with_http_info(vcs_root_instance_locator, **kwargs)  # noqa: E501
            return data

    def get_children(self, path, vcs_root_instance_locator, **kwargs):  # noqa: E501
        """get_children  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_children(path, vcs_root_instance_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str path: (required)
        :param str vcs_root_instance_locator: (required)
        :param str base_path:
        :param str locator:
        :param str fields:
        :return: Files
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_children_with_http_info(path, vcs_root_instance_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_children_with_http_info(path, vcs_root_instance_locator, **kwargs)  # noqa: E501
            return data

    def get_children_alias(self, path, vcs_root_instance_locator, **kwargs):  # noqa: E501
        """get_children_alias  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_children_alias(path, vcs_root_instance_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str path: (required)
        :param str vcs_root_instance_locator: (required)
        :param str base_path:
        :param str locator:
        :param str fields:
        :return: Files
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_children_alias_with_http_info(path, vcs_root_instance_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_children_alias_with_http_info(path, vcs_root_instance_locator, **kwargs)  # noqa: E501
            return data

    def get_content(self, path, vcs_root_instance_locator, **kwargs):  # noqa: E501
        """get_content  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_content(path, vcs_root_instance_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str path: (required)
        :param str vcs_root_instance_locator: (required)
        :param str response_builder:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_content_with_http_info(path, vcs_root_instance_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_content_with_http_info(path, vcs_root_instance_locator, **kwargs)  # noqa: E501
            return data

    def get_content_alias(self, path, vcs_root_instance_locator, **kwargs):  # noqa: E501
        """get_content_alias  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_content_alias(path, vcs_root_instance_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str path: (required)
        :param str vcs_root_instance_locator: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_content_alias_with_http_info(path, vcs_root_instance_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_content_alias_with_http_info(path, vcs_root_instance_locator, **kwargs)  # noqa: E501
            return data

    def get_metadata(self, path, vcs_root_instance_locator, **kwargs):  # noqa: E501
        """get_metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_metadata(path, vcs_root_instance_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str path: (required)
        :param str vcs_root_instance_locator: (required)
        :param str fields:
        :return: File
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_metadata_with_http_info(path, vcs_root_instance_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_metadata_with_http_info(path, vcs_root_instance_locator, **kwargs)  # noqa: E501
            return data

    def get_repository_state(self, vcs_root_instance_locator, **kwargs):  # noqa: E501
        """get_repository_state  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repository_state(vcs_root_instance_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str vcs_root_instance_locator: (required)
        :param str fields:
        :return: Entries
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_repository_state_with_http_info(vcs_root_instance_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_repository_state_with_http_info(vcs_root_instance_locator, **kwargs)  # noqa: E501
            return data

    def get_repository_state_creation_date(self, vcs_root_instance_locator, **kwargs):  # noqa: E501
        """get_repository_state_creation_date  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repository_state_creation_date(vcs_root_instance_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str vcs_root_instance_locator: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_repository_state_creation_date_with_http_info(vcs_root_instance_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_repository_state_creation_date_with_http_info(vcs_root_instance_locator, **kwargs)  # noqa: E501
            return data

    def get_root(self, vcs_root_instance_locator, **kwargs):  # noqa: E501
        """get_root  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_root(vcs_root_instance_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str vcs_root_instance_locator: (required)
        :param str base_path:
        :param str locator:
        :param str fields:
        :return: Files
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_root_with_http_info(vcs_root_instance_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_root_with_http_info(vcs_root_instance_locator, **kwargs)  # noqa: E501
            return data

    def get_zipped(self, path, vcs_root_instance_locator, **kwargs):  # noqa: E501
        """get_zipped  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_zipped(path, vcs_root_instance_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str path: (required)
        :param str vcs_root_instance_locator: (required)
        :param str base_path:
        :param str locator:
        :param str name:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_zipped_with_http_info(path, vcs_root_instance_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_zipped_with_http_info(path, vcs_root_instance_locator, **kwargs)  # noqa: E501
            return data

    def schedule_checking_for_changes(self, **kwargs):  # noqa: E501
        """schedule_checking_for_changes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.schedule_checking_for_changes(async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str locator:
        :param str requestor:
        :param str fields:
        :return: VcsRootInstances
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__schedule_checking_for_changes_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.__schedule_checking_for_changes_with_http_info(**kwargs)  # noqa: E501
            return data

    def schedule_checking_for_changes_0(self, **kwargs):  # noqa: E501
        """schedule_checking_for_changes_0  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.schedule_checking_for_changes_0(async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str locator:
        :param bool ok_on_nothing_found:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__schedule_checking_for_changes_0_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.__schedule_checking_for_changes_0_with_http_info(**kwargs)  # noqa: E501
            return data

    def serve_instance(self, vcs_root_instance_locator, **kwargs):  # noqa: E501
        """serve_instance  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.serve_instance(vcs_root_instance_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str vcs_root_instance_locator: (required)
        :param str fields:
        :return: VcsRootInstance
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__serve_instance_with_http_info(vcs_root_instance_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__serve_instance_with_http_info(vcs_root_instance_locator, **kwargs)  # noqa: E501
            return data

    def serve_instance_field(self, vcs_root_instance_locator, field, **kwargs):  # noqa: E501
        """serve_instance_field  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.serve_instance_field(vcs_root_instance_locator, field, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str vcs_root_instance_locator: (required)
        :param str field: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__serve_instance_field_with_http_info(vcs_root_instance_locator, field, **kwargs)  # noqa: E501
        else:
            (data) = self.__serve_instance_field_with_http_info(vcs_root_instance_locator, field, **kwargs)  # noqa: E501
            return data

    def serve_instances(self, **kwargs):  # noqa: E501
        """serve_instances  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.serve_instances(async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str locator:
        :param str fields:
        :return: VcsRootInstances
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__serve_instances_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.__serve_instances_with_http_info(**kwargs)  # noqa: E501
            return data

    def serve_root_instance_properties(self, vcs_root_instance_locator, **kwargs):  # noqa: E501
        """serve_root_instance_properties  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.serve_root_instance_properties(vcs_root_instance_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str vcs_root_instance_locator: (required)
        :param str fields:
        :return: Properties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__serve_root_instance_properties_with_http_info(vcs_root_instance_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__serve_root_instance_properties_with_http_info(vcs_root_instance_locator, **kwargs)  # noqa: E501
            return data

    def set_instance_field(self, vcs_root_instance_locator, field, **kwargs):  # noqa: E501
        """set_instance_field  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_instance_field(vcs_root_instance_locator, field, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str vcs_root_instance_locator: (required)
        :param str field: (required)
        :param str body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__set_instance_field_with_http_info(vcs_root_instance_locator, field, **kwargs)  # noqa: E501
        else:
            (data) = self.__set_instance_field_with_http_info(vcs_root_instance_locator, field, **kwargs)  # noqa: E501
            return data

    def set_repository_state(self, vcs_root_instance_locator, **kwargs):  # noqa: E501
        """set_repository_state  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_repository_state(vcs_root_instance_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str vcs_root_instance_locator: (required)
        :param Entries body:
        :param str fields:
        :return: Entries
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__set_repository_state_with_http_info(vcs_root_instance_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__set_repository_state_with_http_info(vcs_root_instance_locator, **kwargs)  # noqa: E501
            return data

    def __delete_instance_field_with_http_info(self, vcs_root_instance_locator, field, **kwargs):  # noqa: E501
        """delete_instance_field  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__delete_instance_field_with_http_info(vcs_root_instance_locator, field, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vcs_root_instance_locator: (required)
        :param str field: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vcs_root_instance_locator', 'field']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_instance_field" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vcs_root_instance_locator' is set
        if ('vcs_root_instance_locator' not in params or
                params['vcs_root_instance_locator'] is None):
            raise ValueError("Missing the required parameter `vcs_root_instance_locator` when calling `delete_instance_field`")  # noqa: E501
        # verify the required parameter 'field' is set
        if ('field' not in params or
                params['field'] is None):
            raise ValueError("Missing the required parameter `field` when calling `delete_instance_field`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vcs_root_instance_locator' in params:
            if isinstance(params['vcs_root_instance_locator'], TeamCityObject):
                path_params['vcsRootInstanceLocator'] = params['vcs_root_instance_locator'].locator_id
            else:
                path_params['vcsRootInstanceLocator'] = params['vcs_root_instance_locator']  # noqa: E501
        if 'field' in params:
            if isinstance(params['field'], TeamCityObject):
                path_params['field'] = params['field'].locator_id
            else:
                path_params['field'] = params['field']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/{field}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __delete_repository_state_with_http_info(self, vcs_root_instance_locator, **kwargs):  # noqa: E501
        """delete_repository_state  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__delete_repository_state_with_http_info(vcs_root_instance_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vcs_root_instance_locator: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vcs_root_instance_locator']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_repository_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vcs_root_instance_locator' is set
        if ('vcs_root_instance_locator' not in params or
                params['vcs_root_instance_locator'] is None):
            raise ValueError("Missing the required parameter `vcs_root_instance_locator` when calling `delete_repository_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vcs_root_instance_locator' in params:
            if isinstance(params['vcs_root_instance_locator'], TeamCityObject):
                path_params['vcsRootInstanceLocator'] = params['vcs_root_instance_locator'].locator_id
            else:
                path_params['vcsRootInstanceLocator'] = params['vcs_root_instance_locator']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/repositoryState', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_children_with_http_info(self, path, vcs_root_instance_locator, **kwargs):  # noqa: E501
        """get_children  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_children_with_http_info(path, vcs_root_instance_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str path: (required)
        :param str vcs_root_instance_locator: (required)
        :param str base_path:
        :param str locator:
        :param str fields:
        :return: Files
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['path', 'vcs_root_instance_locator', 'base_path', 'locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_children" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'path' is set
        if ('path' not in params or
                params['path'] is None):
            raise ValueError("Missing the required parameter `path` when calling `get_children`")  # noqa: E501
        # verify the required parameter 'vcs_root_instance_locator' is set
        if ('vcs_root_instance_locator' not in params or
                params['vcs_root_instance_locator'] is None):
            raise ValueError("Missing the required parameter `vcs_root_instance_locator` when calling `get_children`")  # noqa: E501

        if 'path' in params and not re.search('(\/.*)?', params['path']):  # noqa: E501
            raise ValueError("Invalid value for parameter `path` when calling `get_children`, must conform to the pattern `/(\/.*)?/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'path' in params:
            if isinstance(params['path'], TeamCityObject):
                path_params['path'] = params['path'].locator_id
            else:
                path_params['path'] = params['path']  # noqa: E501
        if 'vcs_root_instance_locator' in params:
            if isinstance(params['vcs_root_instance_locator'], TeamCityObject):
                path_params['vcsRootInstanceLocator'] = params['vcs_root_instance_locator'].locator_id
            else:
                path_params['vcsRootInstanceLocator'] = params['vcs_root_instance_locator']  # noqa: E501

        query_params = []
        if 'base_path' in params:
            query_params.append(('basePath', params['base_path']))  # noqa: E501
        if 'locator' in params:
            query_params.append(('locator', params['locator']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/files/latest/children{path}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Files',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_children_alias_with_http_info(self, path, vcs_root_instance_locator, **kwargs):  # noqa: E501
        """get_children_alias  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_children_alias_with_http_info(path, vcs_root_instance_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str path: (required)
        :param str vcs_root_instance_locator: (required)
        :param str base_path:
        :param str locator:
        :param str fields:
        :return: Files
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['path', 'vcs_root_instance_locator', 'base_path', 'locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_children_alias" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'path' is set
        if ('path' not in params or
                params['path'] is None):
            raise ValueError("Missing the required parameter `path` when calling `get_children_alias`")  # noqa: E501
        # verify the required parameter 'vcs_root_instance_locator' is set
        if ('vcs_root_instance_locator' not in params or
                params['vcs_root_instance_locator'] is None):
            raise ValueError("Missing the required parameter `vcs_root_instance_locator` when calling `get_children_alias`")  # noqa: E501

        if 'path' in params and not re.search('(.*)?', params['path']):  # noqa: E501
            raise ValueError("Invalid value for parameter `path` when calling `get_children_alias`, must conform to the pattern `/(.*)?/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'path' in params:
            if isinstance(params['path'], TeamCityObject):
                path_params['path'] = params['path'].locator_id
            else:
                path_params['path'] = params['path']  # noqa: E501
        if 'vcs_root_instance_locator' in params:
            if isinstance(params['vcs_root_instance_locator'], TeamCityObject):
                path_params['vcsRootInstanceLocator'] = params['vcs_root_instance_locator'].locator_id
            else:
                path_params['vcsRootInstanceLocator'] = params['vcs_root_instance_locator']  # noqa: E501

        query_params = []
        if 'base_path' in params:
            query_params.append(('basePath', params['base_path']))  # noqa: E501
        if 'locator' in params:
            query_params.append(('locator', params['locator']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/files/latest/{path}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Files',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_content_with_http_info(self, path, vcs_root_instance_locator, **kwargs):  # noqa: E501
        """get_content  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_content_with_http_info(path, vcs_root_instance_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str path: (required)
        :param str vcs_root_instance_locator: (required)
        :param str response_builder:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['path', 'vcs_root_instance_locator', 'response_builder']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_content" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'path' is set
        if ('path' not in params or
                params['path'] is None):
            raise ValueError("Missing the required parameter `path` when calling `get_content`")  # noqa: E501
        # verify the required parameter 'vcs_root_instance_locator' is set
        if ('vcs_root_instance_locator' not in params or
                params['vcs_root_instance_locator'] is None):
            raise ValueError("Missing the required parameter `vcs_root_instance_locator` when calling `get_content`")  # noqa: E501

        if 'path' in params and not re.search('(\/.*)?', params['path']):  # noqa: E501
            raise ValueError("Invalid value for parameter `path` when calling `get_content`, must conform to the pattern `/(\/.*)?/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'path' in params:
            if isinstance(params['path'], TeamCityObject):
                path_params['path'] = params['path'].locator_id
            else:
                path_params['path'] = params['path']  # noqa: E501
        if 'vcs_root_instance_locator' in params:
            if isinstance(params['vcs_root_instance_locator'], TeamCityObject):
                path_params['vcsRootInstanceLocator'] = params['vcs_root_instance_locator'].locator_id
            else:
                path_params['vcsRootInstanceLocator'] = params['vcs_root_instance_locator']  # noqa: E501

        query_params = []
        if 'response_builder' in params:
            query_params.append(('responseBuilder', params['response_builder']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/files/latest/content{path}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_content_alias_with_http_info(self, path, vcs_root_instance_locator, **kwargs):  # noqa: E501
        """get_content_alias  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_content_alias_with_http_info(path, vcs_root_instance_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str path: (required)
        :param str vcs_root_instance_locator: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['path', 'vcs_root_instance_locator']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_content_alias" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'path' is set
        if ('path' not in params or
                params['path'] is None):
            raise ValueError("Missing the required parameter `path` when calling `get_content_alias`")  # noqa: E501
        # verify the required parameter 'vcs_root_instance_locator' is set
        if ('vcs_root_instance_locator' not in params or
                params['vcs_root_instance_locator'] is None):
            raise ValueError("Missing the required parameter `vcs_root_instance_locator` when calling `get_content_alias`")  # noqa: E501

        if 'path' in params and not re.search('(\/.*)?', params['path']):  # noqa: E501
            raise ValueError("Invalid value for parameter `path` when calling `get_content_alias`, must conform to the pattern `/(\/.*)?/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'path' in params:
            if isinstance(params['path'], TeamCityObject):
                path_params['path'] = params['path'].locator_id
            else:
                path_params['path'] = params['path']  # noqa: E501
        if 'vcs_root_instance_locator' in params:
            if isinstance(params['vcs_root_instance_locator'], TeamCityObject):
                path_params['vcsRootInstanceLocator'] = params['vcs_root_instance_locator'].locator_id
            else:
                path_params['vcsRootInstanceLocator'] = params['vcs_root_instance_locator']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/files/latest/files{path}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_metadata_with_http_info(self, path, vcs_root_instance_locator, **kwargs):  # noqa: E501
        """get_metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_metadata_with_http_info(path, vcs_root_instance_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str path: (required)
        :param str vcs_root_instance_locator: (required)
        :param str fields:
        :return: File
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['path', 'vcs_root_instance_locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_metadata" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'path' is set
        if ('path' not in params or
                params['path'] is None):
            raise ValueError("Missing the required parameter `path` when calling `get_metadata`")  # noqa: E501
        # verify the required parameter 'vcs_root_instance_locator' is set
        if ('vcs_root_instance_locator' not in params or
                params['vcs_root_instance_locator'] is None):
            raise ValueError("Missing the required parameter `vcs_root_instance_locator` when calling `get_metadata`")  # noqa: E501

        if 'path' in params and not re.search('(\/.*)?', params['path']):  # noqa: E501
            raise ValueError("Invalid value for parameter `path` when calling `get_metadata`, must conform to the pattern `/(\/.*)?/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'path' in params:
            if isinstance(params['path'], TeamCityObject):
                path_params['path'] = params['path'].locator_id
            else:
                path_params['path'] = params['path']  # noqa: E501
        if 'vcs_root_instance_locator' in params:
            if isinstance(params['vcs_root_instance_locator'], TeamCityObject):
                path_params['vcsRootInstanceLocator'] = params['vcs_root_instance_locator'].locator_id
            else:
                path_params['vcsRootInstanceLocator'] = params['vcs_root_instance_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/files/latest/metadata{path}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='File',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_repository_state_with_http_info(self, vcs_root_instance_locator, **kwargs):  # noqa: E501
        """get_repository_state  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_repository_state_with_http_info(vcs_root_instance_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vcs_root_instance_locator: (required)
        :param str fields:
        :return: Entries
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vcs_root_instance_locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_repository_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vcs_root_instance_locator' is set
        if ('vcs_root_instance_locator' not in params or
                params['vcs_root_instance_locator'] is None):
            raise ValueError("Missing the required parameter `vcs_root_instance_locator` when calling `get_repository_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vcs_root_instance_locator' in params:
            if isinstance(params['vcs_root_instance_locator'], TeamCityObject):
                path_params['vcsRootInstanceLocator'] = params['vcs_root_instance_locator'].locator_id
            else:
                path_params['vcsRootInstanceLocator'] = params['vcs_root_instance_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/repositoryState', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Entries',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_repository_state_creation_date_with_http_info(self, vcs_root_instance_locator, **kwargs):  # noqa: E501
        """get_repository_state_creation_date  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_repository_state_creation_date_with_http_info(vcs_root_instance_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vcs_root_instance_locator: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vcs_root_instance_locator']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_repository_state_creation_date" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vcs_root_instance_locator' is set
        if ('vcs_root_instance_locator' not in params or
                params['vcs_root_instance_locator'] is None):
            raise ValueError("Missing the required parameter `vcs_root_instance_locator` when calling `get_repository_state_creation_date`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vcs_root_instance_locator' in params:
            if isinstance(params['vcs_root_instance_locator'], TeamCityObject):
                path_params['vcsRootInstanceLocator'] = params['vcs_root_instance_locator'].locator_id
            else:
                path_params['vcsRootInstanceLocator'] = params['vcs_root_instance_locator']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/repositoryState/creationDate', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_root_with_http_info(self, vcs_root_instance_locator, **kwargs):  # noqa: E501
        """get_root  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_root_with_http_info(vcs_root_instance_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vcs_root_instance_locator: (required)
        :param str base_path:
        :param str locator:
        :param str fields:
        :return: Files
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vcs_root_instance_locator', 'base_path', 'locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_root" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vcs_root_instance_locator' is set
        if ('vcs_root_instance_locator' not in params or
                params['vcs_root_instance_locator'] is None):
            raise ValueError("Missing the required parameter `vcs_root_instance_locator` when calling `get_root`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vcs_root_instance_locator' in params:
            if isinstance(params['vcs_root_instance_locator'], TeamCityObject):
                path_params['vcsRootInstanceLocator'] = params['vcs_root_instance_locator'].locator_id
            else:
                path_params['vcsRootInstanceLocator'] = params['vcs_root_instance_locator']  # noqa: E501

        query_params = []
        if 'base_path' in params:
            query_params.append(('basePath', params['base_path']))  # noqa: E501
        if 'locator' in params:
            query_params.append(('locator', params['locator']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/files/latest', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Files',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_zipped_with_http_info(self, path, vcs_root_instance_locator, **kwargs):  # noqa: E501
        """get_zipped  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_zipped_with_http_info(path, vcs_root_instance_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str path: (required)
        :param str vcs_root_instance_locator: (required)
        :param str base_path:
        :param str locator:
        :param str name:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['path', 'vcs_root_instance_locator', 'base_path', 'locator', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_zipped" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'path' is set
        if ('path' not in params or
                params['path'] is None):
            raise ValueError("Missing the required parameter `path` when calling `get_zipped`")  # noqa: E501
        # verify the required parameter 'vcs_root_instance_locator' is set
        if ('vcs_root_instance_locator' not in params or
                params['vcs_root_instance_locator'] is None):
            raise ValueError("Missing the required parameter `vcs_root_instance_locator` when calling `get_zipped`")  # noqa: E501

        if 'path' in params and not re.search('(\/.*)?', params['path']):  # noqa: E501
            raise ValueError("Invalid value for parameter `path` when calling `get_zipped`, must conform to the pattern `/(\/.*)?/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'path' in params:
            if isinstance(params['path'], TeamCityObject):
                path_params['path'] = params['path'].locator_id
            else:
                path_params['path'] = params['path']  # noqa: E501
        if 'vcs_root_instance_locator' in params:
            if isinstance(params['vcs_root_instance_locator'], TeamCityObject):
                path_params['vcsRootInstanceLocator'] = params['vcs_root_instance_locator'].locator_id
            else:
                path_params['vcsRootInstanceLocator'] = params['vcs_root_instance_locator']  # noqa: E501

        query_params = []
        if 'base_path' in params:
            query_params.append(('basePath', params['base_path']))  # noqa: E501
        if 'locator' in params:
            query_params.append(('locator', params['locator']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/files/latest/archived{path}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __schedule_checking_for_changes_with_http_info(self, **kwargs):  # noqa: E501
        """schedule_checking_for_changes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__schedule_checking_for_changes_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str locator:
        :param str requestor:
        :param str fields:
        :return: VcsRootInstances
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['locator', 'requestor', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method schedule_checking_for_changes" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'locator' in params:
            query_params.append(('locator', params['locator']))  # noqa: E501
        if 'requestor' in params:
            query_params.append(('requestor', params['requestor']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/vcs-root-instances/checkingForChangesQueue', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VcsRootInstances',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __schedule_checking_for_changes_0_with_http_info(self, **kwargs):  # noqa: E501
        """schedule_checking_for_changes_0  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__schedule_checking_for_changes_0_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str locator:
        :param bool ok_on_nothing_found:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['locator', 'ok_on_nothing_found']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method schedule_checking_for_changes_0" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'locator' in params:
            query_params.append(('locator', params['locator']))  # noqa: E501
        if 'ok_on_nothing_found' in params:
            query_params.append(('okOnNothingFound', params['ok_on_nothing_found']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/vcs-root-instances/commitHookNotification', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __serve_instance_with_http_info(self, vcs_root_instance_locator, **kwargs):  # noqa: E501
        """serve_instance  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__serve_instance_with_http_info(vcs_root_instance_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vcs_root_instance_locator: (required)
        :param str fields:
        :return: VcsRootInstance
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vcs_root_instance_locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method serve_instance" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vcs_root_instance_locator' is set
        if ('vcs_root_instance_locator' not in params or
                params['vcs_root_instance_locator'] is None):
            raise ValueError("Missing the required parameter `vcs_root_instance_locator` when calling `serve_instance`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vcs_root_instance_locator' in params:
            if isinstance(params['vcs_root_instance_locator'], TeamCityObject):
                path_params['vcsRootInstanceLocator'] = params['vcs_root_instance_locator'].locator_id
            else:
                path_params['vcsRootInstanceLocator'] = params['vcs_root_instance_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/vcs-root-instances/{vcsRootInstanceLocator}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VcsRootInstance',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __serve_instance_field_with_http_info(self, vcs_root_instance_locator, field, **kwargs):  # noqa: E501
        """serve_instance_field  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__serve_instance_field_with_http_info(vcs_root_instance_locator, field, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vcs_root_instance_locator: (required)
        :param str field: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vcs_root_instance_locator', 'field']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method serve_instance_field" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vcs_root_instance_locator' is set
        if ('vcs_root_instance_locator' not in params or
                params['vcs_root_instance_locator'] is None):
            raise ValueError("Missing the required parameter `vcs_root_instance_locator` when calling `serve_instance_field`")  # noqa: E501
        # verify the required parameter 'field' is set
        if ('field' not in params or
                params['field'] is None):
            raise ValueError("Missing the required parameter `field` when calling `serve_instance_field`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vcs_root_instance_locator' in params:
            if isinstance(params['vcs_root_instance_locator'], TeamCityObject):
                path_params['vcsRootInstanceLocator'] = params['vcs_root_instance_locator'].locator_id
            else:
                path_params['vcsRootInstanceLocator'] = params['vcs_root_instance_locator']  # noqa: E501
        if 'field' in params:
            if isinstance(params['field'], TeamCityObject):
                path_params['field'] = params['field'].locator_id
            else:
                path_params['field'] = params['field']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/{field}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __serve_instances_with_http_info(self, **kwargs):  # noqa: E501
        """serve_instances  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__serve_instances_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str locator:
        :param str fields:
        :return: VcsRootInstances
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method serve_instances" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'locator' in params:
            query_params.append(('locator', params['locator']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/vcs-root-instances', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VcsRootInstances',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __serve_root_instance_properties_with_http_info(self, vcs_root_instance_locator, **kwargs):  # noqa: E501
        """serve_root_instance_properties  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__serve_root_instance_properties_with_http_info(vcs_root_instance_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vcs_root_instance_locator: (required)
        :param str fields:
        :return: Properties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vcs_root_instance_locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method serve_root_instance_properties" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vcs_root_instance_locator' is set
        if ('vcs_root_instance_locator' not in params or
                params['vcs_root_instance_locator'] is None):
            raise ValueError("Missing the required parameter `vcs_root_instance_locator` when calling `serve_root_instance_properties`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vcs_root_instance_locator' in params:
            if isinstance(params['vcs_root_instance_locator'], TeamCityObject):
                path_params['vcsRootInstanceLocator'] = params['vcs_root_instance_locator'].locator_id
            else:
                path_params['vcsRootInstanceLocator'] = params['vcs_root_instance_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/properties', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Properties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __set_instance_field_with_http_info(self, vcs_root_instance_locator, field, **kwargs):  # noqa: E501
        """set_instance_field  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__set_instance_field_with_http_info(vcs_root_instance_locator, field, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vcs_root_instance_locator: (required)
        :param str field: (required)
        :param str body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vcs_root_instance_locator', 'field', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_instance_field" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vcs_root_instance_locator' is set
        if ('vcs_root_instance_locator' not in params or
                params['vcs_root_instance_locator'] is None):
            raise ValueError("Missing the required parameter `vcs_root_instance_locator` when calling `set_instance_field`")  # noqa: E501
        # verify the required parameter 'field' is set
        if ('field' not in params or
                params['field'] is None):
            raise ValueError("Missing the required parameter `field` when calling `set_instance_field`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vcs_root_instance_locator' in params:
            if isinstance(params['vcs_root_instance_locator'], TeamCityObject):
                path_params['vcsRootInstanceLocator'] = params['vcs_root_instance_locator'].locator_id
            else:
                path_params['vcsRootInstanceLocator'] = params['vcs_root_instance_locator']  # noqa: E501
        if 'field' in params:
            if isinstance(params['field'], TeamCityObject):
                path_params['field'] = params['field'].locator_id
            else:
                path_params['field'] = params['field']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/{field}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __set_repository_state_with_http_info(self, vcs_root_instance_locator, **kwargs):  # noqa: E501
        """set_repository_state  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__set_repository_state_with_http_info(vcs_root_instance_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vcs_root_instance_locator: (required)
        :param Entries body:
        :param str fields:
        :return: Entries
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vcs_root_instance_locator', 'body', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_repository_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vcs_root_instance_locator' is set
        if ('vcs_root_instance_locator' not in params or
                params['vcs_root_instance_locator'] is None):
            raise ValueError("Missing the required parameter `vcs_root_instance_locator` when calling `set_repository_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vcs_root_instance_locator' in params:
            if isinstance(params['vcs_root_instance_locator'], TeamCityObject):
                path_params['vcsRootInstanceLocator'] = params['vcs_root_instance_locator'].locator_id
            else:
                path_params['vcsRootInstanceLocator'] = params['vcs_root_instance_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/repositoryState', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Entries',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
