# coding: utf-8

"""
    TeamCity REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2018.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import
from dohq_teamcity.custom.base_model import TeamCityObject

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from dohq_teamcity.models.agents import Agents  # noqa: F401,E501
from dohq_teamcity.models.approval_info import ApprovalInfo  # noqa: F401,E501
from dohq_teamcity.models.build import Build  # noqa: F401,E501
from dohq_teamcity.models.build_cancel_request import BuildCancelRequest  # noqa: F401,E501
from dohq_teamcity.models.builds import Builds  # noqa: F401,E501
from dohq_teamcity.models.tags import Tags  # noqa: F401,E501


class BuildQueueApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """
    base_name = 'BuildQueue'

    def __init__(self, api_client=None):
        self.api_client = api_client

    def add_build_to_queue(self, **kwargs):  # noqa: E501
        """Add a new build to the queue.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_build_to_queue(async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param Build body:
        :param bool move_to_top:
        :return: Build
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__add_build_to_queue_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.__add_build_to_queue_with_http_info(**kwargs)  # noqa: E501
            return data

    def add_tags_to_build_of_build_queue(self, build_locator, **kwargs):  # noqa: E501
        """Add tags to the matching build.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_tags_to_build_of_build_queue(build_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str build_locator: (required)
        :param Tags body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__add_tags_to_build_of_build_queue_with_http_info(build_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__add_tags_to_build_of_build_queue_with_http_info(build_locator, **kwargs)  # noqa: E501
            return data

    def approve_queued_build(self, build_locator, **kwargs):  # noqa: E501
        """Approve queued build with approval feature enabled.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.approve_queued_build(build_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str build_locator: (required)
        :param str body:
        :param str fields:
        :return: ApprovalInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__approve_queued_build_with_http_info(build_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__approve_queued_build_with_http_info(build_locator, **kwargs)  # noqa: E501
            return data

    def cancel_queued_build(self, queued_build_locator, **kwargs):  # noqa: E501
        """Cancel a queued matching build.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cancel_queued_build(queued_build_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str queued_build_locator: (required)
        :param BuildCancelRequest body:
        :return: Build
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__cancel_queued_build_with_http_info(queued_build_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__cancel_queued_build_with_http_info(queued_build_locator, **kwargs)  # noqa: E501
            return data

    def delete_all_queued_builds(self, **kwargs):  # noqa: E501
        """Delete all queued builds.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_all_queued_builds(async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str locator:
        :param str fields:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__delete_all_queued_builds_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.__delete_all_queued_builds_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_queued_build(self, queued_build_locator, **kwargs):  # noqa: E501
        """Delete a queued matching build.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_queued_build(queued_build_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str queued_build_locator: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__delete_queued_build_with_http_info(queued_build_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__delete_queued_build_with_http_info(queued_build_locator, **kwargs)  # noqa: E501
            return data

    def get_all_queued_builds(self, **kwargs):  # noqa: E501
        """Get all queued builds.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_queued_builds(async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str locator:
        :param str fields:
        :return: Builds
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_all_queued_builds_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.__get_all_queued_builds_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_approval_info(self, build_locator, **kwargs):  # noqa: E501
        """Get approval info of a queued matching build.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_approval_info(build_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str build_locator: (required)
        :param str fields:
        :return: ApprovalInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_approval_info_with_http_info(build_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_approval_info_with_http_info(build_locator, **kwargs)  # noqa: E501
            return data

    def get_compatible_agents_for_build(self, queued_build_locator, **kwargs):  # noqa: E501
        """Get compatible agents for a queued matching build.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_compatible_agents_for_build(queued_build_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str queued_build_locator: (required)
        :param str fields:
        :return: Agents
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_compatible_agents_for_build_with_http_info(queued_build_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_compatible_agents_for_build_with_http_info(queued_build_locator, **kwargs)  # noqa: E501
            return data

    def get_queued_build(self, queued_build_locator, **kwargs):  # noqa: E501
        """Get a queued matching build.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_queued_build(queued_build_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str queued_build_locator: (required)
        :param str fields:
        :return: Build
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_queued_build_with_http_info(queued_build_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_queued_build_with_http_info(queued_build_locator, **kwargs)  # noqa: E501
            return data

    def get_queued_build_position(self, queue_position, **kwargs):  # noqa: E501
        """Get the queue position of a queued matching build.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_queued_build_position(queue_position, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str queue_position: (required)
        :param str fields:
        :return: Build
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_queued_build_position_with_http_info(queue_position, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_queued_build_position_with_http_info(queue_position, **kwargs)  # noqa: E501
            return data

    def get_queued_build_tags(self, build_locator, **kwargs):  # noqa: E501
        """Get tags of the queued matching build.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_queued_build_tags(build_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str build_locator: (required)
        :param str locator:
        :param str fields:
        :return: Tags
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_queued_build_tags_with_http_info(build_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_queued_build_tags_with_http_info(build_locator, **kwargs)  # noqa: E501
            return data

    def set_queued_build_position(self, queue_position, **kwargs):  # noqa: E501
        """Update the queue position of a queued matching build.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_queued_build_position(queue_position, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str queue_position: (required)
        :param Build body:
        :param str fields:
        :return: Build
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__set_queued_build_position_with_http_info(queue_position, **kwargs)  # noqa: E501
        else:
            (data) = self.__set_queued_build_position_with_http_info(queue_position, **kwargs)  # noqa: E501
            return data

    def set_queued_builds_order(self, **kwargs):  # noqa: E501
        """Update the build queue order.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_queued_builds_order(async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param Builds body:
        :param str fields:
        :return: Builds
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__set_queued_builds_order_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.__set_queued_builds_order_with_http_info(**kwargs)  # noqa: E501
            return data

    def __add_build_to_queue_with_http_info(self, **kwargs):  # noqa: E501
        """Add a new build to the queue.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__add_build_to_queue_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Build body:
        :param bool move_to_top:
        :return: Build
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'move_to_top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_build_to_queue" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'move_to_top' in params:
            query_params.append(('moveToTop', params['move_to_top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildQueue', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Build',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __add_tags_to_build_of_build_queue_with_http_info(self, build_locator, **kwargs):  # noqa: E501
        """Add tags to the matching build.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__add_tags_to_build_of_build_queue_with_http_info(build_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str build_locator: (required)
        :param Tags body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['build_locator', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_tags_to_build_of_build_queue" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'build_locator' is set
        if ('build_locator' not in params or
                params['build_locator'] is None):
            raise ValueError("Missing the required parameter `build_locator` when calling `add_tags_to_build_of_build_queue`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'build_locator' in params:
            if isinstance(params['build_locator'], TeamCityObject):
                path_params['buildLocator'] = params['build_locator'].locator_id
            else:
                path_params['buildLocator'] = params['build_locator']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildQueue/{buildLocator}/tags', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __approve_queued_build_with_http_info(self, build_locator, **kwargs):  # noqa: E501
        """Approve queued build with approval feature enabled.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__approve_queued_build_with_http_info(build_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str build_locator: (required)
        :param str body:
        :param str fields:
        :return: ApprovalInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['build_locator', 'body', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method approve_queued_build" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'build_locator' is set
        if ('build_locator' not in params or
                params['build_locator'] is None):
            raise ValueError("Missing the required parameter `build_locator` when calling `approve_queued_build`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'build_locator' in params:
            if isinstance(params['build_locator'], TeamCityObject):
                path_params['buildLocator'] = params['build_locator'].locator_id
            else:
                path_params['buildLocator'] = params['build_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildQueue/{buildLocator}/approve', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApprovalInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __cancel_queued_build_with_http_info(self, queued_build_locator, **kwargs):  # noqa: E501
        """Cancel a queued matching build.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__cancel_queued_build_with_http_info(queued_build_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str queued_build_locator: (required)
        :param BuildCancelRequest body:
        :return: Build
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['queued_build_locator', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cancel_queued_build" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'queued_build_locator' is set
        if ('queued_build_locator' not in params or
                params['queued_build_locator'] is None):
            raise ValueError("Missing the required parameter `queued_build_locator` when calling `cancel_queued_build`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'queued_build_locator' in params:
            if isinstance(params['queued_build_locator'], TeamCityObject):
                path_params['queuedBuildLocator'] = params['queued_build_locator'].locator_id
            else:
                path_params['queuedBuildLocator'] = params['queued_build_locator']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildQueue/{queuedBuildLocator}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Build',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __delete_all_queued_builds_with_http_info(self, **kwargs):  # noqa: E501
        """Delete all queued builds.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__delete_all_queued_builds_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str locator:
        :param str fields:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_all_queued_builds" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'locator' in params:
            query_params.append(('locator', params['locator']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildQueue', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __delete_queued_build_with_http_info(self, queued_build_locator, **kwargs):  # noqa: E501
        """Delete a queued matching build.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__delete_queued_build_with_http_info(queued_build_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str queued_build_locator: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['queued_build_locator']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_queued_build" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'queued_build_locator' is set
        if ('queued_build_locator' not in params or
                params['queued_build_locator'] is None):
            raise ValueError("Missing the required parameter `queued_build_locator` when calling `delete_queued_build`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'queued_build_locator' in params:
            if isinstance(params['queued_build_locator'], TeamCityObject):
                path_params['queuedBuildLocator'] = params['queued_build_locator'].locator_id
            else:
                path_params['queuedBuildLocator'] = params['queued_build_locator']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildQueue/{queuedBuildLocator}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_all_queued_builds_with_http_info(self, **kwargs):  # noqa: E501
        """Get all queued builds.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_all_queued_builds_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str locator:
        :param str fields:
        :return: Builds
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_queued_builds" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'locator' in params:
            query_params.append(('locator', params['locator']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildQueue', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Builds',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_approval_info_with_http_info(self, build_locator, **kwargs):  # noqa: E501
        """Get approval info of a queued matching build.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_approval_info_with_http_info(build_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str build_locator: (required)
        :param str fields:
        :return: ApprovalInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['build_locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_approval_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'build_locator' is set
        if ('build_locator' not in params or
                params['build_locator'] is None):
            raise ValueError("Missing the required parameter `build_locator` when calling `get_approval_info`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'build_locator' in params:
            if isinstance(params['build_locator'], TeamCityObject):
                path_params['buildLocator'] = params['build_locator'].locator_id
            else:
                path_params['buildLocator'] = params['build_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildQueue/{buildLocator}/approvalInfo', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApprovalInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_compatible_agents_for_build_with_http_info(self, queued_build_locator, **kwargs):  # noqa: E501
        """Get compatible agents for a queued matching build.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_compatible_agents_for_build_with_http_info(queued_build_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str queued_build_locator: (required)
        :param str fields:
        :return: Agents
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['queued_build_locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_compatible_agents_for_build" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'queued_build_locator' is set
        if ('queued_build_locator' not in params or
                params['queued_build_locator'] is None):
            raise ValueError("Missing the required parameter `queued_build_locator` when calling `get_compatible_agents_for_build`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'queued_build_locator' in params:
            if isinstance(params['queued_build_locator'], TeamCityObject):
                path_params['queuedBuildLocator'] = params['queued_build_locator'].locator_id
            else:
                path_params['queuedBuildLocator'] = params['queued_build_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildQueue/{queuedBuildLocator}/compatibleAgents', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Agents',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_queued_build_with_http_info(self, queued_build_locator, **kwargs):  # noqa: E501
        """Get a queued matching build.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_queued_build_with_http_info(queued_build_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str queued_build_locator: (required)
        :param str fields:
        :return: Build
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['queued_build_locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_queued_build" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'queued_build_locator' is set
        if ('queued_build_locator' not in params or
                params['queued_build_locator'] is None):
            raise ValueError("Missing the required parameter `queued_build_locator` when calling `get_queued_build`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'queued_build_locator' in params:
            if isinstance(params['queued_build_locator'], TeamCityObject):
                path_params['queuedBuildLocator'] = params['queued_build_locator'].locator_id
            else:
                path_params['queuedBuildLocator'] = params['queued_build_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildQueue/{queuedBuildLocator}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Build',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_queued_build_position_with_http_info(self, queue_position, **kwargs):  # noqa: E501
        """Get the queue position of a queued matching build.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_queued_build_position_with_http_info(queue_position, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str queue_position: (required)
        :param str fields:
        :return: Build
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['queue_position', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_queued_build_position" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'queue_position' is set
        if ('queue_position' not in params or
                params['queue_position'] is None):
            raise ValueError("Missing the required parameter `queue_position` when calling `get_queued_build_position`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'queue_position' in params:
            if isinstance(params['queue_position'], TeamCityObject):
                path_params['queuePosition'] = params['queue_position'].locator_id
            else:
                path_params['queuePosition'] = params['queue_position']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildQueue/order/{queuePosition}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Build',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_queued_build_tags_with_http_info(self, build_locator, **kwargs):  # noqa: E501
        """Get tags of the queued matching build.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_queued_build_tags_with_http_info(build_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str build_locator: (required)
        :param str locator:
        :param str fields:
        :return: Tags
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['build_locator', 'locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_queued_build_tags" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'build_locator' is set
        if ('build_locator' not in params or
                params['build_locator'] is None):
            raise ValueError("Missing the required parameter `build_locator` when calling `get_queued_build_tags`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'build_locator' in params:
            if isinstance(params['build_locator'], TeamCityObject):
                path_params['buildLocator'] = params['build_locator'].locator_id
            else:
                path_params['buildLocator'] = params['build_locator']  # noqa: E501

        query_params = []
        if 'locator' in params:
            query_params.append(('locator', params['locator']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildQueue/{buildLocator}/tags', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Tags',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __set_queued_build_position_with_http_info(self, queue_position, **kwargs):  # noqa: E501
        """Update the queue position of a queued matching build.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__set_queued_build_position_with_http_info(queue_position, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str queue_position: (required)
        :param Build body:
        :param str fields:
        :return: Build
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['queue_position', 'body', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_queued_build_position" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'queue_position' is set
        if ('queue_position' not in params or
                params['queue_position'] is None):
            raise ValueError("Missing the required parameter `queue_position` when calling `set_queued_build_position`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'queue_position' in params:
            if isinstance(params['queue_position'], TeamCityObject):
                path_params['queuePosition'] = params['queue_position'].locator_id
            else:
                path_params['queuePosition'] = params['queue_position']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildQueue/order/{queuePosition}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Build',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __set_queued_builds_order_with_http_info(self, **kwargs):  # noqa: E501
        """Update the build queue order.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__set_queued_builds_order_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Builds body:
        :param str fields:
        :return: Builds
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_queued_builds_order" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildQueue/order', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Builds',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
