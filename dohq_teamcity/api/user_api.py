# coding: utf-8

"""
    TeamCity REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2018.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import
from dohq_teamcity.custom.base_model import TeamCityObject

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from dohq_teamcity.models.group import Group  # noqa: F401,E501
from dohq_teamcity.models.groups import Groups  # noqa: F401,E501
from dohq_teamcity.models.permission_assignments import PermissionAssignments  # noqa: F401,E501
from dohq_teamcity.models.properties import Properties  # noqa: F401,E501
from dohq_teamcity.models.role import Role  # noqa: F401,E501
from dohq_teamcity.models.roles import Roles  # noqa: F401,E501
from dohq_teamcity.models.token import Token  # noqa: F401,E501
from dohq_teamcity.models.tokens import Tokens  # noqa: F401,E501
from dohq_teamcity.models.user import User  # noqa: F401,E501
from dohq_teamcity.models.users import Users  # noqa: F401,E501


class UserApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """
    base_name = 'User'

    def __init__(self, api_client=None):
        self.api_client = api_client

    def add_role_to_user(self, user_locator, **kwargs):  # noqa: E501
        """Add a role to the matching user.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_role_to_user(user_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str user_locator: (required)
        :param Role body:
        :return: Role
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__add_role_to_user_with_http_info(user_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__add_role_to_user_with_http_info(user_locator, **kwargs)  # noqa: E501
            return data

    def add_role_to_user_at_scope(self, user_locator, role_id, scope, **kwargs):  # noqa: E501
        """Add a role with the specific scope to the matching user.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_role_to_user_at_scope(user_locator, role_id, scope, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str user_locator: (required)
        :param str role_id: (required)
        :param str scope: (required)
        :return: Role
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__add_role_to_user_at_scope_with_http_info(user_locator, role_id, scope, **kwargs)  # noqa: E501
        else:
            (data) = self.__add_role_to_user_at_scope_with_http_info(user_locator, role_id, scope, **kwargs)  # noqa: E501
            return data

    def add_user(self, **kwargs):  # noqa: E501
        """Create a new user.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_user(async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param User body:
        :param str fields:
        :return: User
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__add_user_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.__add_user_with_http_info(**kwargs)  # noqa: E501
            return data

    def add_user_token(self, user_locator, **kwargs):  # noqa: E501
        """Create a new authentication token for the matching user.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_user_token(user_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str user_locator: (required)
        :param Token body:
        :param str fields:
        :return: Token
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__add_user_token_with_http_info(user_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__add_user_token_with_http_info(user_locator, **kwargs)  # noqa: E501
            return data

    def delete_user(self, user_locator, **kwargs):  # noqa: E501
        """Delete user matching the locator.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_user(user_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str user_locator: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__delete_user_with_http_info(user_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__delete_user_with_http_info(user_locator, **kwargs)  # noqa: E501
            return data

    def delete_user_field(self, user_locator, field, **kwargs):  # noqa: E501
        """Remove a property of the matching user.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_user_field(user_locator, field, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str user_locator: (required)
        :param str field: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__delete_user_field_with_http_info(user_locator, field, **kwargs)  # noqa: E501
        else:
            (data) = self.__delete_user_field_with_http_info(user_locator, field, **kwargs)  # noqa: E501
            return data

    def delete_user_token(self, user_locator, name, **kwargs):  # noqa: E501
        """Remove an authentication token from the matching user.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_user_token(user_locator, name, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str user_locator: (required)
        :param str name: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__delete_user_token_with_http_info(user_locator, name, **kwargs)  # noqa: E501
        else:
            (data) = self.__delete_user_token_with_http_info(user_locator, name, **kwargs)  # noqa: E501
            return data

    def get_all_user_groups(self, user_locator, **kwargs):  # noqa: E501
        """Get all groups of the matching user.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_user_groups(user_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str user_locator: (required)
        :param str fields:
        :return: Groups
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_all_user_groups_with_http_info(user_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_all_user_groups_with_http_info(user_locator, **kwargs)  # noqa: E501
            return data

    def get_all_user_roles(self, user_locator, **kwargs):  # noqa: E501
        """Get all user roles of the matching user.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_user_roles(user_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str user_locator: (required)
        :return: Roles
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_all_user_roles_with_http_info(user_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_all_user_roles_with_http_info(user_locator, **kwargs)  # noqa: E501
            return data

    def get_all_users(self, **kwargs):  # noqa: E501
        """Get all users.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_users(async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str locator:
        :param str fields:
        :return: Users
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_all_users_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.__get_all_users_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_user(self, user_locator, **kwargs):  # noqa: E501
        """Get user matching the locator.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user(user_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str user_locator: (required)
        :param str fields:
        :return: User
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_user_with_http_info(user_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_user_with_http_info(user_locator, **kwargs)  # noqa: E501
            return data

    def get_user_field(self, user_locator, field, **kwargs):  # noqa: E501
        """Get a field of the matching user.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_field(user_locator, field, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str user_locator: (required)
        :param str field: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_user_field_with_http_info(user_locator, field, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_user_field_with_http_info(user_locator, field, **kwargs)  # noqa: E501
            return data

    def get_user_group(self, user_locator, group_locator, **kwargs):  # noqa: E501
        """Get a user group of the matching user.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_group(user_locator, group_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str user_locator: (required)
        :param str group_locator: (required)
        :param str fields:
        :return: Group
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_user_group_with_http_info(user_locator, group_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_user_group_with_http_info(user_locator, group_locator, **kwargs)  # noqa: E501
            return data

    def get_user_permissions(self, user_locator, **kwargs):  # noqa: E501
        """Get all permissions effective for the matching user.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_permissions(user_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str user_locator: (required)
        :param str locator:
        :param str fields:
        :return: PermissionAssignments
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_user_permissions_with_http_info(user_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_user_permissions_with_http_info(user_locator, **kwargs)  # noqa: E501
            return data

    def get_user_properties(self, user_locator, **kwargs):  # noqa: E501
        """Get all properties of the matching user.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_properties(user_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str user_locator: (required)
        :param str fields:
        :return: Properties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_user_properties_with_http_info(user_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_user_properties_with_http_info(user_locator, **kwargs)  # noqa: E501
            return data

    def get_user_property(self, user_locator, name, **kwargs):  # noqa: E501
        """Get a property of the matching user.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_property(user_locator, name, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str user_locator: (required)
        :param str name: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_user_property_with_http_info(user_locator, name, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_user_property_with_http_info(user_locator, name, **kwargs)  # noqa: E501
            return data

    def get_user_roles_at_scope(self, user_locator, role_id, scope, **kwargs):  # noqa: E501
        """Get a user role with the specific scope from the matching user.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_roles_at_scope(user_locator, role_id, scope, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str user_locator: (required)
        :param str role_id: (required)
        :param str scope: (required)
        :return: Role
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_user_roles_at_scope_with_http_info(user_locator, role_id, scope, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_user_roles_at_scope_with_http_info(user_locator, role_id, scope, **kwargs)  # noqa: E501
            return data

    def get_user_tokens(self, user_locator, **kwargs):  # noqa: E501
        """Get all authentication tokens of the matching user.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_tokens(user_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str user_locator: (required)
        :param str fields:
        :return: Tokens
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_user_tokens_with_http_info(user_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_user_tokens_with_http_info(user_locator, **kwargs)  # noqa: E501
            return data

    def remove_user_from_group(self, user_locator, group_locator, **kwargs):  # noqa: E501
        """Remove the matching user from the specific group.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_user_from_group(user_locator, group_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str user_locator: (required)
        :param str group_locator: (required)
        :param str fields:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__remove_user_from_group_with_http_info(user_locator, group_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__remove_user_from_group_with_http_info(user_locator, group_locator, **kwargs)  # noqa: E501
            return data

    def remove_user_property(self, user_locator, name, **kwargs):  # noqa: E501
        """Remove a property of the matching user.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_user_property(user_locator, name, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str user_locator: (required)
        :param str name: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__remove_user_property_with_http_info(user_locator, name, **kwargs)  # noqa: E501
        else:
            (data) = self.__remove_user_property_with_http_info(user_locator, name, **kwargs)  # noqa: E501
            return data

    def remove_user_remember_me(self, user_locator, **kwargs):  # noqa: E501
        """Remove the RememberMe data of the matching user.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_user_remember_me(user_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str user_locator: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__remove_user_remember_me_with_http_info(user_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__remove_user_remember_me_with_http_info(user_locator, **kwargs)  # noqa: E501
            return data

    def remove_user_role_at_scope(self, user_locator, role_id, scope, **kwargs):  # noqa: E501
        """Remove a role with the specific scope from the matching user.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_user_role_at_scope(user_locator, role_id, scope, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str user_locator: (required)
        :param str role_id: (required)
        :param str scope: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__remove_user_role_at_scope_with_http_info(user_locator, role_id, scope, **kwargs)  # noqa: E501
        else:
            (data) = self.__remove_user_role_at_scope_with_http_info(user_locator, role_id, scope, **kwargs)  # noqa: E501
            return data

    def replace_user(self, user_locator, **kwargs):  # noqa: E501
        """Update user matching the locator.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_user(user_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str user_locator: (required)
        :param User body:
        :param str fields:
        :return: User
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__replace_user_with_http_info(user_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__replace_user_with_http_info(user_locator, **kwargs)  # noqa: E501
            return data

    def set_user_field(self, user_locator, field, **kwargs):  # noqa: E501
        """Update a field of the matching user.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_user_field(user_locator, field, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str user_locator: (required)
        :param str field: (required)
        :param str body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__set_user_field_with_http_info(user_locator, field, **kwargs)  # noqa: E501
        else:
            (data) = self.__set_user_field_with_http_info(user_locator, field, **kwargs)  # noqa: E501
            return data

    def set_user_groups(self, user_locator, **kwargs):  # noqa: E501
        """Update groups of the matching user.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_user_groups(user_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str user_locator: (required)
        :param Groups body:
        :param str fields:
        :return: Groups
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__set_user_groups_with_http_info(user_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__set_user_groups_with_http_info(user_locator, **kwargs)  # noqa: E501
            return data

    def set_user_property(self, user_locator, name, **kwargs):  # noqa: E501
        """Update a property of the matching user.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_user_property(user_locator, name, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str user_locator: (required)
        :param str name: (required)
        :param str body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__set_user_property_with_http_info(user_locator, name, **kwargs)  # noqa: E501
        else:
            (data) = self.__set_user_property_with_http_info(user_locator, name, **kwargs)  # noqa: E501
            return data

    def set_user_roles(self, user_locator, **kwargs):  # noqa: E501
        """Update user roles of the matching user.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_user_roles(user_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str user_locator: (required)
        :param Roles body:
        :return: Roles
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__set_user_roles_with_http_info(user_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__set_user_roles_with_http_info(user_locator, **kwargs)  # noqa: E501
            return data

    def __add_role_to_user_with_http_info(self, user_locator, **kwargs):  # noqa: E501
        """Add a role to the matching user.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__add_role_to_user_with_http_info(user_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_locator: (required)
        :param Role body:
        :return: Role
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_locator', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_role_to_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_locator' is set
        if ('user_locator' not in params or
                params['user_locator'] is None):
            raise ValueError("Missing the required parameter `user_locator` when calling `add_role_to_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_locator' in params:
            if isinstance(params['user_locator'], TeamCityObject):
                path_params['userLocator'] = params['user_locator'].locator_id
            else:
                path_params['userLocator'] = params['user_locator']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/users/{userLocator}/roles', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Role',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __add_role_to_user_at_scope_with_http_info(self, user_locator, role_id, scope, **kwargs):  # noqa: E501
        """Add a role with the specific scope to the matching user.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__add_role_to_user_at_scope_with_http_info(user_locator, role_id, scope, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_locator: (required)
        :param str role_id: (required)
        :param str scope: (required)
        :return: Role
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_locator', 'role_id', 'scope']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_role_to_user_at_scope" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_locator' is set
        if ('user_locator' not in params or
                params['user_locator'] is None):
            raise ValueError("Missing the required parameter `user_locator` when calling `add_role_to_user_at_scope`")  # noqa: E501
        # verify the required parameter 'role_id' is set
        if ('role_id' not in params or
                params['role_id'] is None):
            raise ValueError("Missing the required parameter `role_id` when calling `add_role_to_user_at_scope`")  # noqa: E501
        # verify the required parameter 'scope' is set
        if ('scope' not in params or
                params['scope'] is None):
            raise ValueError("Missing the required parameter `scope` when calling `add_role_to_user_at_scope`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_locator' in params:
            if isinstance(params['user_locator'], TeamCityObject):
                path_params['userLocator'] = params['user_locator'].locator_id
            else:
                path_params['userLocator'] = params['user_locator']  # noqa: E501
        if 'role_id' in params:
            if isinstance(params['role_id'], TeamCityObject):
                path_params['roleId'] = params['role_id'].locator_id
            else:
                path_params['roleId'] = params['role_id']  # noqa: E501
        if 'scope' in params:
            if isinstance(params['scope'], TeamCityObject):
                path_params['scope'] = params['scope'].locator_id
            else:
                path_params['scope'] = params['scope']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/users/{userLocator}/roles/{roleId}/{scope}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Role',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __add_user_with_http_info(self, **kwargs):  # noqa: E501
        """Create a new user.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__add_user_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param User body:
        :param str fields:
        :return: User
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_user" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/users', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='User',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __add_user_token_with_http_info(self, user_locator, **kwargs):  # noqa: E501
        """Create a new authentication token for the matching user.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__add_user_token_with_http_info(user_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_locator: (required)
        :param Token body:
        :param str fields:
        :return: Token
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_locator', 'body', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_user_token" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_locator' is set
        if ('user_locator' not in params or
                params['user_locator'] is None):
            raise ValueError("Missing the required parameter `user_locator` when calling `add_user_token`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_locator' in params:
            if isinstance(params['user_locator'], TeamCityObject):
                path_params['userLocator'] = params['user_locator'].locator_id
            else:
                path_params['userLocator'] = params['user_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/users/{userLocator}/tokens', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Token',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __delete_user_with_http_info(self, user_locator, **kwargs):  # noqa: E501
        """Delete user matching the locator.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__delete_user_with_http_info(user_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_locator: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_locator']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_locator' is set
        if ('user_locator' not in params or
                params['user_locator'] is None):
            raise ValueError("Missing the required parameter `user_locator` when calling `delete_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_locator' in params:
            if isinstance(params['user_locator'], TeamCityObject):
                path_params['userLocator'] = params['user_locator'].locator_id
            else:
                path_params['userLocator'] = params['user_locator']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/users/{userLocator}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __delete_user_field_with_http_info(self, user_locator, field, **kwargs):  # noqa: E501
        """Remove a property of the matching user.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__delete_user_field_with_http_info(user_locator, field, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_locator: (required)
        :param str field: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_locator', 'field']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_user_field" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_locator' is set
        if ('user_locator' not in params or
                params['user_locator'] is None):
            raise ValueError("Missing the required parameter `user_locator` when calling `delete_user_field`")  # noqa: E501
        # verify the required parameter 'field' is set
        if ('field' not in params or
                params['field'] is None):
            raise ValueError("Missing the required parameter `field` when calling `delete_user_field`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_locator' in params:
            if isinstance(params['user_locator'], TeamCityObject):
                path_params['userLocator'] = params['user_locator'].locator_id
            else:
                path_params['userLocator'] = params['user_locator']  # noqa: E501
        if 'field' in params:
            if isinstance(params['field'], TeamCityObject):
                path_params['field'] = params['field'].locator_id
            else:
                path_params['field'] = params['field']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/users/{userLocator}/{field}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __delete_user_token_with_http_info(self, user_locator, name, **kwargs):  # noqa: E501
        """Remove an authentication token from the matching user.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__delete_user_token_with_http_info(user_locator, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_locator: (required)
        :param str name: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_locator', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_user_token" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_locator' is set
        if ('user_locator' not in params or
                params['user_locator'] is None):
            raise ValueError("Missing the required parameter `user_locator` when calling `delete_user_token`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_user_token`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_locator' in params:
            if isinstance(params['user_locator'], TeamCityObject):
                path_params['userLocator'] = params['user_locator'].locator_id
            else:
                path_params['userLocator'] = params['user_locator']  # noqa: E501
        if 'name' in params:
            if isinstance(params['name'], TeamCityObject):
                path_params['name'] = params['name'].locator_id
            else:
                path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/users/{userLocator}/tokens/{name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_all_user_groups_with_http_info(self, user_locator, **kwargs):  # noqa: E501
        """Get all groups of the matching user.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_all_user_groups_with_http_info(user_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_locator: (required)
        :param str fields:
        :return: Groups
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_user_groups" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_locator' is set
        if ('user_locator' not in params or
                params['user_locator'] is None):
            raise ValueError("Missing the required parameter `user_locator` when calling `get_all_user_groups`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_locator' in params:
            if isinstance(params['user_locator'], TeamCityObject):
                path_params['userLocator'] = params['user_locator'].locator_id
            else:
                path_params['userLocator'] = params['user_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/users/{userLocator}/groups', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Groups',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_all_user_roles_with_http_info(self, user_locator, **kwargs):  # noqa: E501
        """Get all user roles of the matching user.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_all_user_roles_with_http_info(user_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_locator: (required)
        :return: Roles
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_locator']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_user_roles" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_locator' is set
        if ('user_locator' not in params or
                params['user_locator'] is None):
            raise ValueError("Missing the required parameter `user_locator` when calling `get_all_user_roles`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_locator' in params:
            if isinstance(params['user_locator'], TeamCityObject):
                path_params['userLocator'] = params['user_locator'].locator_id
            else:
                path_params['userLocator'] = params['user_locator']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/users/{userLocator}/roles', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Roles',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_all_users_with_http_info(self, **kwargs):  # noqa: E501
        """Get all users.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_all_users_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str locator:
        :param str fields:
        :return: Users
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_users" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'locator' in params:
            query_params.append(('locator', params['locator']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/users', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Users',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_user_with_http_info(self, user_locator, **kwargs):  # noqa: E501
        """Get user matching the locator.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_user_with_http_info(user_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_locator: (required)
        :param str fields:
        :return: User
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_locator' is set
        if ('user_locator' not in params or
                params['user_locator'] is None):
            raise ValueError("Missing the required parameter `user_locator` when calling `get_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_locator' in params:
            if isinstance(params['user_locator'], TeamCityObject):
                path_params['userLocator'] = params['user_locator'].locator_id
            else:
                path_params['userLocator'] = params['user_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/users/{userLocator}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='User',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_user_field_with_http_info(self, user_locator, field, **kwargs):  # noqa: E501
        """Get a field of the matching user.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_user_field_with_http_info(user_locator, field, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_locator: (required)
        :param str field: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_locator', 'field']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_field" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_locator' is set
        if ('user_locator' not in params or
                params['user_locator'] is None):
            raise ValueError("Missing the required parameter `user_locator` when calling `get_user_field`")  # noqa: E501
        # verify the required parameter 'field' is set
        if ('field' not in params or
                params['field'] is None):
            raise ValueError("Missing the required parameter `field` when calling `get_user_field`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_locator' in params:
            if isinstance(params['user_locator'], TeamCityObject):
                path_params['userLocator'] = params['user_locator'].locator_id
            else:
                path_params['userLocator'] = params['user_locator']  # noqa: E501
        if 'field' in params:
            if isinstance(params['field'], TeamCityObject):
                path_params['field'] = params['field'].locator_id
            else:
                path_params['field'] = params['field']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/users/{userLocator}/{field}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_user_group_with_http_info(self, user_locator, group_locator, **kwargs):  # noqa: E501
        """Get a user group of the matching user.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_user_group_with_http_info(user_locator, group_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_locator: (required)
        :param str group_locator: (required)
        :param str fields:
        :return: Group
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_locator', 'group_locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_locator' is set
        if ('user_locator' not in params or
                params['user_locator'] is None):
            raise ValueError("Missing the required parameter `user_locator` when calling `get_user_group`")  # noqa: E501
        # verify the required parameter 'group_locator' is set
        if ('group_locator' not in params or
                params['group_locator'] is None):
            raise ValueError("Missing the required parameter `group_locator` when calling `get_user_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_locator' in params:
            if isinstance(params['user_locator'], TeamCityObject):
                path_params['userLocator'] = params['user_locator'].locator_id
            else:
                path_params['userLocator'] = params['user_locator']  # noqa: E501
        if 'group_locator' in params:
            if isinstance(params['group_locator'], TeamCityObject):
                path_params['groupLocator'] = params['group_locator'].locator_id
            else:
                path_params['groupLocator'] = params['group_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/users/{userLocator}/groups/{groupLocator}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Group',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_user_permissions_with_http_info(self, user_locator, **kwargs):  # noqa: E501
        """Get all permissions effective for the matching user.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_user_permissions_with_http_info(user_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_locator: (required)
        :param str locator:
        :param str fields:
        :return: PermissionAssignments
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_locator', 'locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_permissions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_locator' is set
        if ('user_locator' not in params or
                params['user_locator'] is None):
            raise ValueError("Missing the required parameter `user_locator` when calling `get_user_permissions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_locator' in params:
            if isinstance(params['user_locator'], TeamCityObject):
                path_params['userLocator'] = params['user_locator'].locator_id
            else:
                path_params['userLocator'] = params['user_locator']  # noqa: E501

        query_params = []
        if 'locator' in params:
            query_params.append(('locator', params['locator']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/users/{userLocator}/permissions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PermissionAssignments',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_user_properties_with_http_info(self, user_locator, **kwargs):  # noqa: E501
        """Get all properties of the matching user.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_user_properties_with_http_info(user_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_locator: (required)
        :param str fields:
        :return: Properties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_properties" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_locator' is set
        if ('user_locator' not in params or
                params['user_locator'] is None):
            raise ValueError("Missing the required parameter `user_locator` when calling `get_user_properties`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_locator' in params:
            if isinstance(params['user_locator'], TeamCityObject):
                path_params['userLocator'] = params['user_locator'].locator_id
            else:
                path_params['userLocator'] = params['user_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/users/{userLocator}/properties', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Properties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_user_property_with_http_info(self, user_locator, name, **kwargs):  # noqa: E501
        """Get a property of the matching user.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_user_property_with_http_info(user_locator, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_locator: (required)
        :param str name: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_locator', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_property" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_locator' is set
        if ('user_locator' not in params or
                params['user_locator'] is None):
            raise ValueError("Missing the required parameter `user_locator` when calling `get_user_property`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_user_property`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_locator' in params:
            if isinstance(params['user_locator'], TeamCityObject):
                path_params['userLocator'] = params['user_locator'].locator_id
            else:
                path_params['userLocator'] = params['user_locator']  # noqa: E501
        if 'name' in params:
            if isinstance(params['name'], TeamCityObject):
                path_params['name'] = params['name'].locator_id
            else:
                path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/users/{userLocator}/properties/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_user_roles_at_scope_with_http_info(self, user_locator, role_id, scope, **kwargs):  # noqa: E501
        """Get a user role with the specific scope from the matching user.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_user_roles_at_scope_with_http_info(user_locator, role_id, scope, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_locator: (required)
        :param str role_id: (required)
        :param str scope: (required)
        :return: Role
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_locator', 'role_id', 'scope']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_roles_at_scope" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_locator' is set
        if ('user_locator' not in params or
                params['user_locator'] is None):
            raise ValueError("Missing the required parameter `user_locator` when calling `get_user_roles_at_scope`")  # noqa: E501
        # verify the required parameter 'role_id' is set
        if ('role_id' not in params or
                params['role_id'] is None):
            raise ValueError("Missing the required parameter `role_id` when calling `get_user_roles_at_scope`")  # noqa: E501
        # verify the required parameter 'scope' is set
        if ('scope' not in params or
                params['scope'] is None):
            raise ValueError("Missing the required parameter `scope` when calling `get_user_roles_at_scope`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_locator' in params:
            if isinstance(params['user_locator'], TeamCityObject):
                path_params['userLocator'] = params['user_locator'].locator_id
            else:
                path_params['userLocator'] = params['user_locator']  # noqa: E501
        if 'role_id' in params:
            if isinstance(params['role_id'], TeamCityObject):
                path_params['roleId'] = params['role_id'].locator_id
            else:
                path_params['roleId'] = params['role_id']  # noqa: E501
        if 'scope' in params:
            if isinstance(params['scope'], TeamCityObject):
                path_params['scope'] = params['scope'].locator_id
            else:
                path_params['scope'] = params['scope']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/users/{userLocator}/roles/{roleId}/{scope}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Role',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_user_tokens_with_http_info(self, user_locator, **kwargs):  # noqa: E501
        """Get all authentication tokens of the matching user.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_user_tokens_with_http_info(user_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_locator: (required)
        :param str fields:
        :return: Tokens
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_tokens" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_locator' is set
        if ('user_locator' not in params or
                params['user_locator'] is None):
            raise ValueError("Missing the required parameter `user_locator` when calling `get_user_tokens`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_locator' in params:
            if isinstance(params['user_locator'], TeamCityObject):
                path_params['userLocator'] = params['user_locator'].locator_id
            else:
                path_params['userLocator'] = params['user_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/users/{userLocator}/tokens', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Tokens',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __remove_user_from_group_with_http_info(self, user_locator, group_locator, **kwargs):  # noqa: E501
        """Remove the matching user from the specific group.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__remove_user_from_group_with_http_info(user_locator, group_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_locator: (required)
        :param str group_locator: (required)
        :param str fields:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_locator', 'group_locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_user_from_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_locator' is set
        if ('user_locator' not in params or
                params['user_locator'] is None):
            raise ValueError("Missing the required parameter `user_locator` when calling `remove_user_from_group`")  # noqa: E501
        # verify the required parameter 'group_locator' is set
        if ('group_locator' not in params or
                params['group_locator'] is None):
            raise ValueError("Missing the required parameter `group_locator` when calling `remove_user_from_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_locator' in params:
            if isinstance(params['user_locator'], TeamCityObject):
                path_params['userLocator'] = params['user_locator'].locator_id
            else:
                path_params['userLocator'] = params['user_locator']  # noqa: E501
        if 'group_locator' in params:
            if isinstance(params['group_locator'], TeamCityObject):
                path_params['groupLocator'] = params['group_locator'].locator_id
            else:
                path_params['groupLocator'] = params['group_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/users/{userLocator}/groups/{groupLocator}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __remove_user_property_with_http_info(self, user_locator, name, **kwargs):  # noqa: E501
        """Remove a property of the matching user.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__remove_user_property_with_http_info(user_locator, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_locator: (required)
        :param str name: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_locator', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_user_property" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_locator' is set
        if ('user_locator' not in params or
                params['user_locator'] is None):
            raise ValueError("Missing the required parameter `user_locator` when calling `remove_user_property`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `remove_user_property`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_locator' in params:
            if isinstance(params['user_locator'], TeamCityObject):
                path_params['userLocator'] = params['user_locator'].locator_id
            else:
                path_params['userLocator'] = params['user_locator']  # noqa: E501
        if 'name' in params:
            if isinstance(params['name'], TeamCityObject):
                path_params['name'] = params['name'].locator_id
            else:
                path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/users/{userLocator}/properties/{name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __remove_user_remember_me_with_http_info(self, user_locator, **kwargs):  # noqa: E501
        """Remove the RememberMe data of the matching user.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__remove_user_remember_me_with_http_info(user_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_locator: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_locator']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_user_remember_me" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_locator' is set
        if ('user_locator' not in params or
                params['user_locator'] is None):
            raise ValueError("Missing the required parameter `user_locator` when calling `remove_user_remember_me`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_locator' in params:
            if isinstance(params['user_locator'], TeamCityObject):
                path_params['userLocator'] = params['user_locator'].locator_id
            else:
                path_params['userLocator'] = params['user_locator']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/users/{userLocator}/debug/rememberMe', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __remove_user_role_at_scope_with_http_info(self, user_locator, role_id, scope, **kwargs):  # noqa: E501
        """Remove a role with the specific scope from the matching user.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__remove_user_role_at_scope_with_http_info(user_locator, role_id, scope, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_locator: (required)
        :param str role_id: (required)
        :param str scope: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_locator', 'role_id', 'scope']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_user_role_at_scope" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_locator' is set
        if ('user_locator' not in params or
                params['user_locator'] is None):
            raise ValueError("Missing the required parameter `user_locator` when calling `remove_user_role_at_scope`")  # noqa: E501
        # verify the required parameter 'role_id' is set
        if ('role_id' not in params or
                params['role_id'] is None):
            raise ValueError("Missing the required parameter `role_id` when calling `remove_user_role_at_scope`")  # noqa: E501
        # verify the required parameter 'scope' is set
        if ('scope' not in params or
                params['scope'] is None):
            raise ValueError("Missing the required parameter `scope` when calling `remove_user_role_at_scope`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_locator' in params:
            if isinstance(params['user_locator'], TeamCityObject):
                path_params['userLocator'] = params['user_locator'].locator_id
            else:
                path_params['userLocator'] = params['user_locator']  # noqa: E501
        if 'role_id' in params:
            if isinstance(params['role_id'], TeamCityObject):
                path_params['roleId'] = params['role_id'].locator_id
            else:
                path_params['roleId'] = params['role_id']  # noqa: E501
        if 'scope' in params:
            if isinstance(params['scope'], TeamCityObject):
                path_params['scope'] = params['scope'].locator_id
            else:
                path_params['scope'] = params['scope']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/users/{userLocator}/roles/{roleId}/{scope}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __replace_user_with_http_info(self, user_locator, **kwargs):  # noqa: E501
        """Update user matching the locator.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__replace_user_with_http_info(user_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_locator: (required)
        :param User body:
        :param str fields:
        :return: User
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_locator', 'body', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_locator' is set
        if ('user_locator' not in params or
                params['user_locator'] is None):
            raise ValueError("Missing the required parameter `user_locator` when calling `replace_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_locator' in params:
            if isinstance(params['user_locator'], TeamCityObject):
                path_params['userLocator'] = params['user_locator'].locator_id
            else:
                path_params['userLocator'] = params['user_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/users/{userLocator}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='User',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __set_user_field_with_http_info(self, user_locator, field, **kwargs):  # noqa: E501
        """Update a field of the matching user.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__set_user_field_with_http_info(user_locator, field, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_locator: (required)
        :param str field: (required)
        :param str body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_locator', 'field', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_user_field" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_locator' is set
        if ('user_locator' not in params or
                params['user_locator'] is None):
            raise ValueError("Missing the required parameter `user_locator` when calling `set_user_field`")  # noqa: E501
        # verify the required parameter 'field' is set
        if ('field' not in params or
                params['field'] is None):
            raise ValueError("Missing the required parameter `field` when calling `set_user_field`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_locator' in params:
            if isinstance(params['user_locator'], TeamCityObject):
                path_params['userLocator'] = params['user_locator'].locator_id
            else:
                path_params['userLocator'] = params['user_locator']  # noqa: E501
        if 'field' in params:
            if isinstance(params['field'], TeamCityObject):
                path_params['field'] = params['field'].locator_id
            else:
                path_params['field'] = params['field']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/users/{userLocator}/{field}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __set_user_groups_with_http_info(self, user_locator, **kwargs):  # noqa: E501
        """Update groups of the matching user.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__set_user_groups_with_http_info(user_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_locator: (required)
        :param Groups body:
        :param str fields:
        :return: Groups
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_locator', 'body', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_user_groups" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_locator' is set
        if ('user_locator' not in params or
                params['user_locator'] is None):
            raise ValueError("Missing the required parameter `user_locator` when calling `set_user_groups`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_locator' in params:
            if isinstance(params['user_locator'], TeamCityObject):
                path_params['userLocator'] = params['user_locator'].locator_id
            else:
                path_params['userLocator'] = params['user_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/users/{userLocator}/groups', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Groups',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __set_user_property_with_http_info(self, user_locator, name, **kwargs):  # noqa: E501
        """Update a property of the matching user.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__set_user_property_with_http_info(user_locator, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_locator: (required)
        :param str name: (required)
        :param str body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_locator', 'name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_user_property" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_locator' is set
        if ('user_locator' not in params or
                params['user_locator'] is None):
            raise ValueError("Missing the required parameter `user_locator` when calling `set_user_property`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `set_user_property`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_locator' in params:
            if isinstance(params['user_locator'], TeamCityObject):
                path_params['userLocator'] = params['user_locator'].locator_id
            else:
                path_params['userLocator'] = params['user_locator']  # noqa: E501
        if 'name' in params:
            if isinstance(params['name'], TeamCityObject):
                path_params['name'] = params['name'].locator_id
            else:
                path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/users/{userLocator}/properties/{name}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __set_user_roles_with_http_info(self, user_locator, **kwargs):  # noqa: E501
        """Update user roles of the matching user.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__set_user_roles_with_http_info(user_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_locator: (required)
        :param Roles body:
        :return: Roles
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_locator', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_user_roles" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_locator' is set
        if ('user_locator' not in params or
                params['user_locator'] is None):
            raise ValueError("Missing the required parameter `user_locator` when calling `set_user_roles`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_locator' in params:
            if isinstance(params['user_locator'], TeamCityObject):
                path_params['userLocator'] = params['user_locator'].locator_id
            else:
                path_params['userLocator'] = params['user_locator']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/users/{userLocator}/roles', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Roles',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
