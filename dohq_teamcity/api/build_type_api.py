# coding: utf-8

"""
    TeamCity REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2018.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import
from dohq_teamcity.custom.base_model import TeamCityObject

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from dohq_teamcity.models.agent_requirement import AgentRequirement  # noqa: F401,E501
from dohq_teamcity.models.agent_requirements import AgentRequirements  # noqa: F401,E501
from dohq_teamcity.models.artifact_dependencies import ArtifactDependencies  # noqa: F401,E501
from dohq_teamcity.models.artifact_dependency import ArtifactDependency  # noqa: F401,E501
from dohq_teamcity.models.branches import Branches  # noqa: F401,E501
from dohq_teamcity.models.build import Build  # noqa: F401,E501
from dohq_teamcity.models.build_type import BuildType  # noqa: F401,E501
from dohq_teamcity.models.build_types import BuildTypes  # noqa: F401,E501
from dohq_teamcity.models.builds import Builds  # noqa: F401,E501
from dohq_teamcity.models.feature import Feature  # noqa: F401,E501
from dohq_teamcity.models.features import Features  # noqa: F401,E501
from dohq_teamcity.models.file import File  # noqa: F401,E501
from dohq_teamcity.models.files import Files  # noqa: F401,E501
from dohq_teamcity.models.investigations import Investigations  # noqa: F401,E501
from dohq_teamcity.models.items import Items  # noqa: F401,E501
from dohq_teamcity.models.model_property import ModelProperty  # noqa: F401,E501
from dohq_teamcity.models.new_build_type_description import NewBuildTypeDescription  # noqa: F401,E501
from dohq_teamcity.models.properties import Properties  # noqa: F401,E501
from dohq_teamcity.models.snapshot_dependencies import SnapshotDependencies  # noqa: F401,E501
from dohq_teamcity.models.snapshot_dependency import SnapshotDependency  # noqa: F401,E501
from dohq_teamcity.models.step import Step  # noqa: F401,E501
from dohq_teamcity.models.steps import Steps  # noqa: F401,E501
from dohq_teamcity.models.tags import Tags  # noqa: F401,E501
from dohq_teamcity.models.trigger import Trigger  # noqa: F401,E501
from dohq_teamcity.models.triggers import Triggers  # noqa: F401,E501
from dohq_teamcity.models.type import Type  # noqa: F401,E501
from dohq_teamcity.models.vcs_labeling import VcsLabeling  # noqa: F401,E501
from dohq_teamcity.models.vcs_root_entries import VcsRootEntries  # noqa: F401,E501
from dohq_teamcity.models.vcs_root_entry import VcsRootEntry  # noqa: F401,E501
from dohq_teamcity.models.vcs_root_instances import VcsRootInstances  # noqa: F401,E501


class BuildTypeApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """
    base_name = 'BuildType'

    def __init__(self, api_client=None):
        self.api_client = api_client

    def add_agent_requirement(self, bt_locator, **kwargs):  # noqa: E501
        """add_agent_requirement  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_agent_requirement(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str fields:
        :param AgentRequirement body:
        :return: AgentRequirement
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__add_agent_requirement_with_http_info(bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__add_agent_requirement_with_http_info(bt_locator, **kwargs)  # noqa: E501
            return data

    def add_artifact_dep(self, bt_locator, **kwargs):  # noqa: E501
        """add_artifact_dep  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_artifact_dep(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str fields:
        :param ArtifactDependency body:
        :return: ArtifactDependency
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__add_artifact_dep_with_http_info(bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__add_artifact_dep_with_http_info(bt_locator, **kwargs)  # noqa: E501
            return data

    def add_build_type(self, **kwargs):  # noqa: E501
        """add_build_type  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_build_type(async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param BuildType body:
        :param str fields:
        :return: BuildType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__add_build_type_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.__add_build_type_with_http_info(**kwargs)  # noqa: E501
            return data

    def add_feature(self, bt_locator, **kwargs):  # noqa: E501
        """add_feature  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_feature(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str fields:
        :param Feature body:
        :return: Feature
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__add_feature_with_http_info(bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__add_feature_with_http_info(bt_locator, **kwargs)  # noqa: E501
            return data

    def add_feature_parameter(self, bt_locator, feature_id, parameter_name, **kwargs):  # noqa: E501
        """add_feature_parameter  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_feature_parameter(bt_locator, feature_id, parameter_name, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str feature_id: (required)
        :param str parameter_name: (required)
        :param str body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__add_feature_parameter_with_http_info(bt_locator, feature_id, parameter_name, **kwargs)  # noqa: E501
        else:
            (data) = self.__add_feature_parameter_with_http_info(bt_locator, feature_id, parameter_name, **kwargs)  # noqa: E501
            return data

    def add_snapshot_dep(self, bt_locator, **kwargs):  # noqa: E501
        """add_snapshot_dep  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_snapshot_dep(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str fields:
        :param SnapshotDependency body:
        :return: SnapshotDependency
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__add_snapshot_dep_with_http_info(bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__add_snapshot_dep_with_http_info(bt_locator, **kwargs)  # noqa: E501
            return data

    def add_step(self, bt_locator, **kwargs):  # noqa: E501
        """add_step  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_step(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str fields:
        :param Step body:
        :return: Step
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__add_step_with_http_info(bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__add_step_with_http_info(bt_locator, **kwargs)  # noqa: E501
            return data

    def add_step_parameter(self, bt_locator, step_id, parameter_name, **kwargs):  # noqa: E501
        """add_step_parameter  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_step_parameter(bt_locator, step_id, parameter_name, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str step_id: (required)
        :param str parameter_name: (required)
        :param str body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__add_step_parameter_with_http_info(bt_locator, step_id, parameter_name, **kwargs)  # noqa: E501
        else:
            (data) = self.__add_step_parameter_with_http_info(bt_locator, step_id, parameter_name, **kwargs)  # noqa: E501
            return data

    def add_template(self, bt_locator, **kwargs):  # noqa: E501
        """add_template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_template(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param BuildType body:
        :param bool optimize_settings:
        :param str fields:
        :return: BuildType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__add_template_with_http_info(bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__add_template_with_http_info(bt_locator, **kwargs)  # noqa: E501
            return data

    def add_trigger(self, bt_locator, **kwargs):  # noqa: E501
        """add_trigger  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_trigger(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str fields:
        :param Trigger body:
        :return: Trigger
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__add_trigger_with_http_info(bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__add_trigger_with_http_info(bt_locator, **kwargs)  # noqa: E501
            return data

    def add_vcs_root_entry(self, bt_locator, **kwargs):  # noqa: E501
        """add_vcs_root_entry  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_vcs_root_entry(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param VcsRootEntry body:
        :param str fields:
        :return: VcsRootEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__add_vcs_root_entry_with_http_info(bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__add_vcs_root_entry_with_http_info(bt_locator, **kwargs)  # noqa: E501
            return data

    def change_artifact_dep_setting(self, bt_locator, artifact_dep_locator, field_name, **kwargs):  # noqa: E501
        """change_artifact_dep_setting  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.change_artifact_dep_setting(bt_locator, artifact_dep_locator, field_name, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str artifact_dep_locator: (required)
        :param str field_name: (required)
        :param str body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__change_artifact_dep_setting_with_http_info(bt_locator, artifact_dep_locator, field_name, **kwargs)  # noqa: E501
        else:
            (data) = self.__change_artifact_dep_setting_with_http_info(bt_locator, artifact_dep_locator, field_name, **kwargs)  # noqa: E501
            return data

    def change_feature_setting(self, bt_locator, feature_id, name, **kwargs):  # noqa: E501
        """change_feature_setting  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.change_feature_setting(bt_locator, feature_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str feature_id: (required)
        :param str name: (required)
        :param str body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__change_feature_setting_with_http_info(bt_locator, feature_id, name, **kwargs)  # noqa: E501
        else:
            (data) = self.__change_feature_setting_with_http_info(bt_locator, feature_id, name, **kwargs)  # noqa: E501
            return data

    def change_requirement_setting(self, bt_locator, agent_requirement_locator, field_name, **kwargs):  # noqa: E501
        """change_requirement_setting  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.change_requirement_setting(bt_locator, agent_requirement_locator, field_name, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str agent_requirement_locator: (required)
        :param str field_name: (required)
        :param str body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__change_requirement_setting_with_http_info(bt_locator, agent_requirement_locator, field_name, **kwargs)  # noqa: E501
        else:
            (data) = self.__change_requirement_setting_with_http_info(bt_locator, agent_requirement_locator, field_name, **kwargs)  # noqa: E501
            return data

    def change_step_setting(self, bt_locator, step_id, field_name, **kwargs):  # noqa: E501
        """change_step_setting  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.change_step_setting(bt_locator, step_id, field_name, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str step_id: (required)
        :param str field_name: (required)
        :param str body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__change_step_setting_with_http_info(bt_locator, step_id, field_name, **kwargs)  # noqa: E501
        else:
            (data) = self.__change_step_setting_with_http_info(bt_locator, step_id, field_name, **kwargs)  # noqa: E501
            return data

    def change_trigger_setting(self, bt_locator, trigger_locator, field_name, **kwargs):  # noqa: E501
        """change_trigger_setting  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.change_trigger_setting(bt_locator, trigger_locator, field_name, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str trigger_locator: (required)
        :param str field_name: (required)
        :param str body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__change_trigger_setting_with_http_info(bt_locator, trigger_locator, field_name, **kwargs)  # noqa: E501
        else:
            (data) = self.__change_trigger_setting_with_http_info(bt_locator, trigger_locator, field_name, **kwargs)  # noqa: E501
            return data

    def delete_agent_requirement(self, bt_locator, agent_requirement_locator, **kwargs):  # noqa: E501
        """delete_agent_requirement  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_agent_requirement(bt_locator, agent_requirement_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str agent_requirement_locator: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__delete_agent_requirement_with_http_info(bt_locator, agent_requirement_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__delete_agent_requirement_with_http_info(bt_locator, agent_requirement_locator, **kwargs)  # noqa: E501
            return data

    def delete_all_parameters(self, bt_locator, **kwargs):  # noqa: E501
        """delete_all_parameters  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_all_parameters(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__delete_all_parameters_with_http_info(bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__delete_all_parameters_with_http_info(bt_locator, **kwargs)  # noqa: E501
            return data

    def delete_all_parameters_0(self, bt_locator, **kwargs):  # noqa: E501
        """delete_all_parameters_0  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_all_parameters_0(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__delete_all_parameters_0_with_http_info(bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__delete_all_parameters_0_with_http_info(bt_locator, **kwargs)  # noqa: E501
            return data

    def delete_artifact_dep(self, bt_locator, artifact_dep_locator, **kwargs):  # noqa: E501
        """delete_artifact_dep  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_artifact_dep(bt_locator, artifact_dep_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str artifact_dep_locator: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__delete_artifact_dep_with_http_info(bt_locator, artifact_dep_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__delete_artifact_dep_with_http_info(bt_locator, artifact_dep_locator, **kwargs)  # noqa: E501
            return data

    def delete_build_type(self, bt_locator, **kwargs):  # noqa: E501
        """delete_build_type  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_build_type(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__delete_build_type_with_http_info(bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__delete_build_type_with_http_info(bt_locator, **kwargs)  # noqa: E501
            return data

    def delete_feature(self, bt_locator, feature_id, **kwargs):  # noqa: E501
        """delete_feature  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_feature(bt_locator, feature_id, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str feature_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__delete_feature_with_http_info(bt_locator, feature_id, **kwargs)  # noqa: E501
        else:
            (data) = self.__delete_feature_with_http_info(bt_locator, feature_id, **kwargs)  # noqa: E501
            return data

    def delete_parameter(self, name, bt_locator, **kwargs):  # noqa: E501
        """delete_parameter  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_parameter(name, bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str name: (required)
        :param str bt_locator: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__delete_parameter_with_http_info(name, bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__delete_parameter_with_http_info(name, bt_locator, **kwargs)  # noqa: E501
            return data

    def delete_parameter_0(self, name, bt_locator, **kwargs):  # noqa: E501
        """delete_parameter_0  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_parameter_0(name, bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str name: (required)
        :param str bt_locator: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__delete_parameter_0_with_http_info(name, bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__delete_parameter_0_with_http_info(name, bt_locator, **kwargs)  # noqa: E501
            return data

    def delete_snapshot_dep(self, bt_locator, snapshot_dep_locator, **kwargs):  # noqa: E501
        """delete_snapshot_dep  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_snapshot_dep(bt_locator, snapshot_dep_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str snapshot_dep_locator: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__delete_snapshot_dep_with_http_info(bt_locator, snapshot_dep_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__delete_snapshot_dep_with_http_info(bt_locator, snapshot_dep_locator, **kwargs)  # noqa: E501
            return data

    def delete_step(self, bt_locator, step_id, **kwargs):  # noqa: E501
        """delete_step  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_step(bt_locator, step_id, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str step_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__delete_step_with_http_info(bt_locator, step_id, **kwargs)  # noqa: E501
        else:
            (data) = self.__delete_step_with_http_info(bt_locator, step_id, **kwargs)  # noqa: E501
            return data

    def delete_trigger(self, bt_locator, trigger_locator, **kwargs):  # noqa: E501
        """delete_trigger  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_trigger(bt_locator, trigger_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str trigger_locator: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__delete_trigger_with_http_info(bt_locator, trigger_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__delete_trigger_with_http_info(bt_locator, trigger_locator, **kwargs)  # noqa: E501
            return data

    def delete_vcs_root_entry(self, bt_locator, vcs_root_locator, **kwargs):  # noqa: E501
        """delete_vcs_root_entry  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_vcs_root_entry(bt_locator, vcs_root_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str vcs_root_locator: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__delete_vcs_root_entry_with_http_info(bt_locator, vcs_root_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__delete_vcs_root_entry_with_http_info(bt_locator, vcs_root_locator, **kwargs)  # noqa: E501
            return data

    def get_agent_requirement(self, bt_locator, agent_requirement_locator, **kwargs):  # noqa: E501
        """get_agent_requirement  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_agent_requirement(bt_locator, agent_requirement_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str agent_requirement_locator: (required)
        :param str fields:
        :return: AgentRequirement
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_agent_requirement_with_http_info(bt_locator, agent_requirement_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_agent_requirement_with_http_info(bt_locator, agent_requirement_locator, **kwargs)  # noqa: E501
            return data

    def get_agent_requirements(self, bt_locator, **kwargs):  # noqa: E501
        """get_agent_requirements  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_agent_requirements(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str fields:
        :return: AgentRequirements
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_agent_requirements_with_http_info(bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_agent_requirements_with_http_info(bt_locator, **kwargs)  # noqa: E501
            return data

    def get_aliases(self, bt_locator, field, **kwargs):  # noqa: E501
        """get_aliases  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_aliases(bt_locator, field, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str field: (required)
        :return: Items
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_aliases_with_http_info(bt_locator, field, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_aliases_with_http_info(bt_locator, field, **kwargs)  # noqa: E501
            return data

    def get_artifact_dep(self, bt_locator, artifact_dep_locator, **kwargs):  # noqa: E501
        """get_artifact_dep  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_artifact_dep(bt_locator, artifact_dep_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str artifact_dep_locator: (required)
        :param str fields:
        :return: ArtifactDependency
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_artifact_dep_with_http_info(bt_locator, artifact_dep_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_artifact_dep_with_http_info(bt_locator, artifact_dep_locator, **kwargs)  # noqa: E501
            return data

    def get_artifact_dep_setting(self, bt_locator, artifact_dep_locator, field_name, **kwargs):  # noqa: E501
        """get_artifact_dep_setting  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_artifact_dep_setting(bt_locator, artifact_dep_locator, field_name, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str artifact_dep_locator: (required)
        :param str field_name: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_artifact_dep_setting_with_http_info(bt_locator, artifact_dep_locator, field_name, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_artifact_dep_setting_with_http_info(bt_locator, artifact_dep_locator, field_name, **kwargs)  # noqa: E501
            return data

    def get_artifact_deps(self, bt_locator, **kwargs):  # noqa: E501
        """get_artifact_deps  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_artifact_deps(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str fields:
        :return: ArtifactDependencies
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_artifact_deps_with_http_info(bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_artifact_deps_with_http_info(bt_locator, **kwargs)  # noqa: E501
            return data

    def get_build_types(self, **kwargs):  # noqa: E501
        """get_build_types  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_build_types(async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str locator:
        :param str fields:
        :return: BuildTypes
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_build_types_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.__get_build_types_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_children(self, path, bt_locator, **kwargs):  # noqa: E501
        """get_children  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_children(path, bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str path: (required)
        :param str bt_locator: (required)
        :param str base_path:
        :param str locator:
        :param str fields:
        :param bool resolve_parameters:
        :return: Files
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_children_with_http_info(path, bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_children_with_http_info(path, bt_locator, **kwargs)  # noqa: E501
            return data

    def get_children_alias(self, path, bt_locator, **kwargs):  # noqa: E501
        """get_children_alias  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_children_alias(path, bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str path: (required)
        :param str bt_locator: (required)
        :param str base_path:
        :param str locator:
        :param str fields:
        :param bool resolve_parameters:
        :return: Files
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_children_alias_with_http_info(path, bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_children_alias_with_http_info(path, bt_locator, **kwargs)  # noqa: E501
            return data

    def get_content(self, path, bt_locator, **kwargs):  # noqa: E501
        """get_content  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_content(path, bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str path: (required)
        :param str bt_locator: (required)
        :param str response_builder:
        :param bool resolve_parameters:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_content_with_http_info(path, bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_content_with_http_info(path, bt_locator, **kwargs)  # noqa: E501
            return data

    def get_content_alias(self, path, bt_locator, **kwargs):  # noqa: E501
        """get_content_alias  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_content_alias(path, bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str path: (required)
        :param str bt_locator: (required)
        :param bool resolve_parameters:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_content_alias_with_http_info(path, bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_content_alias_with_http_info(path, bt_locator, **kwargs)  # noqa: E501
            return data

    def get_current_vcs_instances(self, bt_locator, **kwargs):  # noqa: E501
        """get_current_vcs_instances  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_current_vcs_instances(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str fields:
        :return: VcsRootInstances
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_current_vcs_instances_with_http_info(bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_current_vcs_instances_with_http_info(bt_locator, **kwargs)  # noqa: E501
            return data

    def get_current_vcs_instances_obsolete(self, bt_locator, **kwargs):  # noqa: E501
        """get_current_vcs_instances_obsolete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_current_vcs_instances_obsolete(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str fields:
        :return: VcsRootInstances
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_current_vcs_instances_obsolete_with_http_info(bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_current_vcs_instances_obsolete_with_http_info(bt_locator, **kwargs)  # noqa: E501
            return data

    def get_example_new_project_description(self, bt_locator, **kwargs):  # noqa: E501
        """get_example_new_project_description  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_example_new_project_description(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :return: NewBuildTypeDescription
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_example_new_project_description_with_http_info(bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_example_new_project_description_with_http_info(bt_locator, **kwargs)  # noqa: E501
            return data

    def get_example_new_project_description_compatibility_version1(self, bt_locator, **kwargs):  # noqa: E501
        """get_example_new_project_description_compatibility_version1  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_example_new_project_description_compatibility_version1(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :return: NewBuildTypeDescription
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_example_new_project_description_compatibility_version1_with_http_info(bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_example_new_project_description_compatibility_version1_with_http_info(bt_locator, **kwargs)  # noqa: E501
            return data

    def get_feature(self, bt_locator, feature_id, **kwargs):  # noqa: E501
        """get_feature  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_feature(bt_locator, feature_id, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str feature_id: (required)
        :param str fields:
        :return: Feature
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_feature_with_http_info(bt_locator, feature_id, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_feature_with_http_info(bt_locator, feature_id, **kwargs)  # noqa: E501
            return data

    def get_feature_parameter(self, bt_locator, feature_id, parameter_name, **kwargs):  # noqa: E501
        """get_feature_parameter  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_feature_parameter(bt_locator, feature_id, parameter_name, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str feature_id: (required)
        :param str parameter_name: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_feature_parameter_with_http_info(bt_locator, feature_id, parameter_name, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_feature_parameter_with_http_info(bt_locator, feature_id, parameter_name, **kwargs)  # noqa: E501
            return data

    def get_feature_parameters(self, bt_locator, feature_id, **kwargs):  # noqa: E501
        """get_feature_parameters  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_feature_parameters(bt_locator, feature_id, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str feature_id: (required)
        :param str fields:
        :return: Properties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_feature_parameters_with_http_info(bt_locator, feature_id, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_feature_parameters_with_http_info(bt_locator, feature_id, **kwargs)  # noqa: E501
            return data

    def get_feature_setting(self, bt_locator, feature_id, name, **kwargs):  # noqa: E501
        """get_feature_setting  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_feature_setting(bt_locator, feature_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str feature_id: (required)
        :param str name: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_feature_setting_with_http_info(bt_locator, feature_id, name, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_feature_setting_with_http_info(bt_locator, feature_id, name, **kwargs)  # noqa: E501
            return data

    def get_features(self, bt_locator, **kwargs):  # noqa: E501
        """get_features  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_features(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str fields:
        :return: Features
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_features_with_http_info(bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_features_with_http_info(bt_locator, **kwargs)  # noqa: E501
            return data

    def get_investigations(self, bt_locator, **kwargs):  # noqa: E501
        """get_investigations  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_investigations(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str fields:
        :return: Investigations
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_investigations_with_http_info(bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_investigations_with_http_info(bt_locator, **kwargs)  # noqa: E501
            return data

    def get_metadata(self, path, bt_locator, **kwargs):  # noqa: E501
        """get_metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_metadata(path, bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str path: (required)
        :param str bt_locator: (required)
        :param str fields:
        :param bool resolve_parameters:
        :return: File
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_metadata_with_http_info(path, bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_metadata_with_http_info(path, bt_locator, **kwargs)  # noqa: E501
            return data

    def get_parameter(self, name, bt_locator, **kwargs):  # noqa: E501
        """get_parameter  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_parameter(name, bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str name: (required)
        :param str bt_locator: (required)
        :param str fields:
        :return: ModelProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_parameter_with_http_info(name, bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_parameter_with_http_info(name, bt_locator, **kwargs)  # noqa: E501
            return data

    def get_parameter_0(self, name, bt_locator, **kwargs):  # noqa: E501
        """get_parameter_0  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_parameter_0(name, bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str name: (required)
        :param str bt_locator: (required)
        :param str fields:
        :return: ModelProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_parameter_0_with_http_info(name, bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_parameter_0_with_http_info(name, bt_locator, **kwargs)  # noqa: E501
            return data

    def get_parameter_type(self, name, bt_locator, **kwargs):  # noqa: E501
        """get_parameter_type  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_parameter_type(name, bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str name: (required)
        :param str bt_locator: (required)
        :return: Type
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_parameter_type_with_http_info(name, bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_parameter_type_with_http_info(name, bt_locator, **kwargs)  # noqa: E501
            return data

    def get_parameter_type_raw_value(self, name, bt_locator, **kwargs):  # noqa: E501
        """get_parameter_type_raw_value  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_parameter_type_raw_value(name, bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str name: (required)
        :param str bt_locator: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_parameter_type_raw_value_with_http_info(name, bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_parameter_type_raw_value_with_http_info(name, bt_locator, **kwargs)  # noqa: E501
            return data

    def get_parameter_value_long(self, name, bt_locator, **kwargs):  # noqa: E501
        """get_parameter_value_long  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_parameter_value_long(name, bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str name: (required)
        :param str bt_locator: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_parameter_value_long_with_http_info(name, bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_parameter_value_long_with_http_info(name, bt_locator, **kwargs)  # noqa: E501
            return data

    def get_parameter_value_long_0(self, name, bt_locator, **kwargs):  # noqa: E501
        """get_parameter_value_long_0  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_parameter_value_long_0(name, bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str name: (required)
        :param str bt_locator: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_parameter_value_long_0_with_http_info(name, bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_parameter_value_long_0_with_http_info(name, bt_locator, **kwargs)  # noqa: E501
            return data

    def get_parameters(self, bt_locator, **kwargs):  # noqa: E501
        """get_parameters  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_parameters(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str locator:
        :param str fields:
        :return: Properties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_parameters_with_http_info(bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_parameters_with_http_info(bt_locator, **kwargs)  # noqa: E501
            return data

    def get_parameters_0(self, bt_locator, **kwargs):  # noqa: E501
        """get_parameters_0  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_parameters_0(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str locator:
        :param str fields:
        :return: Properties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_parameters_0_with_http_info(bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_parameters_0_with_http_info(bt_locator, **kwargs)  # noqa: E501
            return data

    def get_requirement_setting(self, bt_locator, agent_requirement_locator, field_name, **kwargs):  # noqa: E501
        """get_requirement_setting  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_requirement_setting(bt_locator, agent_requirement_locator, field_name, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str agent_requirement_locator: (required)
        :param str field_name: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_requirement_setting_with_http_info(bt_locator, agent_requirement_locator, field_name, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_requirement_setting_with_http_info(bt_locator, agent_requirement_locator, field_name, **kwargs)  # noqa: E501
            return data

    def get_root(self, bt_locator, **kwargs):  # noqa: E501
        """get_root  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_root(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str base_path:
        :param str locator:
        :param str fields:
        :param bool resolve_parameters:
        :return: Files
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_root_with_http_info(bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_root_with_http_info(bt_locator, **kwargs)  # noqa: E501
            return data

    def get_settings_file(self, bt_locator, **kwargs):  # noqa: E501
        """get_settings_file  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_settings_file(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_settings_file_with_http_info(bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_settings_file_with_http_info(bt_locator, **kwargs)  # noqa: E501
            return data

    def get_snapshot_dep(self, bt_locator, snapshot_dep_locator, **kwargs):  # noqa: E501
        """get_snapshot_dep  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_snapshot_dep(bt_locator, snapshot_dep_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str snapshot_dep_locator: (required)
        :param str fields:
        :return: SnapshotDependency
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_snapshot_dep_with_http_info(bt_locator, snapshot_dep_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_snapshot_dep_with_http_info(bt_locator, snapshot_dep_locator, **kwargs)  # noqa: E501
            return data

    def get_snapshot_deps(self, bt_locator, **kwargs):  # noqa: E501
        """get_snapshot_deps  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_snapshot_deps(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str fields:
        :return: SnapshotDependencies
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_snapshot_deps_with_http_info(bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_snapshot_deps_with_http_info(bt_locator, **kwargs)  # noqa: E501
            return data

    def get_step(self, bt_locator, step_id, **kwargs):  # noqa: E501
        """get_step  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_step(bt_locator, step_id, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str step_id: (required)
        :param str fields:
        :return: Step
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_step_with_http_info(bt_locator, step_id, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_step_with_http_info(bt_locator, step_id, **kwargs)  # noqa: E501
            return data

    def get_step_parameter(self, bt_locator, step_id, parameter_name, **kwargs):  # noqa: E501
        """get_step_parameter  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_step_parameter(bt_locator, step_id, parameter_name, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str step_id: (required)
        :param str parameter_name: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_step_parameter_with_http_info(bt_locator, step_id, parameter_name, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_step_parameter_with_http_info(bt_locator, step_id, parameter_name, **kwargs)  # noqa: E501
            return data

    def get_step_parameters(self, bt_locator, step_id, **kwargs):  # noqa: E501
        """get_step_parameters  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_step_parameters(bt_locator, step_id, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str step_id: (required)
        :param str fields:
        :return: Properties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_step_parameters_with_http_info(bt_locator, step_id, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_step_parameters_with_http_info(bt_locator, step_id, **kwargs)  # noqa: E501
            return data

    def get_step_setting(self, bt_locator, step_id, field_name, **kwargs):  # noqa: E501
        """get_step_setting  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_step_setting(bt_locator, step_id, field_name, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str step_id: (required)
        :param str field_name: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_step_setting_with_http_info(bt_locator, step_id, field_name, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_step_setting_with_http_info(bt_locator, step_id, field_name, **kwargs)  # noqa: E501
            return data

    def get_steps(self, bt_locator, **kwargs):  # noqa: E501
        """get_steps  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_steps(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str fields:
        :return: Steps
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_steps_with_http_info(bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_steps_with_http_info(bt_locator, **kwargs)  # noqa: E501
            return data

    def get_template(self, bt_locator, template_locator, **kwargs):  # noqa: E501
        """get_template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_template(bt_locator, template_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str template_locator: (required)
        :param str fields:
        :return: BuildType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_template_with_http_info(bt_locator, template_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_template_with_http_info(bt_locator, template_locator, **kwargs)  # noqa: E501
            return data

    def get_templates(self, bt_locator, **kwargs):  # noqa: E501
        """get_templates  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_templates(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str fields:
        :return: BuildTypes
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_templates_with_http_info(bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_templates_with_http_info(bt_locator, **kwargs)  # noqa: E501
            return data

    def get_trigger(self, bt_locator, trigger_locator, **kwargs):  # noqa: E501
        """get_trigger  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_trigger(bt_locator, trigger_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str trigger_locator: (required)
        :param str fields:
        :return: Trigger
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_trigger_with_http_info(bt_locator, trigger_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_trigger_with_http_info(bt_locator, trigger_locator, **kwargs)  # noqa: E501
            return data

    def get_trigger_setting(self, bt_locator, trigger_locator, field_name, **kwargs):  # noqa: E501
        """get_trigger_setting  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_trigger_setting(bt_locator, trigger_locator, field_name, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str trigger_locator: (required)
        :param str field_name: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_trigger_setting_with_http_info(bt_locator, trigger_locator, field_name, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_trigger_setting_with_http_info(bt_locator, trigger_locator, field_name, **kwargs)  # noqa: E501
            return data

    def get_triggers(self, bt_locator, **kwargs):  # noqa: E501
        """get_triggers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_triggers(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str fields:
        :return: Triggers
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_triggers_with_http_info(bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_triggers_with_http_info(bt_locator, **kwargs)  # noqa: E501
            return data

    def get_vcs_labeling_options(self, bt_locator, **kwargs):  # noqa: E501
        """get_vcs_labeling_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vcs_labeling_options(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :return: VcsLabeling
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_vcs_labeling_options_with_http_info(bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_vcs_labeling_options_with_http_info(bt_locator, **kwargs)  # noqa: E501
            return data

    def get_vcs_root_entries(self, bt_locator, **kwargs):  # noqa: E501
        """get_vcs_root_entries  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vcs_root_entries(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str fields:
        :return: VcsRootEntries
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_vcs_root_entries_with_http_info(bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_vcs_root_entries_with_http_info(bt_locator, **kwargs)  # noqa: E501
            return data

    def get_vcs_root_entry(self, bt_locator, vcs_root_locator, **kwargs):  # noqa: E501
        """get_vcs_root_entry  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vcs_root_entry(bt_locator, vcs_root_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str vcs_root_locator: (required)
        :param str fields:
        :return: VcsRootEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_vcs_root_entry_with_http_info(bt_locator, vcs_root_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_vcs_root_entry_with_http_info(bt_locator, vcs_root_locator, **kwargs)  # noqa: E501
            return data

    def get_vcs_root_entry_checkout_rules(self, bt_locator, vcs_root_locator, **kwargs):  # noqa: E501
        """get_vcs_root_entry_checkout_rules  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vcs_root_entry_checkout_rules(bt_locator, vcs_root_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str vcs_root_locator: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_vcs_root_entry_checkout_rules_with_http_info(bt_locator, vcs_root_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_vcs_root_entry_checkout_rules_with_http_info(bt_locator, vcs_root_locator, **kwargs)  # noqa: E501
            return data

    def get_zipped(self, path, bt_locator, **kwargs):  # noqa: E501
        """get_zipped  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_zipped(path, bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str path: (required)
        :param str bt_locator: (required)
        :param str base_path:
        :param str locator:
        :param str name:
        :param bool resolve_parameters:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_zipped_with_http_info(path, bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_zipped_with_http_info(path, bt_locator, **kwargs)  # noqa: E501
            return data

    def remove_all_templates(self, bt_locator, **kwargs):  # noqa: E501
        """remove_all_templates  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_all_templates(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param bool inline_settings:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__remove_all_templates_with_http_info(bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__remove_all_templates_with_http_info(bt_locator, **kwargs)  # noqa: E501
            return data

    def remove_template(self, bt_locator, template_locator, **kwargs):  # noqa: E501
        """remove_template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_template(bt_locator, template_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str template_locator: (required)
        :param bool inline_settings:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__remove_template_with_http_info(bt_locator, template_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__remove_template_with_http_info(bt_locator, template_locator, **kwargs)  # noqa: E501
            return data

    def replace_agent_requirement(self, bt_locator, agent_requirement_locator, **kwargs):  # noqa: E501
        """replace_agent_requirement  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_agent_requirement(bt_locator, agent_requirement_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str agent_requirement_locator: (required)
        :param str fields:
        :param AgentRequirement body:
        :return: AgentRequirement
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__replace_agent_requirement_with_http_info(bt_locator, agent_requirement_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__replace_agent_requirement_with_http_info(bt_locator, agent_requirement_locator, **kwargs)  # noqa: E501
            return data

    def replace_agent_requirements(self, bt_locator, **kwargs):  # noqa: E501
        """replace_agent_requirements  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_agent_requirements(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str fields:
        :param AgentRequirements body:
        :return: AgentRequirements
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__replace_agent_requirements_with_http_info(bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__replace_agent_requirements_with_http_info(bt_locator, **kwargs)  # noqa: E501
            return data

    def replace_artifact_dep(self, bt_locator, artifact_dep_locator, **kwargs):  # noqa: E501
        """replace_artifact_dep  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_artifact_dep(bt_locator, artifact_dep_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str artifact_dep_locator: (required)
        :param str fields:
        :param ArtifactDependency body:
        :return: ArtifactDependency
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__replace_artifact_dep_with_http_info(bt_locator, artifact_dep_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__replace_artifact_dep_with_http_info(bt_locator, artifact_dep_locator, **kwargs)  # noqa: E501
            return data

    def replace_artifact_deps(self, bt_locator, **kwargs):  # noqa: E501
        """replace_artifact_deps  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_artifact_deps(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str fields:
        :param ArtifactDependencies body:
        :return: ArtifactDependencies
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__replace_artifact_deps_with_http_info(bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__replace_artifact_deps_with_http_info(bt_locator, **kwargs)  # noqa: E501
            return data

    def replace_feature(self, bt_locator, feature_id, **kwargs):  # noqa: E501
        """replace_feature  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_feature(bt_locator, feature_id, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str feature_id: (required)
        :param str fields:
        :param Feature body:
        :return: Feature
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__replace_feature_with_http_info(bt_locator, feature_id, **kwargs)  # noqa: E501
        else:
            (data) = self.__replace_feature_with_http_info(bt_locator, feature_id, **kwargs)  # noqa: E501
            return data

    def replace_feature_parameters(self, bt_locator, feature_id, **kwargs):  # noqa: E501
        """replace_feature_parameters  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_feature_parameters(bt_locator, feature_id, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str feature_id: (required)
        :param Properties body:
        :param str fields:
        :return: Properties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__replace_feature_parameters_with_http_info(bt_locator, feature_id, **kwargs)  # noqa: E501
        else:
            (data) = self.__replace_feature_parameters_with_http_info(bt_locator, feature_id, **kwargs)  # noqa: E501
            return data

    def replace_features(self, bt_locator, **kwargs):  # noqa: E501
        """replace_features  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_features(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str fields:
        :param Features body:
        :return: Features
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__replace_features_with_http_info(bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__replace_features_with_http_info(bt_locator, **kwargs)  # noqa: E501
            return data

    def replace_snapshot_dep(self, bt_locator, snapshot_dep_locator, **kwargs):  # noqa: E501
        """replace_snapshot_dep  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_snapshot_dep(bt_locator, snapshot_dep_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str snapshot_dep_locator: (required)
        :param str fields:
        :param SnapshotDependency body:
        :return: SnapshotDependency
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__replace_snapshot_dep_with_http_info(bt_locator, snapshot_dep_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__replace_snapshot_dep_with_http_info(bt_locator, snapshot_dep_locator, **kwargs)  # noqa: E501
            return data

    def replace_snapshot_deps(self, bt_locator, **kwargs):  # noqa: E501
        """replace_snapshot_deps  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_snapshot_deps(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str fields:
        :param SnapshotDependencies body:
        :return: SnapshotDependencies
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__replace_snapshot_deps_with_http_info(bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__replace_snapshot_deps_with_http_info(bt_locator, **kwargs)  # noqa: E501
            return data

    def replace_step(self, bt_locator, step_id, **kwargs):  # noqa: E501
        """replace_step  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_step(bt_locator, step_id, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str step_id: (required)
        :param str fields:
        :param Step body:
        :return: Step
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__replace_step_with_http_info(bt_locator, step_id, **kwargs)  # noqa: E501
        else:
            (data) = self.__replace_step_with_http_info(bt_locator, step_id, **kwargs)  # noqa: E501
            return data

    def replace_step_parameters(self, bt_locator, step_id, **kwargs):  # noqa: E501
        """replace_step_parameters  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_step_parameters(bt_locator, step_id, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str step_id: (required)
        :param Properties body:
        :param str fields:
        :return: Properties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__replace_step_parameters_with_http_info(bt_locator, step_id, **kwargs)  # noqa: E501
        else:
            (data) = self.__replace_step_parameters_with_http_info(bt_locator, step_id, **kwargs)  # noqa: E501
            return data

    def replace_steps(self, bt_locator, **kwargs):  # noqa: E501
        """replace_steps  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_steps(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str fields:
        :param Steps body:
        :return: Steps
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__replace_steps_with_http_info(bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__replace_steps_with_http_info(bt_locator, **kwargs)  # noqa: E501
            return data

    def replace_trigger(self, bt_locator, trigger_locator, **kwargs):  # noqa: E501
        """replace_trigger  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_trigger(bt_locator, trigger_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str trigger_locator: (required)
        :param str fields:
        :param Trigger body:
        :return: Trigger
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__replace_trigger_with_http_info(bt_locator, trigger_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__replace_trigger_with_http_info(bt_locator, trigger_locator, **kwargs)  # noqa: E501
            return data

    def replace_triggers(self, bt_locator, **kwargs):  # noqa: E501
        """replace_triggers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_triggers(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str fields:
        :param Triggers body:
        :return: Triggers
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__replace_triggers_with_http_info(bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__replace_triggers_with_http_info(bt_locator, **kwargs)  # noqa: E501
            return data

    def replace_vcs_root_entries(self, bt_locator, **kwargs):  # noqa: E501
        """replace_vcs_root_entries  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_vcs_root_entries(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param VcsRootEntries body:
        :param str fields:
        :return: VcsRootEntries
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__replace_vcs_root_entries_with_http_info(bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__replace_vcs_root_entries_with_http_info(bt_locator, **kwargs)  # noqa: E501
            return data

    def serve_branches(self, bt_locator, **kwargs):  # noqa: E501
        """serve_branches  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.serve_branches(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str locator:
        :param str fields:
        :return: Branches
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__serve_branches_with_http_info(bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__serve_branches_with_http_info(bt_locator, **kwargs)  # noqa: E501
            return data

    def serve_build_field(self, bt_locator, build_locator, field, **kwargs):  # noqa: E501
        """serve_build_field  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.serve_build_field(bt_locator, build_locator, field, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str build_locator: (required)
        :param str field: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__serve_build_field_with_http_info(bt_locator, build_locator, field, **kwargs)  # noqa: E501
        else:
            (data) = self.__serve_build_field_with_http_info(bt_locator, build_locator, field, **kwargs)  # noqa: E501
            return data

    def serve_build_type_builds_tags(self, bt_locator, field, **kwargs):  # noqa: E501
        """serve_build_type_builds_tags  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.serve_build_type_builds_tags(bt_locator, field, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str field: (required)
        :return: Tags
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__serve_build_type_builds_tags_with_http_info(bt_locator, field, **kwargs)  # noqa: E501
        else:
            (data) = self.__serve_build_type_builds_tags_with_http_info(bt_locator, field, **kwargs)  # noqa: E501
            return data

    def serve_build_type_field(self, bt_locator, field, **kwargs):  # noqa: E501
        """serve_build_type_field  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.serve_build_type_field(bt_locator, field, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str field: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__serve_build_type_field_with_http_info(bt_locator, field, **kwargs)  # noqa: E501
        else:
            (data) = self.__serve_build_type_field_with_http_info(bt_locator, field, **kwargs)  # noqa: E501
            return data

    def serve_build_type_xml(self, bt_locator, **kwargs):  # noqa: E501
        """serve_build_type_xml  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.serve_build_type_xml(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str fields:
        :return: BuildType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__serve_build_type_xml_with_http_info(bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__serve_build_type_xml_with_http_info(bt_locator, **kwargs)  # noqa: E501
            return data

    def serve_build_with_project(self, bt_locator, build_locator, **kwargs):  # noqa: E501
        """serve_build_with_project  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.serve_build_with_project(bt_locator, build_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str build_locator: (required)
        :param str fields:
        :return: Build
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__serve_build_with_project_with_http_info(bt_locator, build_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__serve_build_with_project_with_http_info(bt_locator, build_locator, **kwargs)  # noqa: E501
            return data

    def serve_builds(self, bt_locator, **kwargs):  # noqa: E501
        """serve_builds  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.serve_builds(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str status:
        :param str triggered_by_user:
        :param bool include_personal:
        :param bool include_canceled:
        :param bool only_pinned:
        :param list[str] tag:
        :param str agent_name:
        :param str since_build:
        :param str since_date:
        :param int start:
        :param int count:
        :param str locator:
        :param str fields:
        :return: Builds
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__serve_builds_with_http_info(bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__serve_builds_with_http_info(bt_locator, **kwargs)  # noqa: E501
            return data

    def set_build_type_field(self, bt_locator, field, **kwargs):  # noqa: E501
        """set_build_type_field  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_build_type_field(bt_locator, field, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str field: (required)
        :param str body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__set_build_type_field_with_http_info(bt_locator, field, **kwargs)  # noqa: E501
        else:
            (data) = self.__set_build_type_field_with_http_info(bt_locator, field, **kwargs)  # noqa: E501
            return data

    def set_parameter(self, bt_locator, **kwargs):  # noqa: E501
        """set_parameter  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_parameter(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param ModelProperty body:
        :param str fields:
        :return: ModelProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__set_parameter_with_http_info(bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__set_parameter_with_http_info(bt_locator, **kwargs)  # noqa: E501
            return data

    def set_parameter_0(self, name, bt_locator, **kwargs):  # noqa: E501
        """set_parameter_0  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_parameter_0(name, bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str name: (required)
        :param str bt_locator: (required)
        :param ModelProperty body:
        :param str fields:
        :return: ModelProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__set_parameter_0_with_http_info(name, bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__set_parameter_0_with_http_info(name, bt_locator, **kwargs)  # noqa: E501
            return data

    def set_parameter_1(self, bt_locator, **kwargs):  # noqa: E501
        """set_parameter_1  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_parameter_1(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param ModelProperty body:
        :param str fields:
        :return: ModelProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__set_parameter_1_with_http_info(bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__set_parameter_1_with_http_info(bt_locator, **kwargs)  # noqa: E501
            return data

    def set_parameter_2(self, name, bt_locator, **kwargs):  # noqa: E501
        """set_parameter_2  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_parameter_2(name, bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str name: (required)
        :param str bt_locator: (required)
        :param ModelProperty body:
        :param str fields:
        :return: ModelProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__set_parameter_2_with_http_info(name, bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__set_parameter_2_with_http_info(name, bt_locator, **kwargs)  # noqa: E501
            return data

    def set_parameter_type(self, name, bt_locator, **kwargs):  # noqa: E501
        """set_parameter_type  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_parameter_type(name, bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str name: (required)
        :param str bt_locator: (required)
        :param Type body:
        :return: Type
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__set_parameter_type_with_http_info(name, bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__set_parameter_type_with_http_info(name, bt_locator, **kwargs)  # noqa: E501
            return data

    def set_parameter_type_raw_value(self, name, bt_locator, **kwargs):  # noqa: E501
        """set_parameter_type_raw_value  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_parameter_type_raw_value(name, bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str name: (required)
        :param str bt_locator: (required)
        :param str body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__set_parameter_type_raw_value_with_http_info(name, bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__set_parameter_type_raw_value_with_http_info(name, bt_locator, **kwargs)  # noqa: E501
            return data

    def set_parameter_value_long(self, name, bt_locator, **kwargs):  # noqa: E501
        """set_parameter_value_long  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_parameter_value_long(name, bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str name: (required)
        :param str bt_locator: (required)
        :param str body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__set_parameter_value_long_with_http_info(name, bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__set_parameter_value_long_with_http_info(name, bt_locator, **kwargs)  # noqa: E501
            return data

    def set_parameter_value_long_0(self, name, bt_locator, **kwargs):  # noqa: E501
        """set_parameter_value_long_0  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_parameter_value_long_0(name, bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str name: (required)
        :param str bt_locator: (required)
        :param str body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__set_parameter_value_long_0_with_http_info(name, bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__set_parameter_value_long_0_with_http_info(name, bt_locator, **kwargs)  # noqa: E501
            return data

    def set_parameters(self, bt_locator, **kwargs):  # noqa: E501
        """set_parameters  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_parameters(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param Properties body:
        :param str fields:
        :return: Properties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__set_parameters_with_http_info(bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__set_parameters_with_http_info(bt_locator, **kwargs)  # noqa: E501
            return data

    def set_parameters_0(self, bt_locator, **kwargs):  # noqa: E501
        """set_parameters_0  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_parameters_0(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param Properties body:
        :param str fields:
        :return: Properties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__set_parameters_0_with_http_info(bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__set_parameters_0_with_http_info(bt_locator, **kwargs)  # noqa: E501
            return data

    def set_templates(self, bt_locator, **kwargs):  # noqa: E501
        """set_templates  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_templates(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param BuildTypes body:
        :param bool optimize_settings:
        :param str fields:
        :return: BuildTypes
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__set_templates_with_http_info(bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__set_templates_with_http_info(bt_locator, **kwargs)  # noqa: E501
            return data

    def set_vcs_labeling_options(self, bt_locator, **kwargs):  # noqa: E501
        """set_vcs_labeling_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_vcs_labeling_options(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param VcsLabeling body:
        :return: VcsLabeling
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__set_vcs_labeling_options_with_http_info(bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__set_vcs_labeling_options_with_http_info(bt_locator, **kwargs)  # noqa: E501
            return data

    def update_vcs_root_entry(self, bt_locator, vcs_root_locator, **kwargs):  # noqa: E501
        """update_vcs_root_entry  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_vcs_root_entry(bt_locator, vcs_root_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str vcs_root_locator: (required)
        :param VcsRootEntry body:
        :param str fields:
        :return: VcsRootEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__update_vcs_root_entry_with_http_info(bt_locator, vcs_root_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__update_vcs_root_entry_with_http_info(bt_locator, vcs_root_locator, **kwargs)  # noqa: E501
            return data

    def update_vcs_root_entry_checkout_rules(self, bt_locator, vcs_root_locator, **kwargs):  # noqa: E501
        """update_vcs_root_entry_checkout_rules  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_vcs_root_entry_checkout_rules(bt_locator, vcs_root_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str vcs_root_locator: (required)
        :param str body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__update_vcs_root_entry_checkout_rules_with_http_info(bt_locator, vcs_root_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__update_vcs_root_entry_checkout_rules_with_http_info(bt_locator, vcs_root_locator, **kwargs)  # noqa: E501
            return data

    def __add_agent_requirement_with_http_info(self, bt_locator, **kwargs):  # noqa: E501
        """add_agent_requirement  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__add_agent_requirement_with_http_info(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str fields:
        :param AgentRequirement body:
        :return: AgentRequirement
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'fields', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_agent_requirement" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `add_agent_requirement`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/agent-requirements', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AgentRequirement',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __add_artifact_dep_with_http_info(self, bt_locator, **kwargs):  # noqa: E501
        """add_artifact_dep  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__add_artifact_dep_with_http_info(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str fields:
        :param ArtifactDependency body:
        :return: ArtifactDependency
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'fields', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_artifact_dep" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `add_artifact_dep`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/artifact-dependencies', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ArtifactDependency',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __add_build_type_with_http_info(self, **kwargs):  # noqa: E501
        """add_build_type  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__add_build_type_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BuildType body:
        :param str fields:
        :return: BuildType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_build_type" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BuildType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __add_feature_with_http_info(self, bt_locator, **kwargs):  # noqa: E501
        """add_feature  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__add_feature_with_http_info(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str fields:
        :param Feature body:
        :return: Feature
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'fields', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_feature" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `add_feature`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/features', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Feature',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __add_feature_parameter_with_http_info(self, bt_locator, feature_id, parameter_name, **kwargs):  # noqa: E501
        """add_feature_parameter  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__add_feature_parameter_with_http_info(bt_locator, feature_id, parameter_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str feature_id: (required)
        :param str parameter_name: (required)
        :param str body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'feature_id', 'parameter_name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_feature_parameter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `add_feature_parameter`")  # noqa: E501
        # verify the required parameter 'feature_id' is set
        if ('feature_id' not in params or
                params['feature_id'] is None):
            raise ValueError("Missing the required parameter `feature_id` when calling `add_feature_parameter`")  # noqa: E501
        # verify the required parameter 'parameter_name' is set
        if ('parameter_name' not in params or
                params['parameter_name'] is None):
            raise ValueError("Missing the required parameter `parameter_name` when calling `add_feature_parameter`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501
        if 'feature_id' in params:
            if isinstance(params['feature_id'], TeamCityObject):
                path_params['featureId'] = params['feature_id'].locator_id
            else:
                path_params['featureId'] = params['feature_id']  # noqa: E501
        if 'parameter_name' in params:
            if isinstance(params['parameter_name'], TeamCityObject):
                path_params['parameterName'] = params['parameter_name'].locator_id
            else:
                path_params['parameterName'] = params['parameter_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/features/{featureId}/parameters/{parameterName}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __add_snapshot_dep_with_http_info(self, bt_locator, **kwargs):  # noqa: E501
        """add_snapshot_dep  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__add_snapshot_dep_with_http_info(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str fields:
        :param SnapshotDependency body:
        :return: SnapshotDependency
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'fields', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_snapshot_dep" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `add_snapshot_dep`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/snapshot-dependencies', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SnapshotDependency',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __add_step_with_http_info(self, bt_locator, **kwargs):  # noqa: E501
        """add_step  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__add_step_with_http_info(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str fields:
        :param Step body:
        :return: Step
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'fields', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_step" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `add_step`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/steps', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Step',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __add_step_parameter_with_http_info(self, bt_locator, step_id, parameter_name, **kwargs):  # noqa: E501
        """add_step_parameter  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__add_step_parameter_with_http_info(bt_locator, step_id, parameter_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str step_id: (required)
        :param str parameter_name: (required)
        :param str body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'step_id', 'parameter_name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_step_parameter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `add_step_parameter`")  # noqa: E501
        # verify the required parameter 'step_id' is set
        if ('step_id' not in params or
                params['step_id'] is None):
            raise ValueError("Missing the required parameter `step_id` when calling `add_step_parameter`")  # noqa: E501
        # verify the required parameter 'parameter_name' is set
        if ('parameter_name' not in params or
                params['parameter_name'] is None):
            raise ValueError("Missing the required parameter `parameter_name` when calling `add_step_parameter`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501
        if 'step_id' in params:
            if isinstance(params['step_id'], TeamCityObject):
                path_params['stepId'] = params['step_id'].locator_id
            else:
                path_params['stepId'] = params['step_id']  # noqa: E501
        if 'parameter_name' in params:
            if isinstance(params['parameter_name'], TeamCityObject):
                path_params['parameterName'] = params['parameter_name'].locator_id
            else:
                path_params['parameterName'] = params['parameter_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/steps/{stepId}/parameters/{parameterName}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __add_template_with_http_info(self, bt_locator, **kwargs):  # noqa: E501
        """add_template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__add_template_with_http_info(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param BuildType body:
        :param bool optimize_settings:
        :param str fields:
        :return: BuildType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'body', 'optimize_settings', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_template" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `add_template`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []
        if 'optimize_settings' in params:
            query_params.append(('optimizeSettings', params['optimize_settings']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/templates', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BuildType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __add_trigger_with_http_info(self, bt_locator, **kwargs):  # noqa: E501
        """add_trigger  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__add_trigger_with_http_info(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str fields:
        :param Trigger body:
        :return: Trigger
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'fields', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_trigger" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `add_trigger`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/triggers', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Trigger',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __add_vcs_root_entry_with_http_info(self, bt_locator, **kwargs):  # noqa: E501
        """add_vcs_root_entry  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__add_vcs_root_entry_with_http_info(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param VcsRootEntry body:
        :param str fields:
        :return: VcsRootEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'body', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_vcs_root_entry" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `add_vcs_root_entry`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/vcs-root-entries', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VcsRootEntry',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __change_artifact_dep_setting_with_http_info(self, bt_locator, artifact_dep_locator, field_name, **kwargs):  # noqa: E501
        """change_artifact_dep_setting  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__change_artifact_dep_setting_with_http_info(bt_locator, artifact_dep_locator, field_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str artifact_dep_locator: (required)
        :param str field_name: (required)
        :param str body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'artifact_dep_locator', 'field_name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method change_artifact_dep_setting" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `change_artifact_dep_setting`")  # noqa: E501
        # verify the required parameter 'artifact_dep_locator' is set
        if ('artifact_dep_locator' not in params or
                params['artifact_dep_locator'] is None):
            raise ValueError("Missing the required parameter `artifact_dep_locator` when calling `change_artifact_dep_setting`")  # noqa: E501
        # verify the required parameter 'field_name' is set
        if ('field_name' not in params or
                params['field_name'] is None):
            raise ValueError("Missing the required parameter `field_name` when calling `change_artifact_dep_setting`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501
        if 'artifact_dep_locator' in params:
            if isinstance(params['artifact_dep_locator'], TeamCityObject):
                path_params['artifactDepLocator'] = params['artifact_dep_locator'].locator_id
            else:
                path_params['artifactDepLocator'] = params['artifact_dep_locator']  # noqa: E501
        if 'field_name' in params:
            if isinstance(params['field_name'], TeamCityObject):
                path_params['fieldName'] = params['field_name'].locator_id
            else:
                path_params['fieldName'] = params['field_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/artifact-dependencies/{artifactDepLocator}/{fieldName}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __change_feature_setting_with_http_info(self, bt_locator, feature_id, name, **kwargs):  # noqa: E501
        """change_feature_setting  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__change_feature_setting_with_http_info(bt_locator, feature_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str feature_id: (required)
        :param str name: (required)
        :param str body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'feature_id', 'name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method change_feature_setting" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `change_feature_setting`")  # noqa: E501
        # verify the required parameter 'feature_id' is set
        if ('feature_id' not in params or
                params['feature_id'] is None):
            raise ValueError("Missing the required parameter `feature_id` when calling `change_feature_setting`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `change_feature_setting`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501
        if 'feature_id' in params:
            if isinstance(params['feature_id'], TeamCityObject):
                path_params['featureId'] = params['feature_id'].locator_id
            else:
                path_params['featureId'] = params['feature_id']  # noqa: E501
        if 'name' in params:
            if isinstance(params['name'], TeamCityObject):
                path_params['name'] = params['name'].locator_id
            else:
                path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/features/{featureId}/{name}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __change_requirement_setting_with_http_info(self, bt_locator, agent_requirement_locator, field_name, **kwargs):  # noqa: E501
        """change_requirement_setting  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__change_requirement_setting_with_http_info(bt_locator, agent_requirement_locator, field_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str agent_requirement_locator: (required)
        :param str field_name: (required)
        :param str body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'agent_requirement_locator', 'field_name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method change_requirement_setting" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `change_requirement_setting`")  # noqa: E501
        # verify the required parameter 'agent_requirement_locator' is set
        if ('agent_requirement_locator' not in params or
                params['agent_requirement_locator'] is None):
            raise ValueError("Missing the required parameter `agent_requirement_locator` when calling `change_requirement_setting`")  # noqa: E501
        # verify the required parameter 'field_name' is set
        if ('field_name' not in params or
                params['field_name'] is None):
            raise ValueError("Missing the required parameter `field_name` when calling `change_requirement_setting`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501
        if 'agent_requirement_locator' in params:
            if isinstance(params['agent_requirement_locator'], TeamCityObject):
                path_params['agentRequirementLocator'] = params['agent_requirement_locator'].locator_id
            else:
                path_params['agentRequirementLocator'] = params['agent_requirement_locator']  # noqa: E501
        if 'field_name' in params:
            if isinstance(params['field_name'], TeamCityObject):
                path_params['fieldName'] = params['field_name'].locator_id
            else:
                path_params['fieldName'] = params['field_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/agent-requirements/{agentRequirementLocator}/{fieldName}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __change_step_setting_with_http_info(self, bt_locator, step_id, field_name, **kwargs):  # noqa: E501
        """change_step_setting  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__change_step_setting_with_http_info(bt_locator, step_id, field_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str step_id: (required)
        :param str field_name: (required)
        :param str body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'step_id', 'field_name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method change_step_setting" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `change_step_setting`")  # noqa: E501
        # verify the required parameter 'step_id' is set
        if ('step_id' not in params or
                params['step_id'] is None):
            raise ValueError("Missing the required parameter `step_id` when calling `change_step_setting`")  # noqa: E501
        # verify the required parameter 'field_name' is set
        if ('field_name' not in params or
                params['field_name'] is None):
            raise ValueError("Missing the required parameter `field_name` when calling `change_step_setting`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501
        if 'step_id' in params:
            if isinstance(params['step_id'], TeamCityObject):
                path_params['stepId'] = params['step_id'].locator_id
            else:
                path_params['stepId'] = params['step_id']  # noqa: E501
        if 'field_name' in params:
            if isinstance(params['field_name'], TeamCityObject):
                path_params['fieldName'] = params['field_name'].locator_id
            else:
                path_params['fieldName'] = params['field_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/steps/{stepId}/{fieldName}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __change_trigger_setting_with_http_info(self, bt_locator, trigger_locator, field_name, **kwargs):  # noqa: E501
        """change_trigger_setting  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__change_trigger_setting_with_http_info(bt_locator, trigger_locator, field_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str trigger_locator: (required)
        :param str field_name: (required)
        :param str body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'trigger_locator', 'field_name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method change_trigger_setting" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `change_trigger_setting`")  # noqa: E501
        # verify the required parameter 'trigger_locator' is set
        if ('trigger_locator' not in params or
                params['trigger_locator'] is None):
            raise ValueError("Missing the required parameter `trigger_locator` when calling `change_trigger_setting`")  # noqa: E501
        # verify the required parameter 'field_name' is set
        if ('field_name' not in params or
                params['field_name'] is None):
            raise ValueError("Missing the required parameter `field_name` when calling `change_trigger_setting`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501
        if 'trigger_locator' in params:
            if isinstance(params['trigger_locator'], TeamCityObject):
                path_params['triggerLocator'] = params['trigger_locator'].locator_id
            else:
                path_params['triggerLocator'] = params['trigger_locator']  # noqa: E501
        if 'field_name' in params:
            if isinstance(params['field_name'], TeamCityObject):
                path_params['fieldName'] = params['field_name'].locator_id
            else:
                path_params['fieldName'] = params['field_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/triggers/{triggerLocator}/{fieldName}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __delete_agent_requirement_with_http_info(self, bt_locator, agent_requirement_locator, **kwargs):  # noqa: E501
        """delete_agent_requirement  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__delete_agent_requirement_with_http_info(bt_locator, agent_requirement_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str agent_requirement_locator: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'agent_requirement_locator']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_agent_requirement" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `delete_agent_requirement`")  # noqa: E501
        # verify the required parameter 'agent_requirement_locator' is set
        if ('agent_requirement_locator' not in params or
                params['agent_requirement_locator'] is None):
            raise ValueError("Missing the required parameter `agent_requirement_locator` when calling `delete_agent_requirement`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501
        if 'agent_requirement_locator' in params:
            if isinstance(params['agent_requirement_locator'], TeamCityObject):
                path_params['agentRequirementLocator'] = params['agent_requirement_locator'].locator_id
            else:
                path_params['agentRequirementLocator'] = params['agent_requirement_locator']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/agent-requirements/{agentRequirementLocator}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __delete_all_parameters_with_http_info(self, bt_locator, **kwargs):  # noqa: E501
        """delete_all_parameters  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__delete_all_parameters_with_http_info(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_all_parameters" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `delete_all_parameters`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/parameters', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __delete_all_parameters_0_with_http_info(self, bt_locator, **kwargs):  # noqa: E501
        """delete_all_parameters_0  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__delete_all_parameters_0_with_http_info(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_all_parameters_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `delete_all_parameters_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/settings', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __delete_artifact_dep_with_http_info(self, bt_locator, artifact_dep_locator, **kwargs):  # noqa: E501
        """delete_artifact_dep  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__delete_artifact_dep_with_http_info(bt_locator, artifact_dep_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str artifact_dep_locator: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'artifact_dep_locator']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_artifact_dep" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `delete_artifact_dep`")  # noqa: E501
        # verify the required parameter 'artifact_dep_locator' is set
        if ('artifact_dep_locator' not in params or
                params['artifact_dep_locator'] is None):
            raise ValueError("Missing the required parameter `artifact_dep_locator` when calling `delete_artifact_dep`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501
        if 'artifact_dep_locator' in params:
            if isinstance(params['artifact_dep_locator'], TeamCityObject):
                path_params['artifactDepLocator'] = params['artifact_dep_locator'].locator_id
            else:
                path_params['artifactDepLocator'] = params['artifact_dep_locator']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/artifact-dependencies/{artifactDepLocator}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __delete_build_type_with_http_info(self, bt_locator, **kwargs):  # noqa: E501
        """delete_build_type  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__delete_build_type_with_http_info(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_build_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `delete_build_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __delete_feature_with_http_info(self, bt_locator, feature_id, **kwargs):  # noqa: E501
        """delete_feature  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__delete_feature_with_http_info(bt_locator, feature_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str feature_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'feature_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_feature" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `delete_feature`")  # noqa: E501
        # verify the required parameter 'feature_id' is set
        if ('feature_id' not in params or
                params['feature_id'] is None):
            raise ValueError("Missing the required parameter `feature_id` when calling `delete_feature`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501
        if 'feature_id' in params:
            if isinstance(params['feature_id'], TeamCityObject):
                path_params['featureId'] = params['feature_id'].locator_id
            else:
                path_params['featureId'] = params['feature_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/features/{featureId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __delete_parameter_with_http_info(self, name, bt_locator, **kwargs):  # noqa: E501
        """delete_parameter  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__delete_parameter_with_http_info(name, bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :param str bt_locator: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'bt_locator']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_parameter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_parameter`")  # noqa: E501
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `delete_parameter`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            if isinstance(params['name'], TeamCityObject):
                path_params['name'] = params['name'].locator_id
            else:
                path_params['name'] = params['name']  # noqa: E501
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/parameters/{name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __delete_parameter_0_with_http_info(self, name, bt_locator, **kwargs):  # noqa: E501
        """delete_parameter_0  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__delete_parameter_0_with_http_info(name, bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :param str bt_locator: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'bt_locator']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_parameter_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_parameter_0`")  # noqa: E501
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `delete_parameter_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            if isinstance(params['name'], TeamCityObject):
                path_params['name'] = params['name'].locator_id
            else:
                path_params['name'] = params['name']  # noqa: E501
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/settings/{name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __delete_snapshot_dep_with_http_info(self, bt_locator, snapshot_dep_locator, **kwargs):  # noqa: E501
        """delete_snapshot_dep  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__delete_snapshot_dep_with_http_info(bt_locator, snapshot_dep_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str snapshot_dep_locator: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'snapshot_dep_locator']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_snapshot_dep" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `delete_snapshot_dep`")  # noqa: E501
        # verify the required parameter 'snapshot_dep_locator' is set
        if ('snapshot_dep_locator' not in params or
                params['snapshot_dep_locator'] is None):
            raise ValueError("Missing the required parameter `snapshot_dep_locator` when calling `delete_snapshot_dep`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501
        if 'snapshot_dep_locator' in params:
            if isinstance(params['snapshot_dep_locator'], TeamCityObject):
                path_params['snapshotDepLocator'] = params['snapshot_dep_locator'].locator_id
            else:
                path_params['snapshotDepLocator'] = params['snapshot_dep_locator']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/snapshot-dependencies/{snapshotDepLocator}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __delete_step_with_http_info(self, bt_locator, step_id, **kwargs):  # noqa: E501
        """delete_step  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__delete_step_with_http_info(bt_locator, step_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str step_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'step_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_step" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `delete_step`")  # noqa: E501
        # verify the required parameter 'step_id' is set
        if ('step_id' not in params or
                params['step_id'] is None):
            raise ValueError("Missing the required parameter `step_id` when calling `delete_step`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501
        if 'step_id' in params:
            if isinstance(params['step_id'], TeamCityObject):
                path_params['stepId'] = params['step_id'].locator_id
            else:
                path_params['stepId'] = params['step_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/steps/{stepId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __delete_trigger_with_http_info(self, bt_locator, trigger_locator, **kwargs):  # noqa: E501
        """delete_trigger  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__delete_trigger_with_http_info(bt_locator, trigger_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str trigger_locator: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'trigger_locator']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_trigger" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `delete_trigger`")  # noqa: E501
        # verify the required parameter 'trigger_locator' is set
        if ('trigger_locator' not in params or
                params['trigger_locator'] is None):
            raise ValueError("Missing the required parameter `trigger_locator` when calling `delete_trigger`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501
        if 'trigger_locator' in params:
            if isinstance(params['trigger_locator'], TeamCityObject):
                path_params['triggerLocator'] = params['trigger_locator'].locator_id
            else:
                path_params['triggerLocator'] = params['trigger_locator']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/triggers/{triggerLocator}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __delete_vcs_root_entry_with_http_info(self, bt_locator, vcs_root_locator, **kwargs):  # noqa: E501
        """delete_vcs_root_entry  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__delete_vcs_root_entry_with_http_info(bt_locator, vcs_root_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str vcs_root_locator: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'vcs_root_locator']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_vcs_root_entry" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `delete_vcs_root_entry`")  # noqa: E501
        # verify the required parameter 'vcs_root_locator' is set
        if ('vcs_root_locator' not in params or
                params['vcs_root_locator'] is None):
            raise ValueError("Missing the required parameter `vcs_root_locator` when calling `delete_vcs_root_entry`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501
        if 'vcs_root_locator' in params:
            if isinstance(params['vcs_root_locator'], TeamCityObject):
                path_params['vcsRootLocator'] = params['vcs_root_locator'].locator_id
            else:
                path_params['vcsRootLocator'] = params['vcs_root_locator']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/vcs-root-entries/{vcsRootLocator}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_agent_requirement_with_http_info(self, bt_locator, agent_requirement_locator, **kwargs):  # noqa: E501
        """get_agent_requirement  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_agent_requirement_with_http_info(bt_locator, agent_requirement_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str agent_requirement_locator: (required)
        :param str fields:
        :return: AgentRequirement
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'agent_requirement_locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_agent_requirement" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `get_agent_requirement`")  # noqa: E501
        # verify the required parameter 'agent_requirement_locator' is set
        if ('agent_requirement_locator' not in params or
                params['agent_requirement_locator'] is None):
            raise ValueError("Missing the required parameter `agent_requirement_locator` when calling `get_agent_requirement`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501
        if 'agent_requirement_locator' in params:
            if isinstance(params['agent_requirement_locator'], TeamCityObject):
                path_params['agentRequirementLocator'] = params['agent_requirement_locator'].locator_id
            else:
                path_params['agentRequirementLocator'] = params['agent_requirement_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/agent-requirements/{agentRequirementLocator}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AgentRequirement',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_agent_requirements_with_http_info(self, bt_locator, **kwargs):  # noqa: E501
        """get_agent_requirements  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_agent_requirements_with_http_info(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str fields:
        :return: AgentRequirements
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_agent_requirements" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `get_agent_requirements`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/agent-requirements', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AgentRequirements',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_aliases_with_http_info(self, bt_locator, field, **kwargs):  # noqa: E501
        """get_aliases  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_aliases_with_http_info(bt_locator, field, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str field: (required)
        :return: Items
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'field']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_aliases" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `get_aliases`")  # noqa: E501
        # verify the required parameter 'field' is set
        if ('field' not in params or
                params['field'] is None):
            raise ValueError("Missing the required parameter `field` when calling `get_aliases`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501
        if 'field' in params:
            if isinstance(params['field'], TeamCityObject):
                path_params['field'] = params['field'].locator_id
            else:
                path_params['field'] = params['field']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/aliases', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Items',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_artifact_dep_with_http_info(self, bt_locator, artifact_dep_locator, **kwargs):  # noqa: E501
        """get_artifact_dep  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_artifact_dep_with_http_info(bt_locator, artifact_dep_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str artifact_dep_locator: (required)
        :param str fields:
        :return: ArtifactDependency
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'artifact_dep_locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_artifact_dep" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `get_artifact_dep`")  # noqa: E501
        # verify the required parameter 'artifact_dep_locator' is set
        if ('artifact_dep_locator' not in params or
                params['artifact_dep_locator'] is None):
            raise ValueError("Missing the required parameter `artifact_dep_locator` when calling `get_artifact_dep`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501
        if 'artifact_dep_locator' in params:
            if isinstance(params['artifact_dep_locator'], TeamCityObject):
                path_params['artifactDepLocator'] = params['artifact_dep_locator'].locator_id
            else:
                path_params['artifactDepLocator'] = params['artifact_dep_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/artifact-dependencies/{artifactDepLocator}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ArtifactDependency',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_artifact_dep_setting_with_http_info(self, bt_locator, artifact_dep_locator, field_name, **kwargs):  # noqa: E501
        """get_artifact_dep_setting  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_artifact_dep_setting_with_http_info(bt_locator, artifact_dep_locator, field_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str artifact_dep_locator: (required)
        :param str field_name: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'artifact_dep_locator', 'field_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_artifact_dep_setting" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `get_artifact_dep_setting`")  # noqa: E501
        # verify the required parameter 'artifact_dep_locator' is set
        if ('artifact_dep_locator' not in params or
                params['artifact_dep_locator'] is None):
            raise ValueError("Missing the required parameter `artifact_dep_locator` when calling `get_artifact_dep_setting`")  # noqa: E501
        # verify the required parameter 'field_name' is set
        if ('field_name' not in params or
                params['field_name'] is None):
            raise ValueError("Missing the required parameter `field_name` when calling `get_artifact_dep_setting`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501
        if 'artifact_dep_locator' in params:
            if isinstance(params['artifact_dep_locator'], TeamCityObject):
                path_params['artifactDepLocator'] = params['artifact_dep_locator'].locator_id
            else:
                path_params['artifactDepLocator'] = params['artifact_dep_locator']  # noqa: E501
        if 'field_name' in params:
            if isinstance(params['field_name'], TeamCityObject):
                path_params['fieldName'] = params['field_name'].locator_id
            else:
                path_params['fieldName'] = params['field_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/artifact-dependencies/{artifactDepLocator}/{fieldName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_artifact_deps_with_http_info(self, bt_locator, **kwargs):  # noqa: E501
        """get_artifact_deps  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_artifact_deps_with_http_info(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str fields:
        :return: ArtifactDependencies
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_artifact_deps" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `get_artifact_deps`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/artifact-dependencies', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ArtifactDependencies',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_build_types_with_http_info(self, **kwargs):  # noqa: E501
        """get_build_types  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_build_types_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str locator:
        :param str fields:
        :return: BuildTypes
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_build_types" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'locator' in params:
            query_params.append(('locator', params['locator']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BuildTypes',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_children_with_http_info(self, path, bt_locator, **kwargs):  # noqa: E501
        """get_children  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_children_with_http_info(path, bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str path: (required)
        :param str bt_locator: (required)
        :param str base_path:
        :param str locator:
        :param str fields:
        :param bool resolve_parameters:
        :return: Files
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['path', 'bt_locator', 'base_path', 'locator', 'fields', 'resolve_parameters']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_children" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'path' is set
        if ('path' not in params or
                params['path'] is None):
            raise ValueError("Missing the required parameter `path` when calling `get_children`")  # noqa: E501
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `get_children`")  # noqa: E501

        if 'path' in params and not re.search('(\/.*)?', params['path']):  # noqa: E501
            raise ValueError("Invalid value for parameter `path` when calling `get_children`, must conform to the pattern `/(\/.*)?/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'path' in params:
            if isinstance(params['path'], TeamCityObject):
                path_params['path'] = params['path'].locator_id
            else:
                path_params['path'] = params['path']  # noqa: E501
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []
        if 'base_path' in params:
            query_params.append(('basePath', params['base_path']))  # noqa: E501
        if 'locator' in params:
            query_params.append(('locator', params['locator']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
        if 'resolve_parameters' in params:
            query_params.append(('resolveParameters', params['resolve_parameters']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/vcs/files/latest/children{path}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Files',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_children_alias_with_http_info(self, path, bt_locator, **kwargs):  # noqa: E501
        """get_children_alias  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_children_alias_with_http_info(path, bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str path: (required)
        :param str bt_locator: (required)
        :param str base_path:
        :param str locator:
        :param str fields:
        :param bool resolve_parameters:
        :return: Files
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['path', 'bt_locator', 'base_path', 'locator', 'fields', 'resolve_parameters']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_children_alias" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'path' is set
        if ('path' not in params or
                params['path'] is None):
            raise ValueError("Missing the required parameter `path` when calling `get_children_alias`")  # noqa: E501
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `get_children_alias`")  # noqa: E501

        if 'path' in params and not re.search('(.*)?', params['path']):  # noqa: E501
            raise ValueError("Invalid value for parameter `path` when calling `get_children_alias`, must conform to the pattern `/(.*)?/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'path' in params:
            if isinstance(params['path'], TeamCityObject):
                path_params['path'] = params['path'].locator_id
            else:
                path_params['path'] = params['path']  # noqa: E501
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []
        if 'base_path' in params:
            query_params.append(('basePath', params['base_path']))  # noqa: E501
        if 'locator' in params:
            query_params.append(('locator', params['locator']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
        if 'resolve_parameters' in params:
            query_params.append(('resolveParameters', params['resolve_parameters']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/vcs/files/latest/{path}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Files',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_content_with_http_info(self, path, bt_locator, **kwargs):  # noqa: E501
        """get_content  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_content_with_http_info(path, bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str path: (required)
        :param str bt_locator: (required)
        :param str response_builder:
        :param bool resolve_parameters:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['path', 'bt_locator', 'response_builder', 'resolve_parameters']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_content" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'path' is set
        if ('path' not in params or
                params['path'] is None):
            raise ValueError("Missing the required parameter `path` when calling `get_content`")  # noqa: E501
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `get_content`")  # noqa: E501

        if 'path' in params and not re.search('(\/.*)?', params['path']):  # noqa: E501
            raise ValueError("Invalid value for parameter `path` when calling `get_content`, must conform to the pattern `/(\/.*)?/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'path' in params:
            if isinstance(params['path'], TeamCityObject):
                path_params['path'] = params['path'].locator_id
            else:
                path_params['path'] = params['path']  # noqa: E501
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []
        if 'response_builder' in params:
            query_params.append(('responseBuilder', params['response_builder']))  # noqa: E501
        if 'resolve_parameters' in params:
            query_params.append(('resolveParameters', params['resolve_parameters']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/vcs/files/latest/content{path}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_content_alias_with_http_info(self, path, bt_locator, **kwargs):  # noqa: E501
        """get_content_alias  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_content_alias_with_http_info(path, bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str path: (required)
        :param str bt_locator: (required)
        :param bool resolve_parameters:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['path', 'bt_locator', 'resolve_parameters']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_content_alias" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'path' is set
        if ('path' not in params or
                params['path'] is None):
            raise ValueError("Missing the required parameter `path` when calling `get_content_alias`")  # noqa: E501
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `get_content_alias`")  # noqa: E501

        if 'path' in params and not re.search('(\/.*)?', params['path']):  # noqa: E501
            raise ValueError("Invalid value for parameter `path` when calling `get_content_alias`, must conform to the pattern `/(\/.*)?/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'path' in params:
            if isinstance(params['path'], TeamCityObject):
                path_params['path'] = params['path'].locator_id
            else:
                path_params['path'] = params['path']  # noqa: E501
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []
        if 'resolve_parameters' in params:
            query_params.append(('resolveParameters', params['resolve_parameters']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/vcs/files/latest/files{path}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_current_vcs_instances_with_http_info(self, bt_locator, **kwargs):  # noqa: E501
        """get_current_vcs_instances  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_current_vcs_instances_with_http_info(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str fields:
        :return: VcsRootInstances
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_current_vcs_instances" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `get_current_vcs_instances`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/vcsRootInstances', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VcsRootInstances',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_current_vcs_instances_obsolete_with_http_info(self, bt_locator, **kwargs):  # noqa: E501
        """get_current_vcs_instances_obsolete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_current_vcs_instances_obsolete_with_http_info(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str fields:
        :return: VcsRootInstances
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_current_vcs_instances_obsolete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `get_current_vcs_instances_obsolete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/vcs-root-instances', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VcsRootInstances',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_example_new_project_description_with_http_info(self, bt_locator, **kwargs):  # noqa: E501
        """get_example_new_project_description  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_example_new_project_description_with_http_info(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :return: NewBuildTypeDescription
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_example_new_project_description" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `get_example_new_project_description`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/example/newBuildTypeDescription', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NewBuildTypeDescription',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_example_new_project_description_compatibility_version1_with_http_info(self, bt_locator, **kwargs):  # noqa: E501
        """get_example_new_project_description_compatibility_version1  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_example_new_project_description_compatibility_version1_with_http_info(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :return: NewBuildTypeDescription
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_example_new_project_description_compatibility_version1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `get_example_new_project_description_compatibility_version1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/newBuildTypeDescription', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NewBuildTypeDescription',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_feature_with_http_info(self, bt_locator, feature_id, **kwargs):  # noqa: E501
        """get_feature  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_feature_with_http_info(bt_locator, feature_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str feature_id: (required)
        :param str fields:
        :return: Feature
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'feature_id', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_feature" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `get_feature`")  # noqa: E501
        # verify the required parameter 'feature_id' is set
        if ('feature_id' not in params or
                params['feature_id'] is None):
            raise ValueError("Missing the required parameter `feature_id` when calling `get_feature`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501
        if 'feature_id' in params:
            if isinstance(params['feature_id'], TeamCityObject):
                path_params['featureId'] = params['feature_id'].locator_id
            else:
                path_params['featureId'] = params['feature_id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/features/{featureId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Feature',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_feature_parameter_with_http_info(self, bt_locator, feature_id, parameter_name, **kwargs):  # noqa: E501
        """get_feature_parameter  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_feature_parameter_with_http_info(bt_locator, feature_id, parameter_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str feature_id: (required)
        :param str parameter_name: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'feature_id', 'parameter_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_feature_parameter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `get_feature_parameter`")  # noqa: E501
        # verify the required parameter 'feature_id' is set
        if ('feature_id' not in params or
                params['feature_id'] is None):
            raise ValueError("Missing the required parameter `feature_id` when calling `get_feature_parameter`")  # noqa: E501
        # verify the required parameter 'parameter_name' is set
        if ('parameter_name' not in params or
                params['parameter_name'] is None):
            raise ValueError("Missing the required parameter `parameter_name` when calling `get_feature_parameter`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501
        if 'feature_id' in params:
            if isinstance(params['feature_id'], TeamCityObject):
                path_params['featureId'] = params['feature_id'].locator_id
            else:
                path_params['featureId'] = params['feature_id']  # noqa: E501
        if 'parameter_name' in params:
            if isinstance(params['parameter_name'], TeamCityObject):
                path_params['parameterName'] = params['parameter_name'].locator_id
            else:
                path_params['parameterName'] = params['parameter_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/features/{featureId}/parameters/{parameterName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_feature_parameters_with_http_info(self, bt_locator, feature_id, **kwargs):  # noqa: E501
        """get_feature_parameters  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_feature_parameters_with_http_info(bt_locator, feature_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str feature_id: (required)
        :param str fields:
        :return: Properties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'feature_id', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_feature_parameters" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `get_feature_parameters`")  # noqa: E501
        # verify the required parameter 'feature_id' is set
        if ('feature_id' not in params or
                params['feature_id'] is None):
            raise ValueError("Missing the required parameter `feature_id` when calling `get_feature_parameters`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501
        if 'feature_id' in params:
            if isinstance(params['feature_id'], TeamCityObject):
                path_params['featureId'] = params['feature_id'].locator_id
            else:
                path_params['featureId'] = params['feature_id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/features/{featureId}/parameters', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Properties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_feature_setting_with_http_info(self, bt_locator, feature_id, name, **kwargs):  # noqa: E501
        """get_feature_setting  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_feature_setting_with_http_info(bt_locator, feature_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str feature_id: (required)
        :param str name: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'feature_id', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_feature_setting" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `get_feature_setting`")  # noqa: E501
        # verify the required parameter 'feature_id' is set
        if ('feature_id' not in params or
                params['feature_id'] is None):
            raise ValueError("Missing the required parameter `feature_id` when calling `get_feature_setting`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_feature_setting`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501
        if 'feature_id' in params:
            if isinstance(params['feature_id'], TeamCityObject):
                path_params['featureId'] = params['feature_id'].locator_id
            else:
                path_params['featureId'] = params['feature_id']  # noqa: E501
        if 'name' in params:
            if isinstance(params['name'], TeamCityObject):
                path_params['name'] = params['name'].locator_id
            else:
                path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/features/{featureId}/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_features_with_http_info(self, bt_locator, **kwargs):  # noqa: E501
        """get_features  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_features_with_http_info(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str fields:
        :return: Features
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_features" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `get_features`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/features', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Features',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_investigations_with_http_info(self, bt_locator, **kwargs):  # noqa: E501
        """get_investigations  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_investigations_with_http_info(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str fields:
        :return: Investigations
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_investigations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `get_investigations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/investigations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Investigations',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_metadata_with_http_info(self, path, bt_locator, **kwargs):  # noqa: E501
        """get_metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_metadata_with_http_info(path, bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str path: (required)
        :param str bt_locator: (required)
        :param str fields:
        :param bool resolve_parameters:
        :return: File
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['path', 'bt_locator', 'fields', 'resolve_parameters']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_metadata" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'path' is set
        if ('path' not in params or
                params['path'] is None):
            raise ValueError("Missing the required parameter `path` when calling `get_metadata`")  # noqa: E501
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `get_metadata`")  # noqa: E501

        if 'path' in params and not re.search('(\/.*)?', params['path']):  # noqa: E501
            raise ValueError("Invalid value for parameter `path` when calling `get_metadata`, must conform to the pattern `/(\/.*)?/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'path' in params:
            if isinstance(params['path'], TeamCityObject):
                path_params['path'] = params['path'].locator_id
            else:
                path_params['path'] = params['path']  # noqa: E501
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
        if 'resolve_parameters' in params:
            query_params.append(('resolveParameters', params['resolve_parameters']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/vcs/files/latest/metadata{path}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='File',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_parameter_with_http_info(self, name, bt_locator, **kwargs):  # noqa: E501
        """get_parameter  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_parameter_with_http_info(name, bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :param str bt_locator: (required)
        :param str fields:
        :return: ModelProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'bt_locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_parameter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_parameter`")  # noqa: E501
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `get_parameter`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            if isinstance(params['name'], TeamCityObject):
                path_params['name'] = params['name'].locator_id
            else:
                path_params['name'] = params['name']  # noqa: E501
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/parameters/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ModelProperty',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_parameter_0_with_http_info(self, name, bt_locator, **kwargs):  # noqa: E501
        """get_parameter_0  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_parameter_0_with_http_info(name, bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :param str bt_locator: (required)
        :param str fields:
        :return: ModelProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'bt_locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_parameter_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_parameter_0`")  # noqa: E501
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `get_parameter_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            if isinstance(params['name'], TeamCityObject):
                path_params['name'] = params['name'].locator_id
            else:
                path_params['name'] = params['name']  # noqa: E501
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/settings/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ModelProperty',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_parameter_type_with_http_info(self, name, bt_locator, **kwargs):  # noqa: E501
        """get_parameter_type  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_parameter_type_with_http_info(name, bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :param str bt_locator: (required)
        :return: Type
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'bt_locator']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_parameter_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_parameter_type`")  # noqa: E501
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `get_parameter_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            if isinstance(params['name'], TeamCityObject):
                path_params['name'] = params['name'].locator_id
            else:
                path_params['name'] = params['name']  # noqa: E501
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/parameters/{name}/type', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Type',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_parameter_type_raw_value_with_http_info(self, name, bt_locator, **kwargs):  # noqa: E501
        """get_parameter_type_raw_value  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_parameter_type_raw_value_with_http_info(name, bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :param str bt_locator: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'bt_locator']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_parameter_type_raw_value" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_parameter_type_raw_value`")  # noqa: E501
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `get_parameter_type_raw_value`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            if isinstance(params['name'], TeamCityObject):
                path_params['name'] = params['name'].locator_id
            else:
                path_params['name'] = params['name']  # noqa: E501
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/parameters/{name}/type/rawValue', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_parameter_value_long_with_http_info(self, name, bt_locator, **kwargs):  # noqa: E501
        """get_parameter_value_long  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_parameter_value_long_with_http_info(name, bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :param str bt_locator: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'bt_locator']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_parameter_value_long" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_parameter_value_long`")  # noqa: E501
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `get_parameter_value_long`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            if isinstance(params['name'], TeamCityObject):
                path_params['name'] = params['name'].locator_id
            else:
                path_params['name'] = params['name']  # noqa: E501
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/parameters/{name}/value', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_parameter_value_long_0_with_http_info(self, name, bt_locator, **kwargs):  # noqa: E501
        """get_parameter_value_long_0  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_parameter_value_long_0_with_http_info(name, bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :param str bt_locator: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'bt_locator']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_parameter_value_long_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_parameter_value_long_0`")  # noqa: E501
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `get_parameter_value_long_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            if isinstance(params['name'], TeamCityObject):
                path_params['name'] = params['name'].locator_id
            else:
                path_params['name'] = params['name']  # noqa: E501
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/settings/{name}/value', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_parameters_with_http_info(self, bt_locator, **kwargs):  # noqa: E501
        """get_parameters  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_parameters_with_http_info(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str locator:
        :param str fields:
        :return: Properties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_parameters" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `get_parameters`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []
        if 'locator' in params:
            query_params.append(('locator', params['locator']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/parameters', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Properties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_parameters_0_with_http_info(self, bt_locator, **kwargs):  # noqa: E501
        """get_parameters_0  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_parameters_0_with_http_info(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str locator:
        :param str fields:
        :return: Properties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_parameters_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `get_parameters_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []
        if 'locator' in params:
            query_params.append(('locator', params['locator']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/settings', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Properties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_requirement_setting_with_http_info(self, bt_locator, agent_requirement_locator, field_name, **kwargs):  # noqa: E501
        """get_requirement_setting  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_requirement_setting_with_http_info(bt_locator, agent_requirement_locator, field_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str agent_requirement_locator: (required)
        :param str field_name: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'agent_requirement_locator', 'field_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_requirement_setting" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `get_requirement_setting`")  # noqa: E501
        # verify the required parameter 'agent_requirement_locator' is set
        if ('agent_requirement_locator' not in params or
                params['agent_requirement_locator'] is None):
            raise ValueError("Missing the required parameter `agent_requirement_locator` when calling `get_requirement_setting`")  # noqa: E501
        # verify the required parameter 'field_name' is set
        if ('field_name' not in params or
                params['field_name'] is None):
            raise ValueError("Missing the required parameter `field_name` when calling `get_requirement_setting`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501
        if 'agent_requirement_locator' in params:
            if isinstance(params['agent_requirement_locator'], TeamCityObject):
                path_params['agentRequirementLocator'] = params['agent_requirement_locator'].locator_id
            else:
                path_params['agentRequirementLocator'] = params['agent_requirement_locator']  # noqa: E501
        if 'field_name' in params:
            if isinstance(params['field_name'], TeamCityObject):
                path_params['fieldName'] = params['field_name'].locator_id
            else:
                path_params['fieldName'] = params['field_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/agent-requirements/{agentRequirementLocator}/{fieldName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_root_with_http_info(self, bt_locator, **kwargs):  # noqa: E501
        """get_root  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_root_with_http_info(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str base_path:
        :param str locator:
        :param str fields:
        :param bool resolve_parameters:
        :return: Files
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'base_path', 'locator', 'fields', 'resolve_parameters']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_root" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `get_root`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []
        if 'base_path' in params:
            query_params.append(('basePath', params['base_path']))  # noqa: E501
        if 'locator' in params:
            query_params.append(('locator', params['locator']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
        if 'resolve_parameters' in params:
            query_params.append(('resolveParameters', params['resolve_parameters']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/vcs/files/latest', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Files',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_settings_file_with_http_info(self, bt_locator, **kwargs):  # noqa: E501
        """get_settings_file  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_settings_file_with_http_info(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_settings_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `get_settings_file`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/settingsFile', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_snapshot_dep_with_http_info(self, bt_locator, snapshot_dep_locator, **kwargs):  # noqa: E501
        """get_snapshot_dep  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_snapshot_dep_with_http_info(bt_locator, snapshot_dep_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str snapshot_dep_locator: (required)
        :param str fields:
        :return: SnapshotDependency
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'snapshot_dep_locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_snapshot_dep" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `get_snapshot_dep`")  # noqa: E501
        # verify the required parameter 'snapshot_dep_locator' is set
        if ('snapshot_dep_locator' not in params or
                params['snapshot_dep_locator'] is None):
            raise ValueError("Missing the required parameter `snapshot_dep_locator` when calling `get_snapshot_dep`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501
        if 'snapshot_dep_locator' in params:
            if isinstance(params['snapshot_dep_locator'], TeamCityObject):
                path_params['snapshotDepLocator'] = params['snapshot_dep_locator'].locator_id
            else:
                path_params['snapshotDepLocator'] = params['snapshot_dep_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/snapshot-dependencies/{snapshotDepLocator}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SnapshotDependency',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_snapshot_deps_with_http_info(self, bt_locator, **kwargs):  # noqa: E501
        """get_snapshot_deps  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_snapshot_deps_with_http_info(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str fields:
        :return: SnapshotDependencies
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_snapshot_deps" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `get_snapshot_deps`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/snapshot-dependencies', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SnapshotDependencies',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_step_with_http_info(self, bt_locator, step_id, **kwargs):  # noqa: E501
        """get_step  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_step_with_http_info(bt_locator, step_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str step_id: (required)
        :param str fields:
        :return: Step
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'step_id', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_step" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `get_step`")  # noqa: E501
        # verify the required parameter 'step_id' is set
        if ('step_id' not in params or
                params['step_id'] is None):
            raise ValueError("Missing the required parameter `step_id` when calling `get_step`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501
        if 'step_id' in params:
            if isinstance(params['step_id'], TeamCityObject):
                path_params['stepId'] = params['step_id'].locator_id
            else:
                path_params['stepId'] = params['step_id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/steps/{stepId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Step',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_step_parameter_with_http_info(self, bt_locator, step_id, parameter_name, **kwargs):  # noqa: E501
        """get_step_parameter  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_step_parameter_with_http_info(bt_locator, step_id, parameter_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str step_id: (required)
        :param str parameter_name: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'step_id', 'parameter_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_step_parameter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `get_step_parameter`")  # noqa: E501
        # verify the required parameter 'step_id' is set
        if ('step_id' not in params or
                params['step_id'] is None):
            raise ValueError("Missing the required parameter `step_id` when calling `get_step_parameter`")  # noqa: E501
        # verify the required parameter 'parameter_name' is set
        if ('parameter_name' not in params or
                params['parameter_name'] is None):
            raise ValueError("Missing the required parameter `parameter_name` when calling `get_step_parameter`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501
        if 'step_id' in params:
            if isinstance(params['step_id'], TeamCityObject):
                path_params['stepId'] = params['step_id'].locator_id
            else:
                path_params['stepId'] = params['step_id']  # noqa: E501
        if 'parameter_name' in params:
            if isinstance(params['parameter_name'], TeamCityObject):
                path_params['parameterName'] = params['parameter_name'].locator_id
            else:
                path_params['parameterName'] = params['parameter_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/steps/{stepId}/parameters/{parameterName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_step_parameters_with_http_info(self, bt_locator, step_id, **kwargs):  # noqa: E501
        """get_step_parameters  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_step_parameters_with_http_info(bt_locator, step_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str step_id: (required)
        :param str fields:
        :return: Properties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'step_id', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_step_parameters" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `get_step_parameters`")  # noqa: E501
        # verify the required parameter 'step_id' is set
        if ('step_id' not in params or
                params['step_id'] is None):
            raise ValueError("Missing the required parameter `step_id` when calling `get_step_parameters`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501
        if 'step_id' in params:
            if isinstance(params['step_id'], TeamCityObject):
                path_params['stepId'] = params['step_id'].locator_id
            else:
                path_params['stepId'] = params['step_id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/steps/{stepId}/parameters', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Properties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_step_setting_with_http_info(self, bt_locator, step_id, field_name, **kwargs):  # noqa: E501
        """get_step_setting  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_step_setting_with_http_info(bt_locator, step_id, field_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str step_id: (required)
        :param str field_name: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'step_id', 'field_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_step_setting" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `get_step_setting`")  # noqa: E501
        # verify the required parameter 'step_id' is set
        if ('step_id' not in params or
                params['step_id'] is None):
            raise ValueError("Missing the required parameter `step_id` when calling `get_step_setting`")  # noqa: E501
        # verify the required parameter 'field_name' is set
        if ('field_name' not in params or
                params['field_name'] is None):
            raise ValueError("Missing the required parameter `field_name` when calling `get_step_setting`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501
        if 'step_id' in params:
            if isinstance(params['step_id'], TeamCityObject):
                path_params['stepId'] = params['step_id'].locator_id
            else:
                path_params['stepId'] = params['step_id']  # noqa: E501
        if 'field_name' in params:
            if isinstance(params['field_name'], TeamCityObject):
                path_params['fieldName'] = params['field_name'].locator_id
            else:
                path_params['fieldName'] = params['field_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/steps/{stepId}/{fieldName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_steps_with_http_info(self, bt_locator, **kwargs):  # noqa: E501
        """get_steps  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_steps_with_http_info(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str fields:
        :return: Steps
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_steps" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `get_steps`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/steps', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Steps',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_template_with_http_info(self, bt_locator, template_locator, **kwargs):  # noqa: E501
        """get_template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_template_with_http_info(bt_locator, template_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str template_locator: (required)
        :param str fields:
        :return: BuildType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'template_locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_template" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `get_template`")  # noqa: E501
        # verify the required parameter 'template_locator' is set
        if ('template_locator' not in params or
                params['template_locator'] is None):
            raise ValueError("Missing the required parameter `template_locator` when calling `get_template`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501
        if 'template_locator' in params:
            if isinstance(params['template_locator'], TeamCityObject):
                path_params['templateLocator'] = params['template_locator'].locator_id
            else:
                path_params['templateLocator'] = params['template_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/templates/{templateLocator}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BuildType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_templates_with_http_info(self, bt_locator, **kwargs):  # noqa: E501
        """get_templates  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_templates_with_http_info(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str fields:
        :return: BuildTypes
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_templates" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `get_templates`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/templates', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BuildTypes',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_trigger_with_http_info(self, bt_locator, trigger_locator, **kwargs):  # noqa: E501
        """get_trigger  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_trigger_with_http_info(bt_locator, trigger_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str trigger_locator: (required)
        :param str fields:
        :return: Trigger
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'trigger_locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_trigger" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `get_trigger`")  # noqa: E501
        # verify the required parameter 'trigger_locator' is set
        if ('trigger_locator' not in params or
                params['trigger_locator'] is None):
            raise ValueError("Missing the required parameter `trigger_locator` when calling `get_trigger`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501
        if 'trigger_locator' in params:
            if isinstance(params['trigger_locator'], TeamCityObject):
                path_params['triggerLocator'] = params['trigger_locator'].locator_id
            else:
                path_params['triggerLocator'] = params['trigger_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/triggers/{triggerLocator}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Trigger',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_trigger_setting_with_http_info(self, bt_locator, trigger_locator, field_name, **kwargs):  # noqa: E501
        """get_trigger_setting  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_trigger_setting_with_http_info(bt_locator, trigger_locator, field_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str trigger_locator: (required)
        :param str field_name: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'trigger_locator', 'field_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_trigger_setting" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `get_trigger_setting`")  # noqa: E501
        # verify the required parameter 'trigger_locator' is set
        if ('trigger_locator' not in params or
                params['trigger_locator'] is None):
            raise ValueError("Missing the required parameter `trigger_locator` when calling `get_trigger_setting`")  # noqa: E501
        # verify the required parameter 'field_name' is set
        if ('field_name' not in params or
                params['field_name'] is None):
            raise ValueError("Missing the required parameter `field_name` when calling `get_trigger_setting`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501
        if 'trigger_locator' in params:
            if isinstance(params['trigger_locator'], TeamCityObject):
                path_params['triggerLocator'] = params['trigger_locator'].locator_id
            else:
                path_params['triggerLocator'] = params['trigger_locator']  # noqa: E501
        if 'field_name' in params:
            if isinstance(params['field_name'], TeamCityObject):
                path_params['fieldName'] = params['field_name'].locator_id
            else:
                path_params['fieldName'] = params['field_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/triggers/{triggerLocator}/{fieldName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_triggers_with_http_info(self, bt_locator, **kwargs):  # noqa: E501
        """get_triggers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_triggers_with_http_info(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str fields:
        :return: Triggers
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_triggers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `get_triggers`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/triggers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Triggers',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_vcs_labeling_options_with_http_info(self, bt_locator, **kwargs):  # noqa: E501
        """get_vcs_labeling_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_vcs_labeling_options_with_http_info(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :return: VcsLabeling
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_vcs_labeling_options" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `get_vcs_labeling_options`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/vcsLabeling', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VcsLabeling',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_vcs_root_entries_with_http_info(self, bt_locator, **kwargs):  # noqa: E501
        """get_vcs_root_entries  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_vcs_root_entries_with_http_info(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str fields:
        :return: VcsRootEntries
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_vcs_root_entries" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `get_vcs_root_entries`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/vcs-root-entries', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VcsRootEntries',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_vcs_root_entry_with_http_info(self, bt_locator, vcs_root_locator, **kwargs):  # noqa: E501
        """get_vcs_root_entry  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_vcs_root_entry_with_http_info(bt_locator, vcs_root_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str vcs_root_locator: (required)
        :param str fields:
        :return: VcsRootEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'vcs_root_locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_vcs_root_entry" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `get_vcs_root_entry`")  # noqa: E501
        # verify the required parameter 'vcs_root_locator' is set
        if ('vcs_root_locator' not in params or
                params['vcs_root_locator'] is None):
            raise ValueError("Missing the required parameter `vcs_root_locator` when calling `get_vcs_root_entry`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501
        if 'vcs_root_locator' in params:
            if isinstance(params['vcs_root_locator'], TeamCityObject):
                path_params['vcsRootLocator'] = params['vcs_root_locator'].locator_id
            else:
                path_params['vcsRootLocator'] = params['vcs_root_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/vcs-root-entries/{vcsRootLocator}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VcsRootEntry',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_vcs_root_entry_checkout_rules_with_http_info(self, bt_locator, vcs_root_locator, **kwargs):  # noqa: E501
        """get_vcs_root_entry_checkout_rules  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_vcs_root_entry_checkout_rules_with_http_info(bt_locator, vcs_root_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str vcs_root_locator: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'vcs_root_locator']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_vcs_root_entry_checkout_rules" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `get_vcs_root_entry_checkout_rules`")  # noqa: E501
        # verify the required parameter 'vcs_root_locator' is set
        if ('vcs_root_locator' not in params or
                params['vcs_root_locator'] is None):
            raise ValueError("Missing the required parameter `vcs_root_locator` when calling `get_vcs_root_entry_checkout_rules`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501
        if 'vcs_root_locator' in params:
            if isinstance(params['vcs_root_locator'], TeamCityObject):
                path_params['vcsRootLocator'] = params['vcs_root_locator'].locator_id
            else:
                path_params['vcsRootLocator'] = params['vcs_root_locator']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/vcs-root-entries/{vcsRootLocator}/checkout-rules', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_zipped_with_http_info(self, path, bt_locator, **kwargs):  # noqa: E501
        """get_zipped  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_zipped_with_http_info(path, bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str path: (required)
        :param str bt_locator: (required)
        :param str base_path:
        :param str locator:
        :param str name:
        :param bool resolve_parameters:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['path', 'bt_locator', 'base_path', 'locator', 'name', 'resolve_parameters']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_zipped" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'path' is set
        if ('path' not in params or
                params['path'] is None):
            raise ValueError("Missing the required parameter `path` when calling `get_zipped`")  # noqa: E501
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `get_zipped`")  # noqa: E501

        if 'path' in params and not re.search('(\/.*)?', params['path']):  # noqa: E501
            raise ValueError("Invalid value for parameter `path` when calling `get_zipped`, must conform to the pattern `/(\/.*)?/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'path' in params:
            if isinstance(params['path'], TeamCityObject):
                path_params['path'] = params['path'].locator_id
            else:
                path_params['path'] = params['path']  # noqa: E501
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []
        if 'base_path' in params:
            query_params.append(('basePath', params['base_path']))  # noqa: E501
        if 'locator' in params:
            query_params.append(('locator', params['locator']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'resolve_parameters' in params:
            query_params.append(('resolveParameters', params['resolve_parameters']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/vcs/files/latest/archived{path}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __remove_all_templates_with_http_info(self, bt_locator, **kwargs):  # noqa: E501
        """remove_all_templates  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__remove_all_templates_with_http_info(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param bool inline_settings:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'inline_settings']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_all_templates" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `remove_all_templates`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []
        if 'inline_settings' in params:
            query_params.append(('inlineSettings', params['inline_settings']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/templates', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __remove_template_with_http_info(self, bt_locator, template_locator, **kwargs):  # noqa: E501
        """remove_template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__remove_template_with_http_info(bt_locator, template_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str template_locator: (required)
        :param bool inline_settings:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'template_locator', 'inline_settings']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_template" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `remove_template`")  # noqa: E501
        # verify the required parameter 'template_locator' is set
        if ('template_locator' not in params or
                params['template_locator'] is None):
            raise ValueError("Missing the required parameter `template_locator` when calling `remove_template`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501
        if 'template_locator' in params:
            if isinstance(params['template_locator'], TeamCityObject):
                path_params['templateLocator'] = params['template_locator'].locator_id
            else:
                path_params['templateLocator'] = params['template_locator']  # noqa: E501

        query_params = []
        if 'inline_settings' in params:
            query_params.append(('inlineSettings', params['inline_settings']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/templates/{templateLocator}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __replace_agent_requirement_with_http_info(self, bt_locator, agent_requirement_locator, **kwargs):  # noqa: E501
        """replace_agent_requirement  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__replace_agent_requirement_with_http_info(bt_locator, agent_requirement_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str agent_requirement_locator: (required)
        :param str fields:
        :param AgentRequirement body:
        :return: AgentRequirement
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'agent_requirement_locator', 'fields', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_agent_requirement" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `replace_agent_requirement`")  # noqa: E501
        # verify the required parameter 'agent_requirement_locator' is set
        if ('agent_requirement_locator' not in params or
                params['agent_requirement_locator'] is None):
            raise ValueError("Missing the required parameter `agent_requirement_locator` when calling `replace_agent_requirement`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501
        if 'agent_requirement_locator' in params:
            if isinstance(params['agent_requirement_locator'], TeamCityObject):
                path_params['agentRequirementLocator'] = params['agent_requirement_locator'].locator_id
            else:
                path_params['agentRequirementLocator'] = params['agent_requirement_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/agent-requirements/{agentRequirementLocator}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AgentRequirement',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __replace_agent_requirements_with_http_info(self, bt_locator, **kwargs):  # noqa: E501
        """replace_agent_requirements  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__replace_agent_requirements_with_http_info(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str fields:
        :param AgentRequirements body:
        :return: AgentRequirements
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'fields', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_agent_requirements" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `replace_agent_requirements`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/agent-requirements', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AgentRequirements',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __replace_artifact_dep_with_http_info(self, bt_locator, artifact_dep_locator, **kwargs):  # noqa: E501
        """replace_artifact_dep  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__replace_artifact_dep_with_http_info(bt_locator, artifact_dep_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str artifact_dep_locator: (required)
        :param str fields:
        :param ArtifactDependency body:
        :return: ArtifactDependency
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'artifact_dep_locator', 'fields', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_artifact_dep" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `replace_artifact_dep`")  # noqa: E501
        # verify the required parameter 'artifact_dep_locator' is set
        if ('artifact_dep_locator' not in params or
                params['artifact_dep_locator'] is None):
            raise ValueError("Missing the required parameter `artifact_dep_locator` when calling `replace_artifact_dep`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501
        if 'artifact_dep_locator' in params:
            if isinstance(params['artifact_dep_locator'], TeamCityObject):
                path_params['artifactDepLocator'] = params['artifact_dep_locator'].locator_id
            else:
                path_params['artifactDepLocator'] = params['artifact_dep_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/artifact-dependencies/{artifactDepLocator}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ArtifactDependency',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __replace_artifact_deps_with_http_info(self, bt_locator, **kwargs):  # noqa: E501
        """replace_artifact_deps  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__replace_artifact_deps_with_http_info(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str fields:
        :param ArtifactDependencies body:
        :return: ArtifactDependencies
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'fields', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_artifact_deps" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `replace_artifact_deps`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/artifact-dependencies', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ArtifactDependencies',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __replace_feature_with_http_info(self, bt_locator, feature_id, **kwargs):  # noqa: E501
        """replace_feature  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__replace_feature_with_http_info(bt_locator, feature_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str feature_id: (required)
        :param str fields:
        :param Feature body:
        :return: Feature
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'feature_id', 'fields', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_feature" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `replace_feature`")  # noqa: E501
        # verify the required parameter 'feature_id' is set
        if ('feature_id' not in params or
                params['feature_id'] is None):
            raise ValueError("Missing the required parameter `feature_id` when calling `replace_feature`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501
        if 'feature_id' in params:
            if isinstance(params['feature_id'], TeamCityObject):
                path_params['featureId'] = params['feature_id'].locator_id
            else:
                path_params['featureId'] = params['feature_id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/features/{featureId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Feature',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __replace_feature_parameters_with_http_info(self, bt_locator, feature_id, **kwargs):  # noqa: E501
        """replace_feature_parameters  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__replace_feature_parameters_with_http_info(bt_locator, feature_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str feature_id: (required)
        :param Properties body:
        :param str fields:
        :return: Properties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'feature_id', 'body', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_feature_parameters" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `replace_feature_parameters`")  # noqa: E501
        # verify the required parameter 'feature_id' is set
        if ('feature_id' not in params or
                params['feature_id'] is None):
            raise ValueError("Missing the required parameter `feature_id` when calling `replace_feature_parameters`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501
        if 'feature_id' in params:
            if isinstance(params['feature_id'], TeamCityObject):
                path_params['featureId'] = params['feature_id'].locator_id
            else:
                path_params['featureId'] = params['feature_id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/features/{featureId}/parameters', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Properties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __replace_features_with_http_info(self, bt_locator, **kwargs):  # noqa: E501
        """replace_features  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__replace_features_with_http_info(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str fields:
        :param Features body:
        :return: Features
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'fields', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_features" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `replace_features`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/features', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Features',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __replace_snapshot_dep_with_http_info(self, bt_locator, snapshot_dep_locator, **kwargs):  # noqa: E501
        """replace_snapshot_dep  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__replace_snapshot_dep_with_http_info(bt_locator, snapshot_dep_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str snapshot_dep_locator: (required)
        :param str fields:
        :param SnapshotDependency body:
        :return: SnapshotDependency
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'snapshot_dep_locator', 'fields', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_snapshot_dep" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `replace_snapshot_dep`")  # noqa: E501
        # verify the required parameter 'snapshot_dep_locator' is set
        if ('snapshot_dep_locator' not in params or
                params['snapshot_dep_locator'] is None):
            raise ValueError("Missing the required parameter `snapshot_dep_locator` when calling `replace_snapshot_dep`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501
        if 'snapshot_dep_locator' in params:
            if isinstance(params['snapshot_dep_locator'], TeamCityObject):
                path_params['snapshotDepLocator'] = params['snapshot_dep_locator'].locator_id
            else:
                path_params['snapshotDepLocator'] = params['snapshot_dep_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/snapshot-dependencies/{snapshotDepLocator}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SnapshotDependency',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __replace_snapshot_deps_with_http_info(self, bt_locator, **kwargs):  # noqa: E501
        """replace_snapshot_deps  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__replace_snapshot_deps_with_http_info(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str fields:
        :param SnapshotDependencies body:
        :return: SnapshotDependencies
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'fields', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_snapshot_deps" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `replace_snapshot_deps`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/snapshot-dependencies', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SnapshotDependencies',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __replace_step_with_http_info(self, bt_locator, step_id, **kwargs):  # noqa: E501
        """replace_step  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__replace_step_with_http_info(bt_locator, step_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str step_id: (required)
        :param str fields:
        :param Step body:
        :return: Step
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'step_id', 'fields', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_step" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `replace_step`")  # noqa: E501
        # verify the required parameter 'step_id' is set
        if ('step_id' not in params or
                params['step_id'] is None):
            raise ValueError("Missing the required parameter `step_id` when calling `replace_step`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501
        if 'step_id' in params:
            if isinstance(params['step_id'], TeamCityObject):
                path_params['stepId'] = params['step_id'].locator_id
            else:
                path_params['stepId'] = params['step_id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/steps/{stepId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Step',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __replace_step_parameters_with_http_info(self, bt_locator, step_id, **kwargs):  # noqa: E501
        """replace_step_parameters  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__replace_step_parameters_with_http_info(bt_locator, step_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str step_id: (required)
        :param Properties body:
        :param str fields:
        :return: Properties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'step_id', 'body', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_step_parameters" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `replace_step_parameters`")  # noqa: E501
        # verify the required parameter 'step_id' is set
        if ('step_id' not in params or
                params['step_id'] is None):
            raise ValueError("Missing the required parameter `step_id` when calling `replace_step_parameters`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501
        if 'step_id' in params:
            if isinstance(params['step_id'], TeamCityObject):
                path_params['stepId'] = params['step_id'].locator_id
            else:
                path_params['stepId'] = params['step_id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/steps/{stepId}/parameters', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Properties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __replace_steps_with_http_info(self, bt_locator, **kwargs):  # noqa: E501
        """replace_steps  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__replace_steps_with_http_info(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str fields:
        :param Steps body:
        :return: Steps
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'fields', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_steps" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `replace_steps`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/steps', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Steps',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __replace_trigger_with_http_info(self, bt_locator, trigger_locator, **kwargs):  # noqa: E501
        """replace_trigger  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__replace_trigger_with_http_info(bt_locator, trigger_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str trigger_locator: (required)
        :param str fields:
        :param Trigger body:
        :return: Trigger
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'trigger_locator', 'fields', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_trigger" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `replace_trigger`")  # noqa: E501
        # verify the required parameter 'trigger_locator' is set
        if ('trigger_locator' not in params or
                params['trigger_locator'] is None):
            raise ValueError("Missing the required parameter `trigger_locator` when calling `replace_trigger`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501
        if 'trigger_locator' in params:
            if isinstance(params['trigger_locator'], TeamCityObject):
                path_params['triggerLocator'] = params['trigger_locator'].locator_id
            else:
                path_params['triggerLocator'] = params['trigger_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/triggers/{triggerLocator}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Trigger',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __replace_triggers_with_http_info(self, bt_locator, **kwargs):  # noqa: E501
        """replace_triggers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__replace_triggers_with_http_info(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str fields:
        :param Triggers body:
        :return: Triggers
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'fields', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_triggers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `replace_triggers`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/triggers', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Triggers',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __replace_vcs_root_entries_with_http_info(self, bt_locator, **kwargs):  # noqa: E501
        """replace_vcs_root_entries  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__replace_vcs_root_entries_with_http_info(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param VcsRootEntries body:
        :param str fields:
        :return: VcsRootEntries
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'body', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_vcs_root_entries" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `replace_vcs_root_entries`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/vcs-root-entries', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VcsRootEntries',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __serve_branches_with_http_info(self, bt_locator, **kwargs):  # noqa: E501
        """serve_branches  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__serve_branches_with_http_info(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str locator:
        :param str fields:
        :return: Branches
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method serve_branches" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `serve_branches`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []
        if 'locator' in params:
            query_params.append(('locator', params['locator']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/branches', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Branches',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __serve_build_field_with_http_info(self, bt_locator, build_locator, field, **kwargs):  # noqa: E501
        """serve_build_field  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__serve_build_field_with_http_info(bt_locator, build_locator, field, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str build_locator: (required)
        :param str field: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'build_locator', 'field']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method serve_build_field" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `serve_build_field`")  # noqa: E501
        # verify the required parameter 'build_locator' is set
        if ('build_locator' not in params or
                params['build_locator'] is None):
            raise ValueError("Missing the required parameter `build_locator` when calling `serve_build_field`")  # noqa: E501
        # verify the required parameter 'field' is set
        if ('field' not in params or
                params['field'] is None):
            raise ValueError("Missing the required parameter `field` when calling `serve_build_field`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501
        if 'build_locator' in params:
            if isinstance(params['build_locator'], TeamCityObject):
                path_params['buildLocator'] = params['build_locator'].locator_id
            else:
                path_params['buildLocator'] = params['build_locator']  # noqa: E501
        if 'field' in params:
            if isinstance(params['field'], TeamCityObject):
                path_params['field'] = params['field'].locator_id
            else:
                path_params['field'] = params['field']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/builds/{buildLocator}/{field}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __serve_build_type_builds_tags_with_http_info(self, bt_locator, field, **kwargs):  # noqa: E501
        """serve_build_type_builds_tags  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__serve_build_type_builds_tags_with_http_info(bt_locator, field, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str field: (required)
        :return: Tags
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'field']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method serve_build_type_builds_tags" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `serve_build_type_builds_tags`")  # noqa: E501
        # verify the required parameter 'field' is set
        if ('field' not in params or
                params['field'] is None):
            raise ValueError("Missing the required parameter `field` when calling `serve_build_type_builds_tags`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501
        if 'field' in params:
            if isinstance(params['field'], TeamCityObject):
                path_params['field'] = params['field'].locator_id
            else:
                path_params['field'] = params['field']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/buildTags', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Tags',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __serve_build_type_field_with_http_info(self, bt_locator, field, **kwargs):  # noqa: E501
        """serve_build_type_field  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__serve_build_type_field_with_http_info(bt_locator, field, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str field: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'field']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method serve_build_type_field" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `serve_build_type_field`")  # noqa: E501
        # verify the required parameter 'field' is set
        if ('field' not in params or
                params['field'] is None):
            raise ValueError("Missing the required parameter `field` when calling `serve_build_type_field`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501
        if 'field' in params:
            if isinstance(params['field'], TeamCityObject):
                path_params['field'] = params['field'].locator_id
            else:
                path_params['field'] = params['field']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/{field}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __serve_build_type_xml_with_http_info(self, bt_locator, **kwargs):  # noqa: E501
        """serve_build_type_xml  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__serve_build_type_xml_with_http_info(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str fields:
        :return: BuildType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method serve_build_type_xml" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `serve_build_type_xml`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BuildType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __serve_build_with_project_with_http_info(self, bt_locator, build_locator, **kwargs):  # noqa: E501
        """serve_build_with_project  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__serve_build_with_project_with_http_info(bt_locator, build_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str build_locator: (required)
        :param str fields:
        :return: Build
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'build_locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method serve_build_with_project" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `serve_build_with_project`")  # noqa: E501
        # verify the required parameter 'build_locator' is set
        if ('build_locator' not in params or
                params['build_locator'] is None):
            raise ValueError("Missing the required parameter `build_locator` when calling `serve_build_with_project`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501
        if 'build_locator' in params:
            if isinstance(params['build_locator'], TeamCityObject):
                path_params['buildLocator'] = params['build_locator'].locator_id
            else:
                path_params['buildLocator'] = params['build_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/builds/{buildLocator}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Build',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __serve_builds_with_http_info(self, bt_locator, **kwargs):  # noqa: E501
        """serve_builds  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__serve_builds_with_http_info(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str status:
        :param str triggered_by_user:
        :param bool include_personal:
        :param bool include_canceled:
        :param bool only_pinned:
        :param list[str] tag:
        :param str agent_name:
        :param str since_build:
        :param str since_date:
        :param int start:
        :param int count:
        :param str locator:
        :param str fields:
        :return: Builds
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'status', 'triggered_by_user', 'include_personal', 'include_canceled', 'only_pinned', 'tag', 'agent_name', 'since_build', 'since_date', 'start', 'count', 'locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method serve_builds" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `serve_builds`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'triggered_by_user' in params:
            query_params.append(('triggeredByUser', params['triggered_by_user']))  # noqa: E501
        if 'include_personal' in params:
            query_params.append(('includePersonal', params['include_personal']))  # noqa: E501
        if 'include_canceled' in params:
            query_params.append(('includeCanceled', params['include_canceled']))  # noqa: E501
        if 'only_pinned' in params:
            query_params.append(('onlyPinned', params['only_pinned']))  # noqa: E501
        if 'tag' in params:
            query_params.append(('tag', params['tag']))  # noqa: E501
            collection_formats['tag'] = 'multi'  # noqa: E501
        if 'agent_name' in params:
            query_params.append(('agentName', params['agent_name']))  # noqa: E501
        if 'since_build' in params:
            query_params.append(('sinceBuild', params['since_build']))  # noqa: E501
        if 'since_date' in params:
            query_params.append(('sinceDate', params['since_date']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'locator' in params:
            query_params.append(('locator', params['locator']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/builds', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Builds',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __set_build_type_field_with_http_info(self, bt_locator, field, **kwargs):  # noqa: E501
        """set_build_type_field  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__set_build_type_field_with_http_info(bt_locator, field, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str field: (required)
        :param str body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'field', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_build_type_field" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `set_build_type_field`")  # noqa: E501
        # verify the required parameter 'field' is set
        if ('field' not in params or
                params['field'] is None):
            raise ValueError("Missing the required parameter `field` when calling `set_build_type_field`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501
        if 'field' in params:
            if isinstance(params['field'], TeamCityObject):
                path_params['field'] = params['field'].locator_id
            else:
                path_params['field'] = params['field']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/{field}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __set_parameter_with_http_info(self, bt_locator, **kwargs):  # noqa: E501
        """set_parameter  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__set_parameter_with_http_info(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param ModelProperty body:
        :param str fields:
        :return: ModelProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'body', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_parameter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `set_parameter`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/parameters', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ModelProperty',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __set_parameter_0_with_http_info(self, name, bt_locator, **kwargs):  # noqa: E501
        """set_parameter_0  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__set_parameter_0_with_http_info(name, bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :param str bt_locator: (required)
        :param ModelProperty body:
        :param str fields:
        :return: ModelProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'bt_locator', 'body', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_parameter_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `set_parameter_0`")  # noqa: E501
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `set_parameter_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            if isinstance(params['name'], TeamCityObject):
                path_params['name'] = params['name'].locator_id
            else:
                path_params['name'] = params['name']  # noqa: E501
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/parameters/{name}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ModelProperty',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __set_parameter_1_with_http_info(self, bt_locator, **kwargs):  # noqa: E501
        """set_parameter_1  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__set_parameter_1_with_http_info(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param ModelProperty body:
        :param str fields:
        :return: ModelProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'body', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_parameter_1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `set_parameter_1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/settings', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ModelProperty',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __set_parameter_2_with_http_info(self, name, bt_locator, **kwargs):  # noqa: E501
        """set_parameter_2  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__set_parameter_2_with_http_info(name, bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :param str bt_locator: (required)
        :param ModelProperty body:
        :param str fields:
        :return: ModelProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'bt_locator', 'body', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_parameter_2" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `set_parameter_2`")  # noqa: E501
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `set_parameter_2`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            if isinstance(params['name'], TeamCityObject):
                path_params['name'] = params['name'].locator_id
            else:
                path_params['name'] = params['name']  # noqa: E501
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/settings/{name}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ModelProperty',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __set_parameter_type_with_http_info(self, name, bt_locator, **kwargs):  # noqa: E501
        """set_parameter_type  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__set_parameter_type_with_http_info(name, bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :param str bt_locator: (required)
        :param Type body:
        :return: Type
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'bt_locator', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_parameter_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `set_parameter_type`")  # noqa: E501
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `set_parameter_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            if isinstance(params['name'], TeamCityObject):
                path_params['name'] = params['name'].locator_id
            else:
                path_params['name'] = params['name']  # noqa: E501
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/parameters/{name}/type', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Type',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __set_parameter_type_raw_value_with_http_info(self, name, bt_locator, **kwargs):  # noqa: E501
        """set_parameter_type_raw_value  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__set_parameter_type_raw_value_with_http_info(name, bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :param str bt_locator: (required)
        :param str body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'bt_locator', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_parameter_type_raw_value" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `set_parameter_type_raw_value`")  # noqa: E501
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `set_parameter_type_raw_value`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            if isinstance(params['name'], TeamCityObject):
                path_params['name'] = params['name'].locator_id
            else:
                path_params['name'] = params['name']  # noqa: E501
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/parameters/{name}/type/rawValue', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __set_parameter_value_long_with_http_info(self, name, bt_locator, **kwargs):  # noqa: E501
        """set_parameter_value_long  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__set_parameter_value_long_with_http_info(name, bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :param str bt_locator: (required)
        :param str body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'bt_locator', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_parameter_value_long" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `set_parameter_value_long`")  # noqa: E501
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `set_parameter_value_long`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            if isinstance(params['name'], TeamCityObject):
                path_params['name'] = params['name'].locator_id
            else:
                path_params['name'] = params['name']  # noqa: E501
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/parameters/{name}/value', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __set_parameter_value_long_0_with_http_info(self, name, bt_locator, **kwargs):  # noqa: E501
        """set_parameter_value_long_0  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__set_parameter_value_long_0_with_http_info(name, bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :param str bt_locator: (required)
        :param str body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'bt_locator', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_parameter_value_long_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `set_parameter_value_long_0`")  # noqa: E501
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `set_parameter_value_long_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            if isinstance(params['name'], TeamCityObject):
                path_params['name'] = params['name'].locator_id
            else:
                path_params['name'] = params['name']  # noqa: E501
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/settings/{name}/value', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __set_parameters_with_http_info(self, bt_locator, **kwargs):  # noqa: E501
        """set_parameters  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__set_parameters_with_http_info(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param Properties body:
        :param str fields:
        :return: Properties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'body', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_parameters" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `set_parameters`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/parameters', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Properties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __set_parameters_0_with_http_info(self, bt_locator, **kwargs):  # noqa: E501
        """set_parameters_0  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__set_parameters_0_with_http_info(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param Properties body:
        :param str fields:
        :return: Properties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'body', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_parameters_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `set_parameters_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/settings', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Properties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __set_templates_with_http_info(self, bt_locator, **kwargs):  # noqa: E501
        """set_templates  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__set_templates_with_http_info(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param BuildTypes body:
        :param bool optimize_settings:
        :param str fields:
        :return: BuildTypes
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'body', 'optimize_settings', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_templates" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `set_templates`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []
        if 'optimize_settings' in params:
            query_params.append(('optimizeSettings', params['optimize_settings']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/templates', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BuildTypes',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __set_vcs_labeling_options_with_http_info(self, bt_locator, **kwargs):  # noqa: E501
        """set_vcs_labeling_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__set_vcs_labeling_options_with_http_info(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param VcsLabeling body:
        :return: VcsLabeling
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_vcs_labeling_options" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `set_vcs_labeling_options`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/vcsLabeling', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VcsLabeling',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __update_vcs_root_entry_with_http_info(self, bt_locator, vcs_root_locator, **kwargs):  # noqa: E501
        """update_vcs_root_entry  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__update_vcs_root_entry_with_http_info(bt_locator, vcs_root_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str vcs_root_locator: (required)
        :param VcsRootEntry body:
        :param str fields:
        :return: VcsRootEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'vcs_root_locator', 'body', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_vcs_root_entry" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `update_vcs_root_entry`")  # noqa: E501
        # verify the required parameter 'vcs_root_locator' is set
        if ('vcs_root_locator' not in params or
                params['vcs_root_locator'] is None):
            raise ValueError("Missing the required parameter `vcs_root_locator` when calling `update_vcs_root_entry`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501
        if 'vcs_root_locator' in params:
            if isinstance(params['vcs_root_locator'], TeamCityObject):
                path_params['vcsRootLocator'] = params['vcs_root_locator'].locator_id
            else:
                path_params['vcsRootLocator'] = params['vcs_root_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/vcs-root-entries/{vcsRootLocator}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VcsRootEntry',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __update_vcs_root_entry_checkout_rules_with_http_info(self, bt_locator, vcs_root_locator, **kwargs):  # noqa: E501
        """update_vcs_root_entry_checkout_rules  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__update_vcs_root_entry_checkout_rules_with_http_info(bt_locator, vcs_root_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str vcs_root_locator: (required)
        :param str body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'vcs_root_locator', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_vcs_root_entry_checkout_rules" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `update_vcs_root_entry_checkout_rules`")  # noqa: E501
        # verify the required parameter 'vcs_root_locator' is set
        if ('vcs_root_locator' not in params or
                params['vcs_root_locator'] is None):
            raise ValueError("Missing the required parameter `vcs_root_locator` when calling `update_vcs_root_entry_checkout_rules`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501
        if 'vcs_root_locator' in params:
            if isinstance(params['vcs_root_locator'], TeamCityObject):
                path_params['vcsRootLocator'] = params['vcs_root_locator'].locator_id
            else:
                path_params['vcsRootLocator'] = params['vcs_root_locator']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/vcs-root-entries/{vcsRootLocator}/checkout-rules', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
