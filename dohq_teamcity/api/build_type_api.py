# coding: utf-8

"""
    TeamCity REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2018.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import
from dohq_teamcity.custom.base_model import TeamCityObject

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from dohq_teamcity.models.agent_requirement import AgentRequirement  # noqa: F401,E501
from dohq_teamcity.models.agent_requirements import AgentRequirements  # noqa: F401,E501
from dohq_teamcity.models.artifact_dependencies import ArtifactDependencies  # noqa: F401,E501
from dohq_teamcity.models.artifact_dependency import ArtifactDependency  # noqa: F401,E501
from dohq_teamcity.models.branches import Branches  # noqa: F401,E501
from dohq_teamcity.models.build_type import BuildType  # noqa: F401,E501
from dohq_teamcity.models.build_types import BuildTypes  # noqa: F401,E501
from dohq_teamcity.models.builds import Builds  # noqa: F401,E501
from dohq_teamcity.models.feature import Feature  # noqa: F401,E501
from dohq_teamcity.models.features import Features  # noqa: F401,E501
from dohq_teamcity.models.files import Files  # noqa: F401,E501
from dohq_teamcity.models.investigations import Investigations  # noqa: F401,E501
from dohq_teamcity.models.items import Items  # noqa: F401,E501
from dohq_teamcity.models.model_property import ModelProperty  # noqa: F401,E501
from dohq_teamcity.models.properties import Properties  # noqa: F401,E501
from dohq_teamcity.models.snapshot_dependencies import SnapshotDependencies  # noqa: F401,E501
from dohq_teamcity.models.snapshot_dependency import SnapshotDependency  # noqa: F401,E501
from dohq_teamcity.models.step import Step  # noqa: F401,E501
from dohq_teamcity.models.steps import Steps  # noqa: F401,E501
from dohq_teamcity.models.tags import Tags  # noqa: F401,E501
from dohq_teamcity.models.trigger import Trigger  # noqa: F401,E501
from dohq_teamcity.models.triggers import Triggers  # noqa: F401,E501
from dohq_teamcity.models.type import Type  # noqa: F401,E501
from dohq_teamcity.models.vcs_root_entries import VcsRootEntries  # noqa: F401,E501
from dohq_teamcity.models.vcs_root_entry import VcsRootEntry  # noqa: F401,E501
from dohq_teamcity.models.vcs_root_instances import VcsRootInstances  # noqa: F401,E501
from dohq_teamcity.models.file import file  # noqa: F401,E501


class BuildTypeApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """
    base_name = 'BuildType'

    def __init__(self, api_client=None):
        self.api_client = api_client

    def add_agent_requirement_to_build_type(self, bt_locator, **kwargs):  # noqa: E501
        """Add an agent requirement to the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_agent_requirement_to_build_type(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str fields:
        :param AgentRequirement body:
        :return: AgentRequirement
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__add_agent_requirement_to_build_type_with_http_info(bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__add_agent_requirement_to_build_type_with_http_info(bt_locator, **kwargs)  # noqa: E501
            return data

    def add_artifact_dependency_to_build_type(self, bt_locator, **kwargs):  # noqa: E501
        """Add an artifact dependency to the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_artifact_dependency_to_build_type(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str fields:
        :param ArtifactDependency body:
        :return: ArtifactDependency
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__add_artifact_dependency_to_build_type_with_http_info(bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__add_artifact_dependency_to_build_type_with_http_info(bt_locator, **kwargs)  # noqa: E501
            return data

    def add_build_feature_to_build_type(self, bt_locator, **kwargs):  # noqa: E501
        """Add build feature to the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_build_feature_to_build_type(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str fields:
        :param Feature body:
        :return: Feature
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__add_build_feature_to_build_type_with_http_info(bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__add_build_feature_to_build_type_with_http_info(bt_locator, **kwargs)  # noqa: E501
            return data

    def add_build_step_to_build_type(self, bt_locator, **kwargs):  # noqa: E501
        """Add a build step to the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_build_step_to_build_type(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str fields:
        :param Step body:
        :return: Step
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__add_build_step_to_build_type_with_http_info(bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__add_build_step_to_build_type_with_http_info(bt_locator, **kwargs)  # noqa: E501
            return data

    def add_build_template(self, bt_locator, **kwargs):  # noqa: E501
        """Add a build template to the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_build_template(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param BuildType body:
        :param bool optimize_settings:
        :param str fields:
        :return: BuildType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__add_build_template_with_http_info(bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__add_build_template_with_http_info(bt_locator, **kwargs)  # noqa: E501
            return data

    def add_parameter_to_build_feature(self, bt_locator, feature_id, parameter_name, **kwargs):  # noqa: E501
        """Update build feature parameter for the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_parameter_to_build_feature(bt_locator, feature_id, parameter_name, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str feature_id: (required)
        :param str parameter_name: (required)
        :param str body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__add_parameter_to_build_feature_with_http_info(bt_locator, feature_id, parameter_name, **kwargs)  # noqa: E501
        else:
            (data) = self.__add_parameter_to_build_feature_with_http_info(bt_locator, feature_id, parameter_name, **kwargs)  # noqa: E501
            return data

    def add_parameter_to_build_step(self, bt_locator, step_id, parameter_name, **kwargs):  # noqa: E501
        """Add a parameter to a build step of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_parameter_to_build_step(bt_locator, step_id, parameter_name, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str step_id: (required)
        :param str parameter_name: (required)
        :param str body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__add_parameter_to_build_step_with_http_info(bt_locator, step_id, parameter_name, **kwargs)  # noqa: E501
        else:
            (data) = self.__add_parameter_to_build_step_with_http_info(bt_locator, step_id, parameter_name, **kwargs)  # noqa: E501
            return data

    def add_snapshot_dependency_to_build_type(self, bt_locator, **kwargs):  # noqa: E501
        """Add a snapshot dependency to the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_snapshot_dependency_to_build_type(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str fields:
        :param SnapshotDependency body:
        :return: SnapshotDependency
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__add_snapshot_dependency_to_build_type_with_http_info(bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__add_snapshot_dependency_to_build_type_with_http_info(bt_locator, **kwargs)  # noqa: E501
            return data

    def add_trigger_to_build_type(self, bt_locator, **kwargs):  # noqa: E501
        """Add a trigger to the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_trigger_to_build_type(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str fields:
        :param Trigger body:
        :return: Trigger
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__add_trigger_to_build_type_with_http_info(bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__add_trigger_to_build_type_with_http_info(bt_locator, **kwargs)  # noqa: E501
            return data

    def add_vcs_root_to_build_type(self, bt_locator, **kwargs):  # noqa: E501
        """Add a VCS root to the matching build.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_vcs_root_to_build_type(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param VcsRootEntry body:
        :param str fields:
        :return: VcsRootEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__add_vcs_root_to_build_type_with_http_info(bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__add_vcs_root_to_build_type_with_http_info(bt_locator, **kwargs)  # noqa: E501
            return data

    def create_build_parameter_of_build_type(self, bt_locator, **kwargs):  # noqa: E501
        """Create a build parameter.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_build_parameter_of_build_type(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param ModelProperty body:
        :param str fields:
        :return: ModelProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__create_build_parameter_of_build_type_with_http_info(bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__create_build_parameter_of_build_type_with_http_info(bt_locator, **kwargs)  # noqa: E501
            return data

    def create_build_type(self, **kwargs):  # noqa: E501
        """Create a new build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_build_type(async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param BuildType body:
        :param str fields:
        :return: BuildType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__create_build_type_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.__create_build_type_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_agent_requirement(self, bt_locator, agent_requirement_locator, **kwargs):  # noqa: E501
        """Remove an agent requirement of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_agent_requirement(bt_locator, agent_requirement_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str agent_requirement_locator: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__delete_agent_requirement_with_http_info(bt_locator, agent_requirement_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__delete_agent_requirement_with_http_info(bt_locator, agent_requirement_locator, **kwargs)  # noqa: E501
            return data

    def delete_artifact_dependency(self, bt_locator, artifact_dep_locator, **kwargs):  # noqa: E501
        """Remove an artifact dependency from the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_artifact_dependency(bt_locator, artifact_dep_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str artifact_dep_locator: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__delete_artifact_dependency_with_http_info(bt_locator, artifact_dep_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__delete_artifact_dependency_with_http_info(bt_locator, artifact_dep_locator, **kwargs)  # noqa: E501
            return data

    def delete_build_parameter_of_build_type(self, name, bt_locator, **kwargs):  # noqa: E501
        """Delete build parameter.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_build_parameter_of_build_type(name, bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str name: (required)
        :param str bt_locator: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__delete_build_parameter_of_build_type_with_http_info(name, bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__delete_build_parameter_of_build_type_with_http_info(name, bt_locator, **kwargs)  # noqa: E501
            return data

    def delete_build_parameters_of_build_type(self, bt_locator, **kwargs):  # noqa: E501
        """Delete all build parameters.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_build_parameters_of_build_type(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__delete_build_parameters_of_build_type_with_http_info(bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__delete_build_parameters_of_build_type_with_http_info(bt_locator, **kwargs)  # noqa: E501
            return data

    def delete_build_step(self, bt_locator, step_id, **kwargs):  # noqa: E501
        """Delete a build step of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_build_step(bt_locator, step_id, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str step_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__delete_build_step_with_http_info(bt_locator, step_id, **kwargs)  # noqa: E501
        else:
            (data) = self.__delete_build_step_with_http_info(bt_locator, step_id, **kwargs)  # noqa: E501
            return data

    def delete_build_step_parameters(self, bt_locator, step_id, **kwargs):  # noqa: E501
        """Update a parameter of a build step of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_build_step_parameters(bt_locator, step_id, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str step_id: (required)
        :param Properties body:
        :param str fields:
        :return: Properties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__delete_build_step_parameters_with_http_info(bt_locator, step_id, **kwargs)  # noqa: E501
        else:
            (data) = self.__delete_build_step_parameters_with_http_info(bt_locator, step_id, **kwargs)  # noqa: E501
            return data

    def delete_build_type(self, bt_locator, **kwargs):  # noqa: E501
        """Delete build configuration matching the locator.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_build_type(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__delete_build_type_with_http_info(bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__delete_build_type_with_http_info(bt_locator, **kwargs)  # noqa: E501
            return data

    def delete_feature_of_build_type(self, bt_locator, feature_id, **kwargs):  # noqa: E501
        """Remove a build feature of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_feature_of_build_type(bt_locator, feature_id, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str feature_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__delete_feature_of_build_type_with_http_info(bt_locator, feature_id, **kwargs)  # noqa: E501
        else:
            (data) = self.__delete_feature_of_build_type_with_http_info(bt_locator, feature_id, **kwargs)  # noqa: E501
            return data

    def delete_snapshot_dependency(self, bt_locator, snapshot_dep_locator, **kwargs):  # noqa: E501
        """Delete a snapshot dependency of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_snapshot_dependency(bt_locator, snapshot_dep_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str snapshot_dep_locator: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__delete_snapshot_dependency_with_http_info(bt_locator, snapshot_dep_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__delete_snapshot_dependency_with_http_info(bt_locator, snapshot_dep_locator, **kwargs)  # noqa: E501
            return data

    def delete_trigger(self, bt_locator, trigger_locator, **kwargs):  # noqa: E501
        """Delete a trigger of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_trigger(bt_locator, trigger_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str trigger_locator: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__delete_trigger_with_http_info(bt_locator, trigger_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__delete_trigger_with_http_info(bt_locator, trigger_locator, **kwargs)  # noqa: E501
            return data

    def delete_vcs_root_of_build_type(self, bt_locator, vcs_root_locator, **kwargs):  # noqa: E501
        """Remove a VCS root of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_vcs_root_of_build_type(bt_locator, vcs_root_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str vcs_root_locator: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__delete_vcs_root_of_build_type_with_http_info(bt_locator, vcs_root_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__delete_vcs_root_of_build_type_with_http_info(bt_locator, vcs_root_locator, **kwargs)  # noqa: E501
            return data

    def download_file_of_build_type(self, path, bt_locator, **kwargs):  # noqa: E501
        """Download specific file.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.download_file_of_build_type(path, bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str path: (required)
        :param str bt_locator: (required)
        :param bool resolve_parameters:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__download_file_of_build_type_with_http_info(path, bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__download_file_of_build_type_with_http_info(path, bt_locator, **kwargs)  # noqa: E501
            return data

    def get_agent_requirement(self, bt_locator, agent_requirement_locator, **kwargs):  # noqa: E501
        """Get an agent requirement of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_agent_requirement(bt_locator, agent_requirement_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str agent_requirement_locator: (required)
        :param str fields:
        :return: AgentRequirement
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_agent_requirement_with_http_info(bt_locator, agent_requirement_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_agent_requirement_with_http_info(bt_locator, agent_requirement_locator, **kwargs)  # noqa: E501
            return data

    def get_agent_requirement_parameter(self, bt_locator, agent_requirement_locator, field_name, **kwargs):  # noqa: E501
        """Get a setting of an agent requirement of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_agent_requirement_parameter(bt_locator, agent_requirement_locator, field_name, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str agent_requirement_locator: (required)
        :param str field_name: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_agent_requirement_parameter_with_http_info(bt_locator, agent_requirement_locator, field_name, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_agent_requirement_parameter_with_http_info(bt_locator, agent_requirement_locator, field_name, **kwargs)  # noqa: E501
            return data

    def get_aliases(self, bt_locator, **kwargs):  # noqa: E501
        """Get external IDs of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_aliases(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str field:
        :return: Items
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_aliases_with_http_info(bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_aliases_with_http_info(bt_locator, **kwargs)  # noqa: E501
            return data

    def get_all_agent_requirements(self, bt_locator, **kwargs):  # noqa: E501
        """Get all agent requirements of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_agent_requirements(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str fields:
        :return: AgentRequirements
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_all_agent_requirements_with_http_info(bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_all_agent_requirements_with_http_info(bt_locator, **kwargs)  # noqa: E501
            return data

    def get_all_artifact_dependencies(self, bt_locator, **kwargs):  # noqa: E501
        """Get all artifact dependencies of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_artifact_dependencies(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str fields:
        :return: ArtifactDependencies
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_all_artifact_dependencies_with_http_info(bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_all_artifact_dependencies_with_http_info(bt_locator, **kwargs)  # noqa: E501
            return data

    def get_all_branches_of_build_type(self, bt_locator, **kwargs):  # noqa: E501
        """Get all branches of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_branches_of_build_type(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str locator:
        :param str fields:
        :return: Branches
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_all_branches_of_build_type_with_http_info(bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_all_branches_of_build_type_with_http_info(bt_locator, **kwargs)  # noqa: E501
            return data

    def get_all_build_feature_parameters(self, bt_locator, feature_id, **kwargs):  # noqa: E501
        """Get all parameters of a build feature of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_build_feature_parameters(bt_locator, feature_id, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str feature_id: (required)
        :param str fields:
        :return: Properties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_all_build_feature_parameters_with_http_info(bt_locator, feature_id, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_all_build_feature_parameters_with_http_info(bt_locator, feature_id, **kwargs)  # noqa: E501
            return data

    def get_all_build_features(self, bt_locator, **kwargs):  # noqa: E501
        """Get all build features of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_build_features(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str fields:
        :return: Features
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_all_build_features_with_http_info(bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_all_build_features_with_http_info(bt_locator, **kwargs)  # noqa: E501
            return data

    def get_all_build_step_parameters(self, bt_locator, step_id, **kwargs):  # noqa: E501
        """Get all parameters of a build step of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_build_step_parameters(bt_locator, step_id, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str step_id: (required)
        :param str fields:
        :return: Properties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_all_build_step_parameters_with_http_info(bt_locator, step_id, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_all_build_step_parameters_with_http_info(bt_locator, step_id, **kwargs)  # noqa: E501
            return data

    def get_all_build_steps(self, bt_locator, **kwargs):  # noqa: E501
        """Get all build steps of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_build_steps(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str fields:
        :return: Steps
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_all_build_steps_with_http_info(bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_all_build_steps_with_http_info(bt_locator, **kwargs)  # noqa: E501
            return data

    def get_all_build_templates(self, bt_locator, **kwargs):  # noqa: E501
        """Get all build templates of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_build_templates(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str fields:
        :return: BuildTypes
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_all_build_templates_with_http_info(bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_all_build_templates_with_http_info(bt_locator, **kwargs)  # noqa: E501
            return data

    def get_all_build_types(self, **kwargs):  # noqa: E501
        """Get all build configurations.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_build_types(async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str locator:
        :param str fields:
        :return: BuildTypes
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_all_build_types_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.__get_all_build_types_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_all_investigations_of_build_type(self, bt_locator, **kwargs):  # noqa: E501
        """Get all investigations of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_investigations_of_build_type(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str fields:
        :return: Investigations
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_all_investigations_of_build_type_with_http_info(bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_all_investigations_of_build_type_with_http_info(bt_locator, **kwargs)  # noqa: E501
            return data

    def get_all_snapshot_dependencies(self, bt_locator, **kwargs):  # noqa: E501
        """Get all snapshot dependencies of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_snapshot_dependencies(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str fields:
        :return: SnapshotDependencies
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_all_snapshot_dependencies_with_http_info(bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_all_snapshot_dependencies_with_http_info(bt_locator, **kwargs)  # noqa: E501
            return data

    def get_all_triggers(self, bt_locator, **kwargs):  # noqa: E501
        """Get all triggers of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_triggers(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str fields:
        :return: Triggers
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_all_triggers_with_http_info(bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_all_triggers_with_http_info(bt_locator, **kwargs)  # noqa: E501
            return data

    def get_all_vcs_roots_of_build_type(self, bt_locator, **kwargs):  # noqa: E501
        """Get all VCS roots of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_vcs_roots_of_build_type(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str fields:
        :return: VcsRootEntries
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_all_vcs_roots_of_build_type_with_http_info(bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_all_vcs_roots_of_build_type_with_http_info(bt_locator, **kwargs)  # noqa: E501
            return data

    def get_artifact_dependency(self, bt_locator, artifact_dep_locator, **kwargs):  # noqa: E501
        """Get an artifact dependency of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_artifact_dependency(bt_locator, artifact_dep_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str artifact_dep_locator: (required)
        :param str fields:
        :return: ArtifactDependency
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_artifact_dependency_with_http_info(bt_locator, artifact_dep_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_artifact_dependency_with_http_info(bt_locator, artifact_dep_locator, **kwargs)  # noqa: E501
            return data

    def get_artifact_dependency_parameter(self, bt_locator, artifact_dep_locator, field_name, **kwargs):  # noqa: E501
        """Get a parameter of an artifact dependency of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_artifact_dependency_parameter(bt_locator, artifact_dep_locator, field_name, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str artifact_dep_locator: (required)
        :param str field_name: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_artifact_dependency_parameter_with_http_info(bt_locator, artifact_dep_locator, field_name, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_artifact_dependency_parameter_with_http_info(bt_locator, artifact_dep_locator, field_name, **kwargs)  # noqa: E501
            return data

    def get_build_feature(self, bt_locator, feature_id, **kwargs):  # noqa: E501
        """Get a build feature of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_build_feature(bt_locator, feature_id, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str feature_id: (required)
        :param str fields:
        :return: Feature
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_build_feature_with_http_info(bt_locator, feature_id, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_build_feature_with_http_info(bt_locator, feature_id, **kwargs)  # noqa: E501
            return data

    def get_build_feature_parameter(self, bt_locator, feature_id, parameter_name, **kwargs):  # noqa: E501
        """Get a parameter of a build feature of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_build_feature_parameter(bt_locator, feature_id, parameter_name, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str feature_id: (required)
        :param str parameter_name: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_build_feature_parameter_with_http_info(bt_locator, feature_id, parameter_name, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_build_feature_parameter_with_http_info(bt_locator, feature_id, parameter_name, **kwargs)  # noqa: E501
            return data

    def get_build_feature_setting(self, bt_locator, feature_id, name, **kwargs):  # noqa: E501
        """Get the setting of a build feature of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_build_feature_setting(bt_locator, feature_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str feature_id: (required)
        :param str name: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_build_feature_setting_with_http_info(bt_locator, feature_id, name, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_build_feature_setting_with_http_info(bt_locator, feature_id, name, **kwargs)  # noqa: E501
            return data

    def get_build_parameter_of_build_type(self, name, bt_locator, **kwargs):  # noqa: E501
        """Get build parameter.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_build_parameter_of_build_type(name, bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str name: (required)
        :param str bt_locator: (required)
        :param str fields:
        :return: ModelProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_build_parameter_of_build_type_with_http_info(name, bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_build_parameter_of_build_type_with_http_info(name, bt_locator, **kwargs)  # noqa: E501
            return data

    def get_build_parameter_specification_of_build_type(self, name, bt_locator, **kwargs):  # noqa: E501
        """Get build parameter specification.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_build_parameter_specification_of_build_type(name, bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str name: (required)
        :param str bt_locator: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_build_parameter_specification_of_build_type_with_http_info(name, bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_build_parameter_specification_of_build_type_with_http_info(name, bt_locator, **kwargs)  # noqa: E501
            return data

    def get_build_parameter_type_of_build_type(self, name, bt_locator, **kwargs):  # noqa: E501
        """Get type of build parameter.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_build_parameter_type_of_build_type(name, bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str name: (required)
        :param str bt_locator: (required)
        :return: Type
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_build_parameter_type_of_build_type_with_http_info(name, bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_build_parameter_type_of_build_type_with_http_info(name, bt_locator, **kwargs)  # noqa: E501
            return data

    def get_build_parameter_value_of_build_type(self, name, bt_locator, **kwargs):  # noqa: E501
        """Get value of build parameter.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_build_parameter_value_of_build_type(name, bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str name: (required)
        :param str bt_locator: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_build_parameter_value_of_build_type_with_http_info(name, bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_build_parameter_value_of_build_type_with_http_info(name, bt_locator, **kwargs)  # noqa: E501
            return data

    def get_build_parameters_of_build_type(self, bt_locator, **kwargs):  # noqa: E501
        """Get build parameters.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_build_parameters_of_build_type(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str locator:
        :param str fields:
        :return: Properties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_build_parameters_of_build_type_with_http_info(bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_build_parameters_of_build_type_with_http_info(bt_locator, **kwargs)  # noqa: E501
            return data

    def get_build_step(self, bt_locator, step_id, **kwargs):  # noqa: E501
        """Get a build step of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_build_step(bt_locator, step_id, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str step_id: (required)
        :param str fields:
        :return: Step
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_build_step_with_http_info(bt_locator, step_id, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_build_step_with_http_info(bt_locator, step_id, **kwargs)  # noqa: E501
            return data

    def get_build_step_parameter(self, bt_locator, step_id, parameter_name, **kwargs):  # noqa: E501
        """Get a parameter of a build step of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_build_step_parameter(bt_locator, step_id, parameter_name, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str step_id: (required)
        :param str parameter_name: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_build_step_parameter_with_http_info(bt_locator, step_id, parameter_name, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_build_step_parameter_with_http_info(bt_locator, step_id, parameter_name, **kwargs)  # noqa: E501
            return data

    def get_build_step_setting(self, bt_locator, step_id, field_name, **kwargs):  # noqa: E501
        """Get the setting of a build step of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_build_step_setting(bt_locator, step_id, field_name, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str step_id: (required)
        :param str field_name: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_build_step_setting_with_http_info(bt_locator, step_id, field_name, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_build_step_setting_with_http_info(bt_locator, step_id, field_name, **kwargs)  # noqa: E501
            return data

    def get_build_template(self, bt_locator, template_locator, **kwargs):  # noqa: E501
        """Get a template of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_build_template(bt_locator, template_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str template_locator: (required)
        :param str fields:
        :return: BuildType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_build_template_with_http_info(bt_locator, template_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_build_template_with_http_info(bt_locator, template_locator, **kwargs)  # noqa: E501
            return data

    def get_build_type(self, bt_locator, **kwargs):  # noqa: E501
        """Get build configuration matching the locator.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_build_type(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str fields:
        :return: BuildType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_build_type_with_http_info(bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_build_type_with_http_info(bt_locator, **kwargs)  # noqa: E501
            return data

    def get_build_type_build_tags(self, bt_locator, **kwargs):  # noqa: E501
        """Get tags of builds of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_build_type_build_tags(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str field:
        :return: Tags
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_build_type_build_tags_with_http_info(bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_build_type_build_tags_with_http_info(bt_locator, **kwargs)  # noqa: E501
            return data

    def get_build_type_builds(self, bt_locator, **kwargs):  # noqa: E501
        """Get builds of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_build_type_builds(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str fields:
        :return: Builds
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_build_type_builds_with_http_info(bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_build_type_builds_with_http_info(bt_locator, **kwargs)  # noqa: E501
            return data

    def get_build_type_field(self, bt_locator, field, **kwargs):  # noqa: E501
        """Get a field of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_build_type_field(bt_locator, field, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str field: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_build_type_field_with_http_info(bt_locator, field, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_build_type_field_with_http_info(bt_locator, field, **kwargs)  # noqa: E501
            return data

    def get_build_type_settings_file(self, bt_locator, **kwargs):  # noqa: E501
        """Get the settings file of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_build_type_settings_file(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_build_type_settings_file_with_http_info(bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_build_type_settings_file_with_http_info(bt_locator, **kwargs)  # noqa: E501
            return data

    def get_file_metadata_of_build_type(self, path, bt_locator, **kwargs):  # noqa: E501
        """Get metadata of specific file.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_file_metadata_of_build_type(path, bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str path: (required)
        :param str bt_locator: (required)
        :param str fields:
        :param bool resolve_parameters:
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_file_metadata_of_build_type_with_http_info(path, bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_file_metadata_of_build_type_with_http_info(path, bt_locator, **kwargs)  # noqa: E501
            return data

    def get_files_list_for_subpath_of_build_type(self, path, bt_locator, **kwargs):  # noqa: E501
        """List files under this path.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_files_list_for_subpath_of_build_type(path, bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str path: (required)
        :param str bt_locator: (required)
        :param str base_path:
        :param str locator:
        :param str fields:
        :param bool resolve_parameters:
        :return: Files
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_files_list_for_subpath_of_build_type_with_http_info(path, bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_files_list_for_subpath_of_build_type_with_http_info(path, bt_locator, **kwargs)  # noqa: E501
            return data

    def get_files_list_of_build_type(self, bt_locator, **kwargs):  # noqa: E501
        """List all files.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_files_list_of_build_type(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str base_path:
        :param str locator:
        :param str fields:
        :param bool resolve_parameters:
        :return: Files
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_files_list_of_build_type_with_http_info(bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_files_list_of_build_type_with_http_info(bt_locator, **kwargs)  # noqa: E501
            return data

    def get_snapshot_dependency(self, bt_locator, snapshot_dep_locator, **kwargs):  # noqa: E501
        """Get a snapshot dependency of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_snapshot_dependency(bt_locator, snapshot_dep_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str snapshot_dep_locator: (required)
        :param str fields:
        :return: SnapshotDependency
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_snapshot_dependency_with_http_info(bt_locator, snapshot_dep_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_snapshot_dependency_with_http_info(bt_locator, snapshot_dep_locator, **kwargs)  # noqa: E501
            return data

    def get_trigger(self, bt_locator, trigger_locator, **kwargs):  # noqa: E501
        """Get a trigger of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_trigger(bt_locator, trigger_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str trigger_locator: (required)
        :param str fields:
        :return: Trigger
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_trigger_with_http_info(bt_locator, trigger_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_trigger_with_http_info(bt_locator, trigger_locator, **kwargs)  # noqa: E501
            return data

    def get_trigger_parameter(self, bt_locator, trigger_locator, field_name, **kwargs):  # noqa: E501
        """Get a parameter of a trigger of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_trigger_parameter(bt_locator, trigger_locator, field_name, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str trigger_locator: (required)
        :param str field_name: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_trigger_parameter_with_http_info(bt_locator, trigger_locator, field_name, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_trigger_parameter_with_http_info(bt_locator, trigger_locator, field_name, **kwargs)  # noqa: E501
            return data

    def get_vcs_root(self, bt_locator, vcs_root_locator, **kwargs):  # noqa: E501
        """Get a VCS root of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vcs_root(bt_locator, vcs_root_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str vcs_root_locator: (required)
        :param str fields:
        :return: VcsRootEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_vcs_root_with_http_info(bt_locator, vcs_root_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_vcs_root_with_http_info(bt_locator, vcs_root_locator, **kwargs)  # noqa: E501
            return data

    def get_vcs_root_checkout_rules(self, bt_locator, vcs_root_locator, **kwargs):  # noqa: E501
        """Get checkout rules of a VCS root of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vcs_root_checkout_rules(bt_locator, vcs_root_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str vcs_root_locator: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_vcs_root_checkout_rules_with_http_info(bt_locator, vcs_root_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_vcs_root_checkout_rules_with_http_info(bt_locator, vcs_root_locator, **kwargs)  # noqa: E501
            return data

    def get_vcs_root_instances_of_build_type(self, bt_locator, **kwargs):  # noqa: E501
        """Get all VCS root instances of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vcs_root_instances_of_build_type(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str fields:
        :return: VcsRootInstances
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_vcs_root_instances_of_build_type_with_http_info(bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_vcs_root_instances_of_build_type_with_http_info(bt_locator, **kwargs)  # noqa: E501
            return data

    def get_zipped_file_of_build_type(self, path, bt_locator, **kwargs):  # noqa: E501
        """Get specific file zipped.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_zipped_file_of_build_type(path, bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str path: (required)
        :param str bt_locator: (required)
        :param str base_path:
        :param str locator:
        :param str name:
        :param bool resolve_parameters:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_zipped_file_of_build_type_with_http_info(path, bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_zipped_file_of_build_type_with_http_info(path, bt_locator, **kwargs)  # noqa: E501
            return data

    def remove_all_templates(self, bt_locator, **kwargs):  # noqa: E501
        """Detach all templates from the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_all_templates(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param bool inline_settings:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__remove_all_templates_with_http_info(bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__remove_all_templates_with_http_info(bt_locator, **kwargs)  # noqa: E501
            return data

    def remove_template(self, bt_locator, template_locator, **kwargs):  # noqa: E501
        """Detach a template from the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_template(bt_locator, template_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str template_locator: (required)
        :param bool inline_settings:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__remove_template_with_http_info(bt_locator, template_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__remove_template_with_http_info(bt_locator, template_locator, **kwargs)  # noqa: E501
            return data

    def replace_agent_requirement(self, bt_locator, agent_requirement_locator, **kwargs):  # noqa: E501
        """Update an agent requirement of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_agent_requirement(bt_locator, agent_requirement_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str agent_requirement_locator: (required)
        :param str fields:
        :param AgentRequirement body:
        :return: AgentRequirement
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__replace_agent_requirement_with_http_info(bt_locator, agent_requirement_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__replace_agent_requirement_with_http_info(bt_locator, agent_requirement_locator, **kwargs)  # noqa: E501
            return data

    def replace_all_agent_requirements(self, bt_locator, **kwargs):  # noqa: E501
        """Update all agent requirements of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_all_agent_requirements(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str fields:
        :param AgentRequirements body:
        :return: AgentRequirements
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__replace_all_agent_requirements_with_http_info(bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__replace_all_agent_requirements_with_http_info(bt_locator, **kwargs)  # noqa: E501
            return data

    def replace_all_artifact_dependencies(self, bt_locator, **kwargs):  # noqa: E501
        """Update all artifact dependencies of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_all_artifact_dependencies(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str fields:
        :param ArtifactDependencies body:
        :return: ArtifactDependencies
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__replace_all_artifact_dependencies_with_http_info(bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__replace_all_artifact_dependencies_with_http_info(bt_locator, **kwargs)  # noqa: E501
            return data

    def replace_all_build_features(self, bt_locator, **kwargs):  # noqa: E501
        """Update all build features of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_all_build_features(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str fields:
        :param Features body:
        :return: Features
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__replace_all_build_features_with_http_info(bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__replace_all_build_features_with_http_info(bt_locator, **kwargs)  # noqa: E501
            return data

    def replace_all_build_steps(self, bt_locator, **kwargs):  # noqa: E501
        """Update all build steps of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_all_build_steps(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str fields:
        :param Steps body:
        :return: Steps
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__replace_all_build_steps_with_http_info(bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__replace_all_build_steps_with_http_info(bt_locator, **kwargs)  # noqa: E501
            return data

    def replace_all_snapshot_dependencies(self, bt_locator, **kwargs):  # noqa: E501
        """Update all snapshot dependencies of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_all_snapshot_dependencies(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str fields:
        :param SnapshotDependencies body:
        :return: SnapshotDependencies
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__replace_all_snapshot_dependencies_with_http_info(bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__replace_all_snapshot_dependencies_with_http_info(bt_locator, **kwargs)  # noqa: E501
            return data

    def replace_all_triggers(self, bt_locator, **kwargs):  # noqa: E501
        """Update all triggers of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_all_triggers(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str fields:
        :param Triggers body:
        :return: Triggers
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__replace_all_triggers_with_http_info(bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__replace_all_triggers_with_http_info(bt_locator, **kwargs)  # noqa: E501
            return data

    def replace_all_vcs_roots(self, bt_locator, **kwargs):  # noqa: E501
        """Update all VCS roots of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_all_vcs_roots(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param VcsRootEntries body:
        :param str fields:
        :return: VcsRootEntries
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__replace_all_vcs_roots_with_http_info(bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__replace_all_vcs_roots_with_http_info(bt_locator, **kwargs)  # noqa: E501
            return data

    def replace_artifact_dependency(self, bt_locator, artifact_dep_locator, **kwargs):  # noqa: E501
        """Update an artifact dependency of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_artifact_dependency(bt_locator, artifact_dep_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str artifact_dep_locator: (required)
        :param str fields:
        :param ArtifactDependency body:
        :return: ArtifactDependency
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__replace_artifact_dependency_with_http_info(bt_locator, artifact_dep_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__replace_artifact_dependency_with_http_info(bt_locator, artifact_dep_locator, **kwargs)  # noqa: E501
            return data

    def replace_build_feature(self, bt_locator, feature_id, **kwargs):  # noqa: E501
        """Update a build feature of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_build_feature(bt_locator, feature_id, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str feature_id: (required)
        :param str fields:
        :param Feature body:
        :return: Feature
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__replace_build_feature_with_http_info(bt_locator, feature_id, **kwargs)  # noqa: E501
        else:
            (data) = self.__replace_build_feature_with_http_info(bt_locator, feature_id, **kwargs)  # noqa: E501
            return data

    def replace_build_feature_parameters(self, bt_locator, feature_id, **kwargs):  # noqa: E501
        """Update a parameter of a build feature of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_build_feature_parameters(bt_locator, feature_id, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str feature_id: (required)
        :param Properties body:
        :param str fields:
        :return: Properties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__replace_build_feature_parameters_with_http_info(bt_locator, feature_id, **kwargs)  # noqa: E501
        else:
            (data) = self.__replace_build_feature_parameters_with_http_info(bt_locator, feature_id, **kwargs)  # noqa: E501
            return data

    def replace_build_step(self, bt_locator, step_id, **kwargs):  # noqa: E501
        """Replace a build step of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_build_step(bt_locator, step_id, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str step_id: (required)
        :param str fields:
        :param Step body:
        :return: Step
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__replace_build_step_with_http_info(bt_locator, step_id, **kwargs)  # noqa: E501
        else:
            (data) = self.__replace_build_step_with_http_info(bt_locator, step_id, **kwargs)  # noqa: E501
            return data

    def replace_snapshot_dependency(self, bt_locator, snapshot_dep_locator, **kwargs):  # noqa: E501
        """Update a snapshot dependency of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_snapshot_dependency(bt_locator, snapshot_dep_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str snapshot_dep_locator: (required)
        :param str fields:
        :param SnapshotDependency body:
        :return: SnapshotDependency
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__replace_snapshot_dependency_with_http_info(bt_locator, snapshot_dep_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__replace_snapshot_dependency_with_http_info(bt_locator, snapshot_dep_locator, **kwargs)  # noqa: E501
            return data

    def replace_trigger(self, bt_locator, trigger_locator, **kwargs):  # noqa: E501
        """Update a trigger of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_trigger(bt_locator, trigger_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str trigger_locator: (required)
        :param str fields:
        :param Trigger body:
        :return: Trigger
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__replace_trigger_with_http_info(bt_locator, trigger_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__replace_trigger_with_http_info(bt_locator, trigger_locator, **kwargs)  # noqa: E501
            return data

    def set_agent_requirement_parameter(self, bt_locator, agent_requirement_locator, field_name, **kwargs):  # noqa: E501
        """Update a parameter of an agent requirement of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_agent_requirement_parameter(bt_locator, agent_requirement_locator, field_name, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str agent_requirement_locator: (required)
        :param str field_name: (required)
        :param str body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__set_agent_requirement_parameter_with_http_info(bt_locator, agent_requirement_locator, field_name, **kwargs)  # noqa: E501
        else:
            (data) = self.__set_agent_requirement_parameter_with_http_info(bt_locator, agent_requirement_locator, field_name, **kwargs)  # noqa: E501
            return data

    def set_artifact_dependency_parameter(self, bt_locator, artifact_dep_locator, field_name, **kwargs):  # noqa: E501
        """Update a parameter of an artifact dependency of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_artifact_dependency_parameter(bt_locator, artifact_dep_locator, field_name, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str artifact_dep_locator: (required)
        :param str field_name: (required)
        :param str body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__set_artifact_dependency_parameter_with_http_info(bt_locator, artifact_dep_locator, field_name, **kwargs)  # noqa: E501
        else:
            (data) = self.__set_artifact_dependency_parameter_with_http_info(bt_locator, artifact_dep_locator, field_name, **kwargs)  # noqa: E501
            return data

    def set_build_feature_parameter(self, bt_locator, feature_id, name, **kwargs):  # noqa: E501
        """Update a parameter of a build feature of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_build_feature_parameter(bt_locator, feature_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str feature_id: (required)
        :param str name: (required)
        :param str body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__set_build_feature_parameter_with_http_info(bt_locator, feature_id, name, **kwargs)  # noqa: E501
        else:
            (data) = self.__set_build_feature_parameter_with_http_info(bt_locator, feature_id, name, **kwargs)  # noqa: E501
            return data

    def set_build_step_parameter(self, bt_locator, step_id, field_name, **kwargs):  # noqa: E501
        """Update a parameter of a build step of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_build_step_parameter(bt_locator, step_id, field_name, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str step_id: (required)
        :param str field_name: (required)
        :param str body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__set_build_step_parameter_with_http_info(bt_locator, step_id, field_name, **kwargs)  # noqa: E501
        else:
            (data) = self.__set_build_step_parameter_with_http_info(bt_locator, step_id, field_name, **kwargs)  # noqa: E501
            return data

    def set_build_type_field(self, bt_locator, field, **kwargs):  # noqa: E501
        """Update a field of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_build_type_field(bt_locator, field, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str field: (required)
        :param str body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__set_build_type_field_with_http_info(bt_locator, field, **kwargs)  # noqa: E501
        else:
            (data) = self.__set_build_type_field_with_http_info(bt_locator, field, **kwargs)  # noqa: E501
            return data

    def set_build_type_templates(self, bt_locator, **kwargs):  # noqa: E501
        """Update all templates of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_build_type_templates(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param BuildTypes body:
        :param bool optimize_settings:
        :param str fields:
        :return: BuildTypes
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__set_build_type_templates_with_http_info(bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__set_build_type_templates_with_http_info(bt_locator, **kwargs)  # noqa: E501
            return data

    def set_trigger_parameter(self, bt_locator, trigger_locator, field_name, **kwargs):  # noqa: E501
        """Update a parameter of a trigger of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_trigger_parameter(bt_locator, trigger_locator, field_name, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str trigger_locator: (required)
        :param str field_name: (required)
        :param str body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__set_trigger_parameter_with_http_info(bt_locator, trigger_locator, field_name, **kwargs)  # noqa: E501
        else:
            (data) = self.__set_trigger_parameter_with_http_info(bt_locator, trigger_locator, field_name, **kwargs)  # noqa: E501
            return data

    def update_build_parameter_of_build_type(self, name, bt_locator, **kwargs):  # noqa: E501
        """Update build parameter.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_build_parameter_of_build_type(name, bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str name: (required)
        :param str bt_locator: (required)
        :param ModelProperty body:
        :param str fields:
        :return: ModelProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__update_build_parameter_of_build_type_with_http_info(name, bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__update_build_parameter_of_build_type_with_http_info(name, bt_locator, **kwargs)  # noqa: E501
            return data

    def update_build_parameter_specification_of_build_type(self, name, bt_locator, **kwargs):  # noqa: E501
        """Update build parameter specification.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_build_parameter_specification_of_build_type(name, bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str name: (required)
        :param str bt_locator: (required)
        :param str body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__update_build_parameter_specification_of_build_type_with_http_info(name, bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__update_build_parameter_specification_of_build_type_with_http_info(name, bt_locator, **kwargs)  # noqa: E501
            return data

    def update_build_parameter_type_of_build_type(self, name, bt_locator, **kwargs):  # noqa: E501
        """Update type of build parameter.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_build_parameter_type_of_build_type(name, bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str name: (required)
        :param str bt_locator: (required)
        :param Type body:
        :return: Type
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__update_build_parameter_type_of_build_type_with_http_info(name, bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__update_build_parameter_type_of_build_type_with_http_info(name, bt_locator, **kwargs)  # noqa: E501
            return data

    def update_build_parameter_value_of_build_type(self, name, bt_locator, **kwargs):  # noqa: E501
        """Update value of build parameter.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_build_parameter_value_of_build_type(name, bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str name: (required)
        :param str bt_locator: (required)
        :param str body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__update_build_parameter_value_of_build_type_with_http_info(name, bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__update_build_parameter_value_of_build_type_with_http_info(name, bt_locator, **kwargs)  # noqa: E501
            return data

    def update_build_parameters_of_build_type(self, bt_locator, **kwargs):  # noqa: E501
        """Update build parameters.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_build_parameters_of_build_type(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param Properties body:
        :param str fields:
        :return: Properties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__update_build_parameters_of_build_type_with_http_info(bt_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__update_build_parameters_of_build_type_with_http_info(bt_locator, **kwargs)  # noqa: E501
            return data

    def update_build_type_vcs_root(self, bt_locator, vcs_root_locator, **kwargs):  # noqa: E501
        """Update a VCS root of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_build_type_vcs_root(bt_locator, vcs_root_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str vcs_root_locator: (required)
        :param VcsRootEntry body:
        :param str fields:
        :return: VcsRootEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__update_build_type_vcs_root_with_http_info(bt_locator, vcs_root_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__update_build_type_vcs_root_with_http_info(bt_locator, vcs_root_locator, **kwargs)  # noqa: E501
            return data

    def update_build_type_vcs_root_checkout_rules(self, bt_locator, vcs_root_locator, **kwargs):  # noqa: E501
        """Update checkout rules of a VCS root of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_build_type_vcs_root_checkout_rules(bt_locator, vcs_root_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str bt_locator: (required)
        :param str vcs_root_locator: (required)
        :param str body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__update_build_type_vcs_root_checkout_rules_with_http_info(bt_locator, vcs_root_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__update_build_type_vcs_root_checkout_rules_with_http_info(bt_locator, vcs_root_locator, **kwargs)  # noqa: E501
            return data

    def __add_agent_requirement_to_build_type_with_http_info(self, bt_locator, **kwargs):  # noqa: E501
        """Add an agent requirement to the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__add_agent_requirement_to_build_type_with_http_info(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str fields:
        :param AgentRequirement body:
        :return: AgentRequirement
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'fields', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_agent_requirement_to_build_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `add_agent_requirement_to_build_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/agent-requirements', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AgentRequirement',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __add_artifact_dependency_to_build_type_with_http_info(self, bt_locator, **kwargs):  # noqa: E501
        """Add an artifact dependency to the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__add_artifact_dependency_to_build_type_with_http_info(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str fields:
        :param ArtifactDependency body:
        :return: ArtifactDependency
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'fields', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_artifact_dependency_to_build_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `add_artifact_dependency_to_build_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/artifact-dependencies', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ArtifactDependency',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __add_build_feature_to_build_type_with_http_info(self, bt_locator, **kwargs):  # noqa: E501
        """Add build feature to the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__add_build_feature_to_build_type_with_http_info(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str fields:
        :param Feature body:
        :return: Feature
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'fields', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_build_feature_to_build_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `add_build_feature_to_build_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/features', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Feature',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __add_build_step_to_build_type_with_http_info(self, bt_locator, **kwargs):  # noqa: E501
        """Add a build step to the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__add_build_step_to_build_type_with_http_info(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str fields:
        :param Step body:
        :return: Step
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'fields', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_build_step_to_build_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `add_build_step_to_build_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/steps', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Step',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __add_build_template_with_http_info(self, bt_locator, **kwargs):  # noqa: E501
        """Add a build template to the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__add_build_template_with_http_info(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param BuildType body:
        :param bool optimize_settings:
        :param str fields:
        :return: BuildType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'body', 'optimize_settings', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_build_template" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `add_build_template`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []
        if 'optimize_settings' in params:
            query_params.append(('optimizeSettings', params['optimize_settings']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/templates', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BuildType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __add_parameter_to_build_feature_with_http_info(self, bt_locator, feature_id, parameter_name, **kwargs):  # noqa: E501
        """Update build feature parameter for the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__add_parameter_to_build_feature_with_http_info(bt_locator, feature_id, parameter_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str feature_id: (required)
        :param str parameter_name: (required)
        :param str body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'feature_id', 'parameter_name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_parameter_to_build_feature" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `add_parameter_to_build_feature`")  # noqa: E501
        # verify the required parameter 'feature_id' is set
        if ('feature_id' not in params or
                params['feature_id'] is None):
            raise ValueError("Missing the required parameter `feature_id` when calling `add_parameter_to_build_feature`")  # noqa: E501
        # verify the required parameter 'parameter_name' is set
        if ('parameter_name' not in params or
                params['parameter_name'] is None):
            raise ValueError("Missing the required parameter `parameter_name` when calling `add_parameter_to_build_feature`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501
        if 'feature_id' in params:
            if isinstance(params['feature_id'], TeamCityObject):
                path_params['featureId'] = params['feature_id'].locator_id
            else:
                path_params['featureId'] = params['feature_id']  # noqa: E501
        if 'parameter_name' in params:
            if isinstance(params['parameter_name'], TeamCityObject):
                path_params['parameterName'] = params['parameter_name'].locator_id
            else:
                path_params['parameterName'] = params['parameter_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/features/{featureId}/parameters/{parameterName}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __add_parameter_to_build_step_with_http_info(self, bt_locator, step_id, parameter_name, **kwargs):  # noqa: E501
        """Add a parameter to a build step of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__add_parameter_to_build_step_with_http_info(bt_locator, step_id, parameter_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str step_id: (required)
        :param str parameter_name: (required)
        :param str body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'step_id', 'parameter_name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_parameter_to_build_step" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `add_parameter_to_build_step`")  # noqa: E501
        # verify the required parameter 'step_id' is set
        if ('step_id' not in params or
                params['step_id'] is None):
            raise ValueError("Missing the required parameter `step_id` when calling `add_parameter_to_build_step`")  # noqa: E501
        # verify the required parameter 'parameter_name' is set
        if ('parameter_name' not in params or
                params['parameter_name'] is None):
            raise ValueError("Missing the required parameter `parameter_name` when calling `add_parameter_to_build_step`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501
        if 'step_id' in params:
            if isinstance(params['step_id'], TeamCityObject):
                path_params['stepId'] = params['step_id'].locator_id
            else:
                path_params['stepId'] = params['step_id']  # noqa: E501
        if 'parameter_name' in params:
            if isinstance(params['parameter_name'], TeamCityObject):
                path_params['parameterName'] = params['parameter_name'].locator_id
            else:
                path_params['parameterName'] = params['parameter_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/steps/{stepId}/parameters/{parameterName}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __add_snapshot_dependency_to_build_type_with_http_info(self, bt_locator, **kwargs):  # noqa: E501
        """Add a snapshot dependency to the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__add_snapshot_dependency_to_build_type_with_http_info(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str fields:
        :param SnapshotDependency body:
        :return: SnapshotDependency
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'fields', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_snapshot_dependency_to_build_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `add_snapshot_dependency_to_build_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/snapshot-dependencies', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SnapshotDependency',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __add_trigger_to_build_type_with_http_info(self, bt_locator, **kwargs):  # noqa: E501
        """Add a trigger to the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__add_trigger_to_build_type_with_http_info(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str fields:
        :param Trigger body:
        :return: Trigger
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'fields', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_trigger_to_build_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `add_trigger_to_build_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/triggers', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Trigger',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __add_vcs_root_to_build_type_with_http_info(self, bt_locator, **kwargs):  # noqa: E501
        """Add a VCS root to the matching build.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__add_vcs_root_to_build_type_with_http_info(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param VcsRootEntry body:
        :param str fields:
        :return: VcsRootEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'body', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_vcs_root_to_build_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `add_vcs_root_to_build_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/vcs-root-entries', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VcsRootEntry',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __create_build_parameter_of_build_type_with_http_info(self, bt_locator, **kwargs):  # noqa: E501
        """Create a build parameter.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__create_build_parameter_of_build_type_with_http_info(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param ModelProperty body:
        :param str fields:
        :return: ModelProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'body', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_build_parameter_of_build_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `create_build_parameter_of_build_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/parameters', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ModelProperty',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __create_build_type_with_http_info(self, **kwargs):  # noqa: E501
        """Create a new build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__create_build_type_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BuildType body:
        :param str fields:
        :return: BuildType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_build_type" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BuildType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __delete_agent_requirement_with_http_info(self, bt_locator, agent_requirement_locator, **kwargs):  # noqa: E501
        """Remove an agent requirement of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__delete_agent_requirement_with_http_info(bt_locator, agent_requirement_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str agent_requirement_locator: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'agent_requirement_locator']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_agent_requirement" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `delete_agent_requirement`")  # noqa: E501
        # verify the required parameter 'agent_requirement_locator' is set
        if ('agent_requirement_locator' not in params or
                params['agent_requirement_locator'] is None):
            raise ValueError("Missing the required parameter `agent_requirement_locator` when calling `delete_agent_requirement`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501
        if 'agent_requirement_locator' in params:
            if isinstance(params['agent_requirement_locator'], TeamCityObject):
                path_params['agentRequirementLocator'] = params['agent_requirement_locator'].locator_id
            else:
                path_params['agentRequirementLocator'] = params['agent_requirement_locator']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/agent-requirements/{agentRequirementLocator}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __delete_artifact_dependency_with_http_info(self, bt_locator, artifact_dep_locator, **kwargs):  # noqa: E501
        """Remove an artifact dependency from the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__delete_artifact_dependency_with_http_info(bt_locator, artifact_dep_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str artifact_dep_locator: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'artifact_dep_locator']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_artifact_dependency" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `delete_artifact_dependency`")  # noqa: E501
        # verify the required parameter 'artifact_dep_locator' is set
        if ('artifact_dep_locator' not in params or
                params['artifact_dep_locator'] is None):
            raise ValueError("Missing the required parameter `artifact_dep_locator` when calling `delete_artifact_dependency`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501
        if 'artifact_dep_locator' in params:
            if isinstance(params['artifact_dep_locator'], TeamCityObject):
                path_params['artifactDepLocator'] = params['artifact_dep_locator'].locator_id
            else:
                path_params['artifactDepLocator'] = params['artifact_dep_locator']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/artifact-dependencies/{artifactDepLocator}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __delete_build_parameter_of_build_type_with_http_info(self, name, bt_locator, **kwargs):  # noqa: E501
        """Delete build parameter.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__delete_build_parameter_of_build_type_with_http_info(name, bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :param str bt_locator: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'bt_locator']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_build_parameter_of_build_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_build_parameter_of_build_type`")  # noqa: E501
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `delete_build_parameter_of_build_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            if isinstance(params['name'], TeamCityObject):
                path_params['name'] = params['name'].locator_id
            else:
                path_params['name'] = params['name']  # noqa: E501
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/parameters/{name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __delete_build_parameters_of_build_type_with_http_info(self, bt_locator, **kwargs):  # noqa: E501
        """Delete all build parameters.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__delete_build_parameters_of_build_type_with_http_info(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_build_parameters_of_build_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `delete_build_parameters_of_build_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/parameters', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __delete_build_step_with_http_info(self, bt_locator, step_id, **kwargs):  # noqa: E501
        """Delete a build step of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__delete_build_step_with_http_info(bt_locator, step_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str step_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'step_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_build_step" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `delete_build_step`")  # noqa: E501
        # verify the required parameter 'step_id' is set
        if ('step_id' not in params or
                params['step_id'] is None):
            raise ValueError("Missing the required parameter `step_id` when calling `delete_build_step`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501
        if 'step_id' in params:
            if isinstance(params['step_id'], TeamCityObject):
                path_params['stepId'] = params['step_id'].locator_id
            else:
                path_params['stepId'] = params['step_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/steps/{stepId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __delete_build_step_parameters_with_http_info(self, bt_locator, step_id, **kwargs):  # noqa: E501
        """Update a parameter of a build step of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__delete_build_step_parameters_with_http_info(bt_locator, step_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str step_id: (required)
        :param Properties body:
        :param str fields:
        :return: Properties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'step_id', 'body', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_build_step_parameters" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `delete_build_step_parameters`")  # noqa: E501
        # verify the required parameter 'step_id' is set
        if ('step_id' not in params or
                params['step_id'] is None):
            raise ValueError("Missing the required parameter `step_id` when calling `delete_build_step_parameters`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501
        if 'step_id' in params:
            if isinstance(params['step_id'], TeamCityObject):
                path_params['stepId'] = params['step_id'].locator_id
            else:
                path_params['stepId'] = params['step_id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/steps/{stepId}/parameters', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Properties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __delete_build_type_with_http_info(self, bt_locator, **kwargs):  # noqa: E501
        """Delete build configuration matching the locator.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__delete_build_type_with_http_info(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_build_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `delete_build_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __delete_feature_of_build_type_with_http_info(self, bt_locator, feature_id, **kwargs):  # noqa: E501
        """Remove a build feature of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__delete_feature_of_build_type_with_http_info(bt_locator, feature_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str feature_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'feature_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_feature_of_build_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `delete_feature_of_build_type`")  # noqa: E501
        # verify the required parameter 'feature_id' is set
        if ('feature_id' not in params or
                params['feature_id'] is None):
            raise ValueError("Missing the required parameter `feature_id` when calling `delete_feature_of_build_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501
        if 'feature_id' in params:
            if isinstance(params['feature_id'], TeamCityObject):
                path_params['featureId'] = params['feature_id'].locator_id
            else:
                path_params['featureId'] = params['feature_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/features/{featureId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __delete_snapshot_dependency_with_http_info(self, bt_locator, snapshot_dep_locator, **kwargs):  # noqa: E501
        """Delete a snapshot dependency of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__delete_snapshot_dependency_with_http_info(bt_locator, snapshot_dep_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str snapshot_dep_locator: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'snapshot_dep_locator']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_snapshot_dependency" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `delete_snapshot_dependency`")  # noqa: E501
        # verify the required parameter 'snapshot_dep_locator' is set
        if ('snapshot_dep_locator' not in params or
                params['snapshot_dep_locator'] is None):
            raise ValueError("Missing the required parameter `snapshot_dep_locator` when calling `delete_snapshot_dependency`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501
        if 'snapshot_dep_locator' in params:
            if isinstance(params['snapshot_dep_locator'], TeamCityObject):
                path_params['snapshotDepLocator'] = params['snapshot_dep_locator'].locator_id
            else:
                path_params['snapshotDepLocator'] = params['snapshot_dep_locator']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/snapshot-dependencies/{snapshotDepLocator}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __delete_trigger_with_http_info(self, bt_locator, trigger_locator, **kwargs):  # noqa: E501
        """Delete a trigger of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__delete_trigger_with_http_info(bt_locator, trigger_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str trigger_locator: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'trigger_locator']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_trigger" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `delete_trigger`")  # noqa: E501
        # verify the required parameter 'trigger_locator' is set
        if ('trigger_locator' not in params or
                params['trigger_locator'] is None):
            raise ValueError("Missing the required parameter `trigger_locator` when calling `delete_trigger`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501
        if 'trigger_locator' in params:
            if isinstance(params['trigger_locator'], TeamCityObject):
                path_params['triggerLocator'] = params['trigger_locator'].locator_id
            else:
                path_params['triggerLocator'] = params['trigger_locator']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/triggers/{triggerLocator}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __delete_vcs_root_of_build_type_with_http_info(self, bt_locator, vcs_root_locator, **kwargs):  # noqa: E501
        """Remove a VCS root of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__delete_vcs_root_of_build_type_with_http_info(bt_locator, vcs_root_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str vcs_root_locator: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'vcs_root_locator']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_vcs_root_of_build_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `delete_vcs_root_of_build_type`")  # noqa: E501
        # verify the required parameter 'vcs_root_locator' is set
        if ('vcs_root_locator' not in params or
                params['vcs_root_locator'] is None):
            raise ValueError("Missing the required parameter `vcs_root_locator` when calling `delete_vcs_root_of_build_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501
        if 'vcs_root_locator' in params:
            if isinstance(params['vcs_root_locator'], TeamCityObject):
                path_params['vcsRootLocator'] = params['vcs_root_locator'].locator_id
            else:
                path_params['vcsRootLocator'] = params['vcs_root_locator']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/vcs-root-entries/{vcsRootLocator}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __download_file_of_build_type_with_http_info(self, path, bt_locator, **kwargs):  # noqa: E501
        """Download specific file.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__download_file_of_build_type_with_http_info(path, bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str path: (required)
        :param str bt_locator: (required)
        :param bool resolve_parameters:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['path', 'bt_locator', 'resolve_parameters']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method download_file_of_build_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'path' is set
        if ('path' not in params or
                params['path'] is None):
            raise ValueError("Missing the required parameter `path` when calling `download_file_of_build_type`")  # noqa: E501
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `download_file_of_build_type`")  # noqa: E501

        if 'path' in params and not re.search('(\/.*)?', params['path']):  # noqa: E501
            raise ValueError("Invalid value for parameter `path` when calling `download_file_of_build_type`, must conform to the pattern `/(\/.*)?/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'path' in params:
            if isinstance(params['path'], TeamCityObject):
                path_params['path'] = params['path'].locator_id
            else:
                path_params['path'] = params['path']  # noqa: E501
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []
        if 'resolve_parameters' in params:
            query_params.append(('resolveParameters', params['resolve_parameters']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/vcs/files/latest/files{path}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_agent_requirement_with_http_info(self, bt_locator, agent_requirement_locator, **kwargs):  # noqa: E501
        """Get an agent requirement of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_agent_requirement_with_http_info(bt_locator, agent_requirement_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str agent_requirement_locator: (required)
        :param str fields:
        :return: AgentRequirement
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'agent_requirement_locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_agent_requirement" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `get_agent_requirement`")  # noqa: E501
        # verify the required parameter 'agent_requirement_locator' is set
        if ('agent_requirement_locator' not in params or
                params['agent_requirement_locator'] is None):
            raise ValueError("Missing the required parameter `agent_requirement_locator` when calling `get_agent_requirement`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501
        if 'agent_requirement_locator' in params:
            if isinstance(params['agent_requirement_locator'], TeamCityObject):
                path_params['agentRequirementLocator'] = params['agent_requirement_locator'].locator_id
            else:
                path_params['agentRequirementLocator'] = params['agent_requirement_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/agent-requirements/{agentRequirementLocator}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AgentRequirement',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_agent_requirement_parameter_with_http_info(self, bt_locator, agent_requirement_locator, field_name, **kwargs):  # noqa: E501
        """Get a setting of an agent requirement of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_agent_requirement_parameter_with_http_info(bt_locator, agent_requirement_locator, field_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str agent_requirement_locator: (required)
        :param str field_name: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'agent_requirement_locator', 'field_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_agent_requirement_parameter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `get_agent_requirement_parameter`")  # noqa: E501
        # verify the required parameter 'agent_requirement_locator' is set
        if ('agent_requirement_locator' not in params or
                params['agent_requirement_locator'] is None):
            raise ValueError("Missing the required parameter `agent_requirement_locator` when calling `get_agent_requirement_parameter`")  # noqa: E501
        # verify the required parameter 'field_name' is set
        if ('field_name' not in params or
                params['field_name'] is None):
            raise ValueError("Missing the required parameter `field_name` when calling `get_agent_requirement_parameter`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501
        if 'agent_requirement_locator' in params:
            if isinstance(params['agent_requirement_locator'], TeamCityObject):
                path_params['agentRequirementLocator'] = params['agent_requirement_locator'].locator_id
            else:
                path_params['agentRequirementLocator'] = params['agent_requirement_locator']  # noqa: E501
        if 'field_name' in params:
            if isinstance(params['field_name'], TeamCityObject):
                path_params['fieldName'] = params['field_name'].locator_id
            else:
                path_params['fieldName'] = params['field_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/agent-requirements/{agentRequirementLocator}/{fieldName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_aliases_with_http_info(self, bt_locator, **kwargs):  # noqa: E501
        """Get external IDs of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_aliases_with_http_info(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str field:
        :return: Items
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'field']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_aliases" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `get_aliases`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []
        if 'field' in params:
            query_params.append(('field', params['field']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/aliases', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Items',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_all_agent_requirements_with_http_info(self, bt_locator, **kwargs):  # noqa: E501
        """Get all agent requirements of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_all_agent_requirements_with_http_info(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str fields:
        :return: AgentRequirements
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_agent_requirements" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `get_all_agent_requirements`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/agent-requirements', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AgentRequirements',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_all_artifact_dependencies_with_http_info(self, bt_locator, **kwargs):  # noqa: E501
        """Get all artifact dependencies of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_all_artifact_dependencies_with_http_info(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str fields:
        :return: ArtifactDependencies
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_artifact_dependencies" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `get_all_artifact_dependencies`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/artifact-dependencies', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ArtifactDependencies',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_all_branches_of_build_type_with_http_info(self, bt_locator, **kwargs):  # noqa: E501
        """Get all branches of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_all_branches_of_build_type_with_http_info(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str locator:
        :param str fields:
        :return: Branches
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_branches_of_build_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `get_all_branches_of_build_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []
        if 'locator' in params:
            query_params.append(('locator', params['locator']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/branches', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Branches',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_all_build_feature_parameters_with_http_info(self, bt_locator, feature_id, **kwargs):  # noqa: E501
        """Get all parameters of a build feature of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_all_build_feature_parameters_with_http_info(bt_locator, feature_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str feature_id: (required)
        :param str fields:
        :return: Properties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'feature_id', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_build_feature_parameters" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `get_all_build_feature_parameters`")  # noqa: E501
        # verify the required parameter 'feature_id' is set
        if ('feature_id' not in params or
                params['feature_id'] is None):
            raise ValueError("Missing the required parameter `feature_id` when calling `get_all_build_feature_parameters`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501
        if 'feature_id' in params:
            if isinstance(params['feature_id'], TeamCityObject):
                path_params['featureId'] = params['feature_id'].locator_id
            else:
                path_params['featureId'] = params['feature_id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/features/{featureId}/parameters', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Properties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_all_build_features_with_http_info(self, bt_locator, **kwargs):  # noqa: E501
        """Get all build features of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_all_build_features_with_http_info(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str fields:
        :return: Features
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_build_features" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `get_all_build_features`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/features', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Features',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_all_build_step_parameters_with_http_info(self, bt_locator, step_id, **kwargs):  # noqa: E501
        """Get all parameters of a build step of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_all_build_step_parameters_with_http_info(bt_locator, step_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str step_id: (required)
        :param str fields:
        :return: Properties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'step_id', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_build_step_parameters" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `get_all_build_step_parameters`")  # noqa: E501
        # verify the required parameter 'step_id' is set
        if ('step_id' not in params or
                params['step_id'] is None):
            raise ValueError("Missing the required parameter `step_id` when calling `get_all_build_step_parameters`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501
        if 'step_id' in params:
            if isinstance(params['step_id'], TeamCityObject):
                path_params['stepId'] = params['step_id'].locator_id
            else:
                path_params['stepId'] = params['step_id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/steps/{stepId}/parameters', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Properties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_all_build_steps_with_http_info(self, bt_locator, **kwargs):  # noqa: E501
        """Get all build steps of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_all_build_steps_with_http_info(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str fields:
        :return: Steps
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_build_steps" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `get_all_build_steps`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/steps', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Steps',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_all_build_templates_with_http_info(self, bt_locator, **kwargs):  # noqa: E501
        """Get all build templates of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_all_build_templates_with_http_info(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str fields:
        :return: BuildTypes
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_build_templates" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `get_all_build_templates`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/templates', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BuildTypes',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_all_build_types_with_http_info(self, **kwargs):  # noqa: E501
        """Get all build configurations.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_all_build_types_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str locator:
        :param str fields:
        :return: BuildTypes
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_build_types" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'locator' in params:
            query_params.append(('locator', params['locator']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BuildTypes',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_all_investigations_of_build_type_with_http_info(self, bt_locator, **kwargs):  # noqa: E501
        """Get all investigations of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_all_investigations_of_build_type_with_http_info(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str fields:
        :return: Investigations
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_investigations_of_build_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `get_all_investigations_of_build_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/investigations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Investigations',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_all_snapshot_dependencies_with_http_info(self, bt_locator, **kwargs):  # noqa: E501
        """Get all snapshot dependencies of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_all_snapshot_dependencies_with_http_info(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str fields:
        :return: SnapshotDependencies
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_snapshot_dependencies" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `get_all_snapshot_dependencies`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/snapshot-dependencies', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SnapshotDependencies',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_all_triggers_with_http_info(self, bt_locator, **kwargs):  # noqa: E501
        """Get all triggers of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_all_triggers_with_http_info(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str fields:
        :return: Triggers
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_triggers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `get_all_triggers`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/triggers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Triggers',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_all_vcs_roots_of_build_type_with_http_info(self, bt_locator, **kwargs):  # noqa: E501
        """Get all VCS roots of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_all_vcs_roots_of_build_type_with_http_info(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str fields:
        :return: VcsRootEntries
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_vcs_roots_of_build_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `get_all_vcs_roots_of_build_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/vcs-root-entries', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VcsRootEntries',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_artifact_dependency_with_http_info(self, bt_locator, artifact_dep_locator, **kwargs):  # noqa: E501
        """Get an artifact dependency of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_artifact_dependency_with_http_info(bt_locator, artifact_dep_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str artifact_dep_locator: (required)
        :param str fields:
        :return: ArtifactDependency
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'artifact_dep_locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_artifact_dependency" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `get_artifact_dependency`")  # noqa: E501
        # verify the required parameter 'artifact_dep_locator' is set
        if ('artifact_dep_locator' not in params or
                params['artifact_dep_locator'] is None):
            raise ValueError("Missing the required parameter `artifact_dep_locator` when calling `get_artifact_dependency`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501
        if 'artifact_dep_locator' in params:
            if isinstance(params['artifact_dep_locator'], TeamCityObject):
                path_params['artifactDepLocator'] = params['artifact_dep_locator'].locator_id
            else:
                path_params['artifactDepLocator'] = params['artifact_dep_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/artifact-dependencies/{artifactDepLocator}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ArtifactDependency',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_artifact_dependency_parameter_with_http_info(self, bt_locator, artifact_dep_locator, field_name, **kwargs):  # noqa: E501
        """Get a parameter of an artifact dependency of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_artifact_dependency_parameter_with_http_info(bt_locator, artifact_dep_locator, field_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str artifact_dep_locator: (required)
        :param str field_name: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'artifact_dep_locator', 'field_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_artifact_dependency_parameter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `get_artifact_dependency_parameter`")  # noqa: E501
        # verify the required parameter 'artifact_dep_locator' is set
        if ('artifact_dep_locator' not in params or
                params['artifact_dep_locator'] is None):
            raise ValueError("Missing the required parameter `artifact_dep_locator` when calling `get_artifact_dependency_parameter`")  # noqa: E501
        # verify the required parameter 'field_name' is set
        if ('field_name' not in params or
                params['field_name'] is None):
            raise ValueError("Missing the required parameter `field_name` when calling `get_artifact_dependency_parameter`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501
        if 'artifact_dep_locator' in params:
            if isinstance(params['artifact_dep_locator'], TeamCityObject):
                path_params['artifactDepLocator'] = params['artifact_dep_locator'].locator_id
            else:
                path_params['artifactDepLocator'] = params['artifact_dep_locator']  # noqa: E501
        if 'field_name' in params:
            if isinstance(params['field_name'], TeamCityObject):
                path_params['fieldName'] = params['field_name'].locator_id
            else:
                path_params['fieldName'] = params['field_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/artifact-dependencies/{artifactDepLocator}/{fieldName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_build_feature_with_http_info(self, bt_locator, feature_id, **kwargs):  # noqa: E501
        """Get a build feature of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_build_feature_with_http_info(bt_locator, feature_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str feature_id: (required)
        :param str fields:
        :return: Feature
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'feature_id', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_build_feature" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `get_build_feature`")  # noqa: E501
        # verify the required parameter 'feature_id' is set
        if ('feature_id' not in params or
                params['feature_id'] is None):
            raise ValueError("Missing the required parameter `feature_id` when calling `get_build_feature`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501
        if 'feature_id' in params:
            if isinstance(params['feature_id'], TeamCityObject):
                path_params['featureId'] = params['feature_id'].locator_id
            else:
                path_params['featureId'] = params['feature_id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/features/{featureId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Feature',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_build_feature_parameter_with_http_info(self, bt_locator, feature_id, parameter_name, **kwargs):  # noqa: E501
        """Get a parameter of a build feature of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_build_feature_parameter_with_http_info(bt_locator, feature_id, parameter_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str feature_id: (required)
        :param str parameter_name: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'feature_id', 'parameter_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_build_feature_parameter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `get_build_feature_parameter`")  # noqa: E501
        # verify the required parameter 'feature_id' is set
        if ('feature_id' not in params or
                params['feature_id'] is None):
            raise ValueError("Missing the required parameter `feature_id` when calling `get_build_feature_parameter`")  # noqa: E501
        # verify the required parameter 'parameter_name' is set
        if ('parameter_name' not in params or
                params['parameter_name'] is None):
            raise ValueError("Missing the required parameter `parameter_name` when calling `get_build_feature_parameter`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501
        if 'feature_id' in params:
            if isinstance(params['feature_id'], TeamCityObject):
                path_params['featureId'] = params['feature_id'].locator_id
            else:
                path_params['featureId'] = params['feature_id']  # noqa: E501
        if 'parameter_name' in params:
            if isinstance(params['parameter_name'], TeamCityObject):
                path_params['parameterName'] = params['parameter_name'].locator_id
            else:
                path_params['parameterName'] = params['parameter_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/features/{featureId}/parameters/{parameterName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_build_feature_setting_with_http_info(self, bt_locator, feature_id, name, **kwargs):  # noqa: E501
        """Get the setting of a build feature of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_build_feature_setting_with_http_info(bt_locator, feature_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str feature_id: (required)
        :param str name: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'feature_id', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_build_feature_setting" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `get_build_feature_setting`")  # noqa: E501
        # verify the required parameter 'feature_id' is set
        if ('feature_id' not in params or
                params['feature_id'] is None):
            raise ValueError("Missing the required parameter `feature_id` when calling `get_build_feature_setting`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_build_feature_setting`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501
        if 'feature_id' in params:
            if isinstance(params['feature_id'], TeamCityObject):
                path_params['featureId'] = params['feature_id'].locator_id
            else:
                path_params['featureId'] = params['feature_id']  # noqa: E501
        if 'name' in params:
            if isinstance(params['name'], TeamCityObject):
                path_params['name'] = params['name'].locator_id
            else:
                path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/features/{featureId}/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_build_parameter_of_build_type_with_http_info(self, name, bt_locator, **kwargs):  # noqa: E501
        """Get build parameter.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_build_parameter_of_build_type_with_http_info(name, bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :param str bt_locator: (required)
        :param str fields:
        :return: ModelProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'bt_locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_build_parameter_of_build_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_build_parameter_of_build_type`")  # noqa: E501
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `get_build_parameter_of_build_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            if isinstance(params['name'], TeamCityObject):
                path_params['name'] = params['name'].locator_id
            else:
                path_params['name'] = params['name']  # noqa: E501
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/parameters/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ModelProperty',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_build_parameter_specification_of_build_type_with_http_info(self, name, bt_locator, **kwargs):  # noqa: E501
        """Get build parameter specification.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_build_parameter_specification_of_build_type_with_http_info(name, bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :param str bt_locator: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'bt_locator']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_build_parameter_specification_of_build_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_build_parameter_specification_of_build_type`")  # noqa: E501
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `get_build_parameter_specification_of_build_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            if isinstance(params['name'], TeamCityObject):
                path_params['name'] = params['name'].locator_id
            else:
                path_params['name'] = params['name']  # noqa: E501
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/parameters/{name}/type/rawValue', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_build_parameter_type_of_build_type_with_http_info(self, name, bt_locator, **kwargs):  # noqa: E501
        """Get type of build parameter.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_build_parameter_type_of_build_type_with_http_info(name, bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :param str bt_locator: (required)
        :return: Type
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'bt_locator']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_build_parameter_type_of_build_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_build_parameter_type_of_build_type`")  # noqa: E501
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `get_build_parameter_type_of_build_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            if isinstance(params['name'], TeamCityObject):
                path_params['name'] = params['name'].locator_id
            else:
                path_params['name'] = params['name']  # noqa: E501
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/parameters/{name}/type', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Type',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_build_parameter_value_of_build_type_with_http_info(self, name, bt_locator, **kwargs):  # noqa: E501
        """Get value of build parameter.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_build_parameter_value_of_build_type_with_http_info(name, bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :param str bt_locator: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'bt_locator']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_build_parameter_value_of_build_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_build_parameter_value_of_build_type`")  # noqa: E501
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `get_build_parameter_value_of_build_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            if isinstance(params['name'], TeamCityObject):
                path_params['name'] = params['name'].locator_id
            else:
                path_params['name'] = params['name']  # noqa: E501
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/parameters/{name}/value', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_build_parameters_of_build_type_with_http_info(self, bt_locator, **kwargs):  # noqa: E501
        """Get build parameters.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_build_parameters_of_build_type_with_http_info(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str locator:
        :param str fields:
        :return: Properties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_build_parameters_of_build_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `get_build_parameters_of_build_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []
        if 'locator' in params:
            query_params.append(('locator', params['locator']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/parameters', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Properties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_build_step_with_http_info(self, bt_locator, step_id, **kwargs):  # noqa: E501
        """Get a build step of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_build_step_with_http_info(bt_locator, step_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str step_id: (required)
        :param str fields:
        :return: Step
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'step_id', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_build_step" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `get_build_step`")  # noqa: E501
        # verify the required parameter 'step_id' is set
        if ('step_id' not in params or
                params['step_id'] is None):
            raise ValueError("Missing the required parameter `step_id` when calling `get_build_step`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501
        if 'step_id' in params:
            if isinstance(params['step_id'], TeamCityObject):
                path_params['stepId'] = params['step_id'].locator_id
            else:
                path_params['stepId'] = params['step_id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/steps/{stepId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Step',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_build_step_parameter_with_http_info(self, bt_locator, step_id, parameter_name, **kwargs):  # noqa: E501
        """Get a parameter of a build step of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_build_step_parameter_with_http_info(bt_locator, step_id, parameter_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str step_id: (required)
        :param str parameter_name: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'step_id', 'parameter_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_build_step_parameter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `get_build_step_parameter`")  # noqa: E501
        # verify the required parameter 'step_id' is set
        if ('step_id' not in params or
                params['step_id'] is None):
            raise ValueError("Missing the required parameter `step_id` when calling `get_build_step_parameter`")  # noqa: E501
        # verify the required parameter 'parameter_name' is set
        if ('parameter_name' not in params or
                params['parameter_name'] is None):
            raise ValueError("Missing the required parameter `parameter_name` when calling `get_build_step_parameter`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501
        if 'step_id' in params:
            if isinstance(params['step_id'], TeamCityObject):
                path_params['stepId'] = params['step_id'].locator_id
            else:
                path_params['stepId'] = params['step_id']  # noqa: E501
        if 'parameter_name' in params:
            if isinstance(params['parameter_name'], TeamCityObject):
                path_params['parameterName'] = params['parameter_name'].locator_id
            else:
                path_params['parameterName'] = params['parameter_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/steps/{stepId}/parameters/{parameterName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_build_step_setting_with_http_info(self, bt_locator, step_id, field_name, **kwargs):  # noqa: E501
        """Get the setting of a build step of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_build_step_setting_with_http_info(bt_locator, step_id, field_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str step_id: (required)
        :param str field_name: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'step_id', 'field_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_build_step_setting" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `get_build_step_setting`")  # noqa: E501
        # verify the required parameter 'step_id' is set
        if ('step_id' not in params or
                params['step_id'] is None):
            raise ValueError("Missing the required parameter `step_id` when calling `get_build_step_setting`")  # noqa: E501
        # verify the required parameter 'field_name' is set
        if ('field_name' not in params or
                params['field_name'] is None):
            raise ValueError("Missing the required parameter `field_name` when calling `get_build_step_setting`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501
        if 'step_id' in params:
            if isinstance(params['step_id'], TeamCityObject):
                path_params['stepId'] = params['step_id'].locator_id
            else:
                path_params['stepId'] = params['step_id']  # noqa: E501
        if 'field_name' in params:
            if isinstance(params['field_name'], TeamCityObject):
                path_params['fieldName'] = params['field_name'].locator_id
            else:
                path_params['fieldName'] = params['field_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/steps/{stepId}/{fieldName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_build_template_with_http_info(self, bt_locator, template_locator, **kwargs):  # noqa: E501
        """Get a template of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_build_template_with_http_info(bt_locator, template_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str template_locator: (required)
        :param str fields:
        :return: BuildType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'template_locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_build_template" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `get_build_template`")  # noqa: E501
        # verify the required parameter 'template_locator' is set
        if ('template_locator' not in params or
                params['template_locator'] is None):
            raise ValueError("Missing the required parameter `template_locator` when calling `get_build_template`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501
        if 'template_locator' in params:
            if isinstance(params['template_locator'], TeamCityObject):
                path_params['templateLocator'] = params['template_locator'].locator_id
            else:
                path_params['templateLocator'] = params['template_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/templates/{templateLocator}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BuildType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_build_type_with_http_info(self, bt_locator, **kwargs):  # noqa: E501
        """Get build configuration matching the locator.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_build_type_with_http_info(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str fields:
        :return: BuildType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_build_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `get_build_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BuildType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_build_type_build_tags_with_http_info(self, bt_locator, **kwargs):  # noqa: E501
        """Get tags of builds of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_build_type_build_tags_with_http_info(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str field:
        :return: Tags
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'field']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_build_type_build_tags" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `get_build_type_build_tags`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []
        if 'field' in params:
            query_params.append(('field', params['field']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/buildTags', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Tags',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_build_type_builds_with_http_info(self, bt_locator, **kwargs):  # noqa: E501
        """Get builds of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_build_type_builds_with_http_info(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str fields:
        :return: Builds
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_build_type_builds" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `get_build_type_builds`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/builds', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Builds',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_build_type_field_with_http_info(self, bt_locator, field, **kwargs):  # noqa: E501
        """Get a field of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_build_type_field_with_http_info(bt_locator, field, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str field: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'field']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_build_type_field" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `get_build_type_field`")  # noqa: E501
        # verify the required parameter 'field' is set
        if ('field' not in params or
                params['field'] is None):
            raise ValueError("Missing the required parameter `field` when calling `get_build_type_field`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501
        if 'field' in params:
            if isinstance(params['field'], TeamCityObject):
                path_params['field'] = params['field'].locator_id
            else:
                path_params['field'] = params['field']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/{field}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_build_type_settings_file_with_http_info(self, bt_locator, **kwargs):  # noqa: E501
        """Get the settings file of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_build_type_settings_file_with_http_info(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_build_type_settings_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `get_build_type_settings_file`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/settingsFile', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_file_metadata_of_build_type_with_http_info(self, path, bt_locator, **kwargs):  # noqa: E501
        """Get metadata of specific file.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_file_metadata_of_build_type_with_http_info(path, bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str path: (required)
        :param str bt_locator: (required)
        :param str fields:
        :param bool resolve_parameters:
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['path', 'bt_locator', 'fields', 'resolve_parameters']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_file_metadata_of_build_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'path' is set
        if ('path' not in params or
                params['path'] is None):
            raise ValueError("Missing the required parameter `path` when calling `get_file_metadata_of_build_type`")  # noqa: E501
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `get_file_metadata_of_build_type`")  # noqa: E501

        if 'path' in params and not re.search('(\/.*)?', params['path']):  # noqa: E501
            raise ValueError("Invalid value for parameter `path` when calling `get_file_metadata_of_build_type`, must conform to the pattern `/(\/.*)?/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'path' in params:
            if isinstance(params['path'], TeamCityObject):
                path_params['path'] = params['path'].locator_id
            else:
                path_params['path'] = params['path']  # noqa: E501
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
        if 'resolve_parameters' in params:
            query_params.append(('resolveParameters', params['resolve_parameters']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/vcs/files/latest/metadata{path}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_files_list_for_subpath_of_build_type_with_http_info(self, path, bt_locator, **kwargs):  # noqa: E501
        """List files under this path.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_files_list_for_subpath_of_build_type_with_http_info(path, bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str path: (required)
        :param str bt_locator: (required)
        :param str base_path:
        :param str locator:
        :param str fields:
        :param bool resolve_parameters:
        :return: Files
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['path', 'bt_locator', 'base_path', 'locator', 'fields', 'resolve_parameters']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_files_list_for_subpath_of_build_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'path' is set
        if ('path' not in params or
                params['path'] is None):
            raise ValueError("Missing the required parameter `path` when calling `get_files_list_for_subpath_of_build_type`")  # noqa: E501
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `get_files_list_for_subpath_of_build_type`")  # noqa: E501

        if 'path' in params and not re.search('(.*)?', params['path']):  # noqa: E501
            raise ValueError("Invalid value for parameter `path` when calling `get_files_list_for_subpath_of_build_type`, must conform to the pattern `/(.*)?/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'path' in params:
            if isinstance(params['path'], TeamCityObject):
                path_params['path'] = params['path'].locator_id
            else:
                path_params['path'] = params['path']  # noqa: E501
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []
        if 'base_path' in params:
            query_params.append(('basePath', params['base_path']))  # noqa: E501
        if 'locator' in params:
            query_params.append(('locator', params['locator']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
        if 'resolve_parameters' in params:
            query_params.append(('resolveParameters', params['resolve_parameters']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/vcs/files/latest/{path}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Files',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_files_list_of_build_type_with_http_info(self, bt_locator, **kwargs):  # noqa: E501
        """List all files.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_files_list_of_build_type_with_http_info(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str base_path:
        :param str locator:
        :param str fields:
        :param bool resolve_parameters:
        :return: Files
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'base_path', 'locator', 'fields', 'resolve_parameters']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_files_list_of_build_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `get_files_list_of_build_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []
        if 'base_path' in params:
            query_params.append(('basePath', params['base_path']))  # noqa: E501
        if 'locator' in params:
            query_params.append(('locator', params['locator']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
        if 'resolve_parameters' in params:
            query_params.append(('resolveParameters', params['resolve_parameters']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/vcs/files/latest', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Files',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_snapshot_dependency_with_http_info(self, bt_locator, snapshot_dep_locator, **kwargs):  # noqa: E501
        """Get a snapshot dependency of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_snapshot_dependency_with_http_info(bt_locator, snapshot_dep_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str snapshot_dep_locator: (required)
        :param str fields:
        :return: SnapshotDependency
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'snapshot_dep_locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_snapshot_dependency" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `get_snapshot_dependency`")  # noqa: E501
        # verify the required parameter 'snapshot_dep_locator' is set
        if ('snapshot_dep_locator' not in params or
                params['snapshot_dep_locator'] is None):
            raise ValueError("Missing the required parameter `snapshot_dep_locator` when calling `get_snapshot_dependency`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501
        if 'snapshot_dep_locator' in params:
            if isinstance(params['snapshot_dep_locator'], TeamCityObject):
                path_params['snapshotDepLocator'] = params['snapshot_dep_locator'].locator_id
            else:
                path_params['snapshotDepLocator'] = params['snapshot_dep_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/snapshot-dependencies/{snapshotDepLocator}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SnapshotDependency',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_trigger_with_http_info(self, bt_locator, trigger_locator, **kwargs):  # noqa: E501
        """Get a trigger of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_trigger_with_http_info(bt_locator, trigger_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str trigger_locator: (required)
        :param str fields:
        :return: Trigger
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'trigger_locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_trigger" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `get_trigger`")  # noqa: E501
        # verify the required parameter 'trigger_locator' is set
        if ('trigger_locator' not in params or
                params['trigger_locator'] is None):
            raise ValueError("Missing the required parameter `trigger_locator` when calling `get_trigger`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501
        if 'trigger_locator' in params:
            if isinstance(params['trigger_locator'], TeamCityObject):
                path_params['triggerLocator'] = params['trigger_locator'].locator_id
            else:
                path_params['triggerLocator'] = params['trigger_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/triggers/{triggerLocator}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Trigger',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_trigger_parameter_with_http_info(self, bt_locator, trigger_locator, field_name, **kwargs):  # noqa: E501
        """Get a parameter of a trigger of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_trigger_parameter_with_http_info(bt_locator, trigger_locator, field_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str trigger_locator: (required)
        :param str field_name: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'trigger_locator', 'field_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_trigger_parameter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `get_trigger_parameter`")  # noqa: E501
        # verify the required parameter 'trigger_locator' is set
        if ('trigger_locator' not in params or
                params['trigger_locator'] is None):
            raise ValueError("Missing the required parameter `trigger_locator` when calling `get_trigger_parameter`")  # noqa: E501
        # verify the required parameter 'field_name' is set
        if ('field_name' not in params or
                params['field_name'] is None):
            raise ValueError("Missing the required parameter `field_name` when calling `get_trigger_parameter`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501
        if 'trigger_locator' in params:
            if isinstance(params['trigger_locator'], TeamCityObject):
                path_params['triggerLocator'] = params['trigger_locator'].locator_id
            else:
                path_params['triggerLocator'] = params['trigger_locator']  # noqa: E501
        if 'field_name' in params:
            if isinstance(params['field_name'], TeamCityObject):
                path_params['fieldName'] = params['field_name'].locator_id
            else:
                path_params['fieldName'] = params['field_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/triggers/{triggerLocator}/{fieldName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_vcs_root_with_http_info(self, bt_locator, vcs_root_locator, **kwargs):  # noqa: E501
        """Get a VCS root of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_vcs_root_with_http_info(bt_locator, vcs_root_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str vcs_root_locator: (required)
        :param str fields:
        :return: VcsRootEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'vcs_root_locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_vcs_root" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `get_vcs_root`")  # noqa: E501
        # verify the required parameter 'vcs_root_locator' is set
        if ('vcs_root_locator' not in params or
                params['vcs_root_locator'] is None):
            raise ValueError("Missing the required parameter `vcs_root_locator` when calling `get_vcs_root`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501
        if 'vcs_root_locator' in params:
            if isinstance(params['vcs_root_locator'], TeamCityObject):
                path_params['vcsRootLocator'] = params['vcs_root_locator'].locator_id
            else:
                path_params['vcsRootLocator'] = params['vcs_root_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/vcs-root-entries/{vcsRootLocator}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VcsRootEntry',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_vcs_root_checkout_rules_with_http_info(self, bt_locator, vcs_root_locator, **kwargs):  # noqa: E501
        """Get checkout rules of a VCS root of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_vcs_root_checkout_rules_with_http_info(bt_locator, vcs_root_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str vcs_root_locator: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'vcs_root_locator']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_vcs_root_checkout_rules" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `get_vcs_root_checkout_rules`")  # noqa: E501
        # verify the required parameter 'vcs_root_locator' is set
        if ('vcs_root_locator' not in params or
                params['vcs_root_locator'] is None):
            raise ValueError("Missing the required parameter `vcs_root_locator` when calling `get_vcs_root_checkout_rules`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501
        if 'vcs_root_locator' in params:
            if isinstance(params['vcs_root_locator'], TeamCityObject):
                path_params['vcsRootLocator'] = params['vcs_root_locator'].locator_id
            else:
                path_params['vcsRootLocator'] = params['vcs_root_locator']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/vcs-root-entries/{vcsRootLocator}/checkout-rules', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_vcs_root_instances_of_build_type_with_http_info(self, bt_locator, **kwargs):  # noqa: E501
        """Get all VCS root instances of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_vcs_root_instances_of_build_type_with_http_info(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str fields:
        :return: VcsRootInstances
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_vcs_root_instances_of_build_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `get_vcs_root_instances_of_build_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/vcsRootInstances', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VcsRootInstances',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_zipped_file_of_build_type_with_http_info(self, path, bt_locator, **kwargs):  # noqa: E501
        """Get specific file zipped.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_zipped_file_of_build_type_with_http_info(path, bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str path: (required)
        :param str bt_locator: (required)
        :param str base_path:
        :param str locator:
        :param str name:
        :param bool resolve_parameters:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['path', 'bt_locator', 'base_path', 'locator', 'name', 'resolve_parameters']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_zipped_file_of_build_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'path' is set
        if ('path' not in params or
                params['path'] is None):
            raise ValueError("Missing the required parameter `path` when calling `get_zipped_file_of_build_type`")  # noqa: E501
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `get_zipped_file_of_build_type`")  # noqa: E501

        if 'path' in params and not re.search('(\/.*)?', params['path']):  # noqa: E501
            raise ValueError("Invalid value for parameter `path` when calling `get_zipped_file_of_build_type`, must conform to the pattern `/(\/.*)?/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'path' in params:
            if isinstance(params['path'], TeamCityObject):
                path_params['path'] = params['path'].locator_id
            else:
                path_params['path'] = params['path']  # noqa: E501
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []
        if 'base_path' in params:
            query_params.append(('basePath', params['base_path']))  # noqa: E501
        if 'locator' in params:
            query_params.append(('locator', params['locator']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'resolve_parameters' in params:
            query_params.append(('resolveParameters', params['resolve_parameters']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/vcs/files/latest/archived{path}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __remove_all_templates_with_http_info(self, bt_locator, **kwargs):  # noqa: E501
        """Detach all templates from the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__remove_all_templates_with_http_info(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param bool inline_settings:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'inline_settings']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_all_templates" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `remove_all_templates`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []
        if 'inline_settings' in params:
            query_params.append(('inlineSettings', params['inline_settings']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/templates', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __remove_template_with_http_info(self, bt_locator, template_locator, **kwargs):  # noqa: E501
        """Detach a template from the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__remove_template_with_http_info(bt_locator, template_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str template_locator: (required)
        :param bool inline_settings:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'template_locator', 'inline_settings']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_template" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `remove_template`")  # noqa: E501
        # verify the required parameter 'template_locator' is set
        if ('template_locator' not in params or
                params['template_locator'] is None):
            raise ValueError("Missing the required parameter `template_locator` when calling `remove_template`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501
        if 'template_locator' in params:
            if isinstance(params['template_locator'], TeamCityObject):
                path_params['templateLocator'] = params['template_locator'].locator_id
            else:
                path_params['templateLocator'] = params['template_locator']  # noqa: E501

        query_params = []
        if 'inline_settings' in params:
            query_params.append(('inlineSettings', params['inline_settings']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/templates/{templateLocator}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __replace_agent_requirement_with_http_info(self, bt_locator, agent_requirement_locator, **kwargs):  # noqa: E501
        """Update an agent requirement of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__replace_agent_requirement_with_http_info(bt_locator, agent_requirement_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str agent_requirement_locator: (required)
        :param str fields:
        :param AgentRequirement body:
        :return: AgentRequirement
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'agent_requirement_locator', 'fields', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_agent_requirement" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `replace_agent_requirement`")  # noqa: E501
        # verify the required parameter 'agent_requirement_locator' is set
        if ('agent_requirement_locator' not in params or
                params['agent_requirement_locator'] is None):
            raise ValueError("Missing the required parameter `agent_requirement_locator` when calling `replace_agent_requirement`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501
        if 'agent_requirement_locator' in params:
            if isinstance(params['agent_requirement_locator'], TeamCityObject):
                path_params['agentRequirementLocator'] = params['agent_requirement_locator'].locator_id
            else:
                path_params['agentRequirementLocator'] = params['agent_requirement_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/agent-requirements/{agentRequirementLocator}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AgentRequirement',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __replace_all_agent_requirements_with_http_info(self, bt_locator, **kwargs):  # noqa: E501
        """Update all agent requirements of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__replace_all_agent_requirements_with_http_info(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str fields:
        :param AgentRequirements body:
        :return: AgentRequirements
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'fields', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_all_agent_requirements" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `replace_all_agent_requirements`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/agent-requirements', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AgentRequirements',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __replace_all_artifact_dependencies_with_http_info(self, bt_locator, **kwargs):  # noqa: E501
        """Update all artifact dependencies of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__replace_all_artifact_dependencies_with_http_info(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str fields:
        :param ArtifactDependencies body:
        :return: ArtifactDependencies
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'fields', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_all_artifact_dependencies" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `replace_all_artifact_dependencies`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/artifact-dependencies', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ArtifactDependencies',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __replace_all_build_features_with_http_info(self, bt_locator, **kwargs):  # noqa: E501
        """Update all build features of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__replace_all_build_features_with_http_info(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str fields:
        :param Features body:
        :return: Features
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'fields', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_all_build_features" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `replace_all_build_features`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/features', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Features',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __replace_all_build_steps_with_http_info(self, bt_locator, **kwargs):  # noqa: E501
        """Update all build steps of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__replace_all_build_steps_with_http_info(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str fields:
        :param Steps body:
        :return: Steps
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'fields', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_all_build_steps" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `replace_all_build_steps`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/steps', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Steps',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __replace_all_snapshot_dependencies_with_http_info(self, bt_locator, **kwargs):  # noqa: E501
        """Update all snapshot dependencies of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__replace_all_snapshot_dependencies_with_http_info(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str fields:
        :param SnapshotDependencies body:
        :return: SnapshotDependencies
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'fields', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_all_snapshot_dependencies" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `replace_all_snapshot_dependencies`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/snapshot-dependencies', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SnapshotDependencies',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __replace_all_triggers_with_http_info(self, bt_locator, **kwargs):  # noqa: E501
        """Update all triggers of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__replace_all_triggers_with_http_info(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str fields:
        :param Triggers body:
        :return: Triggers
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'fields', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_all_triggers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `replace_all_triggers`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/triggers', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Triggers',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __replace_all_vcs_roots_with_http_info(self, bt_locator, **kwargs):  # noqa: E501
        """Update all VCS roots of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__replace_all_vcs_roots_with_http_info(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param VcsRootEntries body:
        :param str fields:
        :return: VcsRootEntries
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'body', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_all_vcs_roots" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `replace_all_vcs_roots`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/vcs-root-entries', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VcsRootEntries',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __replace_artifact_dependency_with_http_info(self, bt_locator, artifact_dep_locator, **kwargs):  # noqa: E501
        """Update an artifact dependency of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__replace_artifact_dependency_with_http_info(bt_locator, artifact_dep_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str artifact_dep_locator: (required)
        :param str fields:
        :param ArtifactDependency body:
        :return: ArtifactDependency
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'artifact_dep_locator', 'fields', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_artifact_dependency" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `replace_artifact_dependency`")  # noqa: E501
        # verify the required parameter 'artifact_dep_locator' is set
        if ('artifact_dep_locator' not in params or
                params['artifact_dep_locator'] is None):
            raise ValueError("Missing the required parameter `artifact_dep_locator` when calling `replace_artifact_dependency`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501
        if 'artifact_dep_locator' in params:
            if isinstance(params['artifact_dep_locator'], TeamCityObject):
                path_params['artifactDepLocator'] = params['artifact_dep_locator'].locator_id
            else:
                path_params['artifactDepLocator'] = params['artifact_dep_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/artifact-dependencies/{artifactDepLocator}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ArtifactDependency',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __replace_build_feature_with_http_info(self, bt_locator, feature_id, **kwargs):  # noqa: E501
        """Update a build feature of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__replace_build_feature_with_http_info(bt_locator, feature_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str feature_id: (required)
        :param str fields:
        :param Feature body:
        :return: Feature
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'feature_id', 'fields', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_build_feature" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `replace_build_feature`")  # noqa: E501
        # verify the required parameter 'feature_id' is set
        if ('feature_id' not in params or
                params['feature_id'] is None):
            raise ValueError("Missing the required parameter `feature_id` when calling `replace_build_feature`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501
        if 'feature_id' in params:
            if isinstance(params['feature_id'], TeamCityObject):
                path_params['featureId'] = params['feature_id'].locator_id
            else:
                path_params['featureId'] = params['feature_id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/features/{featureId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Feature',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __replace_build_feature_parameters_with_http_info(self, bt_locator, feature_id, **kwargs):  # noqa: E501
        """Update a parameter of a build feature of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__replace_build_feature_parameters_with_http_info(bt_locator, feature_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str feature_id: (required)
        :param Properties body:
        :param str fields:
        :return: Properties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'feature_id', 'body', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_build_feature_parameters" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `replace_build_feature_parameters`")  # noqa: E501
        # verify the required parameter 'feature_id' is set
        if ('feature_id' not in params or
                params['feature_id'] is None):
            raise ValueError("Missing the required parameter `feature_id` when calling `replace_build_feature_parameters`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501
        if 'feature_id' in params:
            if isinstance(params['feature_id'], TeamCityObject):
                path_params['featureId'] = params['feature_id'].locator_id
            else:
                path_params['featureId'] = params['feature_id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/features/{featureId}/parameters', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Properties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __replace_build_step_with_http_info(self, bt_locator, step_id, **kwargs):  # noqa: E501
        """Replace a build step of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__replace_build_step_with_http_info(bt_locator, step_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str step_id: (required)
        :param str fields:
        :param Step body:
        :return: Step
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'step_id', 'fields', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_build_step" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `replace_build_step`")  # noqa: E501
        # verify the required parameter 'step_id' is set
        if ('step_id' not in params or
                params['step_id'] is None):
            raise ValueError("Missing the required parameter `step_id` when calling `replace_build_step`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501
        if 'step_id' in params:
            if isinstance(params['step_id'], TeamCityObject):
                path_params['stepId'] = params['step_id'].locator_id
            else:
                path_params['stepId'] = params['step_id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/steps/{stepId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Step',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __replace_snapshot_dependency_with_http_info(self, bt_locator, snapshot_dep_locator, **kwargs):  # noqa: E501
        """Update a snapshot dependency of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__replace_snapshot_dependency_with_http_info(bt_locator, snapshot_dep_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str snapshot_dep_locator: (required)
        :param str fields:
        :param SnapshotDependency body:
        :return: SnapshotDependency
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'snapshot_dep_locator', 'fields', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_snapshot_dependency" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `replace_snapshot_dependency`")  # noqa: E501
        # verify the required parameter 'snapshot_dep_locator' is set
        if ('snapshot_dep_locator' not in params or
                params['snapshot_dep_locator'] is None):
            raise ValueError("Missing the required parameter `snapshot_dep_locator` when calling `replace_snapshot_dependency`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501
        if 'snapshot_dep_locator' in params:
            if isinstance(params['snapshot_dep_locator'], TeamCityObject):
                path_params['snapshotDepLocator'] = params['snapshot_dep_locator'].locator_id
            else:
                path_params['snapshotDepLocator'] = params['snapshot_dep_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/snapshot-dependencies/{snapshotDepLocator}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SnapshotDependency',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __replace_trigger_with_http_info(self, bt_locator, trigger_locator, **kwargs):  # noqa: E501
        """Update a trigger of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__replace_trigger_with_http_info(bt_locator, trigger_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str trigger_locator: (required)
        :param str fields:
        :param Trigger body:
        :return: Trigger
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'trigger_locator', 'fields', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_trigger" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `replace_trigger`")  # noqa: E501
        # verify the required parameter 'trigger_locator' is set
        if ('trigger_locator' not in params or
                params['trigger_locator'] is None):
            raise ValueError("Missing the required parameter `trigger_locator` when calling `replace_trigger`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501
        if 'trigger_locator' in params:
            if isinstance(params['trigger_locator'], TeamCityObject):
                path_params['triggerLocator'] = params['trigger_locator'].locator_id
            else:
                path_params['triggerLocator'] = params['trigger_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/triggers/{triggerLocator}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Trigger',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __set_agent_requirement_parameter_with_http_info(self, bt_locator, agent_requirement_locator, field_name, **kwargs):  # noqa: E501
        """Update a parameter of an agent requirement of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__set_agent_requirement_parameter_with_http_info(bt_locator, agent_requirement_locator, field_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str agent_requirement_locator: (required)
        :param str field_name: (required)
        :param str body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'agent_requirement_locator', 'field_name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_agent_requirement_parameter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `set_agent_requirement_parameter`")  # noqa: E501
        # verify the required parameter 'agent_requirement_locator' is set
        if ('agent_requirement_locator' not in params or
                params['agent_requirement_locator'] is None):
            raise ValueError("Missing the required parameter `agent_requirement_locator` when calling `set_agent_requirement_parameter`")  # noqa: E501
        # verify the required parameter 'field_name' is set
        if ('field_name' not in params or
                params['field_name'] is None):
            raise ValueError("Missing the required parameter `field_name` when calling `set_agent_requirement_parameter`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501
        if 'agent_requirement_locator' in params:
            if isinstance(params['agent_requirement_locator'], TeamCityObject):
                path_params['agentRequirementLocator'] = params['agent_requirement_locator'].locator_id
            else:
                path_params['agentRequirementLocator'] = params['agent_requirement_locator']  # noqa: E501
        if 'field_name' in params:
            if isinstance(params['field_name'], TeamCityObject):
                path_params['fieldName'] = params['field_name'].locator_id
            else:
                path_params['fieldName'] = params['field_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/agent-requirements/{agentRequirementLocator}/{fieldName}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __set_artifact_dependency_parameter_with_http_info(self, bt_locator, artifact_dep_locator, field_name, **kwargs):  # noqa: E501
        """Update a parameter of an artifact dependency of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__set_artifact_dependency_parameter_with_http_info(bt_locator, artifact_dep_locator, field_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str artifact_dep_locator: (required)
        :param str field_name: (required)
        :param str body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'artifact_dep_locator', 'field_name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_artifact_dependency_parameter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `set_artifact_dependency_parameter`")  # noqa: E501
        # verify the required parameter 'artifact_dep_locator' is set
        if ('artifact_dep_locator' not in params or
                params['artifact_dep_locator'] is None):
            raise ValueError("Missing the required parameter `artifact_dep_locator` when calling `set_artifact_dependency_parameter`")  # noqa: E501
        # verify the required parameter 'field_name' is set
        if ('field_name' not in params or
                params['field_name'] is None):
            raise ValueError("Missing the required parameter `field_name` when calling `set_artifact_dependency_parameter`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501
        if 'artifact_dep_locator' in params:
            if isinstance(params['artifact_dep_locator'], TeamCityObject):
                path_params['artifactDepLocator'] = params['artifact_dep_locator'].locator_id
            else:
                path_params['artifactDepLocator'] = params['artifact_dep_locator']  # noqa: E501
        if 'field_name' in params:
            if isinstance(params['field_name'], TeamCityObject):
                path_params['fieldName'] = params['field_name'].locator_id
            else:
                path_params['fieldName'] = params['field_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/artifact-dependencies/{artifactDepLocator}/{fieldName}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __set_build_feature_parameter_with_http_info(self, bt_locator, feature_id, name, **kwargs):  # noqa: E501
        """Update a parameter of a build feature of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__set_build_feature_parameter_with_http_info(bt_locator, feature_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str feature_id: (required)
        :param str name: (required)
        :param str body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'feature_id', 'name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_build_feature_parameter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `set_build_feature_parameter`")  # noqa: E501
        # verify the required parameter 'feature_id' is set
        if ('feature_id' not in params or
                params['feature_id'] is None):
            raise ValueError("Missing the required parameter `feature_id` when calling `set_build_feature_parameter`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `set_build_feature_parameter`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501
        if 'feature_id' in params:
            if isinstance(params['feature_id'], TeamCityObject):
                path_params['featureId'] = params['feature_id'].locator_id
            else:
                path_params['featureId'] = params['feature_id']  # noqa: E501
        if 'name' in params:
            if isinstance(params['name'], TeamCityObject):
                path_params['name'] = params['name'].locator_id
            else:
                path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/features/{featureId}/{name}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __set_build_step_parameter_with_http_info(self, bt_locator, step_id, field_name, **kwargs):  # noqa: E501
        """Update a parameter of a build step of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__set_build_step_parameter_with_http_info(bt_locator, step_id, field_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str step_id: (required)
        :param str field_name: (required)
        :param str body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'step_id', 'field_name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_build_step_parameter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `set_build_step_parameter`")  # noqa: E501
        # verify the required parameter 'step_id' is set
        if ('step_id' not in params or
                params['step_id'] is None):
            raise ValueError("Missing the required parameter `step_id` when calling `set_build_step_parameter`")  # noqa: E501
        # verify the required parameter 'field_name' is set
        if ('field_name' not in params or
                params['field_name'] is None):
            raise ValueError("Missing the required parameter `field_name` when calling `set_build_step_parameter`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501
        if 'step_id' in params:
            if isinstance(params['step_id'], TeamCityObject):
                path_params['stepId'] = params['step_id'].locator_id
            else:
                path_params['stepId'] = params['step_id']  # noqa: E501
        if 'field_name' in params:
            if isinstance(params['field_name'], TeamCityObject):
                path_params['fieldName'] = params['field_name'].locator_id
            else:
                path_params['fieldName'] = params['field_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/steps/{stepId}/{fieldName}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __set_build_type_field_with_http_info(self, bt_locator, field, **kwargs):  # noqa: E501
        """Update a field of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__set_build_type_field_with_http_info(bt_locator, field, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str field: (required)
        :param str body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'field', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_build_type_field" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `set_build_type_field`")  # noqa: E501
        # verify the required parameter 'field' is set
        if ('field' not in params or
                params['field'] is None):
            raise ValueError("Missing the required parameter `field` when calling `set_build_type_field`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501
        if 'field' in params:
            if isinstance(params['field'], TeamCityObject):
                path_params['field'] = params['field'].locator_id
            else:
                path_params['field'] = params['field']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/{field}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __set_build_type_templates_with_http_info(self, bt_locator, **kwargs):  # noqa: E501
        """Update all templates of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__set_build_type_templates_with_http_info(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param BuildTypes body:
        :param bool optimize_settings:
        :param str fields:
        :return: BuildTypes
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'body', 'optimize_settings', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_build_type_templates" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `set_build_type_templates`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []
        if 'optimize_settings' in params:
            query_params.append(('optimizeSettings', params['optimize_settings']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/templates', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BuildTypes',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __set_trigger_parameter_with_http_info(self, bt_locator, trigger_locator, field_name, **kwargs):  # noqa: E501
        """Update a parameter of a trigger of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__set_trigger_parameter_with_http_info(bt_locator, trigger_locator, field_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str trigger_locator: (required)
        :param str field_name: (required)
        :param str body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'trigger_locator', 'field_name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_trigger_parameter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `set_trigger_parameter`")  # noqa: E501
        # verify the required parameter 'trigger_locator' is set
        if ('trigger_locator' not in params or
                params['trigger_locator'] is None):
            raise ValueError("Missing the required parameter `trigger_locator` when calling `set_trigger_parameter`")  # noqa: E501
        # verify the required parameter 'field_name' is set
        if ('field_name' not in params or
                params['field_name'] is None):
            raise ValueError("Missing the required parameter `field_name` when calling `set_trigger_parameter`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501
        if 'trigger_locator' in params:
            if isinstance(params['trigger_locator'], TeamCityObject):
                path_params['triggerLocator'] = params['trigger_locator'].locator_id
            else:
                path_params['triggerLocator'] = params['trigger_locator']  # noqa: E501
        if 'field_name' in params:
            if isinstance(params['field_name'], TeamCityObject):
                path_params['fieldName'] = params['field_name'].locator_id
            else:
                path_params['fieldName'] = params['field_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/triggers/{triggerLocator}/{fieldName}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __update_build_parameter_of_build_type_with_http_info(self, name, bt_locator, **kwargs):  # noqa: E501
        """Update build parameter.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__update_build_parameter_of_build_type_with_http_info(name, bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :param str bt_locator: (required)
        :param ModelProperty body:
        :param str fields:
        :return: ModelProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'bt_locator', 'body', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_build_parameter_of_build_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `update_build_parameter_of_build_type`")  # noqa: E501
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `update_build_parameter_of_build_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            if isinstance(params['name'], TeamCityObject):
                path_params['name'] = params['name'].locator_id
            else:
                path_params['name'] = params['name']  # noqa: E501
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/parameters/{name}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ModelProperty',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __update_build_parameter_specification_of_build_type_with_http_info(self, name, bt_locator, **kwargs):  # noqa: E501
        """Update build parameter specification.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__update_build_parameter_specification_of_build_type_with_http_info(name, bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :param str bt_locator: (required)
        :param str body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'bt_locator', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_build_parameter_specification_of_build_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `update_build_parameter_specification_of_build_type`")  # noqa: E501
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `update_build_parameter_specification_of_build_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            if isinstance(params['name'], TeamCityObject):
                path_params['name'] = params['name'].locator_id
            else:
                path_params['name'] = params['name']  # noqa: E501
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/parameters/{name}/type/rawValue', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __update_build_parameter_type_of_build_type_with_http_info(self, name, bt_locator, **kwargs):  # noqa: E501
        """Update type of build parameter.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__update_build_parameter_type_of_build_type_with_http_info(name, bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :param str bt_locator: (required)
        :param Type body:
        :return: Type
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'bt_locator', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_build_parameter_type_of_build_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `update_build_parameter_type_of_build_type`")  # noqa: E501
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `update_build_parameter_type_of_build_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            if isinstance(params['name'], TeamCityObject):
                path_params['name'] = params['name'].locator_id
            else:
                path_params['name'] = params['name']  # noqa: E501
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/parameters/{name}/type', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Type',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __update_build_parameter_value_of_build_type_with_http_info(self, name, bt_locator, **kwargs):  # noqa: E501
        """Update value of build parameter.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__update_build_parameter_value_of_build_type_with_http_info(name, bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :param str bt_locator: (required)
        :param str body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'bt_locator', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_build_parameter_value_of_build_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `update_build_parameter_value_of_build_type`")  # noqa: E501
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `update_build_parameter_value_of_build_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            if isinstance(params['name'], TeamCityObject):
                path_params['name'] = params['name'].locator_id
            else:
                path_params['name'] = params['name']  # noqa: E501
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/parameters/{name}/value', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __update_build_parameters_of_build_type_with_http_info(self, bt_locator, **kwargs):  # noqa: E501
        """Update build parameters.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__update_build_parameters_of_build_type_with_http_info(bt_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param Properties body:
        :param str fields:
        :return: Properties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'body', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_build_parameters_of_build_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `update_build_parameters_of_build_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/parameters', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Properties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __update_build_type_vcs_root_with_http_info(self, bt_locator, vcs_root_locator, **kwargs):  # noqa: E501
        """Update a VCS root of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__update_build_type_vcs_root_with_http_info(bt_locator, vcs_root_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str vcs_root_locator: (required)
        :param VcsRootEntry body:
        :param str fields:
        :return: VcsRootEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'vcs_root_locator', 'body', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_build_type_vcs_root" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `update_build_type_vcs_root`")  # noqa: E501
        # verify the required parameter 'vcs_root_locator' is set
        if ('vcs_root_locator' not in params or
                params['vcs_root_locator'] is None):
            raise ValueError("Missing the required parameter `vcs_root_locator` when calling `update_build_type_vcs_root`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501
        if 'vcs_root_locator' in params:
            if isinstance(params['vcs_root_locator'], TeamCityObject):
                path_params['vcsRootLocator'] = params['vcs_root_locator'].locator_id
            else:
                path_params['vcsRootLocator'] = params['vcs_root_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/vcs-root-entries/{vcsRootLocator}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VcsRootEntry',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __update_build_type_vcs_root_checkout_rules_with_http_info(self, bt_locator, vcs_root_locator, **kwargs):  # noqa: E501
        """Update checkout rules of a VCS root of the matching build configuration.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__update_build_type_vcs_root_checkout_rules_with_http_info(bt_locator, vcs_root_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bt_locator: (required)
        :param str vcs_root_locator: (required)
        :param str body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bt_locator', 'vcs_root_locator', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_build_type_vcs_root_checkout_rules" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bt_locator' is set
        if ('bt_locator' not in params or
                params['bt_locator'] is None):
            raise ValueError("Missing the required parameter `bt_locator` when calling `update_build_type_vcs_root_checkout_rules`")  # noqa: E501
        # verify the required parameter 'vcs_root_locator' is set
        if ('vcs_root_locator' not in params or
                params['vcs_root_locator'] is None):
            raise ValueError("Missing the required parameter `vcs_root_locator` when calling `update_build_type_vcs_root_checkout_rules`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bt_locator' in params:
            if isinstance(params['bt_locator'], TeamCityObject):
                path_params['btLocator'] = params['bt_locator'].locator_id
            else:
                path_params['btLocator'] = params['bt_locator']  # noqa: E501
        if 'vcs_root_locator' in params:
            if isinstance(params['vcs_root_locator'], TeamCityObject):
                path_params['vcsRootLocator'] = params['vcs_root_locator'].locator_id
            else:
                path_params['vcsRootLocator'] = params['vcs_root_locator']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/buildTypes/{btLocator}/vcs-root-entries/{vcsRootLocator}/checkout-rules', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
