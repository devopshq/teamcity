# coding: utf-8

"""
    TeamCity REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2018.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import
from dohq_teamcity.custom.base_model import TeamCityObject

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from dohq_teamcity.models.projects import Projects  # noqa: F401,E501
from dohq_teamcity.models.versioned_settings_config import VersionedSettingsConfig  # noqa: F401,E501
from dohq_teamcity.models.versioned_settings_context_parameters import VersionedSettingsContextParameters  # noqa: F401,E501
from dohq_teamcity.models.versioned_settings_status import VersionedSettingsStatus  # noqa: F401,E501
from dohq_teamcity.models.versioned_settings_tokens import VersionedSettingsTokens  # noqa: F401,E501


class VersionedSettingsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """
    base_name = 'VersionedSettings'

    def __init__(self, api_client=None):
        self.api_client = api_client

    def add_versioned_settings_tokens(self, locator, **kwargs):  # noqa: E501
        """Add Versioned Settings Tokens.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_versioned_settings_tokens(locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str locator: (required)
        :param VersionedSettingsTokens body:
        :return: VersionedSettingsTokens
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__add_versioned_settings_tokens_with_http_info(locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__add_versioned_settings_tokens_with_http_info(locator, **kwargs)  # noqa: E501
            return data

    def check_for_versioned_settings_changes(self, locator, **kwargs):  # noqa: E501
        """Check for changes in Versioned Settings.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.check_for_versioned_settings_changes(locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str locator: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__check_for_versioned_settings_changes_with_http_info(locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__check_for_versioned_settings_changes_with_http_info(locator, **kwargs)  # noqa: E501
            return data

    def commit_current_settings(self, locator, **kwargs):  # noqa: E501
        """Perform Versioned Settings action: Commit current settings to VCS.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.commit_current_settings(locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str locator: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__commit_current_settings_with_http_info(locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__commit_current_settings_with_http_info(locator, **kwargs)  # noqa: E501
            return data

    def delete_versioned_settings_config_parameter(self, locator, name, **kwargs):  # noqa: E501
        """Delete Versioned Settings config parameter value.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_versioned_settings_config_parameter(locator, name, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str locator: (required)
        :param str name: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__delete_versioned_settings_config_parameter_with_http_info(locator, name, **kwargs)  # noqa: E501
        else:
            (data) = self.__delete_versioned_settings_config_parameter_with_http_info(locator, name, **kwargs)  # noqa: E501
            return data

    def delete_versioned_settings_tokens(self, locator, **kwargs):  # noqa: E501
        """Delete Versioned Settings Tokens.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_versioned_settings_tokens(locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str locator: (required)
        :param VersionedSettingsTokens body:
        :return: VersionedSettingsTokens
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__delete_versioned_settings_tokens_with_http_info(locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__delete_versioned_settings_tokens_with_http_info(locator, **kwargs)  # noqa: E501
            return data

    def get_versioned_settings_config(self, locator, **kwargs):  # noqa: E501
        """Get Versioned Settings config.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_versioned_settings_config(locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str locator: (required)
        :param str fields:
        :return: VersionedSettingsConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_versioned_settings_config_with_http_info(locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_versioned_settings_config_with_http_info(locator, **kwargs)  # noqa: E501
            return data

    def get_versioned_settings_config_parameter(self, locator, name, **kwargs):  # noqa: E501
        """Get Versioned Settings config parameter value.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_versioned_settings_config_parameter(locator, name, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str locator: (required)
        :param str name: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_versioned_settings_config_parameter_with_http_info(locator, name, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_versioned_settings_config_parameter_with_http_info(locator, name, **kwargs)  # noqa: E501
            return data

    def get_versioned_settings_context_parameters(self, locator, **kwargs):  # noqa: E501
        """Get Versioned Settings Context Parameters.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_versioned_settings_context_parameters(locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str locator: (required)
        :return: VersionedSettingsContextParameters
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_versioned_settings_context_parameters_with_http_info(locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_versioned_settings_context_parameters_with_http_info(locator, **kwargs)  # noqa: E501
            return data

    def get_versioned_settings_projects_to_load(self, locator, **kwargs):  # noqa: E501
        """Get a list of projects that are affected by Load Settings from VCS action.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_versioned_settings_projects_to_load(locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str locator: (required)
        :param str fields:
        :return: Projects
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_versioned_settings_projects_to_load_with_http_info(locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_versioned_settings_projects_to_load_with_http_info(locator, **kwargs)  # noqa: E501
            return data

    def get_versioned_settings_status(self, locator, **kwargs):  # noqa: E501
        """Get current status of Versioned Settings.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_versioned_settings_status(locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str locator: (required)
        :param str fields:
        :return: VersionedSettingsStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_versioned_settings_status_with_http_info(locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_versioned_settings_status_with_http_info(locator, **kwargs)  # noqa: E501
            return data

    def get_versioned_settings_tokens(self, locator, **kwargs):  # noqa: E501
        """Get Versioned Settings Tokens.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_versioned_settings_tokens(locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str locator: (required)
        :param str status:
        :return: VersionedSettingsTokens
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_versioned_settings_tokens_with_http_info(locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_versioned_settings_tokens_with_http_info(locator, **kwargs)  # noqa: E501
            return data

    def load_settings_from_vcs(self, locator, **kwargs):  # noqa: E501
        """Perform Versioned Settings action: Load Setting from VCS.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.load_settings_from_vcs(locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str locator: (required)
        :param str fields:
        :return: Projects
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__load_settings_from_vcs_with_http_info(locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__load_settings_from_vcs_with_http_info(locator, **kwargs)  # noqa: E501
            return data

    def set_versioned_settings_config(self, locator, **kwargs):  # noqa: E501
        """Set Verseioned Settings config.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_versioned_settings_config(locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str locator: (required)
        :param VersionedSettingsConfig body:
        :param str fields:
        :return: VersionedSettingsConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__set_versioned_settings_config_with_http_info(locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__set_versioned_settings_config_with_http_info(locator, **kwargs)  # noqa: E501
            return data

    def set_versioned_settings_config_parameter(self, locator, name, **kwargs):  # noqa: E501
        """Set Versioned Settings config parameter value.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_versioned_settings_config_parameter(locator, name, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str locator: (required)
        :param str name: (required)
        :param str body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__set_versioned_settings_config_parameter_with_http_info(locator, name, **kwargs)  # noqa: E501
        else:
            (data) = self.__set_versioned_settings_config_parameter_with_http_info(locator, name, **kwargs)  # noqa: E501
            return data

    def set_versioned_settings_context_parameters(self, locator, **kwargs):  # noqa: E501
        """Set Versioned Settings Context Parameters.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_versioned_settings_context_parameters(locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str locator: (required)
        :param VersionedSettingsContextParameters body:
        :return: VersionedSettingsContextParameters
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__set_versioned_settings_context_parameters_with_http_info(locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__set_versioned_settings_context_parameters_with_http_info(locator, **kwargs)  # noqa: E501
            return data

    def __add_versioned_settings_tokens_with_http_info(self, locator, **kwargs):  # noqa: E501
        """Add Versioned Settings Tokens.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__add_versioned_settings_tokens_with_http_info(locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str locator: (required)
        :param VersionedSettingsTokens body:
        :return: VersionedSettingsTokens
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['locator', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_versioned_settings_tokens" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'locator' is set
        if ('locator' not in params or
                params['locator'] is None):
            raise ValueError("Missing the required parameter `locator` when calling `add_versioned_settings_tokens`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'locator' in params:
            if isinstance(params['locator'], TeamCityObject):
                path_params['locator'] = params['locator'].locator_id
            else:
                path_params['locator'] = params['locator']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/projects/{locator}/versionedSettings/tokens', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VersionedSettingsTokens',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __check_for_versioned_settings_changes_with_http_info(self, locator, **kwargs):  # noqa: E501
        """Check for changes in Versioned Settings.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__check_for_versioned_settings_changes_with_http_info(locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str locator: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['locator']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method check_for_versioned_settings_changes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'locator' is set
        if ('locator' not in params or
                params['locator'] is None):
            raise ValueError("Missing the required parameter `locator` when calling `check_for_versioned_settings_changes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'locator' in params:
            if isinstance(params['locator'], TeamCityObject):
                path_params['locator'] = params['locator'].locator_id
            else:
                path_params['locator'] = params['locator']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/projects/{locator}/versionedSettings/checkForChanges', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __commit_current_settings_with_http_info(self, locator, **kwargs):  # noqa: E501
        """Perform Versioned Settings action: Commit current settings to VCS.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__commit_current_settings_with_http_info(locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str locator: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['locator']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method commit_current_settings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'locator' is set
        if ('locator' not in params or
                params['locator'] is None):
            raise ValueError("Missing the required parameter `locator` when calling `commit_current_settings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'locator' in params:
            if isinstance(params['locator'], TeamCityObject):
                path_params['locator'] = params['locator'].locator_id
            else:
                path_params['locator'] = params['locator']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/projects/{locator}/versionedSettings/commitCurrentSettings', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __delete_versioned_settings_config_parameter_with_http_info(self, locator, name, **kwargs):  # noqa: E501
        """Delete Versioned Settings config parameter value.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__delete_versioned_settings_config_parameter_with_http_info(locator, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str locator: (required)
        :param str name: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['locator', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_versioned_settings_config_parameter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'locator' is set
        if ('locator' not in params or
                params['locator'] is None):
            raise ValueError("Missing the required parameter `locator` when calling `delete_versioned_settings_config_parameter`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_versioned_settings_config_parameter`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'locator' in params:
            if isinstance(params['locator'], TeamCityObject):
                path_params['locator'] = params['locator'].locator_id
            else:
                path_params['locator'] = params['locator']  # noqa: E501
        if 'name' in params:
            if isinstance(params['name'], TeamCityObject):
                path_params['name'] = params['name'].locator_id
            else:
                path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/projects/{locator}/versionedSettings/config/parameters/{name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __delete_versioned_settings_tokens_with_http_info(self, locator, **kwargs):  # noqa: E501
        """Delete Versioned Settings Tokens.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__delete_versioned_settings_tokens_with_http_info(locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str locator: (required)
        :param VersionedSettingsTokens body:
        :return: VersionedSettingsTokens
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['locator', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_versioned_settings_tokens" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'locator' is set
        if ('locator' not in params or
                params['locator'] is None):
            raise ValueError("Missing the required parameter `locator` when calling `delete_versioned_settings_tokens`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'locator' in params:
            if isinstance(params['locator'], TeamCityObject):
                path_params['locator'] = params['locator'].locator_id
            else:
                path_params['locator'] = params['locator']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/projects/{locator}/versionedSettings/tokens', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VersionedSettingsTokens',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_versioned_settings_config_with_http_info(self, locator, **kwargs):  # noqa: E501
        """Get Versioned Settings config.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_versioned_settings_config_with_http_info(locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str locator: (required)
        :param str fields:
        :return: VersionedSettingsConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_versioned_settings_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'locator' is set
        if ('locator' not in params or
                params['locator'] is None):
            raise ValueError("Missing the required parameter `locator` when calling `get_versioned_settings_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'locator' in params:
            if isinstance(params['locator'], TeamCityObject):
                path_params['locator'] = params['locator'].locator_id
            else:
                path_params['locator'] = params['locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/projects/{locator}/versionedSettings/config', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VersionedSettingsConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_versioned_settings_config_parameter_with_http_info(self, locator, name, **kwargs):  # noqa: E501
        """Get Versioned Settings config parameter value.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_versioned_settings_config_parameter_with_http_info(locator, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str locator: (required)
        :param str name: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['locator', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_versioned_settings_config_parameter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'locator' is set
        if ('locator' not in params or
                params['locator'] is None):
            raise ValueError("Missing the required parameter `locator` when calling `get_versioned_settings_config_parameter`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_versioned_settings_config_parameter`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'locator' in params:
            if isinstance(params['locator'], TeamCityObject):
                path_params['locator'] = params['locator'].locator_id
            else:
                path_params['locator'] = params['locator']  # noqa: E501
        if 'name' in params:
            if isinstance(params['name'], TeamCityObject):
                path_params['name'] = params['name'].locator_id
            else:
                path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/projects/{locator}/versionedSettings/config/parameters/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_versioned_settings_context_parameters_with_http_info(self, locator, **kwargs):  # noqa: E501
        """Get Versioned Settings Context Parameters.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_versioned_settings_context_parameters_with_http_info(locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str locator: (required)
        :return: VersionedSettingsContextParameters
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['locator']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_versioned_settings_context_parameters" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'locator' is set
        if ('locator' not in params or
                params['locator'] is None):
            raise ValueError("Missing the required parameter `locator` when calling `get_versioned_settings_context_parameters`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'locator' in params:
            if isinstance(params['locator'], TeamCityObject):
                path_params['locator'] = params['locator'].locator_id
            else:
                path_params['locator'] = params['locator']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/projects/{locator}/versionedSettings/contextParameters', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VersionedSettingsContextParameters',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_versioned_settings_projects_to_load_with_http_info(self, locator, **kwargs):  # noqa: E501
        """Get a list of projects that are affected by Load Settings from VCS action.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_versioned_settings_projects_to_load_with_http_info(locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str locator: (required)
        :param str fields:
        :return: Projects
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_versioned_settings_projects_to_load" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'locator' is set
        if ('locator' not in params or
                params['locator'] is None):
            raise ValueError("Missing the required parameter `locator` when calling `get_versioned_settings_projects_to_load`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'locator' in params:
            if isinstance(params['locator'], TeamCityObject):
                path_params['locator'] = params['locator'].locator_id
            else:
                path_params['locator'] = params['locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/projects/{locator}/versionedSettings/affectedProjects', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Projects',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_versioned_settings_status_with_http_info(self, locator, **kwargs):  # noqa: E501
        """Get current status of Versioned Settings.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_versioned_settings_status_with_http_info(locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str locator: (required)
        :param str fields:
        :return: VersionedSettingsStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_versioned_settings_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'locator' is set
        if ('locator' not in params or
                params['locator'] is None):
            raise ValueError("Missing the required parameter `locator` when calling `get_versioned_settings_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'locator' in params:
            if isinstance(params['locator'], TeamCityObject):
                path_params['locator'] = params['locator'].locator_id
            else:
                path_params['locator'] = params['locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/projects/{locator}/versionedSettings/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VersionedSettingsStatus',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_versioned_settings_tokens_with_http_info(self, locator, **kwargs):  # noqa: E501
        """Get Versioned Settings Tokens.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_versioned_settings_tokens_with_http_info(locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str locator: (required)
        :param str status:
        :return: VersionedSettingsTokens
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['locator', 'status']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_versioned_settings_tokens" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'locator' is set
        if ('locator' not in params or
                params['locator'] is None):
            raise ValueError("Missing the required parameter `locator` when calling `get_versioned_settings_tokens`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'locator' in params:
            if isinstance(params['locator'], TeamCityObject):
                path_params['locator'] = params['locator'].locator_id
            else:
                path_params['locator'] = params['locator']  # noqa: E501

        query_params = []
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/projects/{locator}/versionedSettings/tokens', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VersionedSettingsTokens',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __load_settings_from_vcs_with_http_info(self, locator, **kwargs):  # noqa: E501
        """Perform Versioned Settings action: Load Setting from VCS.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__load_settings_from_vcs_with_http_info(locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str locator: (required)
        :param str fields:
        :return: Projects
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method load_settings_from_vcs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'locator' is set
        if ('locator' not in params or
                params['locator'] is None):
            raise ValueError("Missing the required parameter `locator` when calling `load_settings_from_vcs`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'locator' in params:
            if isinstance(params['locator'], TeamCityObject):
                path_params['locator'] = params['locator'].locator_id
            else:
                path_params['locator'] = params['locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/projects/{locator}/versionedSettings/loadSettings', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Projects',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __set_versioned_settings_config_with_http_info(self, locator, **kwargs):  # noqa: E501
        """Set Verseioned Settings config.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__set_versioned_settings_config_with_http_info(locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str locator: (required)
        :param VersionedSettingsConfig body:
        :param str fields:
        :return: VersionedSettingsConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['locator', 'body', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_versioned_settings_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'locator' is set
        if ('locator' not in params or
                params['locator'] is None):
            raise ValueError("Missing the required parameter `locator` when calling `set_versioned_settings_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'locator' in params:
            if isinstance(params['locator'], TeamCityObject):
                path_params['locator'] = params['locator'].locator_id
            else:
                path_params['locator'] = params['locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/projects/{locator}/versionedSettings/config', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VersionedSettingsConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __set_versioned_settings_config_parameter_with_http_info(self, locator, name, **kwargs):  # noqa: E501
        """Set Versioned Settings config parameter value.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__set_versioned_settings_config_parameter_with_http_info(locator, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str locator: (required)
        :param str name: (required)
        :param str body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['locator', 'name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_versioned_settings_config_parameter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'locator' is set
        if ('locator' not in params or
                params['locator'] is None):
            raise ValueError("Missing the required parameter `locator` when calling `set_versioned_settings_config_parameter`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `set_versioned_settings_config_parameter`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'locator' in params:
            if isinstance(params['locator'], TeamCityObject):
                path_params['locator'] = params['locator'].locator_id
            else:
                path_params['locator'] = params['locator']  # noqa: E501
        if 'name' in params:
            if isinstance(params['name'], TeamCityObject):
                path_params['name'] = params['name'].locator_id
            else:
                path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/projects/{locator}/versionedSettings/config/parameters/{name}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __set_versioned_settings_context_parameters_with_http_info(self, locator, **kwargs):  # noqa: E501
        """Set Versioned Settings Context Parameters.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__set_versioned_settings_context_parameters_with_http_info(locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str locator: (required)
        :param VersionedSettingsContextParameters body:
        :return: VersionedSettingsContextParameters
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['locator', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_versioned_settings_context_parameters" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'locator' is set
        if ('locator' not in params or
                params['locator'] is None):
            raise ValueError("Missing the required parameter `locator` when calling `set_versioned_settings_context_parameters`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'locator' in params:
            if isinstance(params['locator'], TeamCityObject):
                path_params['locator'] = params['locator'].locator_id
            else:
                path_params['locator'] = params['locator']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/projects/{locator}/versionedSettings/contextParameters', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VersionedSettingsContextParameters',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
