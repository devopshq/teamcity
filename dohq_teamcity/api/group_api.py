# coding: utf-8

"""
    TeamCity REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2018.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import
from dohq_teamcity.custom.base_model import TeamCityObject

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from dohq_teamcity.models.group import Group  # noqa: F401,E501
from dohq_teamcity.models.groups import Groups  # noqa: F401,E501
from dohq_teamcity.models.properties import Properties  # noqa: F401,E501
from dohq_teamcity.models.role import Role  # noqa: F401,E501
from dohq_teamcity.models.roles import Roles  # noqa: F401,E501


class GroupApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """
    base_name = 'Group'

    def __init__(self, api_client=None):
        self.api_client = api_client

    def add_group(self, **kwargs):  # noqa: E501
        """Add a new user group.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_group(async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param Group body:
        :param str fields:
        :return: Group
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__add_group_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.__add_group_with_http_info(**kwargs)  # noqa: E501
            return data

    def add_role_at_scope_to_group(self, group_locator, role_id, scope, **kwargs):  # noqa: E501
        """Add a role with the specific scope to the matching user group.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_role_at_scope_to_group(group_locator, role_id, scope, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str group_locator: (required)
        :param str role_id: (required)
        :param str scope: (required)
        :return: Role
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__add_role_at_scope_to_group_with_http_info(group_locator, role_id, scope, **kwargs)  # noqa: E501
        else:
            (data) = self.__add_role_at_scope_to_group_with_http_info(group_locator, role_id, scope, **kwargs)  # noqa: E501
            return data

    def add_role_to_group(self, group_locator, **kwargs):  # noqa: E501
        """Add a role to the matching user group.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_role_to_group(group_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str group_locator: (required)
        :param Role body:
        :return: Role
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__add_role_to_group_with_http_info(group_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__add_role_to_group_with_http_info(group_locator, **kwargs)  # noqa: E501
            return data

    def delete_group(self, group_locator, **kwargs):  # noqa: E501
        """Delete user group matching the locator.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_group(group_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str group_locator: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__delete_group_with_http_info(group_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__delete_group_with_http_info(group_locator, **kwargs)  # noqa: E501
            return data

    def get_all_groups(self, **kwargs):  # noqa: E501
        """Get all user groups.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_groups(async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str fields:
        :return: Groups
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_all_groups_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.__get_all_groups_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_group_parent_groups(self, group_locator, **kwargs):  # noqa: E501
        """Get parent groups of the matching user group.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_group_parent_groups(group_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str group_locator: (required)
        :param str fields:
        :return: Groups
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_group_parent_groups_with_http_info(group_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_group_parent_groups_with_http_info(group_locator, **kwargs)  # noqa: E501
            return data

    def get_group_properties(self, group_locator, **kwargs):  # noqa: E501
        """Get properties of the matching user group.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_group_properties(group_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str group_locator: (required)
        :param str fields:
        :return: Properties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_group_properties_with_http_info(group_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_group_properties_with_http_info(group_locator, **kwargs)  # noqa: E501
            return data

    def get_group_property(self, group_locator, name, **kwargs):  # noqa: E501
        """Get a property of the matching user group.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_group_property(group_locator, name, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str group_locator: (required)
        :param str name: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_group_property_with_http_info(group_locator, name, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_group_property_with_http_info(group_locator, name, **kwargs)  # noqa: E501
            return data

    def get_group_role_at_scope(self, group_locator, role_id, scope, **kwargs):  # noqa: E501
        """Get a role with the specific scope of the matching user group.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_group_role_at_scope(group_locator, role_id, scope, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str group_locator: (required)
        :param str role_id: (required)
        :param str scope: (required)
        :return: Role
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_group_role_at_scope_with_http_info(group_locator, role_id, scope, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_group_role_at_scope_with_http_info(group_locator, role_id, scope, **kwargs)  # noqa: E501
            return data

    def get_group_roles(self, group_locator, **kwargs):  # noqa: E501
        """Get all roles of the matching user group.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_group_roles(group_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str group_locator: (required)
        :return: Roles
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_group_roles_with_http_info(group_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_group_roles_with_http_info(group_locator, **kwargs)  # noqa: E501
            return data

    def get_user_group_of_group(self, group_locator, **kwargs):  # noqa: E501
        """Get user group matching the locator.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_group_of_group(group_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str group_locator: (required)
        :param str fields:
        :return: Group
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__get_user_group_of_group_with_http_info(group_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__get_user_group_of_group_with_http_info(group_locator, **kwargs)  # noqa: E501
            return data

    def remove_group_property(self, group_locator, name, **kwargs):  # noqa: E501
        """Remove a property of the matching user group.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_group_property(group_locator, name, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str group_locator: (required)
        :param str name: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__remove_group_property_with_http_info(group_locator, name, **kwargs)  # noqa: E501
        else:
            (data) = self.__remove_group_property_with_http_info(group_locator, name, **kwargs)  # noqa: E501
            return data

    def remove_role_at_scope_from_group(self, group_locator, role_id, scope, **kwargs):  # noqa: E501
        """Remove a role with the specific scope from the matching user group.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_role_at_scope_from_group(group_locator, role_id, scope, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str group_locator: (required)
        :param str role_id: (required)
        :param str scope: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__remove_role_at_scope_from_group_with_http_info(group_locator, role_id, scope, **kwargs)  # noqa: E501
        else:
            (data) = self.__remove_role_at_scope_from_group_with_http_info(group_locator, role_id, scope, **kwargs)  # noqa: E501
            return data

    def set_group_parent_groups(self, group_locator, **kwargs):  # noqa: E501
        """Update parent groups of the matching user group.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_group_parent_groups(group_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str group_locator: (required)
        :param Groups body:
        :param str fields:
        :return: Groups
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__set_group_parent_groups_with_http_info(group_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__set_group_parent_groups_with_http_info(group_locator, **kwargs)  # noqa: E501
            return data

    def set_group_property(self, group_locator, name, **kwargs):  # noqa: E501
        """Update a property of the matching user group.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_group_property(group_locator, name, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str group_locator: (required)
        :param str name: (required)
        :param str body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__set_group_property_with_http_info(group_locator, name, **kwargs)  # noqa: E501
        else:
            (data) = self.__set_group_property_with_http_info(group_locator, name, **kwargs)  # noqa: E501
            return data

    def set_group_roles(self, group_locator, **kwargs):  # noqa: E501
        """Update roles of the matching user group.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_group_roles(group_locator, async_req=True)
        >>> result = thread.get()

        :param async_req: bool
        :param str group_locator: (required)
        :param Roles body:
        :return: Roles
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.__set_group_roles_with_http_info(group_locator, **kwargs)  # noqa: E501
        else:
            (data) = self.__set_group_roles_with_http_info(group_locator, **kwargs)  # noqa: E501
            return data

    def __add_group_with_http_info(self, **kwargs):  # noqa: E501
        """Add a new user group.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__add_group_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Group body:
        :param str fields:
        :return: Group
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_group" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/userGroups', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Group',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __add_role_at_scope_to_group_with_http_info(self, group_locator, role_id, scope, **kwargs):  # noqa: E501
        """Add a role with the specific scope to the matching user group.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__add_role_at_scope_to_group_with_http_info(group_locator, role_id, scope, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_locator: (required)
        :param str role_id: (required)
        :param str scope: (required)
        :return: Role
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_locator', 'role_id', 'scope']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_role_at_scope_to_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_locator' is set
        if ('group_locator' not in params or
                params['group_locator'] is None):
            raise ValueError("Missing the required parameter `group_locator` when calling `add_role_at_scope_to_group`")  # noqa: E501
        # verify the required parameter 'role_id' is set
        if ('role_id' not in params or
                params['role_id'] is None):
            raise ValueError("Missing the required parameter `role_id` when calling `add_role_at_scope_to_group`")  # noqa: E501
        # verify the required parameter 'scope' is set
        if ('scope' not in params or
                params['scope'] is None):
            raise ValueError("Missing the required parameter `scope` when calling `add_role_at_scope_to_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_locator' in params:
            if isinstance(params['group_locator'], TeamCityObject):
                path_params['groupLocator'] = params['group_locator'].locator_id
            else:
                path_params['groupLocator'] = params['group_locator']  # noqa: E501
        if 'role_id' in params:
            if isinstance(params['role_id'], TeamCityObject):
                path_params['roleId'] = params['role_id'].locator_id
            else:
                path_params['roleId'] = params['role_id']  # noqa: E501
        if 'scope' in params:
            if isinstance(params['scope'], TeamCityObject):
                path_params['scope'] = params['scope'].locator_id
            else:
                path_params['scope'] = params['scope']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/userGroups/{groupLocator}/roles/{roleId}/{scope}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Role',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __add_role_to_group_with_http_info(self, group_locator, **kwargs):  # noqa: E501
        """Add a role to the matching user group.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__add_role_to_group_with_http_info(group_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_locator: (required)
        :param Role body:
        :return: Role
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_locator', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_role_to_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_locator' is set
        if ('group_locator' not in params or
                params['group_locator'] is None):
            raise ValueError("Missing the required parameter `group_locator` when calling `add_role_to_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_locator' in params:
            if isinstance(params['group_locator'], TeamCityObject):
                path_params['groupLocator'] = params['group_locator'].locator_id
            else:
                path_params['groupLocator'] = params['group_locator']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/userGroups/{groupLocator}/roles', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Role',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __delete_group_with_http_info(self, group_locator, **kwargs):  # noqa: E501
        """Delete user group matching the locator.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__delete_group_with_http_info(group_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_locator: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_locator']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_locator' is set
        if ('group_locator' not in params or
                params['group_locator'] is None):
            raise ValueError("Missing the required parameter `group_locator` when calling `delete_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_locator' in params:
            if isinstance(params['group_locator'], TeamCityObject):
                path_params['groupLocator'] = params['group_locator'].locator_id
            else:
                path_params['groupLocator'] = params['group_locator']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/userGroups/{groupLocator}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_all_groups_with_http_info(self, **kwargs):  # noqa: E501
        """Get all user groups.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_all_groups_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str fields:
        :return: Groups
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_groups" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/userGroups', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Groups',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_group_parent_groups_with_http_info(self, group_locator, **kwargs):  # noqa: E501
        """Get parent groups of the matching user group.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_group_parent_groups_with_http_info(group_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_locator: (required)
        :param str fields:
        :return: Groups
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_group_parent_groups" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_locator' is set
        if ('group_locator' not in params or
                params['group_locator'] is None):
            raise ValueError("Missing the required parameter `group_locator` when calling `get_group_parent_groups`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_locator' in params:
            if isinstance(params['group_locator'], TeamCityObject):
                path_params['groupLocator'] = params['group_locator'].locator_id
            else:
                path_params['groupLocator'] = params['group_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/userGroups/{groupLocator}/parent-groups', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Groups',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_group_properties_with_http_info(self, group_locator, **kwargs):  # noqa: E501
        """Get properties of the matching user group.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_group_properties_with_http_info(group_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_locator: (required)
        :param str fields:
        :return: Properties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_group_properties" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_locator' is set
        if ('group_locator' not in params or
                params['group_locator'] is None):
            raise ValueError("Missing the required parameter `group_locator` when calling `get_group_properties`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_locator' in params:
            if isinstance(params['group_locator'], TeamCityObject):
                path_params['groupLocator'] = params['group_locator'].locator_id
            else:
                path_params['groupLocator'] = params['group_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/userGroups/{groupLocator}/properties', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Properties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_group_property_with_http_info(self, group_locator, name, **kwargs):  # noqa: E501
        """Get a property of the matching user group.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_group_property_with_http_info(group_locator, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_locator: (required)
        :param str name: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_locator', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_group_property" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_locator' is set
        if ('group_locator' not in params or
                params['group_locator'] is None):
            raise ValueError("Missing the required parameter `group_locator` when calling `get_group_property`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_group_property`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_locator' in params:
            if isinstance(params['group_locator'], TeamCityObject):
                path_params['groupLocator'] = params['group_locator'].locator_id
            else:
                path_params['groupLocator'] = params['group_locator']  # noqa: E501
        if 'name' in params:
            if isinstance(params['name'], TeamCityObject):
                path_params['name'] = params['name'].locator_id
            else:
                path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/userGroups/{groupLocator}/properties/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_group_role_at_scope_with_http_info(self, group_locator, role_id, scope, **kwargs):  # noqa: E501
        """Get a role with the specific scope of the matching user group.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_group_role_at_scope_with_http_info(group_locator, role_id, scope, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_locator: (required)
        :param str role_id: (required)
        :param str scope: (required)
        :return: Role
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_locator', 'role_id', 'scope']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_group_role_at_scope" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_locator' is set
        if ('group_locator' not in params or
                params['group_locator'] is None):
            raise ValueError("Missing the required parameter `group_locator` when calling `get_group_role_at_scope`")  # noqa: E501
        # verify the required parameter 'role_id' is set
        if ('role_id' not in params or
                params['role_id'] is None):
            raise ValueError("Missing the required parameter `role_id` when calling `get_group_role_at_scope`")  # noqa: E501
        # verify the required parameter 'scope' is set
        if ('scope' not in params or
                params['scope'] is None):
            raise ValueError("Missing the required parameter `scope` when calling `get_group_role_at_scope`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_locator' in params:
            if isinstance(params['group_locator'], TeamCityObject):
                path_params['groupLocator'] = params['group_locator'].locator_id
            else:
                path_params['groupLocator'] = params['group_locator']  # noqa: E501
        if 'role_id' in params:
            if isinstance(params['role_id'], TeamCityObject):
                path_params['roleId'] = params['role_id'].locator_id
            else:
                path_params['roleId'] = params['role_id']  # noqa: E501
        if 'scope' in params:
            if isinstance(params['scope'], TeamCityObject):
                path_params['scope'] = params['scope'].locator_id
            else:
                path_params['scope'] = params['scope']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/userGroups/{groupLocator}/roles/{roleId}/{scope}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Role',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_group_roles_with_http_info(self, group_locator, **kwargs):  # noqa: E501
        """Get all roles of the matching user group.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_group_roles_with_http_info(group_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_locator: (required)
        :return: Roles
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_locator']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_group_roles" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_locator' is set
        if ('group_locator' not in params or
                params['group_locator'] is None):
            raise ValueError("Missing the required parameter `group_locator` when calling `get_group_roles`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_locator' in params:
            if isinstance(params['group_locator'], TeamCityObject):
                path_params['groupLocator'] = params['group_locator'].locator_id
            else:
                path_params['groupLocator'] = params['group_locator']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/userGroups/{groupLocator}/roles', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Roles',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __get_user_group_of_group_with_http_info(self, group_locator, **kwargs):  # noqa: E501
        """Get user group matching the locator.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__get_user_group_of_group_with_http_info(group_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_locator: (required)
        :param str fields:
        :return: Group
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_locator', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_group_of_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_locator' is set
        if ('group_locator' not in params or
                params['group_locator'] is None):
            raise ValueError("Missing the required parameter `group_locator` when calling `get_user_group_of_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_locator' in params:
            if isinstance(params['group_locator'], TeamCityObject):
                path_params['groupLocator'] = params['group_locator'].locator_id
            else:
                path_params['groupLocator'] = params['group_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/userGroups/{groupLocator}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Group',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __remove_group_property_with_http_info(self, group_locator, name, **kwargs):  # noqa: E501
        """Remove a property of the matching user group.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__remove_group_property_with_http_info(group_locator, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_locator: (required)
        :param str name: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_locator', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_group_property" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_locator' is set
        if ('group_locator' not in params or
                params['group_locator'] is None):
            raise ValueError("Missing the required parameter `group_locator` when calling `remove_group_property`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `remove_group_property`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_locator' in params:
            if isinstance(params['group_locator'], TeamCityObject):
                path_params['groupLocator'] = params['group_locator'].locator_id
            else:
                path_params['groupLocator'] = params['group_locator']  # noqa: E501
        if 'name' in params:
            if isinstance(params['name'], TeamCityObject):
                path_params['name'] = params['name'].locator_id
            else:
                path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/userGroups/{groupLocator}/properties/{name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __remove_role_at_scope_from_group_with_http_info(self, group_locator, role_id, scope, **kwargs):  # noqa: E501
        """Remove a role with the specific scope from the matching user group.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__remove_role_at_scope_from_group_with_http_info(group_locator, role_id, scope, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_locator: (required)
        :param str role_id: (required)
        :param str scope: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_locator', 'role_id', 'scope']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_role_at_scope_from_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_locator' is set
        if ('group_locator' not in params or
                params['group_locator'] is None):
            raise ValueError("Missing the required parameter `group_locator` when calling `remove_role_at_scope_from_group`")  # noqa: E501
        # verify the required parameter 'role_id' is set
        if ('role_id' not in params or
                params['role_id'] is None):
            raise ValueError("Missing the required parameter `role_id` when calling `remove_role_at_scope_from_group`")  # noqa: E501
        # verify the required parameter 'scope' is set
        if ('scope' not in params or
                params['scope'] is None):
            raise ValueError("Missing the required parameter `scope` when calling `remove_role_at_scope_from_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_locator' in params:
            if isinstance(params['group_locator'], TeamCityObject):
                path_params['groupLocator'] = params['group_locator'].locator_id
            else:
                path_params['groupLocator'] = params['group_locator']  # noqa: E501
        if 'role_id' in params:
            if isinstance(params['role_id'], TeamCityObject):
                path_params['roleId'] = params['role_id'].locator_id
            else:
                path_params['roleId'] = params['role_id']  # noqa: E501
        if 'scope' in params:
            if isinstance(params['scope'], TeamCityObject):
                path_params['scope'] = params['scope'].locator_id
            else:
                path_params['scope'] = params['scope']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/userGroups/{groupLocator}/roles/{roleId}/{scope}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __set_group_parent_groups_with_http_info(self, group_locator, **kwargs):  # noqa: E501
        """Update parent groups of the matching user group.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__set_group_parent_groups_with_http_info(group_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_locator: (required)
        :param Groups body:
        :param str fields:
        :return: Groups
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_locator', 'body', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_group_parent_groups" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_locator' is set
        if ('group_locator' not in params or
                params['group_locator'] is None):
            raise ValueError("Missing the required parameter `group_locator` when calling `set_group_parent_groups`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_locator' in params:
            if isinstance(params['group_locator'], TeamCityObject):
                path_params['groupLocator'] = params['group_locator'].locator_id
            else:
                path_params['groupLocator'] = params['group_locator']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/userGroups/{groupLocator}/parent-groups', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Groups',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __set_group_property_with_http_info(self, group_locator, name, **kwargs):  # noqa: E501
        """Update a property of the matching user group.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__set_group_property_with_http_info(group_locator, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_locator: (required)
        :param str name: (required)
        :param str body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_locator', 'name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_group_property" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_locator' is set
        if ('group_locator' not in params or
                params['group_locator'] is None):
            raise ValueError("Missing the required parameter `group_locator` when calling `set_group_property`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `set_group_property`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_locator' in params:
            if isinstance(params['group_locator'], TeamCityObject):
                path_params['groupLocator'] = params['group_locator'].locator_id
            else:
                path_params['groupLocator'] = params['group_locator']  # noqa: E501
        if 'name' in params:
            if isinstance(params['name'], TeamCityObject):
                path_params['name'] = params['name'].locator_id
            else:
                path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/userGroups/{groupLocator}/properties/{name}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def __set_group_roles_with_http_info(self, group_locator, **kwargs):  # noqa: E501
        """Update roles of the matching user group.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.__set_group_roles_with_http_info(group_locator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_locator: (required)
        :param Roles body:
        :return: Roles
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_locator', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_group_roles" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_locator' is set
        if ('group_locator' not in params or
                params['group_locator'] is None):
            raise ValueError("Missing the required parameter `group_locator` when calling `set_group_roles`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_locator' in params:
            if isinstance(params['group_locator'], TeamCityObject):
                path_params['groupLocator'] = params['group_locator'].locator_id
            else:
                path_params['groupLocator'] = params['group_locator']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/app/rest/userGroups/{groupLocator}/roles', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Roles',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
