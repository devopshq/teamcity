dohq_teamcity.ProjectApi
######################################

.. note::

   + All ``serve_*`` method have aliases with get: ``serve_something`` == ``get_something``
   + Some API have ``get`` method - default method to get object by locator (e.g ``agent_api.get('id:123')`` return ``Agent`` model by id
   + See more examples on page :doc:`/examples/api/ProjectApi` and model examples
   + This is autogenerated page, don't change them directly, use template. Read more in :doc:`/development`

.. list-table::
   :widths: 20 80
   :header-rows: 1

   * - Method
     - HTTP request
   * - :ref:`add_agent_pools_project`
     - **POST** ``/app/rest/projects/{projectLocator}/agentPools``
   * - :ref:`add_build_type`
     - **POST** ``/app/rest/projects/{projectLocator}/buildTypes``
   * - :ref:`add_feature`
     - **POST** ``/app/rest/projects/{projectLocator}/projectFeatures``
   * - :ref:`add_project`
     - **POST** ``/app/rest/projects``
   * - :ref:`add_secure_token`
     - **POST** ``/app/rest/projects/{projectLocator}/secure/tokens``
   * - :ref:`add_template`
     - **POST** ``/app/rest/projects/{projectLocator}/templates``
   * - :ref:`create_build_parameter`
     - **POST** ``/app/rest/projects/{projectLocator}/parameters``
   * - :ref:`delete_build_parameter`
     - **DELETE** ``/app/rest/projects/{projectLocator}/parameters/{name}``
   * - :ref:`delete_build_parameters`
     - **DELETE** ``/app/rest/projects/{projectLocator}/parameters``
   * - :ref:`delete_feature`
     - **DELETE** ``/app/rest/projects/{projectLocator}/projectFeatures/{featureLocator}``
   * - :ref:`delete_project`
     - **DELETE** ``/app/rest/projects/{projectLocator}``
   * - :ref:`get_agent_pools_project`
     - **GET** ``/app/rest/projects/{projectLocator}/agentPools``
   * - :ref:`get_all_branches`
     - **GET** ``/app/rest/projects/{projectLocator}/branches``
   * - :ref:`get_all_build_types_ordered`
     - **GET** ``/app/rest/projects/{projectLocator}/order/buildTypes``
   * - :ref:`get_all_projects`
     - **GET** ``/app/rest/projects``
   * - :ref:`get_all_subprojects_ordered`
     - **GET** ``/app/rest/projects/{projectLocator}/order/projects``
   * - :ref:`get_build_parameter`
     - **GET** ``/app/rest/projects/{projectLocator}/parameters/{name}``
   * - :ref:`get_build_parameter_specification`
     - **GET** ``/app/rest/projects/{projectLocator}/parameters/{name}/type/rawValue``
   * - :ref:`get_build_parameter_type`
     - **GET** ``/app/rest/projects/{projectLocator}/parameters/{name}/type``
   * - :ref:`get_build_parameter_value`
     - **GET** ``/app/rest/projects/{projectLocator}/parameters/{name}/value``
   * - :ref:`get_build_parameters`
     - **GET** ``/app/rest/projects/{projectLocator}/parameters``
   * - :ref:`get_default_template`
     - **GET** ``/app/rest/projects/{projectLocator}/defaultTemplate``
   * - :ref:`get_feature`
     - **GET** ``/app/rest/projects/{projectLocator}/projectFeatures/{featureLocator}``
   * - :ref:`get_features`
     - **GET** ``/app/rest/projects/{projectLocator}/projectFeatures``
   * - :ref:`get_project`
     - **GET** ``/app/rest/projects/{projectLocator}``
   * - :ref:`get_project_field`
     - **GET** ``/app/rest/projects/{projectLocator}/{field}``
   * - :ref:`get_project_parent_project`
     - **GET** ``/app/rest/projects/{projectLocator}/parentProject``
   * - :ref:`get_project_settings_file`
     - **GET** ``/app/rest/projects/{projectLocator}/settingsFile``
   * - :ref:`get_project_templates`
     - **GET** ``/app/rest/projects/{projectLocator}/templates``
   * - :ref:`get_secure_value`
     - **GET** ``/app/rest/projects/{projectLocator}/secure/values/{token}``
   * - :ref:`remove_default_template`
     - **DELETE** ``/app/rest/projects/{projectLocator}/defaultTemplate``
   * - :ref:`remove_project_from_agent_pool`
     - **DELETE** ``/app/rest/projects/{projectLocator}/agentPools/{agentPoolLocator}``
   * - :ref:`set_agent_pools_project`
     - **PUT** ``/app/rest/projects/{projectLocator}/agentPools``
   * - :ref:`set_build_types_order`
     - **PUT** ``/app/rest/projects/{projectLocator}/order/buildTypes``
   * - :ref:`set_default_template`
     - **PUT** ``/app/rest/projects/{projectLocator}/defaultTemplate``
   * - :ref:`set_parent_project`
     - **PUT** ``/app/rest/projects/{projectLocator}/parentProject``
   * - :ref:`set_project_field`
     - **PUT** ``/app/rest/projects/{projectLocator}/{field}``
   * - :ref:`set_subprojects_order`
     - **PUT** ``/app/rest/projects/{projectLocator}/order/projects``
   * - :ref:`update_build_parameter`
     - **PUT** ``/app/rest/projects/{projectLocator}/parameters/{name}``
   * - :ref:`update_build_parameter_specification`
     - **PUT** ``/app/rest/projects/{projectLocator}/parameters/{name}/type/rawValue``
   * - :ref:`update_build_parameter_type`
     - **PUT** ``/app/rest/projects/{projectLocator}/parameters/{name}/type``
   * - :ref:`update_build_parameter_value`
     - **PUT** ``/app/rest/projects/{projectLocator}/parameters/{name}/value``
   * - :ref:`update_build_parameters`
     - **PUT** ``/app/rest/projects/{projectLocator}/parameters``
   * - :ref:`update_feature`
     - **PUT** ``/app/rest/projects/{projectLocator}/projectFeatures/{featureLocator}``
   * - :ref:`update_features`
     - **PUT** ``/app/rest/projects/{projectLocator}/projectFeatures``

.. _add_agent_pools_project:

add_agent_pools_project
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    project_locator = 'project_locator_example' # str | 
    body = dohq_teamcity.AgentPool() # AgentPool |  (optional)

    try:
        # Assign the matching project to the agent pool.
        api_response = tc.project_api.add_agent_pools_project(project_locator, body=body)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling ProjectApi->add_agent_pools_project: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **project_locator**
     - **str**
     - 
   * - **body**
     - `AgentPool <../models/AgentPool.html>`_
     - [optional] 

Return type:
    `AgentPool <../models/AgentPool.html>`_

`Back to top <#>`_

.. _add_build_type:

add_build_type
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    project_locator = 'project_locator_example' # str | 
    body = dohq_teamcity.NewBuildTypeDescription() # NewBuildTypeDescription |  (optional)
    fields = 'fields_example' # str |  (optional)

    try:
        # Add a build configuration to the matching project.
        api_response = tc.project_api.add_build_type(project_locator, body=body, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling ProjectApi->add_build_type: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **project_locator**
     - **str**
     - 
   * - **body**
     - `NewBuildTypeDescription <../models/NewBuildTypeDescription.html>`_
     - [optional] 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `BuildType <../models/BuildType.html>`_

`Back to top <#>`_

.. _add_feature:

add_feature
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    project_locator = 'project_locator_example' # str | 
    body = dohq_teamcity.ProjectFeature() # ProjectFeature |  (optional)
    fields = 'fields_example' # str |  (optional)

    try:
        # Add a feature.
        api_response = tc.project_api.add_feature(project_locator, body=body, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling ProjectApi->add_feature: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **project_locator**
     - **str**
     - 
   * - **body**
     - `ProjectFeature <../models/ProjectFeature.html>`_
     - [optional] 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    **object**

`Back to top <#>`_

.. _add_project:

add_project
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    body = dohq_teamcity.NewProjectDescription() # NewProjectDescription |  (optional)

    try:
        # Create a new project.
        api_response = tc.project_api.add_project(body=body)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling ProjectApi->add_project: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **body**
     - `NewProjectDescription <../models/NewProjectDescription.html>`_
     - [optional] 

Return type:
    `Project <../models/Project.html>`_

`Back to top <#>`_

.. _add_secure_token:

add_secure_token
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    project_locator = 'project_locator_example' # str | 
    body = 'body_example' # str |  (optional)

    try:
        # Create a new secure token for the matching project.
        api_response = tc.project_api.add_secure_token(project_locator, body=body)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling ProjectApi->add_secure_token: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **project_locator**
     - **str**
     - 
   * - **body**
     - **str**
     - [optional] 

Return type:
    **str**

`Back to top <#>`_

.. _add_template:

add_template
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    project_locator = 'project_locator_example' # str | 
    body = dohq_teamcity.NewBuildTypeDescription() # NewBuildTypeDescription |  (optional)
    fields = 'fields_example' # str |  (optional)

    try:
        # Add a build configuration template to the matching project.
        api_response = tc.project_api.add_template(project_locator, body=body, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling ProjectApi->add_template: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **project_locator**
     - **str**
     - 
   * - **body**
     - `NewBuildTypeDescription <../models/NewBuildTypeDescription.html>`_
     - [optional] 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `BuildType <../models/BuildType.html>`_

`Back to top <#>`_

.. _create_build_parameter:

create_build_parameter
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    project_locator = 'project_locator_example' # str | 
    body = dohq_teamcity.ModelProperty() # ModelProperty |  (optional)
    fields = 'fields_example' # str |  (optional)

    try:
        # Create a build parameter.
        api_response = tc.project_api.create_build_parameter(project_locator, body=body, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling ProjectApi->create_build_parameter: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **project_locator**
     - **str**
     - 
   * - **body**
     - `ModelProperty <../models/ModelProperty.html>`_
     - [optional] 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `ModelProperty <../models/ModelProperty.html>`_

`Back to top <#>`_

.. _delete_build_parameter:

delete_build_parameter
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    name = 'name_example' # str | 
    project_locator = 'project_locator_example' # str | 

    try:
        # Delete build parameter.
        tc.project_api.delete_build_parameter(name, project_locator)
    except ApiException as e:
        print("Exception when calling ProjectApi->delete_build_parameter: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **name**
     - **str**
     - 
   * - **project_locator**
     - **str**
     - 

Return type:
    void (empty response body)

`Back to top <#>`_

.. _delete_build_parameters:

delete_build_parameters
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    project_locator = 'project_locator_example' # str | 

    try:
        # Delete all build parameters.
        tc.project_api.delete_build_parameters(project_locator)
    except ApiException as e:
        print("Exception when calling ProjectApi->delete_build_parameters: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **project_locator**
     - **str**
     - 

Return type:
    void (empty response body)

`Back to top <#>`_

.. _delete_feature:

delete_feature
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    feature_locator = 'feature_locator_example' # str | 
    project_locator = 'project_locator_example' # str | 

    try:
        # Delete a matching feature.
        tc.project_api.delete_feature(feature_locator, project_locator)
    except ApiException as e:
        print("Exception when calling ProjectApi->delete_feature: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **feature_locator**
     - **str**
     - 
   * - **project_locator**
     - **str**
     - 

Return type:
    void (empty response body)

`Back to top <#>`_

.. _delete_project:

delete_project
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    project_locator = 'project_locator_example' # str | 

    try:
        # Delete project matching the locator.
        tc.project_api.delete_project(project_locator)
    except ApiException as e:
        print("Exception when calling ProjectApi->delete_project: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **project_locator**
     - **str**
     - 

Return type:
    void (empty response body)

`Back to top <#>`_

.. _get_agent_pools_project:

get_agent_pools_project
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    project_locator = 'project_locator_example' # str | 
    fields = 'fields_example' # str |  (optional)

    try:
        # Get agent pools appointed to the matching project.
        api_response = tc.project_api.get_agent_pools_project(project_locator, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling ProjectApi->get_agent_pools_project: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **project_locator**
     - **str**
     - 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `AgentPools <../models/AgentPools.html>`_

`Back to top <#>`_

.. _get_all_branches:

get_all_branches
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    project_locator = 'project_locator_example' # str | 
    locator = 'locator_example' # str |  (optional)
    fields = 'fields_example' # str |  (optional)

    try:
        # Get all branches of the matching project.
        api_response = tc.project_api.get_all_branches(project_locator, locator=locator, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling ProjectApi->get_all_branches: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **project_locator**
     - **str**
     - 
   * - **locator**
     - **str**
     - [optional] 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `Branches <../models/Branches.html>`_

`Back to top <#>`_

.. _get_all_build_types_ordered:

get_all_build_types_ordered
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    project_locator = 'project_locator_example' # str | 
    field = 'field_example' # str |  (optional)

    try:
        # Get all build configurations from the matching project, with custom ordering applied.
        api_response = tc.project_api.get_all_build_types_ordered(project_locator, field=field)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling ProjectApi->get_all_build_types_ordered: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **project_locator**
     - **str**
     - 
   * - **field**
     - **str**
     - [optional] 

Return type:
    `BuildTypes <../models/BuildTypes.html>`_

`Back to top <#>`_

.. _get_all_projects:

get_all_projects
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    locator = 'locator_example' # str |  (optional)
    fields = 'fields_example' # str |  (optional)

    try:
        # Get all projects.
        api_response = tc.project_api.get_all_projects(locator=locator, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling ProjectApi->get_all_projects: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **locator**
     - **str**
     - [optional] 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `Projects <../models/Projects.html>`_

`Back to top <#>`_

.. _get_all_subprojects_ordered:

get_all_subprojects_ordered
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    project_locator = 'project_locator_example' # str | 
    field = 'field_example' # str |  (optional)

    try:
        # Get all subprojects of the matching project, with custom ordering applied.
        api_response = tc.project_api.get_all_subprojects_ordered(project_locator, field=field)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling ProjectApi->get_all_subprojects_ordered: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **project_locator**
     - **str**
     - 
   * - **field**
     - **str**
     - [optional] 

Return type:
    `Projects <../models/Projects.html>`_

`Back to top <#>`_

.. _get_build_parameter:

get_build_parameter
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    name = 'name_example' # str | 
    project_locator = 'project_locator_example' # str | 
    fields = 'fields_example' # str |  (optional)

    try:
        # Get build parameter.
        api_response = tc.project_api.get_build_parameter(name, project_locator, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling ProjectApi->get_build_parameter: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **name**
     - **str**
     - 
   * - **project_locator**
     - **str**
     - 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `ModelProperty <../models/ModelProperty.html>`_

`Back to top <#>`_

.. _get_build_parameter_specification:

get_build_parameter_specification
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    name = 'name_example' # str | 
    project_locator = 'project_locator_example' # str | 

    try:
        # Get build parameter specification.
        api_response = tc.project_api.get_build_parameter_specification(name, project_locator)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling ProjectApi->get_build_parameter_specification: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **name**
     - **str**
     - 
   * - **project_locator**
     - **str**
     - 

Return type:
    **str**

`Back to top <#>`_

.. _get_build_parameter_type:

get_build_parameter_type
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    name = 'name_example' # str | 
    project_locator = 'project_locator_example' # str | 

    try:
        # Get type of build parameter.
        api_response = tc.project_api.get_build_parameter_type(name, project_locator)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling ProjectApi->get_build_parameter_type: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **name**
     - **str**
     - 
   * - **project_locator**
     - **str**
     - 

Return type:
    `Type <../models/Type.html>`_

`Back to top <#>`_

.. _get_build_parameter_value:

get_build_parameter_value
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    name = 'name_example' # str | 
    project_locator = 'project_locator_example' # str | 

    try:
        # Get value of build parameter.
        api_response = tc.project_api.get_build_parameter_value(name, project_locator)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling ProjectApi->get_build_parameter_value: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **name**
     - **str**
     - 
   * - **project_locator**
     - **str**
     - 

Return type:
    **str**

`Back to top <#>`_

.. _get_build_parameters:

get_build_parameters
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    project_locator = 'project_locator_example' # str | 
    locator = 'locator_example' # str |  (optional)
    fields = 'fields_example' # str |  (optional)

    try:
        # Get build parameters.
        api_response = tc.project_api.get_build_parameters(project_locator, locator=locator, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling ProjectApi->get_build_parameters: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **project_locator**
     - **str**
     - 
   * - **locator**
     - **str**
     - [optional] 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `Properties <../models/Properties.html>`_

`Back to top <#>`_

.. _get_default_template:

get_default_template
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    project_locator = 'project_locator_example' # str | 
    fields = 'fields_example' # str |  (optional)

    try:
        # Get the default template of the matching project.
        api_response = tc.project_api.get_default_template(project_locator, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling ProjectApi->get_default_template: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **project_locator**
     - **str**
     - 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `BuildType <../models/BuildType.html>`_

`Back to top <#>`_

.. _get_feature:

get_feature
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    feature_locator = 'feature_locator_example' # str | 
    project_locator = 'project_locator_example' # str | 
    fields = 'fields_example' # str |  (optional)

    try:
        # Get a matching feature.
        api_response = tc.project_api.get_feature(feature_locator, project_locator, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling ProjectApi->get_feature: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **feature_locator**
     - **str**
     - 
   * - **project_locator**
     - **str**
     - 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    **object**

`Back to top <#>`_

.. _get_features:

get_features
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    project_locator = 'project_locator_example' # str | 
    locator = 'locator_example' # str |  (optional)
    fields = 'fields_example' # str |  (optional)

    try:
        # Get all features.
        api_response = tc.project_api.get_features(project_locator, locator=locator, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling ProjectApi->get_features: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **project_locator**
     - **str**
     - 
   * - **locator**
     - **str**
     - [optional] 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    **object**

`Back to top <#>`_

.. _get_project:

get_project
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    project_locator = 'project_locator_example' # str | 
    fields = 'fields_example' # str |  (optional)

    try:
        # Get project matching the locator.
        api_response = tc.project_api.get_project(project_locator, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling ProjectApi->get_project: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **project_locator**
     - **str**
     - 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `Project <../models/Project.html>`_

`Back to top <#>`_

.. _get_project_field:

get_project_field
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    project_locator = 'project_locator_example' # str | 
    field = 'field_example' # str | 

    try:
        # Get a field of the matching project.
        api_response = tc.project_api.get_project_field(project_locator, field)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling ProjectApi->get_project_field: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **project_locator**
     - **str**
     - 
   * - **field**
     - **str**
     - 

Return type:
    **str**

`Back to top <#>`_

.. _get_project_parent_project:

get_project_parent_project
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    project_locator = 'project_locator_example' # str | 
    fields = 'fields_example' # str |  (optional)

    try:
        # Get the parent project of the matching project.
        api_response = tc.project_api.get_project_parent_project(project_locator, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling ProjectApi->get_project_parent_project: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **project_locator**
     - **str**
     - 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `Project <../models/Project.html>`_

`Back to top <#>`_

.. _get_project_settings_file:

get_project_settings_file
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    project_locator = 'project_locator_example' # str | 

    try:
        # Get the settings file of the matching build configuration.
        api_response = tc.project_api.get_project_settings_file(project_locator)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling ProjectApi->get_project_settings_file: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **project_locator**
     - **str**
     - 

Return type:
    **str**

`Back to top <#>`_

.. _get_project_templates:

get_project_templates
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    project_locator = 'project_locator_example' # str | 
    fields = 'fields_example' # str |  (optional)

    try:
        # Get all templates of the matching project.
        api_response = tc.project_api.get_project_templates(project_locator, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling ProjectApi->get_project_templates: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **project_locator**
     - **str**
     - 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `BuildTypes <../models/BuildTypes.html>`_

`Back to top <#>`_

.. _get_secure_value:

get_secure_value
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    project_locator = 'project_locator_example' # str | 
    token = 'token_example' # str | 

    try:
        # Get a secure token of the matching project.
        api_response = tc.project_api.get_secure_value(project_locator, token)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling ProjectApi->get_secure_value: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **project_locator**
     - **str**
     - 
   * - **token**
     - **str**
     - 

Return type:
    **str**

`Back to top <#>`_

.. _remove_default_template:

remove_default_template
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    project_locator = 'project_locator_example' # str | 
    fields = 'fields_example' # str |  (optional)

    try:
        # Remove the default template from the matching project.
        tc.project_api.remove_default_template(project_locator, fields=fields)
    except ApiException as e:
        print("Exception when calling ProjectApi->remove_default_template: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **project_locator**
     - **str**
     - 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    void (empty response body)

`Back to top <#>`_

.. _remove_project_from_agent_pool:

remove_project_from_agent_pool
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    project_locator = 'project_locator_example' # str | 
    agent_pool_locator = 'agent_pool_locator_example' # str | 

    try:
        # Unassign a project from the matching agent pool.
        tc.project_api.remove_project_from_agent_pool(project_locator, agent_pool_locator)
    except ApiException as e:
        print("Exception when calling ProjectApi->remove_project_from_agent_pool: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **project_locator**
     - **str**
     - 
   * - **agent_pool_locator**
     - **str**
     - 

Return type:
    void (empty response body)

`Back to top <#>`_

.. _set_agent_pools_project:

set_agent_pools_project
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    project_locator = 'project_locator_example' # str | 
    body = dohq_teamcity.AgentPools() # AgentPools |  (optional)
    fields = 'fields_example' # str |  (optional)

    try:
        # Update agent pools apppointed to the matching project.
        api_response = tc.project_api.set_agent_pools_project(project_locator, body=body, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling ProjectApi->set_agent_pools_project: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **project_locator**
     - **str**
     - 
   * - **body**
     - `AgentPools <../models/AgentPools.html>`_
     - [optional] 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `AgentPools <../models/AgentPools.html>`_

`Back to top <#>`_

.. _set_build_types_order:

set_build_types_order
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    project_locator = 'project_locator_example' # str | 
    body = dohq_teamcity.BuildTypes() # BuildTypes |  (optional)
    field = 'field_example' # str |  (optional)

    try:
        # Update custom ordering of build configurations of the matching project.
        api_response = tc.project_api.set_build_types_order(project_locator, body=body, field=field)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling ProjectApi->set_build_types_order: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **project_locator**
     - **str**
     - 
   * - **body**
     - `BuildTypes <../models/BuildTypes.html>`_
     - [optional] 
   * - **field**
     - **str**
     - [optional] 

Return type:
    `BuildTypes <../models/BuildTypes.html>`_

`Back to top <#>`_

.. _set_default_template:

set_default_template
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    project_locator = 'project_locator_example' # str | 
    body = dohq_teamcity.BuildType() # BuildType |  (optional)
    fields = 'fields_example' # str |  (optional)

    try:
        # Update the default template of the matching project.
        api_response = tc.project_api.set_default_template(project_locator, body=body, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling ProjectApi->set_default_template: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **project_locator**
     - **str**
     - 
   * - **body**
     - `BuildType <../models/BuildType.html>`_
     - [optional] 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `BuildType <../models/BuildType.html>`_

`Back to top <#>`_

.. _set_parent_project:

set_parent_project
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    project_locator = 'project_locator_example' # str | 
    body = dohq_teamcity.Project() # Project |  (optional)
    fields = 'fields_example' # str |  (optional)

    try:
        # Update the parent project of the matching project.
        api_response = tc.project_api.set_parent_project(project_locator, body=body, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling ProjectApi->set_parent_project: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **project_locator**
     - **str**
     - 
   * - **body**
     - `Project <../models/Project.html>`_
     - [optional] 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `Project <../models/Project.html>`_

`Back to top <#>`_

.. _set_project_field:

set_project_field
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    project_locator = 'project_locator_example' # str | 
    field = 'field_example' # str | 
    body = 'body_example' # str |  (optional)

    try:
        # Update a field of the matching project.
        api_response = tc.project_api.set_project_field(project_locator, field, body=body)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling ProjectApi->set_project_field: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **project_locator**
     - **str**
     - 
   * - **field**
     - **str**
     - 
   * - **body**
     - **str**
     - [optional] 

Return type:
    **str**

`Back to top <#>`_

.. _set_subprojects_order:

set_subprojects_order
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    project_locator = 'project_locator_example' # str | 
    body = dohq_teamcity.Projects() # Projects |  (optional)
    field = 'field_example' # str |  (optional)

    try:
        # Update custom ordering of subprojects of the matching project.
        api_response = tc.project_api.set_subprojects_order(project_locator, body=body, field=field)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling ProjectApi->set_subprojects_order: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **project_locator**
     - **str**
     - 
   * - **body**
     - `Projects <../models/Projects.html>`_
     - [optional] 
   * - **field**
     - **str**
     - [optional] 

Return type:
    `Projects <../models/Projects.html>`_

`Back to top <#>`_

.. _update_build_parameter:

update_build_parameter
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    name = 'name_example' # str | 
    project_locator = 'project_locator_example' # str | 
    body = dohq_teamcity.ModelProperty() # ModelProperty |  (optional)
    fields = 'fields_example' # str |  (optional)

    try:
        # Update build parameter.
        api_response = tc.project_api.update_build_parameter(name, project_locator, body=body, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling ProjectApi->update_build_parameter: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **name**
     - **str**
     - 
   * - **project_locator**
     - **str**
     - 
   * - **body**
     - `ModelProperty <../models/ModelProperty.html>`_
     - [optional] 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `ModelProperty <../models/ModelProperty.html>`_

`Back to top <#>`_

.. _update_build_parameter_specification:

update_build_parameter_specification
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    name = 'name_example' # str | 
    project_locator = 'project_locator_example' # str | 
    body = 'body_example' # str |  (optional)

    try:
        # Update build parameter specification.
        api_response = tc.project_api.update_build_parameter_specification(name, project_locator, body=body)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling ProjectApi->update_build_parameter_specification: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **name**
     - **str**
     - 
   * - **project_locator**
     - **str**
     - 
   * - **body**
     - **str**
     - [optional] 

Return type:
    **str**

`Back to top <#>`_

.. _update_build_parameter_type:

update_build_parameter_type
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    name = 'name_example' # str | 
    project_locator = 'project_locator_example' # str | 
    body = dohq_teamcity.Type() # Type |  (optional)

    try:
        # Update type of build parameter.
        api_response = tc.project_api.update_build_parameter_type(name, project_locator, body=body)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling ProjectApi->update_build_parameter_type: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **name**
     - **str**
     - 
   * - **project_locator**
     - **str**
     - 
   * - **body**
     - `Type <../models/Type.html>`_
     - [optional] 

Return type:
    `Type <../models/Type.html>`_

`Back to top <#>`_

.. _update_build_parameter_value:

update_build_parameter_value
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    name = 'name_example' # str | 
    project_locator = 'project_locator_example' # str | 
    body = 'body_example' # str |  (optional)

    try:
        # Update value of build parameter.
        api_response = tc.project_api.update_build_parameter_value(name, project_locator, body=body)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling ProjectApi->update_build_parameter_value: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **name**
     - **str**
     - 
   * - **project_locator**
     - **str**
     - 
   * - **body**
     - **str**
     - [optional] 

Return type:
    **str**

`Back to top <#>`_

.. _update_build_parameters:

update_build_parameters
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    project_locator = 'project_locator_example' # str | 
    body = dohq_teamcity.Properties() # Properties |  (optional)
    fields = 'fields_example' # str |  (optional)

    try:
        # Update build parameters.
        api_response = tc.project_api.update_build_parameters(project_locator, body=body, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling ProjectApi->update_build_parameters: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **project_locator**
     - **str**
     - 
   * - **body**
     - `Properties <../models/Properties.html>`_
     - [optional] 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `Properties <../models/Properties.html>`_

`Back to top <#>`_

.. _update_feature:

update_feature
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    feature_locator = 'feature_locator_example' # str | 
    project_locator = 'project_locator_example' # str | 
    body = dohq_teamcity.ProjectFeature() # ProjectFeature |  (optional)
    fields = 'fields_example' # str |  (optional)

    try:
        # Update a matching feature.
        api_response = tc.project_api.update_feature(feature_locator, project_locator, body=body, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling ProjectApi->update_feature: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **feature_locator**
     - **str**
     - 
   * - **project_locator**
     - **str**
     - 
   * - **body**
     - `ProjectFeature <../models/ProjectFeature.html>`_
     - [optional] 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    **object**

`Back to top <#>`_

.. _update_features:

update_features
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    project_locator = 'project_locator_example' # str | 
    body = dohq_teamcity.ProjectFeatures() # ProjectFeatures |  (optional)
    fields = 'fields_example' # str |  (optional)

    try:
        # Update all features.
        api_response = tc.project_api.update_features(project_locator, body=body, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling ProjectApi->update_features: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **project_locator**
     - **str**
     - 
   * - **body**
     - `ProjectFeatures <../models/ProjectFeatures.html>`_
     - [optional] 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    **object**

`Back to top <#>`_

