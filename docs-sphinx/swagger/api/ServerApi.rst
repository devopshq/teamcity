dohq_teamcity.ServerApi
######################################

.. note::

   + All ``serve_*`` method have aliases with get: ``serve_something`` == ``get_something``
   + Some API have ``get`` method - default method to get object by locator (e.g ``agent_api.get('id:123')`` return ``Agent`` model by id
   + See more examples on page :doc:`/examples/api/ServerApi` and model examples
   + This is autogenerated page, don't change them directly, use template. Read more in :doc:`/development`

.. list-table::
   :widths: 20 80
   :header-rows: 1

   * - Method
     - HTTP request
   * - :ref:`add_license_keys`
     - **POST** ``/app/rest/server/licensingData/licenseKeys``
   * - :ref:`delete_license_key`
     - **DELETE** ``/app/rest/server/licensingData/licenseKeys/{licenseKey}``
   * - :ref:`get_backup_status`
     - **GET** ``/app/rest/server/backup``
   * - :ref:`get_children`
     - **GET** ``/app/rest/server/files/{areaId}/children{path}``
   * - :ref:`get_children_alias`
     - **GET** ``/app/rest/server/files/{areaId}/{path}``
   * - :ref:`get_content`
     - **GET** ``/app/rest/server/files/{areaId}/content{path}``
   * - :ref:`get_content_alias`
     - **GET** ``/app/rest/server/files/{areaId}/files{path}``
   * - :ref:`get_license_key`
     - **GET** ``/app/rest/server/licensingData/licenseKeys/{licenseKey}``
   * - :ref:`get_license_keys`
     - **GET** ``/app/rest/server/licensingData/licenseKeys``
   * - :ref:`get_licensing_data`
     - **GET** ``/app/rest/server/licensingData``
   * - :ref:`get_metadata`
     - **GET** ``/app/rest/server/files/{areaId}/metadata{path}``
   * - :ref:`get_root`
     - **GET** ``/app/rest/server/files/{areaId}``
   * - :ref:`get_zipped`
     - **GET** ``/app/rest/server/files/{areaId}/archived{path}``
   * - :ref:`serve_plugins`
     - **GET** ``/app/rest/server/plugins``
   * - :ref:`serve_server_info`
     - **GET** ``/app/rest/server``
   * - :ref:`serve_server_version`
     - **GET** ``/app/rest/server/{field}``
   * - :ref:`start_backup`
     - **POST** ``/app/rest/server/backup``

.. _add_license_keys:

add_license_keys
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    body = 'body_example' # str |  (optional)
    fields = 'fields_example' # str |  (optional)

    try:
        api_response = tc.server_api.add_license_keys(body=body, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling ServerApi->add_license_keys: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **body**
     - **str**
     - [optional] 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `LicenseKeys <../models/LicenseKeys.html>`_

`Back to top <#>`_

.. _delete_license_key:

delete_license_key
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    license_key = 'license_key_example' # str | 

    try:
        tc.server_api.delete_license_key(license_key)
    except ApiException as e:
        print("Exception when calling ServerApi->delete_license_key: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **license_key**
     - **str**
     - 

Return type:
    void (empty response body)

`Back to top <#>`_

.. _get_backup_status:

get_backup_status
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    body = dohq_teamcity.BackupProcessManager() # BackupProcessManager |  (optional)

    try:
        api_response = tc.server_api.get_backup_status(body=body)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling ServerApi->get_backup_status: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **body**
     - `BackupProcessManager <../models/BackupProcessManager.html>`_
     - [optional] 

Return type:
    **str**

`Back to top <#>`_

.. _get_children:

get_children
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    path = 'path_example' # str | 
    area_id = 'area_id_example' # str | 
    base_path = 'base_path_example' # str |  (optional)
    locator = 'locator_example' # str |  (optional)
    fields = 'fields_example' # str |  (optional)

    try:
        api_response = tc.server_api.get_children(path, area_id, base_path=base_path, locator=locator, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling ServerApi->get_children: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **path**
     - **str**
     - 
   * - **area_id**
     - **str**
     - 
   * - **base_path**
     - **str**
     - [optional] 
   * - **locator**
     - **str**
     - [optional] 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `Files <../models/Files.html>`_

`Back to top <#>`_

.. _get_children_alias:

get_children_alias
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    path = 'path_example' # str | 
    area_id = 'area_id_example' # str | 
    base_path = 'base_path_example' # str |  (optional)
    locator = 'locator_example' # str |  (optional)
    fields = 'fields_example' # str |  (optional)

    try:
        api_response = tc.server_api.get_children_alias(path, area_id, base_path=base_path, locator=locator, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling ServerApi->get_children_alias: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **path**
     - **str**
     - 
   * - **area_id**
     - **str**
     - 
   * - **base_path**
     - **str**
     - [optional] 
   * - **locator**
     - **str**
     - [optional] 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `Files <../models/Files.html>`_

`Back to top <#>`_

.. _get_content:

get_content
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    path = 'path_example' # str | 
    area_id = 'area_id_example' # str | 
    response_builder = 'response_builder_example' # str |  (optional)

    try:
        tc.server_api.get_content(path, area_id, response_builder=response_builder)
    except ApiException as e:
        print("Exception when calling ServerApi->get_content: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **path**
     - **str**
     - 
   * - **area_id**
     - **str**
     - 
   * - **response_builder**
     - **str**
     - [optional] 

Return type:
    void (empty response body)

`Back to top <#>`_

.. _get_content_alias:

get_content_alias
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    path = 'path_example' # str | 
    area_id = 'area_id_example' # str | 

    try:
        tc.server_api.get_content_alias(path, area_id)
    except ApiException as e:
        print("Exception when calling ServerApi->get_content_alias: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **path**
     - **str**
     - 
   * - **area_id**
     - **str**
     - 

Return type:
    void (empty response body)

`Back to top <#>`_

.. _get_license_key:

get_license_key
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    license_key = 'license_key_example' # str | 
    fields = 'fields_example' # str |  (optional)

    try:
        api_response = tc.server_api.get_license_key(license_key, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling ServerApi->get_license_key: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **license_key**
     - **str**
     - 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `LicenseKey <../models/LicenseKey.html>`_

`Back to top <#>`_

.. _get_license_keys:

get_license_keys
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    fields = 'fields_example' # str |  (optional)

    try:
        api_response = tc.server_api.get_license_keys(fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling ServerApi->get_license_keys: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **fields**
     - **str**
     - [optional] 

Return type:
    `LicenseKeys <../models/LicenseKeys.html>`_

`Back to top <#>`_

.. _get_licensing_data:

get_licensing_data
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    fields = 'fields_example' # str |  (optional)

    try:
        api_response = tc.server_api.get_licensing_data(fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling ServerApi->get_licensing_data: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **fields**
     - **str**
     - [optional] 

Return type:
    `LicensingData <../models/LicensingData.html>`_

`Back to top <#>`_

.. _get_metadata:

get_metadata
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    path = 'path_example' # str | 
    area_id = 'area_id_example' # str | 
    fields = 'fields_example' # str |  (optional)

    try:
        api_response = tc.server_api.get_metadata(path, area_id, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling ServerApi->get_metadata: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **path**
     - **str**
     - 
   * - **area_id**
     - **str**
     - 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `File <../models/File.html>`_

`Back to top <#>`_

.. _get_root:

get_root
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    area_id = 'area_id_example' # str | 
    base_path = 'base_path_example' # str |  (optional)
    locator = 'locator_example' # str |  (optional)
    fields = 'fields_example' # str |  (optional)

    try:
        api_response = tc.server_api.get_root(area_id, base_path=base_path, locator=locator, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling ServerApi->get_root: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **area_id**
     - **str**
     - 
   * - **base_path**
     - **str**
     - [optional] 
   * - **locator**
     - **str**
     - [optional] 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `Files <../models/Files.html>`_

`Back to top <#>`_

.. _get_zipped:

get_zipped
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    path = 'path_example' # str | 
    area_id = 'area_id_example' # str | 
    base_path = 'base_path_example' # str |  (optional)
    locator = 'locator_example' # str |  (optional)
    name = 'name_example' # str |  (optional)

    try:
        tc.server_api.get_zipped(path, area_id, base_path=base_path, locator=locator, name=name)
    except ApiException as e:
        print("Exception when calling ServerApi->get_zipped: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **path**
     - **str**
     - 
   * - **area_id**
     - **str**
     - 
   * - **base_path**
     - **str**
     - [optional] 
   * - **locator**
     - **str**
     - [optional] 
   * - **name**
     - **str**
     - [optional] 

Return type:
    void (empty response body)

`Back to top <#>`_

.. _serve_plugins:

serve_plugins
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    fields = 'fields_example' # str |  (optional)

    try:
        api_response = tc.server_api.serve_plugins(fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling ServerApi->serve_plugins: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **fields**
     - **str**
     - [optional] 

Return type:
    `Plugins <../models/Plugins.html>`_

`Back to top <#>`_

.. _serve_server_info:

serve_server_info
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    fields = 'fields_example' # str |  (optional)

    try:
        api_response = tc.server_api.serve_server_info(fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling ServerApi->serve_server_info: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **fields**
     - **str**
     - [optional] 

Return type:
    `Server <../models/Server.html>`_

`Back to top <#>`_

.. _serve_server_version:

serve_server_version
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    field = 'field_example' # str | 

    try:
        api_response = tc.server_api.serve_server_version(field)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling ServerApi->serve_server_version: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **field**
     - **str**
     - 

Return type:
    **str**

`Back to top <#>`_

.. _start_backup:

start_backup
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    file_name = 'file_name_example' # str |  (optional)
    add_timestamp = true # bool |  (optional)
    include_configs = true # bool |  (optional)
    include_database = true # bool |  (optional)
    include_build_logs = true # bool |  (optional)
    include_personal_changes = true # bool |  (optional)
    include_running_builds = true # bool |  (optional)
    include_supplimentary_data = true # bool |  (optional)
    body = dohq_teamcity.BackupProcessManager() # BackupProcessManager |  (optional)

    try:
        api_response = tc.server_api.start_backup(file_name=file_name, add_timestamp=add_timestamp, include_configs=include_configs, include_database=include_database, include_build_logs=include_build_logs, include_personal_changes=include_personal_changes, include_running_builds=include_running_builds, include_supplimentary_data=include_supplimentary_data, body=body)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling ServerApi->start_backup: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **file_name**
     - **str**
     - [optional] 
   * - **add_timestamp**
     - **bool**
     - [optional] 
   * - **include_configs**
     - **bool**
     - [optional] 
   * - **include_database**
     - **bool**
     - [optional] 
   * - **include_build_logs**
     - **bool**
     - [optional] 
   * - **include_personal_changes**
     - **bool**
     - [optional] 
   * - **include_running_builds**
     - **bool**
     - [optional] 
   * - **include_supplimentary_data**
     - **bool**
     - [optional] 
   * - **body**
     - `BackupProcessManager <../models/BackupProcessManager.html>`_
     - [optional] 

Return type:
    **str**

`Back to top <#>`_

