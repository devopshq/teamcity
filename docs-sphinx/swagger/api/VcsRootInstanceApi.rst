dohq_teamcity.VcsRootInstanceApi
######################################

.. note::

   + All ``serve_*`` method have aliases with get: ``serve_something`` == ``get_something``
   + Some API have ``get`` method - default method to get object by locator (e.g ``agent_api.get('id:123')`` return ``Agent`` model by id
   + See more examples on page :doc:`/examples/api/VcsRootInstanceApi` and model examples
   + This is autogenerated page, don't change them directly, use template. Read more in :doc:`/development`

.. list-table::
   :widths: 20 80
   :header-rows: 1

   * - Method
     - HTTP request
   * - :ref:`delete_vcs_root_instance_field`
     - **DELETE** ``/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/{field}``
   * - :ref:`delete_vcs_root_instance_repository_state`
     - **DELETE** ``/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/repositoryState``
   * - :ref:`download_file`
     - **GET** ``/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/files/latest/files{path}``
   * - :ref:`get_all_vcs_root_instances`
     - **GET** ``/app/rest/vcs-root-instances``
   * - :ref:`get_file_metadata`
     - **GET** ``/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/files/latest/metadata{path}``
   * - :ref:`get_files_list`
     - **GET** ``/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/files/latest``
   * - :ref:`get_files_list_for_subpath`
     - **GET** ``/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/files/latest/{path}``
   * - :ref:`get_vcs_root_instance`
     - **GET** ``/app/rest/vcs-root-instances/{vcsRootInstanceLocator}``
   * - :ref:`get_vcs_root_instance_creation_date`
     - **GET** ``/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/repositoryState/creationDate``
   * - :ref:`get_vcs_root_instance_field`
     - **GET** ``/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/{field}``
   * - :ref:`get_vcs_root_instance_properties`
     - **GET** ``/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/properties``
   * - :ref:`get_vcs_root_instance_repository_state`
     - **GET** ``/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/repositoryState``
   * - :ref:`get_zipped_file`
     - **GET** ``/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/files/latest/archived{path}``
   * - :ref:`request_pending_changes_check`
     - **POST** ``/app/rest/vcs-root-instances/checkingForChangesQueue``
   * - :ref:`set_vcs_root_instance_field`
     - **PUT** ``/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/{field}``
   * - :ref:`set_vcs_root_instance_repository_state`
     - **PUT** ``/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/repositoryState``
   * - :ref:`trigger_commit_hook_notification`
     - **POST** ``/app/rest/vcs-root-instances/commitHookNotification``

.. _delete_vcs_root_instance_field:

delete_vcs_root_instance_field
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    vcs_root_instance_locator = 'vcs_root_instance_locator_example' # str | 
    field = 'field_example' # str | 

    try:
        # Remove a field of the matching VCS root instance.
        tc.vcs_root_instance_api.delete_vcs_root_instance_field(vcs_root_instance_locator, field)
    except ApiException as e:
        print("Exception when calling VcsRootInstanceApi->delete_vcs_root_instance_field: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **vcs_root_instance_locator**
     - **str**
     - 
   * - **field**
     - **str**
     - 

Return type:
    void (empty response body)

`Back to top <#>`_

.. _delete_vcs_root_instance_repository_state:

delete_vcs_root_instance_repository_state
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    vcs_root_instance_locator = 'vcs_root_instance_locator_example' # str | 

    try:
        # Delete the last repository state of the matching VCS root instance.
        tc.vcs_root_instance_api.delete_vcs_root_instance_repository_state(vcs_root_instance_locator)
    except ApiException as e:
        print("Exception when calling VcsRootInstanceApi->delete_vcs_root_instance_repository_state: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **vcs_root_instance_locator**
     - **str**
     - 

Return type:
    void (empty response body)

`Back to top <#>`_

.. _download_file:

download_file
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    path = 'path_example' # str | 
    vcs_root_instance_locator = 'vcs_root_instance_locator_example' # str | 

    try:
        # Download specific file.
        tc.vcs_root_instance_api.download_file(path, vcs_root_instance_locator)
    except ApiException as e:
        print("Exception when calling VcsRootInstanceApi->download_file: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **path**
     - **str**
     - 
   * - **vcs_root_instance_locator**
     - **str**
     - 

Return type:
    void (empty response body)

`Back to top <#>`_

.. _get_all_vcs_root_instances:

get_all_vcs_root_instances
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    locator = 'locator_example' # str |  (optional)
    fields = 'fields_example' # str |  (optional)

    try:
        # Get all VCS root instances.
        api_response = tc.vcs_root_instance_api.get_all_vcs_root_instances(locator=locator, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling VcsRootInstanceApi->get_all_vcs_root_instances: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **locator**
     - **str**
     - [optional] 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `VcsRootInstances <../models/VcsRootInstances.html>`_

`Back to top <#>`_

.. _get_file_metadata:

get_file_metadata
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    path = 'path_example' # str | 
    vcs_root_instance_locator = 'vcs_root_instance_locator_example' # str | 
    fields = 'fields_example' # str |  (optional)

    try:
        # Get metadata of specific file.
        api_response = tc.vcs_root_instance_api.get_file_metadata(path, vcs_root_instance_locator, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling VcsRootInstanceApi->get_file_metadata: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **path**
     - **str**
     - 
   * - **vcs_root_instance_locator**
     - **str**
     - 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `file <../models/file.html>`_

`Back to top <#>`_

.. _get_files_list:

get_files_list
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    vcs_root_instance_locator = 'vcs_root_instance_locator_example' # str | 
    base_path = 'base_path_example' # str |  (optional)
    locator = 'locator_example' # str |  (optional)
    fields = 'fields_example' # str |  (optional)

    try:
        # List all files.
        api_response = tc.vcs_root_instance_api.get_files_list(vcs_root_instance_locator, base_path=base_path, locator=locator, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling VcsRootInstanceApi->get_files_list: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **vcs_root_instance_locator**
     - **str**
     - 
   * - **base_path**
     - **str**
     - [optional] 
   * - **locator**
     - **str**
     - [optional] 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `Files <../models/Files.html>`_

`Back to top <#>`_

.. _get_files_list_for_subpath:

get_files_list_for_subpath
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    path = 'path_example' # str | 
    vcs_root_instance_locator = 'vcs_root_instance_locator_example' # str | 
    base_path = 'base_path_example' # str |  (optional)
    locator = 'locator_example' # str |  (optional)
    fields = 'fields_example' # str |  (optional)

    try:
        # List files under this path.
        api_response = tc.vcs_root_instance_api.get_files_list_for_subpath(path, vcs_root_instance_locator, base_path=base_path, locator=locator, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling VcsRootInstanceApi->get_files_list_for_subpath: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **path**
     - **str**
     - 
   * - **vcs_root_instance_locator**
     - **str**
     - 
   * - **base_path**
     - **str**
     - [optional] 
   * - **locator**
     - **str**
     - [optional] 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `Files <../models/Files.html>`_

`Back to top <#>`_

.. _get_vcs_root_instance:

get_vcs_root_instance
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    vcs_root_instance_locator = 'vcs_root_instance_locator_example' # str | 
    fields = 'fields_example' # str |  (optional)

    try:
        # Get VCS root instance matching the locator.
        api_response = tc.vcs_root_instance_api.get_vcs_root_instance(vcs_root_instance_locator, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling VcsRootInstanceApi->get_vcs_root_instance: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **vcs_root_instance_locator**
     - **str**
     - 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `VcsRootInstance <../models/VcsRootInstance.html>`_

`Back to top <#>`_

.. _get_vcs_root_instance_creation_date:

get_vcs_root_instance_creation_date
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    vcs_root_instance_locator = 'vcs_root_instance_locator_example' # str | 

    try:
        # Get the creation date of the matching VCS root instance.
        api_response = tc.vcs_root_instance_api.get_vcs_root_instance_creation_date(vcs_root_instance_locator)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling VcsRootInstanceApi->get_vcs_root_instance_creation_date: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **vcs_root_instance_locator**
     - **str**
     - 

Return type:
    **str**

`Back to top <#>`_

.. _get_vcs_root_instance_field:

get_vcs_root_instance_field
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    vcs_root_instance_locator = 'vcs_root_instance_locator_example' # str | 
    field = 'field_example' # str | 

    try:
        # Get a field of the matching VCS root instance.
        api_response = tc.vcs_root_instance_api.get_vcs_root_instance_field(vcs_root_instance_locator, field)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling VcsRootInstanceApi->get_vcs_root_instance_field: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **vcs_root_instance_locator**
     - **str**
     - 
   * - **field**
     - **str**
     - 

Return type:
    **str**

`Back to top <#>`_

.. _get_vcs_root_instance_properties:

get_vcs_root_instance_properties
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    vcs_root_instance_locator = 'vcs_root_instance_locator_example' # str | 
    fields = 'fields_example' # str |  (optional)

    try:
        # Get all properties of the matching VCS root instance.
        api_response = tc.vcs_root_instance_api.get_vcs_root_instance_properties(vcs_root_instance_locator, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling VcsRootInstanceApi->get_vcs_root_instance_properties: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **vcs_root_instance_locator**
     - **str**
     - 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `Properties <../models/Properties.html>`_

`Back to top <#>`_

.. _get_vcs_root_instance_repository_state:

get_vcs_root_instance_repository_state
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    vcs_root_instance_locator = 'vcs_root_instance_locator_example' # str | 
    fields = 'fields_example' # str |  (optional)

    try:
        # Get the repository state of the matching VCS root instance.
        api_response = tc.vcs_root_instance_api.get_vcs_root_instance_repository_state(vcs_root_instance_locator, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling VcsRootInstanceApi->get_vcs_root_instance_repository_state: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **vcs_root_instance_locator**
     - **str**
     - 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `Entries <../models/Entries.html>`_

`Back to top <#>`_

.. _get_zipped_file:

get_zipped_file
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    path = 'path_example' # str | 
    vcs_root_instance_locator = 'vcs_root_instance_locator_example' # str | 
    base_path = 'base_path_example' # str |  (optional)
    locator = 'locator_example' # str |  (optional)
    name = 'name_example' # str |  (optional)

    try:
        # Get specific file zipped.
        tc.vcs_root_instance_api.get_zipped_file(path, vcs_root_instance_locator, base_path=base_path, locator=locator, name=name)
    except ApiException as e:
        print("Exception when calling VcsRootInstanceApi->get_zipped_file: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **path**
     - **str**
     - 
   * - **vcs_root_instance_locator**
     - **str**
     - 
   * - **base_path**
     - **str**
     - [optional] 
   * - **locator**
     - **str**
     - [optional] 
   * - **name**
     - **str**
     - [optional] 

Return type:
    void (empty response body)

`Back to top <#>`_

.. _request_pending_changes_check:

request_pending_changes_check
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    locator = 'locator_example' # str |  (optional)
    requestor = 'requestor_example' # str |  (optional)
    fields = 'fields_example' # str |  (optional)

    try:
        # Check for the pending changes for all VCS root instances.
        api_response = tc.vcs_root_instance_api.request_pending_changes_check(locator=locator, requestor=requestor, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling VcsRootInstanceApi->request_pending_changes_check: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **locator**
     - **str**
     - [optional] 
   * - **requestor**
     - **str**
     - [optional] 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `VcsRootInstances <../models/VcsRootInstances.html>`_

`Back to top <#>`_

.. _set_vcs_root_instance_field:

set_vcs_root_instance_field
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    vcs_root_instance_locator = 'vcs_root_instance_locator_example' # str | 
    field = 'field_example' # str | 
    body = 'body_example' # str |  (optional)

    try:
        # Get a field of the matching VCS root instance.
        api_response = tc.vcs_root_instance_api.set_vcs_root_instance_field(vcs_root_instance_locator, field, body=body)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling VcsRootInstanceApi->set_vcs_root_instance_field: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **vcs_root_instance_locator**
     - **str**
     - 
   * - **field**
     - **str**
     - 
   * - **body**
     - **str**
     - [optional] 

Return type:
    **str**

`Back to top <#>`_

.. _set_vcs_root_instance_repository_state:

set_vcs_root_instance_repository_state
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    vcs_root_instance_locator = 'vcs_root_instance_locator_example' # str | 
    body = dohq_teamcity.Entries() # Entries |  (optional)
    fields = 'fields_example' # str |  (optional)

    try:
        # Update the repository state of the matching VCS root instance.
        api_response = tc.vcs_root_instance_api.set_vcs_root_instance_repository_state(vcs_root_instance_locator, body=body, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling VcsRootInstanceApi->set_vcs_root_instance_repository_state: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **vcs_root_instance_locator**
     - **str**
     - 
   * - **body**
     - `Entries <../models/Entries.html>`_
     - [optional] 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `Entries <../models/Entries.html>`_

`Back to top <#>`_

.. _trigger_commit_hook_notification:

trigger_commit_hook_notification
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    locator = 'locator_example' # str |  (optional)
    ok_on_nothing_found = true # bool |  (optional)

    try:
        # Send the commit hook notification.
        tc.vcs_root_instance_api.trigger_commit_hook_notification(locator=locator, ok_on_nothing_found=ok_on_nothing_found)
    except ApiException as e:
        print("Exception when calling VcsRootInstanceApi->trigger_commit_hook_notification: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **locator**
     - **str**
     - [optional] 
   * - **ok_on_nothing_found**
     - **bool**
     - [optional] 

Return type:
    void (empty response body)

`Back to top <#>`_

