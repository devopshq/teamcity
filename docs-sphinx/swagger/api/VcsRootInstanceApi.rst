dohq_teamcity.VcsRootInstanceApi
######################################

.. note::

   + All ``serve_*`` method have aliases with get: ``serve_something`` == ``get_something``
   + Some API have ``get`` method - default method to get object by locator (e.g ``agent_api.get('id:123')`` return ``Agent`` model by id
   + See more examples on page :doc:`/examples/api/VcsRootInstanceApi` and model examples
   + This is autogenerated page, don't change them directly, use template. Read more in :doc:`/development`

.. list-table::
   :widths: 20 80
   :header-rows: 1

   * - Method
     - HTTP request
   * - :ref:`delete_instance_field`
     - **DELETE** ``/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/{field}``
   * - :ref:`delete_repository_state`
     - **DELETE** ``/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/repositoryState``
   * - :ref:`get_children`
     - **GET** ``/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/files/latest/children{path}``
   * - :ref:`get_children_alias`
     - **GET** ``/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/files/latest/{path}``
   * - :ref:`get_content`
     - **GET** ``/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/files/latest/content{path}``
   * - :ref:`get_content_alias`
     - **GET** ``/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/files/latest/files{path}``
   * - :ref:`get_metadata`
     - **GET** ``/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/files/latest/metadata{path}``
   * - :ref:`get_repository_state`
     - **GET** ``/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/repositoryState``
   * - :ref:`get_repository_state_creation_date`
     - **GET** ``/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/repositoryState/creationDate``
   * - :ref:`get_root`
     - **GET** ``/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/files/latest``
   * - :ref:`get_zipped`
     - **GET** ``/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/files/latest/archived{path}``
   * - :ref:`schedule_checking_for_changes`
     - **POST** ``/app/rest/vcs-root-instances/checkingForChangesQueue``
   * - :ref:`schedule_checking_for_changes_0`
     - **POST** ``/app/rest/vcs-root-instances/commitHookNotification``
   * - :ref:`serve_instance`
     - **GET** ``/app/rest/vcs-root-instances/{vcsRootInstanceLocator}``
   * - :ref:`serve_instance_field`
     - **GET** ``/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/{field}``
   * - :ref:`serve_instances`
     - **GET** ``/app/rest/vcs-root-instances``
   * - :ref:`serve_root_instance_properties`
     - **GET** ``/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/properties``
   * - :ref:`set_instance_field`
     - **PUT** ``/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/{field}``
   * - :ref:`set_repository_state`
     - **PUT** ``/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/repositoryState``

.. _delete_instance_field:

delete_instance_field
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    vcs_root_instance_locator = 'vcs_root_instance_locator_example' # str | 
    field = 'field_example' # str | 

    try:
        tc.vcs_root_instance_api.delete_instance_field(vcs_root_instance_locator, field)
    except ApiException as e:
        print("Exception when calling VcsRootInstanceApi->delete_instance_field: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **vcs_root_instance_locator**
     - **str**
     - 
   * - **field**
     - **str**
     - 

Return type:
    void (empty response body)

`Back to top <#>`_

.. _delete_repository_state:

delete_repository_state
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    vcs_root_instance_locator = 'vcs_root_instance_locator_example' # str | 

    try:
        tc.vcs_root_instance_api.delete_repository_state(vcs_root_instance_locator)
    except ApiException as e:
        print("Exception when calling VcsRootInstanceApi->delete_repository_state: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **vcs_root_instance_locator**
     - **str**
     - 

Return type:
    void (empty response body)

`Back to top <#>`_

.. _get_children:

get_children
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    path = 'path_example' # str | 
    vcs_root_instance_locator = 'vcs_root_instance_locator_example' # str | 
    base_path = 'base_path_example' # str |  (optional)
    locator = 'locator_example' # str |  (optional)
    fields = 'fields_example' # str |  (optional)

    try:
        api_response = tc.vcs_root_instance_api.get_children(path, vcs_root_instance_locator, base_path=base_path, locator=locator, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling VcsRootInstanceApi->get_children: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **path**
     - **str**
     - 
   * - **vcs_root_instance_locator**
     - **str**
     - 
   * - **base_path**
     - **str**
     - [optional] 
   * - **locator**
     - **str**
     - [optional] 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `Files <../models/Files.html>`_

`Back to top <#>`_

.. _get_children_alias:

get_children_alias
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    path = 'path_example' # str | 
    vcs_root_instance_locator = 'vcs_root_instance_locator_example' # str | 
    base_path = 'base_path_example' # str |  (optional)
    locator = 'locator_example' # str |  (optional)
    fields = 'fields_example' # str |  (optional)

    try:
        api_response = tc.vcs_root_instance_api.get_children_alias(path, vcs_root_instance_locator, base_path=base_path, locator=locator, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling VcsRootInstanceApi->get_children_alias: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **path**
     - **str**
     - 
   * - **vcs_root_instance_locator**
     - **str**
     - 
   * - **base_path**
     - **str**
     - [optional] 
   * - **locator**
     - **str**
     - [optional] 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `Files <../models/Files.html>`_

`Back to top <#>`_

.. _get_content:

get_content
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    path = 'path_example' # str | 
    vcs_root_instance_locator = 'vcs_root_instance_locator_example' # str | 
    response_builder = 'response_builder_example' # str |  (optional)

    try:
        tc.vcs_root_instance_api.get_content(path, vcs_root_instance_locator, response_builder=response_builder)
    except ApiException as e:
        print("Exception when calling VcsRootInstanceApi->get_content: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **path**
     - **str**
     - 
   * - **vcs_root_instance_locator**
     - **str**
     - 
   * - **response_builder**
     - **str**
     - [optional] 

Return type:
    void (empty response body)

`Back to top <#>`_

.. _get_content_alias:

get_content_alias
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    path = 'path_example' # str | 
    vcs_root_instance_locator = 'vcs_root_instance_locator_example' # str | 

    try:
        tc.vcs_root_instance_api.get_content_alias(path, vcs_root_instance_locator)
    except ApiException as e:
        print("Exception when calling VcsRootInstanceApi->get_content_alias: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **path**
     - **str**
     - 
   * - **vcs_root_instance_locator**
     - **str**
     - 

Return type:
    void (empty response body)

`Back to top <#>`_

.. _get_metadata:

get_metadata
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    path = 'path_example' # str | 
    vcs_root_instance_locator = 'vcs_root_instance_locator_example' # str | 
    fields = 'fields_example' # str |  (optional)

    try:
        api_response = tc.vcs_root_instance_api.get_metadata(path, vcs_root_instance_locator, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling VcsRootInstanceApi->get_metadata: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **path**
     - **str**
     - 
   * - **vcs_root_instance_locator**
     - **str**
     - 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `File <../models/File.html>`_

`Back to top <#>`_

.. _get_repository_state:

get_repository_state
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    vcs_root_instance_locator = 'vcs_root_instance_locator_example' # str | 
    fields = 'fields_example' # str |  (optional)

    try:
        api_response = tc.vcs_root_instance_api.get_repository_state(vcs_root_instance_locator, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling VcsRootInstanceApi->get_repository_state: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **vcs_root_instance_locator**
     - **str**
     - 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `Entries <../models/Entries.html>`_

`Back to top <#>`_

.. _get_repository_state_creation_date:

get_repository_state_creation_date
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    vcs_root_instance_locator = 'vcs_root_instance_locator_example' # str | 

    try:
        api_response = tc.vcs_root_instance_api.get_repository_state_creation_date(vcs_root_instance_locator)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling VcsRootInstanceApi->get_repository_state_creation_date: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **vcs_root_instance_locator**
     - **str**
     - 

Return type:
    **str**

`Back to top <#>`_

.. _get_root:

get_root
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    vcs_root_instance_locator = 'vcs_root_instance_locator_example' # str | 
    base_path = 'base_path_example' # str |  (optional)
    locator = 'locator_example' # str |  (optional)
    fields = 'fields_example' # str |  (optional)

    try:
        api_response = tc.vcs_root_instance_api.get_root(vcs_root_instance_locator, base_path=base_path, locator=locator, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling VcsRootInstanceApi->get_root: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **vcs_root_instance_locator**
     - **str**
     - 
   * - **base_path**
     - **str**
     - [optional] 
   * - **locator**
     - **str**
     - [optional] 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `Files <../models/Files.html>`_

`Back to top <#>`_

.. _get_zipped:

get_zipped
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    path = 'path_example' # str | 
    vcs_root_instance_locator = 'vcs_root_instance_locator_example' # str | 
    base_path = 'base_path_example' # str |  (optional)
    locator = 'locator_example' # str |  (optional)
    name = 'name_example' # str |  (optional)

    try:
        tc.vcs_root_instance_api.get_zipped(path, vcs_root_instance_locator, base_path=base_path, locator=locator, name=name)
    except ApiException as e:
        print("Exception when calling VcsRootInstanceApi->get_zipped: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **path**
     - **str**
     - 
   * - **vcs_root_instance_locator**
     - **str**
     - 
   * - **base_path**
     - **str**
     - [optional] 
   * - **locator**
     - **str**
     - [optional] 
   * - **name**
     - **str**
     - [optional] 

Return type:
    void (empty response body)

`Back to top <#>`_

.. _schedule_checking_for_changes:

schedule_checking_for_changes
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    locator = 'locator_example' # str |  (optional)
    requestor = 'requestor_example' # str |  (optional)
    fields = 'fields_example' # str |  (optional)

    try:
        api_response = tc.vcs_root_instance_api.schedule_checking_for_changes(locator=locator, requestor=requestor, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling VcsRootInstanceApi->schedule_checking_for_changes: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **locator**
     - **str**
     - [optional] 
   * - **requestor**
     - **str**
     - [optional] 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `VcsRootInstances <../models/VcsRootInstances.html>`_

`Back to top <#>`_

.. _schedule_checking_for_changes_0:

schedule_checking_for_changes_0
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    locator = 'locator_example' # str |  (optional)
    ok_on_nothing_found = true # bool |  (optional)

    try:
        tc.vcs_root_instance_api.schedule_checking_for_changes_0(locator=locator, ok_on_nothing_found=ok_on_nothing_found)
    except ApiException as e:
        print("Exception when calling VcsRootInstanceApi->schedule_checking_for_changes_0: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **locator**
     - **str**
     - [optional] 
   * - **ok_on_nothing_found**
     - **bool**
     - [optional] 

Return type:
    void (empty response body)

`Back to top <#>`_

.. _serve_instance:

serve_instance
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    vcs_root_instance_locator = 'vcs_root_instance_locator_example' # str | 
    fields = 'fields_example' # str |  (optional)

    try:
        api_response = tc.vcs_root_instance_api.serve_instance(vcs_root_instance_locator, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling VcsRootInstanceApi->serve_instance: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **vcs_root_instance_locator**
     - **str**
     - 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `VcsRootInstance <../models/VcsRootInstance.html>`_

`Back to top <#>`_

.. _serve_instance_field:

serve_instance_field
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    vcs_root_instance_locator = 'vcs_root_instance_locator_example' # str | 
    field = 'field_example' # str | 

    try:
        api_response = tc.vcs_root_instance_api.serve_instance_field(vcs_root_instance_locator, field)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling VcsRootInstanceApi->serve_instance_field: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **vcs_root_instance_locator**
     - **str**
     - 
   * - **field**
     - **str**
     - 

Return type:
    **str**

`Back to top <#>`_

.. _serve_instances:

serve_instances
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    locator = 'locator_example' # str |  (optional)
    fields = 'fields_example' # str |  (optional)

    try:
        api_response = tc.vcs_root_instance_api.serve_instances(locator=locator, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling VcsRootInstanceApi->serve_instances: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **locator**
     - **str**
     - [optional] 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `VcsRootInstances <../models/VcsRootInstances.html>`_

`Back to top <#>`_

.. _serve_root_instance_properties:

serve_root_instance_properties
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    vcs_root_instance_locator = 'vcs_root_instance_locator_example' # str | 
    fields = 'fields_example' # str |  (optional)

    try:
        api_response = tc.vcs_root_instance_api.serve_root_instance_properties(vcs_root_instance_locator, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling VcsRootInstanceApi->serve_root_instance_properties: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **vcs_root_instance_locator**
     - **str**
     - 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `Properties <../models/Properties.html>`_

`Back to top <#>`_

.. _set_instance_field:

set_instance_field
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    vcs_root_instance_locator = 'vcs_root_instance_locator_example' # str | 
    field = 'field_example' # str | 
    body = 'body_example' # str |  (optional)

    try:
        api_response = tc.vcs_root_instance_api.set_instance_field(vcs_root_instance_locator, field, body=body)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling VcsRootInstanceApi->set_instance_field: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **vcs_root_instance_locator**
     - **str**
     - 
   * - **field**
     - **str**
     - 
   * - **body**
     - **str**
     - [optional] 

Return type:
    **str**

`Back to top <#>`_

.. _set_repository_state:

set_repository_state
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    vcs_root_instance_locator = 'vcs_root_instance_locator_example' # str | 
    body = dohq_teamcity.Entries() # Entries |  (optional)
    fields = 'fields_example' # str |  (optional)

    try:
        api_response = tc.vcs_root_instance_api.set_repository_state(vcs_root_instance_locator, body=body, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling VcsRootInstanceApi->set_repository_state: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **vcs_root_instance_locator**
     - **str**
     - 
   * - **body**
     - `Entries <../models/Entries.html>`_
     - [optional] 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `Entries <../models/Entries.html>`_

`Back to top <#>`_

