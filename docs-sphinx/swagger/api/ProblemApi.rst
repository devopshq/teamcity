dohq_teamcity.ProblemApi
######################################

.. note::

   + All ``serve_*`` method have aliases with get: ``serve_something`` == ``get_something``
   + Some API have ``get`` method - default method to get object by locator (e.g ``agent_api.get('id:123')`` return ``Agent`` model by id
   + See more examples on page :doc:`/examples/api/ProblemApi` and model examples
   + This is autogenerated page, don't change them directly, use template. Read more in :doc:`/development`

.. list-table::
   :widths: 20 80
   :header-rows: 1

   * - Method
     - HTTP request
   * - :ref:`get_all_build_problems`
     - **GET** ``/app/rest/problems``
   * - :ref:`get_build_problem`
     - **GET** ``/app/rest/problems/{problemLocator}``

.. _get_all_build_problems:

get_all_build_problems
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    locator = 'locator_example' # str |  (optional)
    fields = 'fields_example' # str |  (optional)

    try:
        # Get all build problems.
        api_response = tc.problem_api.get_all_build_problems(locator=locator, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling ProblemApi->get_all_build_problems: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **locator**
     - **str**
     - [optional] 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `Problems <../models/Problems.html>`_

`Back to top <#>`_

.. _get_build_problem:

get_build_problem
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    problem_locator = 'problem_locator_example' # str | 
    fields = 'fields_example' # str |  (optional)

    try:
        # Get a matching build problem.
        api_response = tc.problem_api.get_build_problem(problem_locator, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling ProblemApi->get_build_problem: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **problem_locator**
     - **str**
     - 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `Problem <../models/Problem.html>`_

`Back to top <#>`_

