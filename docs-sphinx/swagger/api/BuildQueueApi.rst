dohq_teamcity.BuildQueueApi
######################################

.. note::

   + All ``serve_*`` method have aliases with get: ``serve_something`` == ``get_something``
   + Some API have ``get`` method - default method to get object by locator (e.g ``agent_api.get('id:123')`` return ``Agent`` model by id
   + See more examples on page :doc:`/examples/api/BuildQueueApi` and model examples
   + This is autogenerated page, don't change them directly, use template. Read more in :doc:`/development`

.. list-table::
   :widths: 20 80
   :header-rows: 1

   * - Method
     - HTTP request
   * - :ref:`add_build_to_queue`
     - **POST** ``/app/rest/buildQueue``
   * - :ref:`add_tags_to_build_of_build_queue`
     - **POST** ``/app/rest/buildQueue/{buildLocator}/tags``
   * - :ref:`approve_queued_build`
     - **POST** ``/app/rest/buildQueue/{buildLocator}/approve``
   * - :ref:`cancel_queued_build`
     - **POST** ``/app/rest/buildQueue/{queuedBuildLocator}``
   * - :ref:`delete_all_queued_builds`
     - **DELETE** ``/app/rest/buildQueue``
   * - :ref:`delete_queued_build`
     - **DELETE** ``/app/rest/buildQueue/{queuedBuildLocator}``
   * - :ref:`get_all_queued_builds`
     - **GET** ``/app/rest/buildQueue``
   * - :ref:`get_approval_info`
     - **GET** ``/app/rest/buildQueue/{buildLocator}/approvalInfo``
   * - :ref:`get_compatible_agents_for_build`
     - **GET** ``/app/rest/buildQueue/{queuedBuildLocator}/compatibleAgents``
   * - :ref:`get_queued_build`
     - **GET** ``/app/rest/buildQueue/{queuedBuildLocator}``
   * - :ref:`get_queued_build_position`
     - **GET** ``/app/rest/buildQueue/order/{queuePosition}``
   * - :ref:`get_queued_build_tags`
     - **GET** ``/app/rest/buildQueue/{buildLocator}/tags``
   * - :ref:`set_queued_build_position`
     - **PUT** ``/app/rest/buildQueue/order/{queuePosition}``
   * - :ref:`set_queued_builds_order`
     - **PUT** ``/app/rest/buildQueue/order``

.. _add_build_to_queue:

add_build_to_queue
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    body = dohq_teamcity.Build() # Build |  (optional)
    move_to_top = true # bool |  (optional)

    try:
        # Add a new build to the queue.
        api_response = tc.build_queue_api.add_build_to_queue(body=body, move_to_top=move_to_top)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildQueueApi->add_build_to_queue: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **body**
     - `Build <../models/Build.html>`_
     - [optional] 
   * - **move_to_top**
     - **bool**
     - [optional] 

Return type:
    `Build <../models/Build.html>`_

`Back to top <#>`_

.. _add_tags_to_build_of_build_queue:

add_tags_to_build_of_build_queue
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    build_locator = 'build_locator_example' # str | 
    body = dohq_teamcity.Tags() # Tags |  (optional)

    try:
        # Add tags to the matching build.
        tc.build_queue_api.add_tags_to_build_of_build_queue(build_locator, body=body)
    except ApiException as e:
        print("Exception when calling BuildQueueApi->add_tags_to_build_of_build_queue: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **build_locator**
     - **str**
     - 
   * - **body**
     - `Tags <../models/Tags.html>`_
     - [optional] 

Return type:
    void (empty response body)

`Back to top <#>`_

.. _approve_queued_build:

approve_queued_build
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    build_locator = 'build_locator_example' # str | 
    body = 'body_example' # str |  (optional)
    fields = 'fields_example' # str |  (optional)

    try:
        # Approve queued build with approval feature enabled.
        api_response = tc.build_queue_api.approve_queued_build(build_locator, body=body, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildQueueApi->approve_queued_build: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **build_locator**
     - **str**
     - 
   * - **body**
     - **str**
     - [optional] 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `ApprovalInfo <../models/ApprovalInfo.html>`_

`Back to top <#>`_

.. _cancel_queued_build:

cancel_queued_build
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    queued_build_locator = 'queued_build_locator_example' # str | 
    body = dohq_teamcity.BuildCancelRequest() # BuildCancelRequest |  (optional)

    try:
        # Cancel a queued matching build.
        api_response = tc.build_queue_api.cancel_queued_build(queued_build_locator, body=body)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildQueueApi->cancel_queued_build: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **queued_build_locator**
     - **str**
     - 
   * - **body**
     - `BuildCancelRequest <../models/BuildCancelRequest.html>`_
     - [optional] 

Return type:
    `Build <../models/Build.html>`_

`Back to top <#>`_

.. _delete_all_queued_builds:

delete_all_queued_builds
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    locator = 'locator_example' # str |  (optional)
    fields = 'fields_example' # str |  (optional)

    try:
        # Delete all queued builds.
        tc.build_queue_api.delete_all_queued_builds(locator=locator, fields=fields)
    except ApiException as e:
        print("Exception when calling BuildQueueApi->delete_all_queued_builds: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **locator**
     - **str**
     - [optional] 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    void (empty response body)

`Back to top <#>`_

.. _delete_queued_build:

delete_queued_build
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    queued_build_locator = 'queued_build_locator_example' # str | 

    try:
        # Delete a queued matching build.
        tc.build_queue_api.delete_queued_build(queued_build_locator)
    except ApiException as e:
        print("Exception when calling BuildQueueApi->delete_queued_build: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **queued_build_locator**
     - **str**
     - 

Return type:
    void (empty response body)

`Back to top <#>`_

.. _get_all_queued_builds:

get_all_queued_builds
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    locator = 'locator_example' # str |  (optional)
    fields = 'fields_example' # str |  (optional)

    try:
        # Get all queued builds.
        api_response = tc.build_queue_api.get_all_queued_builds(locator=locator, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildQueueApi->get_all_queued_builds: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **locator**
     - **str**
     - [optional] 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `Builds <../models/Builds.html>`_

`Back to top <#>`_

.. _get_approval_info:

get_approval_info
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    build_locator = 'build_locator_example' # str | 
    fields = 'fields_example' # str |  (optional)

    try:
        # Get approval info of a queued matching build.
        api_response = tc.build_queue_api.get_approval_info(build_locator, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildQueueApi->get_approval_info: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **build_locator**
     - **str**
     - 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `ApprovalInfo <../models/ApprovalInfo.html>`_

`Back to top <#>`_

.. _get_compatible_agents_for_build:

get_compatible_agents_for_build
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    queued_build_locator = 'queued_build_locator_example' # str | 
    fields = 'fields_example' # str |  (optional)

    try:
        # Get compatible agents for a queued matching build.
        api_response = tc.build_queue_api.get_compatible_agents_for_build(queued_build_locator, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildQueueApi->get_compatible_agents_for_build: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **queued_build_locator**
     - **str**
     - 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `Agents <../models/Agents.html>`_

`Back to top <#>`_

.. _get_queued_build:

get_queued_build
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    queued_build_locator = 'queued_build_locator_example' # str | 
    fields = 'fields_example' # str |  (optional)

    try:
        # Get a queued matching build.
        api_response = tc.build_queue_api.get_queued_build(queued_build_locator, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildQueueApi->get_queued_build: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **queued_build_locator**
     - **str**
     - 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `Build <../models/Build.html>`_

`Back to top <#>`_

.. _get_queued_build_position:

get_queued_build_position
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    queue_position = 'queue_position_example' # str | 
    fields = 'fields_example' # str |  (optional)

    try:
        # Get the queue position of a queued matching build.
        api_response = tc.build_queue_api.get_queued_build_position(queue_position, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildQueueApi->get_queued_build_position: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **queue_position**
     - **str**
     - 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `Build <../models/Build.html>`_

`Back to top <#>`_

.. _get_queued_build_tags:

get_queued_build_tags
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    build_locator = 'build_locator_example' # str | 
    locator = 'locator_example' # str |  (optional)
    fields = 'fields_example' # str |  (optional)

    try:
        # Get tags of the queued matching build.
        api_response = tc.build_queue_api.get_queued_build_tags(build_locator, locator=locator, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildQueueApi->get_queued_build_tags: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **build_locator**
     - **str**
     - 
   * - **locator**
     - **str**
     - [optional] 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `Tags <../models/Tags.html>`_

`Back to top <#>`_

.. _set_queued_build_position:

set_queued_build_position
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    queue_position = 'queue_position_example' # str | 
    body = dohq_teamcity.Build() # Build |  (optional)
    fields = 'fields_example' # str |  (optional)

    try:
        # Update the queue position of a queued matching build.
        api_response = tc.build_queue_api.set_queued_build_position(queue_position, body=body, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildQueueApi->set_queued_build_position: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **queue_position**
     - **str**
     - 
   * - **body**
     - `Build <../models/Build.html>`_
     - [optional] 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `Build <../models/Build.html>`_

`Back to top <#>`_

.. _set_queued_builds_order:

set_queued_builds_order
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    body = dohq_teamcity.Builds() # Builds |  (optional)
    fields = 'fields_example' # str |  (optional)

    try:
        # Update the build queue order.
        api_response = tc.build_queue_api.set_queued_builds_order(body=body, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildQueueApi->set_queued_builds_order: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **body**
     - `Builds <../models/Builds.html>`_
     - [optional] 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `Builds <../models/Builds.html>`_

`Back to top <#>`_

