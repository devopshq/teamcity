dohq_teamcity.BuildTypeApi
######################################

.. note::

   + All ``serve_*`` method have aliases with get: ``serve_something`` == ``get_something``
   + Some API have ``get`` method - default method to get object by locator (e.g ``agent_api.get('id:123')`` return ``Agent`` model by id
   + See more examples on page :doc:`/examples/api/BuildTypeApi` and model examples
   + This is autogenerated page, don't change them directly, use template. Read more in :doc:`/development`

.. list-table::
   :widths: 20 80
   :header-rows: 1

   * - Method
     - HTTP request
   * - :ref:`add_agent_requirement_to_build_type`
     - **POST** ``/app/rest/buildTypes/{btLocator}/agent-requirements``
   * - :ref:`add_artifact_dependency_to_build_type`
     - **POST** ``/app/rest/buildTypes/{btLocator}/artifact-dependencies``
   * - :ref:`add_build_feature_to_build_type`
     - **POST** ``/app/rest/buildTypes/{btLocator}/features``
   * - :ref:`add_build_step_to_build_type`
     - **POST** ``/app/rest/buildTypes/{btLocator}/steps``
   * - :ref:`add_build_template`
     - **POST** ``/app/rest/buildTypes/{btLocator}/templates``
   * - :ref:`add_parameter_to_build_feature`
     - **PUT** ``/app/rest/buildTypes/{btLocator}/features/{featureId}/parameters/{parameterName}``
   * - :ref:`add_parameter_to_build_step`
     - **PUT** ``/app/rest/buildTypes/{btLocator}/steps/{stepId}/parameters/{parameterName}``
   * - :ref:`add_snapshot_dependency_to_build_type`
     - **POST** ``/app/rest/buildTypes/{btLocator}/snapshot-dependencies``
   * - :ref:`add_trigger_to_build_type`
     - **POST** ``/app/rest/buildTypes/{btLocator}/triggers``
   * - :ref:`add_vcs_root_to_build_type`
     - **POST** ``/app/rest/buildTypes/{btLocator}/vcs-root-entries``
   * - :ref:`create_build_parameter_of_build_type`
     - **POST** ``/app/rest/buildTypes/{btLocator}/parameters``
   * - :ref:`create_build_type`
     - **POST** ``/app/rest/buildTypes``
   * - :ref:`delete_agent_requirement`
     - **DELETE** ``/app/rest/buildTypes/{btLocator}/agent-requirements/{agentRequirementLocator}``
   * - :ref:`delete_artifact_dependency`
     - **DELETE** ``/app/rest/buildTypes/{btLocator}/artifact-dependencies/{artifactDepLocator}``
   * - :ref:`delete_build_parameter_of_build_type`
     - **DELETE** ``/app/rest/buildTypes/{btLocator}/parameters/{name}``
   * - :ref:`delete_build_parameters_of_build_type`
     - **DELETE** ``/app/rest/buildTypes/{btLocator}/parameters``
   * - :ref:`delete_build_step`
     - **DELETE** ``/app/rest/buildTypes/{btLocator}/steps/{stepId}``
   * - :ref:`delete_build_step_parameters`
     - **PUT** ``/app/rest/buildTypes/{btLocator}/steps/{stepId}/parameters``
   * - :ref:`delete_build_type`
     - **DELETE** ``/app/rest/buildTypes/{btLocator}``
   * - :ref:`delete_feature_of_build_type`
     - **DELETE** ``/app/rest/buildTypes/{btLocator}/features/{featureId}``
   * - :ref:`delete_snapshot_dependency`
     - **DELETE** ``/app/rest/buildTypes/{btLocator}/snapshot-dependencies/{snapshotDepLocator}``
   * - :ref:`delete_trigger`
     - **DELETE** ``/app/rest/buildTypes/{btLocator}/triggers/{triggerLocator}``
   * - :ref:`delete_vcs_root_of_build_type`
     - **DELETE** ``/app/rest/buildTypes/{btLocator}/vcs-root-entries/{vcsRootLocator}``
   * - :ref:`download_file_of_build_type`
     - **GET** ``/app/rest/buildTypes/{btLocator}/vcs/files/latest/files{path}``
   * - :ref:`get_agent_requirement`
     - **GET** ``/app/rest/buildTypes/{btLocator}/agent-requirements/{agentRequirementLocator}``
   * - :ref:`get_agent_requirement_parameter`
     - **GET** ``/app/rest/buildTypes/{btLocator}/agent-requirements/{agentRequirementLocator}/{fieldName}``
   * - :ref:`get_aliases`
     - **GET** ``/app/rest/buildTypes/{btLocator}/aliases``
   * - :ref:`get_all_agent_requirements`
     - **GET** ``/app/rest/buildTypes/{btLocator}/agent-requirements``
   * - :ref:`get_all_artifact_dependencies`
     - **GET** ``/app/rest/buildTypes/{btLocator}/artifact-dependencies``
   * - :ref:`get_all_branches_of_build_type`
     - **GET** ``/app/rest/buildTypes/{btLocator}/branches``
   * - :ref:`get_all_build_feature_parameters`
     - **GET** ``/app/rest/buildTypes/{btLocator}/features/{featureId}/parameters``
   * - :ref:`get_all_build_features`
     - **GET** ``/app/rest/buildTypes/{btLocator}/features``
   * - :ref:`get_all_build_step_parameters`
     - **GET** ``/app/rest/buildTypes/{btLocator}/steps/{stepId}/parameters``
   * - :ref:`get_all_build_steps`
     - **GET** ``/app/rest/buildTypes/{btLocator}/steps``
   * - :ref:`get_all_build_templates`
     - **GET** ``/app/rest/buildTypes/{btLocator}/templates``
   * - :ref:`get_all_build_types`
     - **GET** ``/app/rest/buildTypes``
   * - :ref:`get_all_investigations_of_build_type`
     - **GET** ``/app/rest/buildTypes/{btLocator}/investigations``
   * - :ref:`get_all_snapshot_dependencies`
     - **GET** ``/app/rest/buildTypes/{btLocator}/snapshot-dependencies``
   * - :ref:`get_all_triggers`
     - **GET** ``/app/rest/buildTypes/{btLocator}/triggers``
   * - :ref:`get_all_vcs_roots_of_build_type`
     - **GET** ``/app/rest/buildTypes/{btLocator}/vcs-root-entries``
   * - :ref:`get_artifact_dependency`
     - **GET** ``/app/rest/buildTypes/{btLocator}/artifact-dependencies/{artifactDepLocator}``
   * - :ref:`get_artifact_dependency_parameter`
     - **GET** ``/app/rest/buildTypes/{btLocator}/artifact-dependencies/{artifactDepLocator}/{fieldName}``
   * - :ref:`get_build_feature`
     - **GET** ``/app/rest/buildTypes/{btLocator}/features/{featureId}``
   * - :ref:`get_build_feature_parameter`
     - **GET** ``/app/rest/buildTypes/{btLocator}/features/{featureId}/parameters/{parameterName}``
   * - :ref:`get_build_feature_setting`
     - **GET** ``/app/rest/buildTypes/{btLocator}/features/{featureId}/{name}``
   * - :ref:`get_build_parameter_of_build_type`
     - **GET** ``/app/rest/buildTypes/{btLocator}/parameters/{name}``
   * - :ref:`get_build_parameter_specification_of_build_type`
     - **GET** ``/app/rest/buildTypes/{btLocator}/parameters/{name}/type/rawValue``
   * - :ref:`get_build_parameter_type_of_build_type`
     - **GET** ``/app/rest/buildTypes/{btLocator}/parameters/{name}/type``
   * - :ref:`get_build_parameter_value_of_build_type`
     - **GET** ``/app/rest/buildTypes/{btLocator}/parameters/{name}/value``
   * - :ref:`get_build_parameters_of_build_type`
     - **GET** ``/app/rest/buildTypes/{btLocator}/parameters``
   * - :ref:`get_build_step`
     - **GET** ``/app/rest/buildTypes/{btLocator}/steps/{stepId}``
   * - :ref:`get_build_step_parameter`
     - **GET** ``/app/rest/buildTypes/{btLocator}/steps/{stepId}/parameters/{parameterName}``
   * - :ref:`get_build_step_setting`
     - **GET** ``/app/rest/buildTypes/{btLocator}/steps/{stepId}/{fieldName}``
   * - :ref:`get_build_template`
     - **GET** ``/app/rest/buildTypes/{btLocator}/templates/{templateLocator}``
   * - :ref:`get_build_type`
     - **GET** ``/app/rest/buildTypes/{btLocator}``
   * - :ref:`get_build_type_build_tags`
     - **GET** ``/app/rest/buildTypes/{btLocator}/buildTags``
   * - :ref:`get_build_type_builds`
     - **GET** ``/app/rest/buildTypes/{btLocator}/builds``
   * - :ref:`get_build_type_field`
     - **GET** ``/app/rest/buildTypes/{btLocator}/{field}``
   * - :ref:`get_build_type_settings_file`
     - **GET** ``/app/rest/buildTypes/{btLocator}/settingsFile``
   * - :ref:`get_file_metadata_of_build_type`
     - **GET** ``/app/rest/buildTypes/{btLocator}/vcs/files/latest/metadata{path}``
   * - :ref:`get_files_list_for_subpath_of_build_type`
     - **GET** ``/app/rest/buildTypes/{btLocator}/vcs/files/latest/{path}``
   * - :ref:`get_files_list_of_build_type`
     - **GET** ``/app/rest/buildTypes/{btLocator}/vcs/files/latest``
   * - :ref:`get_snapshot_dependency`
     - **GET** ``/app/rest/buildTypes/{btLocator}/snapshot-dependencies/{snapshotDepLocator}``
   * - :ref:`get_trigger`
     - **GET** ``/app/rest/buildTypes/{btLocator}/triggers/{triggerLocator}``
   * - :ref:`get_trigger_parameter`
     - **GET** ``/app/rest/buildTypes/{btLocator}/triggers/{triggerLocator}/{fieldName}``
   * - :ref:`get_vcs_root`
     - **GET** ``/app/rest/buildTypes/{btLocator}/vcs-root-entries/{vcsRootLocator}``
   * - :ref:`get_vcs_root_checkout_rules`
     - **GET** ``/app/rest/buildTypes/{btLocator}/vcs-root-entries/{vcsRootLocator}/checkout-rules``
   * - :ref:`get_vcs_root_instances_of_build_type`
     - **GET** ``/app/rest/buildTypes/{btLocator}/vcsRootInstances``
   * - :ref:`get_zipped_file_of_build_type`
     - **GET** ``/app/rest/buildTypes/{btLocator}/vcs/files/latest/archived{path}``
   * - :ref:`remove_all_templates`
     - **DELETE** ``/app/rest/buildTypes/{btLocator}/templates``
   * - :ref:`remove_template`
     - **DELETE** ``/app/rest/buildTypes/{btLocator}/templates/{templateLocator}``
   * - :ref:`replace_agent_requirement`
     - **PUT** ``/app/rest/buildTypes/{btLocator}/agent-requirements/{agentRequirementLocator}``
   * - :ref:`replace_all_agent_requirements`
     - **PUT** ``/app/rest/buildTypes/{btLocator}/agent-requirements``
   * - :ref:`replace_all_artifact_dependencies`
     - **PUT** ``/app/rest/buildTypes/{btLocator}/artifact-dependencies``
   * - :ref:`replace_all_build_features`
     - **PUT** ``/app/rest/buildTypes/{btLocator}/features``
   * - :ref:`replace_all_build_steps`
     - **PUT** ``/app/rest/buildTypes/{btLocator}/steps``
   * - :ref:`replace_all_snapshot_dependencies`
     - **PUT** ``/app/rest/buildTypes/{btLocator}/snapshot-dependencies``
   * - :ref:`replace_all_triggers`
     - **PUT** ``/app/rest/buildTypes/{btLocator}/triggers``
   * - :ref:`replace_all_vcs_roots`
     - **PUT** ``/app/rest/buildTypes/{btLocator}/vcs-root-entries``
   * - :ref:`replace_artifact_dependency`
     - **PUT** ``/app/rest/buildTypes/{btLocator}/artifact-dependencies/{artifactDepLocator}``
   * - :ref:`replace_build_feature`
     - **PUT** ``/app/rest/buildTypes/{btLocator}/features/{featureId}``
   * - :ref:`replace_build_feature_parameters`
     - **PUT** ``/app/rest/buildTypes/{btLocator}/features/{featureId}/parameters``
   * - :ref:`replace_build_step`
     - **PUT** ``/app/rest/buildTypes/{btLocator}/steps/{stepId}``
   * - :ref:`replace_snapshot_dependency`
     - **PUT** ``/app/rest/buildTypes/{btLocator}/snapshot-dependencies/{snapshotDepLocator}``
   * - :ref:`replace_trigger`
     - **PUT** ``/app/rest/buildTypes/{btLocator}/triggers/{triggerLocator}``
   * - :ref:`set_agent_requirement_parameter`
     - **PUT** ``/app/rest/buildTypes/{btLocator}/agent-requirements/{agentRequirementLocator}/{fieldName}``
   * - :ref:`set_artifact_dependency_parameter`
     - **PUT** ``/app/rest/buildTypes/{btLocator}/artifact-dependencies/{artifactDepLocator}/{fieldName}``
   * - :ref:`set_build_feature_parameter`
     - **PUT** ``/app/rest/buildTypes/{btLocator}/features/{featureId}/{name}``
   * - :ref:`set_build_step_parameter`
     - **PUT** ``/app/rest/buildTypes/{btLocator}/steps/{stepId}/{fieldName}``
   * - :ref:`set_build_type_field`
     - **PUT** ``/app/rest/buildTypes/{btLocator}/{field}``
   * - :ref:`set_build_type_templates`
     - **PUT** ``/app/rest/buildTypes/{btLocator}/templates``
   * - :ref:`set_trigger_parameter`
     - **PUT** ``/app/rest/buildTypes/{btLocator}/triggers/{triggerLocator}/{fieldName}``
   * - :ref:`update_build_parameter_of_build_type`
     - **PUT** ``/app/rest/buildTypes/{btLocator}/parameters/{name}``
   * - :ref:`update_build_parameter_specification_of_build_type`
     - **PUT** ``/app/rest/buildTypes/{btLocator}/parameters/{name}/type/rawValue``
   * - :ref:`update_build_parameter_type_of_build_type`
     - **PUT** ``/app/rest/buildTypes/{btLocator}/parameters/{name}/type``
   * - :ref:`update_build_parameter_value_of_build_type`
     - **PUT** ``/app/rest/buildTypes/{btLocator}/parameters/{name}/value``
   * - :ref:`update_build_parameters_of_build_type`
     - **PUT** ``/app/rest/buildTypes/{btLocator}/parameters``
   * - :ref:`update_build_type_vcs_root`
     - **PUT** ``/app/rest/buildTypes/{btLocator}/vcs-root-entries/{vcsRootLocator}``
   * - :ref:`update_build_type_vcs_root_checkout_rules`
     - **PUT** ``/app/rest/buildTypes/{btLocator}/vcs-root-entries/{vcsRootLocator}/checkout-rules``

.. _add_agent_requirement_to_build_type:

add_agent_requirement_to_build_type
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    bt_locator = 'bt_locator_example' # str | 
    fields = 'fields_example' # str |  (optional)
    body = dohq_teamcity.AgentRequirement() # AgentRequirement |  (optional)

    try:
        # Add an agent requirement to the matching build configuration.
        api_response = tc.build_type_api.add_agent_requirement_to_build_type(bt_locator, fields=fields, body=body)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildTypeApi->add_agent_requirement_to_build_type: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **bt_locator**
     - **str**
     - 
   * - **fields**
     - **str**
     - [optional] 
   * - **body**
     - `AgentRequirement <../models/AgentRequirement.html>`_
     - [optional] 

Return type:
    `AgentRequirement <../models/AgentRequirement.html>`_

`Back to top <#>`_

.. _add_artifact_dependency_to_build_type:

add_artifact_dependency_to_build_type
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    bt_locator = 'bt_locator_example' # str | 
    fields = 'fields_example' # str |  (optional)
    body = dohq_teamcity.ArtifactDependency() # ArtifactDependency |  (optional)

    try:
        # Add an artifact dependency to the matching build configuration.
        api_response = tc.build_type_api.add_artifact_dependency_to_build_type(bt_locator, fields=fields, body=body)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildTypeApi->add_artifact_dependency_to_build_type: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **bt_locator**
     - **str**
     - 
   * - **fields**
     - **str**
     - [optional] 
   * - **body**
     - `ArtifactDependency <../models/ArtifactDependency.html>`_
     - [optional] 

Return type:
    `ArtifactDependency <../models/ArtifactDependency.html>`_

`Back to top <#>`_

.. _add_build_feature_to_build_type:

add_build_feature_to_build_type
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    bt_locator = 'bt_locator_example' # str | 
    fields = 'fields_example' # str |  (optional)
    body = dohq_teamcity.Feature() # Feature |  (optional)

    try:
        # Add build feature to the matching build configuration.
        api_response = tc.build_type_api.add_build_feature_to_build_type(bt_locator, fields=fields, body=body)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildTypeApi->add_build_feature_to_build_type: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **bt_locator**
     - **str**
     - 
   * - **fields**
     - **str**
     - [optional] 
   * - **body**
     - `Feature <../models/Feature.html>`_
     - [optional] 

Return type:
    `Feature <../models/Feature.html>`_

`Back to top <#>`_

.. _add_build_step_to_build_type:

add_build_step_to_build_type
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    bt_locator = 'bt_locator_example' # str | 
    fields = 'fields_example' # str |  (optional)
    body = dohq_teamcity.Step() # Step |  (optional)

    try:
        # Add a build step to the matching build configuration.
        api_response = tc.build_type_api.add_build_step_to_build_type(bt_locator, fields=fields, body=body)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildTypeApi->add_build_step_to_build_type: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **bt_locator**
     - **str**
     - 
   * - **fields**
     - **str**
     - [optional] 
   * - **body**
     - `Step <../models/Step.html>`_
     - [optional] 

Return type:
    `Step <../models/Step.html>`_

`Back to top <#>`_

.. _add_build_template:

add_build_template
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    bt_locator = 'bt_locator_example' # str | 
    body = dohq_teamcity.BuildType() # BuildType |  (optional)
    optimize_settings = true # bool |  (optional)
    fields = 'fields_example' # str |  (optional)

    try:
        # Add a build template to the matching build configuration.
        api_response = tc.build_type_api.add_build_template(bt_locator, body=body, optimize_settings=optimize_settings, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildTypeApi->add_build_template: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **bt_locator**
     - **str**
     - 
   * - **body**
     - `BuildType <../models/BuildType.html>`_
     - [optional] 
   * - **optimize_settings**
     - **bool**
     - [optional] 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `BuildType <../models/BuildType.html>`_

`Back to top <#>`_

.. _add_parameter_to_build_feature:

add_parameter_to_build_feature
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    bt_locator = 'bt_locator_example' # str | 
    feature_id = 'feature_id_example' # str | 
    parameter_name = 'parameter_name_example' # str | 
    body = 'body_example' # str |  (optional)

    try:
        # Update build feature parameter for the matching build configuration.
        api_response = tc.build_type_api.add_parameter_to_build_feature(bt_locator, feature_id, parameter_name, body=body)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildTypeApi->add_parameter_to_build_feature: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **bt_locator**
     - **str**
     - 
   * - **feature_id**
     - **str**
     - 
   * - **parameter_name**
     - **str**
     - 
   * - **body**
     - **str**
     - [optional] 

Return type:
    **str**

`Back to top <#>`_

.. _add_parameter_to_build_step:

add_parameter_to_build_step
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    bt_locator = 'bt_locator_example' # str | 
    step_id = 'step_id_example' # str | 
    parameter_name = 'parameter_name_example' # str | 
    body = 'body_example' # str |  (optional)

    try:
        # Add a parameter to a build step of the matching build configuration.
        api_response = tc.build_type_api.add_parameter_to_build_step(bt_locator, step_id, parameter_name, body=body)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildTypeApi->add_parameter_to_build_step: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **bt_locator**
     - **str**
     - 
   * - **step_id**
     - **str**
     - 
   * - **parameter_name**
     - **str**
     - 
   * - **body**
     - **str**
     - [optional] 

Return type:
    **str**

`Back to top <#>`_

.. _add_snapshot_dependency_to_build_type:

add_snapshot_dependency_to_build_type
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    bt_locator = 'bt_locator_example' # str | 
    fields = 'fields_example' # str |  (optional)
    body = dohq_teamcity.SnapshotDependency() # SnapshotDependency |  (optional)

    try:
        # Add a snapshot dependency to the matching build configuration.
        api_response = tc.build_type_api.add_snapshot_dependency_to_build_type(bt_locator, fields=fields, body=body)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildTypeApi->add_snapshot_dependency_to_build_type: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **bt_locator**
     - **str**
     - 
   * - **fields**
     - **str**
     - [optional] 
   * - **body**
     - `SnapshotDependency <../models/SnapshotDependency.html>`_
     - [optional] 

Return type:
    `SnapshotDependency <../models/SnapshotDependency.html>`_

`Back to top <#>`_

.. _add_trigger_to_build_type:

add_trigger_to_build_type
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    bt_locator = 'bt_locator_example' # str | 
    fields = 'fields_example' # str |  (optional)
    body = dohq_teamcity.Trigger() # Trigger |  (optional)

    try:
        # Add a trigger to the matching build configuration.
        api_response = tc.build_type_api.add_trigger_to_build_type(bt_locator, fields=fields, body=body)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildTypeApi->add_trigger_to_build_type: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **bt_locator**
     - **str**
     - 
   * - **fields**
     - **str**
     - [optional] 
   * - **body**
     - `Trigger <../models/Trigger.html>`_
     - [optional] 

Return type:
    `Trigger <../models/Trigger.html>`_

`Back to top <#>`_

.. _add_vcs_root_to_build_type:

add_vcs_root_to_build_type
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    bt_locator = 'bt_locator_example' # str | 
    body = dohq_teamcity.VcsRootEntry() # VcsRootEntry |  (optional)
    fields = 'fields_example' # str |  (optional)

    try:
        # Add a VCS root to the matching build.
        api_response = tc.build_type_api.add_vcs_root_to_build_type(bt_locator, body=body, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildTypeApi->add_vcs_root_to_build_type: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **bt_locator**
     - **str**
     - 
   * - **body**
     - `VcsRootEntry <../models/VcsRootEntry.html>`_
     - [optional] 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `VcsRootEntry <../models/VcsRootEntry.html>`_

`Back to top <#>`_

.. _create_build_parameter_of_build_type:

create_build_parameter_of_build_type
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    bt_locator = 'bt_locator_example' # str | 
    body = dohq_teamcity.ModelProperty() # ModelProperty |  (optional)
    fields = 'fields_example' # str |  (optional)

    try:
        # Create a build parameter.
        api_response = tc.build_type_api.create_build_parameter_of_build_type(bt_locator, body=body, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildTypeApi->create_build_parameter_of_build_type: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **bt_locator**
     - **str**
     - 
   * - **body**
     - `ModelProperty <../models/ModelProperty.html>`_
     - [optional] 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `ModelProperty <../models/ModelProperty.html>`_

`Back to top <#>`_

.. _create_build_type:

create_build_type
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    body = dohq_teamcity.BuildType() # BuildType |  (optional)
    fields = 'fields_example' # str |  (optional)

    try:
        # Create a new build configuration.
        api_response = tc.build_type_api.create_build_type(body=body, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildTypeApi->create_build_type: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **body**
     - `BuildType <../models/BuildType.html>`_
     - [optional] 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `BuildType <../models/BuildType.html>`_

`Back to top <#>`_

.. _delete_agent_requirement:

delete_agent_requirement
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    bt_locator = 'bt_locator_example' # str | 
    agent_requirement_locator = 'agent_requirement_locator_example' # str | 

    try:
        # Remove an agent requirement of the matching build configuration.
        tc.build_type_api.delete_agent_requirement(bt_locator, agent_requirement_locator)
    except ApiException as e:
        print("Exception when calling BuildTypeApi->delete_agent_requirement: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **bt_locator**
     - **str**
     - 
   * - **agent_requirement_locator**
     - **str**
     - 

Return type:
    void (empty response body)

`Back to top <#>`_

.. _delete_artifact_dependency:

delete_artifact_dependency
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    bt_locator = 'bt_locator_example' # str | 
    artifact_dep_locator = 'artifact_dep_locator_example' # str | 

    try:
        # Remove an artifact dependency from the matching build configuration.
        tc.build_type_api.delete_artifact_dependency(bt_locator, artifact_dep_locator)
    except ApiException as e:
        print("Exception when calling BuildTypeApi->delete_artifact_dependency: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **bt_locator**
     - **str**
     - 
   * - **artifact_dep_locator**
     - **str**
     - 

Return type:
    void (empty response body)

`Back to top <#>`_

.. _delete_build_parameter_of_build_type:

delete_build_parameter_of_build_type
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    name = 'name_example' # str | 
    bt_locator = 'bt_locator_example' # str | 

    try:
        # Delete build parameter.
        tc.build_type_api.delete_build_parameter_of_build_type(name, bt_locator)
    except ApiException as e:
        print("Exception when calling BuildTypeApi->delete_build_parameter_of_build_type: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **name**
     - **str**
     - 
   * - **bt_locator**
     - **str**
     - 

Return type:
    void (empty response body)

`Back to top <#>`_

.. _delete_build_parameters_of_build_type:

delete_build_parameters_of_build_type
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    bt_locator = 'bt_locator_example' # str | 

    try:
        # Delete all build parameters.
        tc.build_type_api.delete_build_parameters_of_build_type(bt_locator)
    except ApiException as e:
        print("Exception when calling BuildTypeApi->delete_build_parameters_of_build_type: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **bt_locator**
     - **str**
     - 

Return type:
    void (empty response body)

`Back to top <#>`_

.. _delete_build_step:

delete_build_step
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    bt_locator = 'bt_locator_example' # str | 
    step_id = 'step_id_example' # str | 

    try:
        # Delete a build step of the matching build configuration.
        tc.build_type_api.delete_build_step(bt_locator, step_id)
    except ApiException as e:
        print("Exception when calling BuildTypeApi->delete_build_step: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **bt_locator**
     - **str**
     - 
   * - **step_id**
     - **str**
     - 

Return type:
    void (empty response body)

`Back to top <#>`_

.. _delete_build_step_parameters:

delete_build_step_parameters
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    bt_locator = 'bt_locator_example' # str | 
    step_id = 'step_id_example' # str | 
    body = dohq_teamcity.Properties() # Properties |  (optional)
    fields = 'fields_example' # str |  (optional)

    try:
        # Update a parameter of a build step of the matching build configuration.
        api_response = tc.build_type_api.delete_build_step_parameters(bt_locator, step_id, body=body, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildTypeApi->delete_build_step_parameters: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **bt_locator**
     - **str**
     - 
   * - **step_id**
     - **str**
     - 
   * - **body**
     - `Properties <../models/Properties.html>`_
     - [optional] 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `Properties <../models/Properties.html>`_

`Back to top <#>`_

.. _delete_build_type:

delete_build_type
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    bt_locator = 'bt_locator_example' # str | 

    try:
        # Delete build configuration matching the locator.
        tc.build_type_api.delete_build_type(bt_locator)
    except ApiException as e:
        print("Exception when calling BuildTypeApi->delete_build_type: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **bt_locator**
     - **str**
     - 

Return type:
    void (empty response body)

`Back to top <#>`_

.. _delete_feature_of_build_type:

delete_feature_of_build_type
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    bt_locator = 'bt_locator_example' # str | 
    feature_id = 'feature_id_example' # str | 

    try:
        # Remove a build feature of the matching build configuration.
        tc.build_type_api.delete_feature_of_build_type(bt_locator, feature_id)
    except ApiException as e:
        print("Exception when calling BuildTypeApi->delete_feature_of_build_type: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **bt_locator**
     - **str**
     - 
   * - **feature_id**
     - **str**
     - 

Return type:
    void (empty response body)

`Back to top <#>`_

.. _delete_snapshot_dependency:

delete_snapshot_dependency
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    bt_locator = 'bt_locator_example' # str | 
    snapshot_dep_locator = 'snapshot_dep_locator_example' # str | 

    try:
        # Delete a snapshot dependency of the matching build configuration.
        tc.build_type_api.delete_snapshot_dependency(bt_locator, snapshot_dep_locator)
    except ApiException as e:
        print("Exception when calling BuildTypeApi->delete_snapshot_dependency: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **bt_locator**
     - **str**
     - 
   * - **snapshot_dep_locator**
     - **str**
     - 

Return type:
    void (empty response body)

`Back to top <#>`_

.. _delete_trigger:

delete_trigger
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    bt_locator = 'bt_locator_example' # str | 
    trigger_locator = 'trigger_locator_example' # str | 

    try:
        # Delete a trigger of the matching build configuration.
        tc.build_type_api.delete_trigger(bt_locator, trigger_locator)
    except ApiException as e:
        print("Exception when calling BuildTypeApi->delete_trigger: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **bt_locator**
     - **str**
     - 
   * - **trigger_locator**
     - **str**
     - 

Return type:
    void (empty response body)

`Back to top <#>`_

.. _delete_vcs_root_of_build_type:

delete_vcs_root_of_build_type
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    bt_locator = 'bt_locator_example' # str | 
    vcs_root_locator = 'vcs_root_locator_example' # str | 

    try:
        # Remove a VCS root of the matching build configuration.
        tc.build_type_api.delete_vcs_root_of_build_type(bt_locator, vcs_root_locator)
    except ApiException as e:
        print("Exception when calling BuildTypeApi->delete_vcs_root_of_build_type: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **bt_locator**
     - **str**
     - 
   * - **vcs_root_locator**
     - **str**
     - 

Return type:
    void (empty response body)

`Back to top <#>`_

.. _download_file_of_build_type:

download_file_of_build_type
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    path = 'path_example' # str | 
    bt_locator = 'bt_locator_example' # str | 
    resolve_parameters = true # bool |  (optional)

    try:
        # Download specific file.
        tc.build_type_api.download_file_of_build_type(path, bt_locator, resolve_parameters=resolve_parameters)
    except ApiException as e:
        print("Exception when calling BuildTypeApi->download_file_of_build_type: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **path**
     - **str**
     - 
   * - **bt_locator**
     - **str**
     - 
   * - **resolve_parameters**
     - **bool**
     - [optional] 

Return type:
    void (empty response body)

`Back to top <#>`_

.. _get_agent_requirement:

get_agent_requirement
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    bt_locator = 'bt_locator_example' # str | 
    agent_requirement_locator = 'agent_requirement_locator_example' # str | 
    fields = 'fields_example' # str |  (optional)

    try:
        # Get an agent requirement of the matching build configuration.
        api_response = tc.build_type_api.get_agent_requirement(bt_locator, agent_requirement_locator, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildTypeApi->get_agent_requirement: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **bt_locator**
     - **str**
     - 
   * - **agent_requirement_locator**
     - **str**
     - 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `AgentRequirement <../models/AgentRequirement.html>`_

`Back to top <#>`_

.. _get_agent_requirement_parameter:

get_agent_requirement_parameter
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    bt_locator = 'bt_locator_example' # str | 
    agent_requirement_locator = 'agent_requirement_locator_example' # str | 
    field_name = 'field_name_example' # str | 

    try:
        # Get a setting of an agent requirement of the matching build configuration.
        api_response = tc.build_type_api.get_agent_requirement_parameter(bt_locator, agent_requirement_locator, field_name)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildTypeApi->get_agent_requirement_parameter: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **bt_locator**
     - **str**
     - 
   * - **agent_requirement_locator**
     - **str**
     - 
   * - **field_name**
     - **str**
     - 

Return type:
    **str**

`Back to top <#>`_

.. _get_aliases:

get_aliases
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    bt_locator = 'bt_locator_example' # str | 
    field = 'field_example' # str |  (optional)

    try:
        # Get external IDs of the matching build configuration.
        api_response = tc.build_type_api.get_aliases(bt_locator, field=field)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildTypeApi->get_aliases: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **bt_locator**
     - **str**
     - 
   * - **field**
     - **str**
     - [optional] 

Return type:
    `Items <../models/Items.html>`_

`Back to top <#>`_

.. _get_all_agent_requirements:

get_all_agent_requirements
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    bt_locator = 'bt_locator_example' # str | 
    fields = 'fields_example' # str |  (optional)

    try:
        # Get all agent requirements of the matching build configuration.
        api_response = tc.build_type_api.get_all_agent_requirements(bt_locator, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildTypeApi->get_all_agent_requirements: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **bt_locator**
     - **str**
     - 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `AgentRequirements <../models/AgentRequirements.html>`_

`Back to top <#>`_

.. _get_all_artifact_dependencies:

get_all_artifact_dependencies
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    bt_locator = 'bt_locator_example' # str | 
    fields = 'fields_example' # str |  (optional)

    try:
        # Get all artifact dependencies of the matching build configuration.
        api_response = tc.build_type_api.get_all_artifact_dependencies(bt_locator, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildTypeApi->get_all_artifact_dependencies: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **bt_locator**
     - **str**
     - 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `ArtifactDependencies <../models/ArtifactDependencies.html>`_

`Back to top <#>`_

.. _get_all_branches_of_build_type:

get_all_branches_of_build_type
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    bt_locator = 'bt_locator_example' # str | 
    locator = 'locator_example' # str |  (optional)
    fields = 'fields_example' # str |  (optional)

    try:
        # Get all branches of the matching build configuration.
        api_response = tc.build_type_api.get_all_branches_of_build_type(bt_locator, locator=locator, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildTypeApi->get_all_branches_of_build_type: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **bt_locator**
     - **str**
     - 
   * - **locator**
     - **str**
     - [optional] 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `Branches <../models/Branches.html>`_

`Back to top <#>`_

.. _get_all_build_feature_parameters:

get_all_build_feature_parameters
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    bt_locator = 'bt_locator_example' # str | 
    feature_id = 'feature_id_example' # str | 
    fields = 'fields_example' # str |  (optional)

    try:
        # Get all parameters of a build feature of the matching build configuration.
        api_response = tc.build_type_api.get_all_build_feature_parameters(bt_locator, feature_id, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildTypeApi->get_all_build_feature_parameters: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **bt_locator**
     - **str**
     - 
   * - **feature_id**
     - **str**
     - 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `Properties <../models/Properties.html>`_

`Back to top <#>`_

.. _get_all_build_features:

get_all_build_features
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    bt_locator = 'bt_locator_example' # str | 
    fields = 'fields_example' # str |  (optional)

    try:
        # Get all build features of the matching build configuration.
        api_response = tc.build_type_api.get_all_build_features(bt_locator, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildTypeApi->get_all_build_features: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **bt_locator**
     - **str**
     - 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `Features <../models/Features.html>`_

`Back to top <#>`_

.. _get_all_build_step_parameters:

get_all_build_step_parameters
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    bt_locator = 'bt_locator_example' # str | 
    step_id = 'step_id_example' # str | 
    fields = 'fields_example' # str |  (optional)

    try:
        # Get all parameters of a build step of the matching build configuration.
        api_response = tc.build_type_api.get_all_build_step_parameters(bt_locator, step_id, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildTypeApi->get_all_build_step_parameters: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **bt_locator**
     - **str**
     - 
   * - **step_id**
     - **str**
     - 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `Properties <../models/Properties.html>`_

`Back to top <#>`_

.. _get_all_build_steps:

get_all_build_steps
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    bt_locator = 'bt_locator_example' # str | 
    fields = 'fields_example' # str |  (optional)

    try:
        # Get all build steps of the matching build configuration.
        api_response = tc.build_type_api.get_all_build_steps(bt_locator, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildTypeApi->get_all_build_steps: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **bt_locator**
     - **str**
     - 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `Steps <../models/Steps.html>`_

`Back to top <#>`_

.. _get_all_build_templates:

get_all_build_templates
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    bt_locator = 'bt_locator_example' # str | 
    fields = 'fields_example' # str |  (optional)

    try:
        # Get all build templates of the matching build configuration.
        api_response = tc.build_type_api.get_all_build_templates(bt_locator, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildTypeApi->get_all_build_templates: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **bt_locator**
     - **str**
     - 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `BuildTypes <../models/BuildTypes.html>`_

`Back to top <#>`_

.. _get_all_build_types:

get_all_build_types
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    locator = 'locator_example' # str |  (optional)
    fields = 'fields_example' # str |  (optional)

    try:
        # Get all build configurations.
        api_response = tc.build_type_api.get_all_build_types(locator=locator, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildTypeApi->get_all_build_types: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **locator**
     - **str**
     - [optional] 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `BuildTypes <../models/BuildTypes.html>`_

`Back to top <#>`_

.. _get_all_investigations_of_build_type:

get_all_investigations_of_build_type
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    bt_locator = 'bt_locator_example' # str | 
    fields = 'fields_example' # str |  (optional)

    try:
        # Get all investigations of the matching build configuration.
        api_response = tc.build_type_api.get_all_investigations_of_build_type(bt_locator, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildTypeApi->get_all_investigations_of_build_type: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **bt_locator**
     - **str**
     - 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `Investigations <../models/Investigations.html>`_

`Back to top <#>`_

.. _get_all_snapshot_dependencies:

get_all_snapshot_dependencies
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    bt_locator = 'bt_locator_example' # str | 
    fields = 'fields_example' # str |  (optional)

    try:
        # Get all snapshot dependencies of the matching build configuration.
        api_response = tc.build_type_api.get_all_snapshot_dependencies(bt_locator, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildTypeApi->get_all_snapshot_dependencies: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **bt_locator**
     - **str**
     - 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `SnapshotDependencies <../models/SnapshotDependencies.html>`_

`Back to top <#>`_

.. _get_all_triggers:

get_all_triggers
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    bt_locator = 'bt_locator_example' # str | 
    fields = 'fields_example' # str |  (optional)

    try:
        # Get all triggers of the matching build configuration.
        api_response = tc.build_type_api.get_all_triggers(bt_locator, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildTypeApi->get_all_triggers: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **bt_locator**
     - **str**
     - 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `Triggers <../models/Triggers.html>`_

`Back to top <#>`_

.. _get_all_vcs_roots_of_build_type:

get_all_vcs_roots_of_build_type
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    bt_locator = 'bt_locator_example' # str | 
    fields = 'fields_example' # str |  (optional)

    try:
        # Get all VCS roots of the matching build configuration.
        api_response = tc.build_type_api.get_all_vcs_roots_of_build_type(bt_locator, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildTypeApi->get_all_vcs_roots_of_build_type: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **bt_locator**
     - **str**
     - 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `VcsRootEntries <../models/VcsRootEntries.html>`_

`Back to top <#>`_

.. _get_artifact_dependency:

get_artifact_dependency
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    bt_locator = 'bt_locator_example' # str | 
    artifact_dep_locator = 'artifact_dep_locator_example' # str | 
    fields = 'fields_example' # str |  (optional)

    try:
        # Get an artifact dependency of the matching build configuration.
        api_response = tc.build_type_api.get_artifact_dependency(bt_locator, artifact_dep_locator, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildTypeApi->get_artifact_dependency: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **bt_locator**
     - **str**
     - 
   * - **artifact_dep_locator**
     - **str**
     - 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `ArtifactDependency <../models/ArtifactDependency.html>`_

`Back to top <#>`_

.. _get_artifact_dependency_parameter:

get_artifact_dependency_parameter
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    bt_locator = 'bt_locator_example' # str | 
    artifact_dep_locator = 'artifact_dep_locator_example' # str | 
    field_name = 'field_name_example' # str | 

    try:
        # Get a parameter of an artifact dependency of the matching build configuration.
        api_response = tc.build_type_api.get_artifact_dependency_parameter(bt_locator, artifact_dep_locator, field_name)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildTypeApi->get_artifact_dependency_parameter: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **bt_locator**
     - **str**
     - 
   * - **artifact_dep_locator**
     - **str**
     - 
   * - **field_name**
     - **str**
     - 

Return type:
    **str**

`Back to top <#>`_

.. _get_build_feature:

get_build_feature
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    bt_locator = 'bt_locator_example' # str | 
    feature_id = 'feature_id_example' # str | 
    fields = 'fields_example' # str |  (optional)

    try:
        # Get a build feature of the matching build configuration.
        api_response = tc.build_type_api.get_build_feature(bt_locator, feature_id, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildTypeApi->get_build_feature: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **bt_locator**
     - **str**
     - 
   * - **feature_id**
     - **str**
     - 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `Feature <../models/Feature.html>`_

`Back to top <#>`_

.. _get_build_feature_parameter:

get_build_feature_parameter
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    bt_locator = 'bt_locator_example' # str | 
    feature_id = 'feature_id_example' # str | 
    parameter_name = 'parameter_name_example' # str | 

    try:
        # Get a parameter of a build feature of the matching build configuration.
        api_response = tc.build_type_api.get_build_feature_parameter(bt_locator, feature_id, parameter_name)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildTypeApi->get_build_feature_parameter: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **bt_locator**
     - **str**
     - 
   * - **feature_id**
     - **str**
     - 
   * - **parameter_name**
     - **str**
     - 

Return type:
    **str**

`Back to top <#>`_

.. _get_build_feature_setting:

get_build_feature_setting
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    bt_locator = 'bt_locator_example' # str | 
    feature_id = 'feature_id_example' # str | 
    name = 'name_example' # str | 

    try:
        # Get the setting of a build feature of the matching build configuration.
        api_response = tc.build_type_api.get_build_feature_setting(bt_locator, feature_id, name)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildTypeApi->get_build_feature_setting: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **bt_locator**
     - **str**
     - 
   * - **feature_id**
     - **str**
     - 
   * - **name**
     - **str**
     - 

Return type:
    **str**

`Back to top <#>`_

.. _get_build_parameter_of_build_type:

get_build_parameter_of_build_type
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    name = 'name_example' # str | 
    bt_locator = 'bt_locator_example' # str | 
    fields = 'fields_example' # str |  (optional)

    try:
        # Get build parameter.
        api_response = tc.build_type_api.get_build_parameter_of_build_type(name, bt_locator, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildTypeApi->get_build_parameter_of_build_type: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **name**
     - **str**
     - 
   * - **bt_locator**
     - **str**
     - 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `ModelProperty <../models/ModelProperty.html>`_

`Back to top <#>`_

.. _get_build_parameter_specification_of_build_type:

get_build_parameter_specification_of_build_type
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    name = 'name_example' # str | 
    bt_locator = 'bt_locator_example' # str | 

    try:
        # Get build parameter specification.
        api_response = tc.build_type_api.get_build_parameter_specification_of_build_type(name, bt_locator)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildTypeApi->get_build_parameter_specification_of_build_type: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **name**
     - **str**
     - 
   * - **bt_locator**
     - **str**
     - 

Return type:
    **str**

`Back to top <#>`_

.. _get_build_parameter_type_of_build_type:

get_build_parameter_type_of_build_type
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    name = 'name_example' # str | 
    bt_locator = 'bt_locator_example' # str | 

    try:
        # Get type of build parameter.
        api_response = tc.build_type_api.get_build_parameter_type_of_build_type(name, bt_locator)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildTypeApi->get_build_parameter_type_of_build_type: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **name**
     - **str**
     - 
   * - **bt_locator**
     - **str**
     - 

Return type:
    `Type <../models/Type.html>`_

`Back to top <#>`_

.. _get_build_parameter_value_of_build_type:

get_build_parameter_value_of_build_type
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    name = 'name_example' # str | 
    bt_locator = 'bt_locator_example' # str | 

    try:
        # Get value of build parameter.
        api_response = tc.build_type_api.get_build_parameter_value_of_build_type(name, bt_locator)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildTypeApi->get_build_parameter_value_of_build_type: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **name**
     - **str**
     - 
   * - **bt_locator**
     - **str**
     - 

Return type:
    **str**

`Back to top <#>`_

.. _get_build_parameters_of_build_type:

get_build_parameters_of_build_type
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    bt_locator = 'bt_locator_example' # str | 
    locator = 'locator_example' # str |  (optional)
    fields = 'fields_example' # str |  (optional)

    try:
        # Get build parameters.
        api_response = tc.build_type_api.get_build_parameters_of_build_type(bt_locator, locator=locator, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildTypeApi->get_build_parameters_of_build_type: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **bt_locator**
     - **str**
     - 
   * - **locator**
     - **str**
     - [optional] 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `Properties <../models/Properties.html>`_

`Back to top <#>`_

.. _get_build_step:

get_build_step
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    bt_locator = 'bt_locator_example' # str | 
    step_id = 'step_id_example' # str | 
    fields = 'fields_example' # str |  (optional)

    try:
        # Get a build step of the matching build configuration.
        api_response = tc.build_type_api.get_build_step(bt_locator, step_id, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildTypeApi->get_build_step: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **bt_locator**
     - **str**
     - 
   * - **step_id**
     - **str**
     - 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `Step <../models/Step.html>`_

`Back to top <#>`_

.. _get_build_step_parameter:

get_build_step_parameter
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    bt_locator = 'bt_locator_example' # str | 
    step_id = 'step_id_example' # str | 
    parameter_name = 'parameter_name_example' # str | 

    try:
        # Get a parameter of a build step of the matching build configuration.
        api_response = tc.build_type_api.get_build_step_parameter(bt_locator, step_id, parameter_name)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildTypeApi->get_build_step_parameter: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **bt_locator**
     - **str**
     - 
   * - **step_id**
     - **str**
     - 
   * - **parameter_name**
     - **str**
     - 

Return type:
    **str**

`Back to top <#>`_

.. _get_build_step_setting:

get_build_step_setting
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    bt_locator = 'bt_locator_example' # str | 
    step_id = 'step_id_example' # str | 
    field_name = 'field_name_example' # str | 

    try:
        # Get the setting of a build step of the matching build configuration.
        api_response = tc.build_type_api.get_build_step_setting(bt_locator, step_id, field_name)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildTypeApi->get_build_step_setting: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **bt_locator**
     - **str**
     - 
   * - **step_id**
     - **str**
     - 
   * - **field_name**
     - **str**
     - 

Return type:
    **str**

`Back to top <#>`_

.. _get_build_template:

get_build_template
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    bt_locator = 'bt_locator_example' # str | 
    template_locator = 'template_locator_example' # str | 
    fields = 'fields_example' # str |  (optional)

    try:
        # Get a template of the matching build configuration.
        api_response = tc.build_type_api.get_build_template(bt_locator, template_locator, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildTypeApi->get_build_template: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **bt_locator**
     - **str**
     - 
   * - **template_locator**
     - **str**
     - 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `BuildType <../models/BuildType.html>`_

`Back to top <#>`_

.. _get_build_type:

get_build_type
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    bt_locator = 'bt_locator_example' # str | 
    fields = 'fields_example' # str |  (optional)

    try:
        # Get build configuration matching the locator.
        api_response = tc.build_type_api.get_build_type(bt_locator, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildTypeApi->get_build_type: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **bt_locator**
     - **str**
     - 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `BuildType <../models/BuildType.html>`_

`Back to top <#>`_

.. _get_build_type_build_tags:

get_build_type_build_tags
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    bt_locator = 'bt_locator_example' # str | 
    field = 'field_example' # str |  (optional)

    try:
        # Get tags of builds of the matching build configuration.
        api_response = tc.build_type_api.get_build_type_build_tags(bt_locator, field=field)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildTypeApi->get_build_type_build_tags: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **bt_locator**
     - **str**
     - 
   * - **field**
     - **str**
     - [optional] 

Return type:
    `Tags <../models/Tags.html>`_

`Back to top <#>`_

.. _get_build_type_builds:

get_build_type_builds
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    bt_locator = 'bt_locator_example' # str | 
    fields = 'fields_example' # str |  (optional)

    try:
        # Get builds of the matching build configuration.
        api_response = tc.build_type_api.get_build_type_builds(bt_locator, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildTypeApi->get_build_type_builds: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **bt_locator**
     - **str**
     - 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `Builds <../models/Builds.html>`_

`Back to top <#>`_

.. _get_build_type_field:

get_build_type_field
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    bt_locator = 'bt_locator_example' # str | 
    field = 'field_example' # str | 

    try:
        # Get a field of the matching build configuration.
        api_response = tc.build_type_api.get_build_type_field(bt_locator, field)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildTypeApi->get_build_type_field: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **bt_locator**
     - **str**
     - 
   * - **field**
     - **str**
     - 

Return type:
    **str**

`Back to top <#>`_

.. _get_build_type_settings_file:

get_build_type_settings_file
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    bt_locator = 'bt_locator_example' # str | 

    try:
        # Get the settings file of the matching build configuration.
        api_response = tc.build_type_api.get_build_type_settings_file(bt_locator)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildTypeApi->get_build_type_settings_file: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **bt_locator**
     - **str**
     - 

Return type:
    **str**

`Back to top <#>`_

.. _get_file_metadata_of_build_type:

get_file_metadata_of_build_type
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    path = 'path_example' # str | 
    bt_locator = 'bt_locator_example' # str | 
    fields = 'fields_example' # str |  (optional)
    resolve_parameters = true # bool |  (optional)

    try:
        # Get metadata of specific file.
        api_response = tc.build_type_api.get_file_metadata_of_build_type(path, bt_locator, fields=fields, resolve_parameters=resolve_parameters)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildTypeApi->get_file_metadata_of_build_type: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **path**
     - **str**
     - 
   * - **bt_locator**
     - **str**
     - 
   * - **fields**
     - **str**
     - [optional] 
   * - **resolve_parameters**
     - **bool**
     - [optional] 

Return type:
    `file <../models/file.html>`_

`Back to top <#>`_

.. _get_files_list_for_subpath_of_build_type:

get_files_list_for_subpath_of_build_type
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    path = 'path_example' # str | 
    bt_locator = 'bt_locator_example' # str | 
    base_path = 'base_path_example' # str |  (optional)
    locator = 'locator_example' # str |  (optional)
    fields = 'fields_example' # str |  (optional)
    resolve_parameters = true # bool |  (optional)

    try:
        # List files under this path.
        api_response = tc.build_type_api.get_files_list_for_subpath_of_build_type(path, bt_locator, base_path=base_path, locator=locator, fields=fields, resolve_parameters=resolve_parameters)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildTypeApi->get_files_list_for_subpath_of_build_type: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **path**
     - **str**
     - 
   * - **bt_locator**
     - **str**
     - 
   * - **base_path**
     - **str**
     - [optional] 
   * - **locator**
     - **str**
     - [optional] 
   * - **fields**
     - **str**
     - [optional] 
   * - **resolve_parameters**
     - **bool**
     - [optional] 

Return type:
    `Files <../models/Files.html>`_

`Back to top <#>`_

.. _get_files_list_of_build_type:

get_files_list_of_build_type
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    bt_locator = 'bt_locator_example' # str | 
    base_path = 'base_path_example' # str |  (optional)
    locator = 'locator_example' # str |  (optional)
    fields = 'fields_example' # str |  (optional)
    resolve_parameters = true # bool |  (optional)

    try:
        # List all files.
        api_response = tc.build_type_api.get_files_list_of_build_type(bt_locator, base_path=base_path, locator=locator, fields=fields, resolve_parameters=resolve_parameters)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildTypeApi->get_files_list_of_build_type: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **bt_locator**
     - **str**
     - 
   * - **base_path**
     - **str**
     - [optional] 
   * - **locator**
     - **str**
     - [optional] 
   * - **fields**
     - **str**
     - [optional] 
   * - **resolve_parameters**
     - **bool**
     - [optional] 

Return type:
    `Files <../models/Files.html>`_

`Back to top <#>`_

.. _get_snapshot_dependency:

get_snapshot_dependency
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    bt_locator = 'bt_locator_example' # str | 
    snapshot_dep_locator = 'snapshot_dep_locator_example' # str | 
    fields = 'fields_example' # str |  (optional)

    try:
        # Get a snapshot dependency of the matching build configuration.
        api_response = tc.build_type_api.get_snapshot_dependency(bt_locator, snapshot_dep_locator, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildTypeApi->get_snapshot_dependency: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **bt_locator**
     - **str**
     - 
   * - **snapshot_dep_locator**
     - **str**
     - 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `SnapshotDependency <../models/SnapshotDependency.html>`_

`Back to top <#>`_

.. _get_trigger:

get_trigger
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    bt_locator = 'bt_locator_example' # str | 
    trigger_locator = 'trigger_locator_example' # str | 
    fields = 'fields_example' # str |  (optional)

    try:
        # Get a trigger of the matching build configuration.
        api_response = tc.build_type_api.get_trigger(bt_locator, trigger_locator, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildTypeApi->get_trigger: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **bt_locator**
     - **str**
     - 
   * - **trigger_locator**
     - **str**
     - 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `Trigger <../models/Trigger.html>`_

`Back to top <#>`_

.. _get_trigger_parameter:

get_trigger_parameter
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    bt_locator = 'bt_locator_example' # str | 
    trigger_locator = 'trigger_locator_example' # str | 
    field_name = 'field_name_example' # str | 

    try:
        # Get a parameter of a trigger of the matching build configuration.
        api_response = tc.build_type_api.get_trigger_parameter(bt_locator, trigger_locator, field_name)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildTypeApi->get_trigger_parameter: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **bt_locator**
     - **str**
     - 
   * - **trigger_locator**
     - **str**
     - 
   * - **field_name**
     - **str**
     - 

Return type:
    **str**

`Back to top <#>`_

.. _get_vcs_root:

get_vcs_root
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    bt_locator = 'bt_locator_example' # str | 
    vcs_root_locator = 'vcs_root_locator_example' # str | 
    fields = 'fields_example' # str |  (optional)

    try:
        # Get a VCS root of the matching build configuration.
        api_response = tc.build_type_api.get_vcs_root(bt_locator, vcs_root_locator, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildTypeApi->get_vcs_root: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **bt_locator**
     - **str**
     - 
   * - **vcs_root_locator**
     - **str**
     - 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `VcsRootEntry <../models/VcsRootEntry.html>`_

`Back to top <#>`_

.. _get_vcs_root_checkout_rules:

get_vcs_root_checkout_rules
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    bt_locator = 'bt_locator_example' # str | 
    vcs_root_locator = 'vcs_root_locator_example' # str | 

    try:
        # Get checkout rules of a VCS root of the matching build configuration.
        api_response = tc.build_type_api.get_vcs_root_checkout_rules(bt_locator, vcs_root_locator)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildTypeApi->get_vcs_root_checkout_rules: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **bt_locator**
     - **str**
     - 
   * - **vcs_root_locator**
     - **str**
     - 

Return type:
    **str**

`Back to top <#>`_

.. _get_vcs_root_instances_of_build_type:

get_vcs_root_instances_of_build_type
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    bt_locator = 'bt_locator_example' # str | 
    fields = 'fields_example' # str |  (optional)

    try:
        # Get all VCS root instances of the matching build configuration.
        api_response = tc.build_type_api.get_vcs_root_instances_of_build_type(bt_locator, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildTypeApi->get_vcs_root_instances_of_build_type: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **bt_locator**
     - **str**
     - 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `VcsRootInstances <../models/VcsRootInstances.html>`_

`Back to top <#>`_

.. _get_zipped_file_of_build_type:

get_zipped_file_of_build_type
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    path = 'path_example' # str | 
    bt_locator = 'bt_locator_example' # str | 
    base_path = 'base_path_example' # str |  (optional)
    locator = 'locator_example' # str |  (optional)
    name = 'name_example' # str |  (optional)
    resolve_parameters = true # bool |  (optional)

    try:
        # Get specific file zipped.
        tc.build_type_api.get_zipped_file_of_build_type(path, bt_locator, base_path=base_path, locator=locator, name=name, resolve_parameters=resolve_parameters)
    except ApiException as e:
        print("Exception when calling BuildTypeApi->get_zipped_file_of_build_type: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **path**
     - **str**
     - 
   * - **bt_locator**
     - **str**
     - 
   * - **base_path**
     - **str**
     - [optional] 
   * - **locator**
     - **str**
     - [optional] 
   * - **name**
     - **str**
     - [optional] 
   * - **resolve_parameters**
     - **bool**
     - [optional] 

Return type:
    void (empty response body)

`Back to top <#>`_

.. _remove_all_templates:

remove_all_templates
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    bt_locator = 'bt_locator_example' # str | 
    inline_settings = true # bool |  (optional)

    try:
        # Detach all templates from the matching build configuration.
        tc.build_type_api.remove_all_templates(bt_locator, inline_settings=inline_settings)
    except ApiException as e:
        print("Exception when calling BuildTypeApi->remove_all_templates: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **bt_locator**
     - **str**
     - 
   * - **inline_settings**
     - **bool**
     - [optional] 

Return type:
    void (empty response body)

`Back to top <#>`_

.. _remove_template:

remove_template
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    bt_locator = 'bt_locator_example' # str | 
    template_locator = 'template_locator_example' # str | 
    inline_settings = true # bool |  (optional)

    try:
        # Detach a template from the matching build configuration.
        tc.build_type_api.remove_template(bt_locator, template_locator, inline_settings=inline_settings)
    except ApiException as e:
        print("Exception when calling BuildTypeApi->remove_template: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **bt_locator**
     - **str**
     - 
   * - **template_locator**
     - **str**
     - 
   * - **inline_settings**
     - **bool**
     - [optional] 

Return type:
    void (empty response body)

`Back to top <#>`_

.. _replace_agent_requirement:

replace_agent_requirement
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    bt_locator = 'bt_locator_example' # str | 
    agent_requirement_locator = 'agent_requirement_locator_example' # str | 
    fields = 'fields_example' # str |  (optional)
    body = dohq_teamcity.AgentRequirement() # AgentRequirement |  (optional)

    try:
        # Update an agent requirement of the matching build configuration.
        api_response = tc.build_type_api.replace_agent_requirement(bt_locator, agent_requirement_locator, fields=fields, body=body)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildTypeApi->replace_agent_requirement: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **bt_locator**
     - **str**
     - 
   * - **agent_requirement_locator**
     - **str**
     - 
   * - **fields**
     - **str**
     - [optional] 
   * - **body**
     - `AgentRequirement <../models/AgentRequirement.html>`_
     - [optional] 

Return type:
    `AgentRequirement <../models/AgentRequirement.html>`_

`Back to top <#>`_

.. _replace_all_agent_requirements:

replace_all_agent_requirements
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    bt_locator = 'bt_locator_example' # str | 
    fields = 'fields_example' # str |  (optional)
    body = dohq_teamcity.AgentRequirements() # AgentRequirements |  (optional)

    try:
        # Update all agent requirements of the matching build configuration.
        api_response = tc.build_type_api.replace_all_agent_requirements(bt_locator, fields=fields, body=body)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildTypeApi->replace_all_agent_requirements: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **bt_locator**
     - **str**
     - 
   * - **fields**
     - **str**
     - [optional] 
   * - **body**
     - `AgentRequirements <../models/AgentRequirements.html>`_
     - [optional] 

Return type:
    `AgentRequirements <../models/AgentRequirements.html>`_

`Back to top <#>`_

.. _replace_all_artifact_dependencies:

replace_all_artifact_dependencies
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    bt_locator = 'bt_locator_example' # str | 
    fields = 'fields_example' # str |  (optional)
    body = dohq_teamcity.ArtifactDependencies() # ArtifactDependencies |  (optional)

    try:
        # Update all artifact dependencies of the matching build configuration.
        api_response = tc.build_type_api.replace_all_artifact_dependencies(bt_locator, fields=fields, body=body)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildTypeApi->replace_all_artifact_dependencies: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **bt_locator**
     - **str**
     - 
   * - **fields**
     - **str**
     - [optional] 
   * - **body**
     - `ArtifactDependencies <../models/ArtifactDependencies.html>`_
     - [optional] 

Return type:
    `ArtifactDependencies <../models/ArtifactDependencies.html>`_

`Back to top <#>`_

.. _replace_all_build_features:

replace_all_build_features
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    bt_locator = 'bt_locator_example' # str | 
    fields = 'fields_example' # str |  (optional)
    body = dohq_teamcity.Features() # Features |  (optional)

    try:
        # Update all build features of the matching build configuration.
        api_response = tc.build_type_api.replace_all_build_features(bt_locator, fields=fields, body=body)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildTypeApi->replace_all_build_features: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **bt_locator**
     - **str**
     - 
   * - **fields**
     - **str**
     - [optional] 
   * - **body**
     - `Features <../models/Features.html>`_
     - [optional] 

Return type:
    `Features <../models/Features.html>`_

`Back to top <#>`_

.. _replace_all_build_steps:

replace_all_build_steps
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    bt_locator = 'bt_locator_example' # str | 
    fields = 'fields_example' # str |  (optional)
    body = dohq_teamcity.Steps() # Steps |  (optional)

    try:
        # Update all build steps of the matching build configuration.
        api_response = tc.build_type_api.replace_all_build_steps(bt_locator, fields=fields, body=body)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildTypeApi->replace_all_build_steps: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **bt_locator**
     - **str**
     - 
   * - **fields**
     - **str**
     - [optional] 
   * - **body**
     - `Steps <../models/Steps.html>`_
     - [optional] 

Return type:
    `Steps <../models/Steps.html>`_

`Back to top <#>`_

.. _replace_all_snapshot_dependencies:

replace_all_snapshot_dependencies
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    bt_locator = 'bt_locator_example' # str | 
    fields = 'fields_example' # str |  (optional)
    body = dohq_teamcity.SnapshotDependencies() # SnapshotDependencies |  (optional)

    try:
        # Update all snapshot dependencies of the matching build configuration.
        api_response = tc.build_type_api.replace_all_snapshot_dependencies(bt_locator, fields=fields, body=body)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildTypeApi->replace_all_snapshot_dependencies: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **bt_locator**
     - **str**
     - 
   * - **fields**
     - **str**
     - [optional] 
   * - **body**
     - `SnapshotDependencies <../models/SnapshotDependencies.html>`_
     - [optional] 

Return type:
    `SnapshotDependencies <../models/SnapshotDependencies.html>`_

`Back to top <#>`_

.. _replace_all_triggers:

replace_all_triggers
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    bt_locator = 'bt_locator_example' # str | 
    fields = 'fields_example' # str |  (optional)
    body = dohq_teamcity.Triggers() # Triggers |  (optional)

    try:
        # Update all triggers of the matching build configuration.
        api_response = tc.build_type_api.replace_all_triggers(bt_locator, fields=fields, body=body)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildTypeApi->replace_all_triggers: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **bt_locator**
     - **str**
     - 
   * - **fields**
     - **str**
     - [optional] 
   * - **body**
     - `Triggers <../models/Triggers.html>`_
     - [optional] 

Return type:
    `Triggers <../models/Triggers.html>`_

`Back to top <#>`_

.. _replace_all_vcs_roots:

replace_all_vcs_roots
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    bt_locator = 'bt_locator_example' # str | 
    body = dohq_teamcity.VcsRootEntries() # VcsRootEntries |  (optional)
    fields = 'fields_example' # str |  (optional)

    try:
        # Update all VCS roots of the matching build configuration.
        api_response = tc.build_type_api.replace_all_vcs_roots(bt_locator, body=body, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildTypeApi->replace_all_vcs_roots: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **bt_locator**
     - **str**
     - 
   * - **body**
     - `VcsRootEntries <../models/VcsRootEntries.html>`_
     - [optional] 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `VcsRootEntries <../models/VcsRootEntries.html>`_

`Back to top <#>`_

.. _replace_artifact_dependency:

replace_artifact_dependency
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    bt_locator = 'bt_locator_example' # str | 
    artifact_dep_locator = 'artifact_dep_locator_example' # str | 
    fields = 'fields_example' # str |  (optional)
    body = dohq_teamcity.ArtifactDependency() # ArtifactDependency |  (optional)

    try:
        # Update an artifact dependency of the matching build configuration.
        api_response = tc.build_type_api.replace_artifact_dependency(bt_locator, artifact_dep_locator, fields=fields, body=body)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildTypeApi->replace_artifact_dependency: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **bt_locator**
     - **str**
     - 
   * - **artifact_dep_locator**
     - **str**
     - 
   * - **fields**
     - **str**
     - [optional] 
   * - **body**
     - `ArtifactDependency <../models/ArtifactDependency.html>`_
     - [optional] 

Return type:
    `ArtifactDependency <../models/ArtifactDependency.html>`_

`Back to top <#>`_

.. _replace_build_feature:

replace_build_feature
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    bt_locator = 'bt_locator_example' # str | 
    feature_id = 'feature_id_example' # str | 
    fields = 'fields_example' # str |  (optional)
    body = dohq_teamcity.Feature() # Feature |  (optional)

    try:
        # Update a build feature of the matching build configuration.
        api_response = tc.build_type_api.replace_build_feature(bt_locator, feature_id, fields=fields, body=body)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildTypeApi->replace_build_feature: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **bt_locator**
     - **str**
     - 
   * - **feature_id**
     - **str**
     - 
   * - **fields**
     - **str**
     - [optional] 
   * - **body**
     - `Feature <../models/Feature.html>`_
     - [optional] 

Return type:
    `Feature <../models/Feature.html>`_

`Back to top <#>`_

.. _replace_build_feature_parameters:

replace_build_feature_parameters
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    bt_locator = 'bt_locator_example' # str | 
    feature_id = 'feature_id_example' # str | 
    body = dohq_teamcity.Properties() # Properties |  (optional)
    fields = 'fields_example' # str |  (optional)

    try:
        # Update a parameter of a build feature of the matching build configuration.
        api_response = tc.build_type_api.replace_build_feature_parameters(bt_locator, feature_id, body=body, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildTypeApi->replace_build_feature_parameters: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **bt_locator**
     - **str**
     - 
   * - **feature_id**
     - **str**
     - 
   * - **body**
     - `Properties <../models/Properties.html>`_
     - [optional] 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `Properties <../models/Properties.html>`_

`Back to top <#>`_

.. _replace_build_step:

replace_build_step
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    bt_locator = 'bt_locator_example' # str | 
    step_id = 'step_id_example' # str | 
    fields = 'fields_example' # str |  (optional)
    body = dohq_teamcity.Step() # Step |  (optional)

    try:
        # Replace a build step of the matching build configuration.
        api_response = tc.build_type_api.replace_build_step(bt_locator, step_id, fields=fields, body=body)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildTypeApi->replace_build_step: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **bt_locator**
     - **str**
     - 
   * - **step_id**
     - **str**
     - 
   * - **fields**
     - **str**
     - [optional] 
   * - **body**
     - `Step <../models/Step.html>`_
     - [optional] 

Return type:
    `Step <../models/Step.html>`_

`Back to top <#>`_

.. _replace_snapshot_dependency:

replace_snapshot_dependency
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    bt_locator = 'bt_locator_example' # str | 
    snapshot_dep_locator = 'snapshot_dep_locator_example' # str | 
    fields = 'fields_example' # str |  (optional)
    body = dohq_teamcity.SnapshotDependency() # SnapshotDependency |  (optional)

    try:
        # Update a snapshot dependency of the matching build configuration.
        api_response = tc.build_type_api.replace_snapshot_dependency(bt_locator, snapshot_dep_locator, fields=fields, body=body)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildTypeApi->replace_snapshot_dependency: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **bt_locator**
     - **str**
     - 
   * - **snapshot_dep_locator**
     - **str**
     - 
   * - **fields**
     - **str**
     - [optional] 
   * - **body**
     - `SnapshotDependency <../models/SnapshotDependency.html>`_
     - [optional] 

Return type:
    `SnapshotDependency <../models/SnapshotDependency.html>`_

`Back to top <#>`_

.. _replace_trigger:

replace_trigger
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    bt_locator = 'bt_locator_example' # str | 
    trigger_locator = 'trigger_locator_example' # str | 
    fields = 'fields_example' # str |  (optional)
    body = dohq_teamcity.Trigger() # Trigger |  (optional)

    try:
        # Update a trigger of the matching build configuration.
        api_response = tc.build_type_api.replace_trigger(bt_locator, trigger_locator, fields=fields, body=body)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildTypeApi->replace_trigger: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **bt_locator**
     - **str**
     - 
   * - **trigger_locator**
     - **str**
     - 
   * - **fields**
     - **str**
     - [optional] 
   * - **body**
     - `Trigger <../models/Trigger.html>`_
     - [optional] 

Return type:
    `Trigger <../models/Trigger.html>`_

`Back to top <#>`_

.. _set_agent_requirement_parameter:

set_agent_requirement_parameter
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    bt_locator = 'bt_locator_example' # str | 
    agent_requirement_locator = 'agent_requirement_locator_example' # str | 
    field_name = 'field_name_example' # str | 
    body = 'body_example' # str |  (optional)

    try:
        # Update a parameter of an agent requirement of the matching build configuration.
        api_response = tc.build_type_api.set_agent_requirement_parameter(bt_locator, agent_requirement_locator, field_name, body=body)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildTypeApi->set_agent_requirement_parameter: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **bt_locator**
     - **str**
     - 
   * - **agent_requirement_locator**
     - **str**
     - 
   * - **field_name**
     - **str**
     - 
   * - **body**
     - **str**
     - [optional] 

Return type:
    **str**

`Back to top <#>`_

.. _set_artifact_dependency_parameter:

set_artifact_dependency_parameter
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    bt_locator = 'bt_locator_example' # str | 
    artifact_dep_locator = 'artifact_dep_locator_example' # str | 
    field_name = 'field_name_example' # str | 
    body = 'body_example' # str |  (optional)

    try:
        # Update a parameter of an artifact dependency of the matching build configuration.
        api_response = tc.build_type_api.set_artifact_dependency_parameter(bt_locator, artifact_dep_locator, field_name, body=body)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildTypeApi->set_artifact_dependency_parameter: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **bt_locator**
     - **str**
     - 
   * - **artifact_dep_locator**
     - **str**
     - 
   * - **field_name**
     - **str**
     - 
   * - **body**
     - **str**
     - [optional] 

Return type:
    **str**

`Back to top <#>`_

.. _set_build_feature_parameter:

set_build_feature_parameter
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    bt_locator = 'bt_locator_example' # str | 
    feature_id = 'feature_id_example' # str | 
    name = 'name_example' # str | 
    body = 'body_example' # str |  (optional)

    try:
        # Update a parameter of a build feature of the matching build configuration.
        api_response = tc.build_type_api.set_build_feature_parameter(bt_locator, feature_id, name, body=body)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildTypeApi->set_build_feature_parameter: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **bt_locator**
     - **str**
     - 
   * - **feature_id**
     - **str**
     - 
   * - **name**
     - **str**
     - 
   * - **body**
     - **str**
     - [optional] 

Return type:
    **str**

`Back to top <#>`_

.. _set_build_step_parameter:

set_build_step_parameter
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    bt_locator = 'bt_locator_example' # str | 
    step_id = 'step_id_example' # str | 
    field_name = 'field_name_example' # str | 
    body = 'body_example' # str |  (optional)

    try:
        # Update a parameter of a build step of the matching build configuration.
        api_response = tc.build_type_api.set_build_step_parameter(bt_locator, step_id, field_name, body=body)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildTypeApi->set_build_step_parameter: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **bt_locator**
     - **str**
     - 
   * - **step_id**
     - **str**
     - 
   * - **field_name**
     - **str**
     - 
   * - **body**
     - **str**
     - [optional] 

Return type:
    **str**

`Back to top <#>`_

.. _set_build_type_field:

set_build_type_field
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    bt_locator = 'bt_locator_example' # str | 
    field = 'field_example' # str | 
    body = 'body_example' # str |  (optional)

    try:
        # Update a field of the matching build configuration.
        api_response = tc.build_type_api.set_build_type_field(bt_locator, field, body=body)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildTypeApi->set_build_type_field: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **bt_locator**
     - **str**
     - 
   * - **field**
     - **str**
     - 
   * - **body**
     - **str**
     - [optional] 

Return type:
    **str**

`Back to top <#>`_

.. _set_build_type_templates:

set_build_type_templates
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    bt_locator = 'bt_locator_example' # str | 
    body = dohq_teamcity.BuildTypes() # BuildTypes |  (optional)
    optimize_settings = true # bool |  (optional)
    fields = 'fields_example' # str |  (optional)

    try:
        # Update all templates of the matching build configuration.
        api_response = tc.build_type_api.set_build_type_templates(bt_locator, body=body, optimize_settings=optimize_settings, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildTypeApi->set_build_type_templates: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **bt_locator**
     - **str**
     - 
   * - **body**
     - `BuildTypes <../models/BuildTypes.html>`_
     - [optional] 
   * - **optimize_settings**
     - **bool**
     - [optional] 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `BuildTypes <../models/BuildTypes.html>`_

`Back to top <#>`_

.. _set_trigger_parameter:

set_trigger_parameter
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    bt_locator = 'bt_locator_example' # str | 
    trigger_locator = 'trigger_locator_example' # str | 
    field_name = 'field_name_example' # str | 
    body = 'body_example' # str |  (optional)

    try:
        # Update a parameter of a trigger of the matching build configuration.
        api_response = tc.build_type_api.set_trigger_parameter(bt_locator, trigger_locator, field_name, body=body)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildTypeApi->set_trigger_parameter: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **bt_locator**
     - **str**
     - 
   * - **trigger_locator**
     - **str**
     - 
   * - **field_name**
     - **str**
     - 
   * - **body**
     - **str**
     - [optional] 

Return type:
    **str**

`Back to top <#>`_

.. _update_build_parameter_of_build_type:

update_build_parameter_of_build_type
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    name = 'name_example' # str | 
    bt_locator = 'bt_locator_example' # str | 
    body = dohq_teamcity.ModelProperty() # ModelProperty |  (optional)
    fields = 'fields_example' # str |  (optional)

    try:
        # Update build parameter.
        api_response = tc.build_type_api.update_build_parameter_of_build_type(name, bt_locator, body=body, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildTypeApi->update_build_parameter_of_build_type: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **name**
     - **str**
     - 
   * - **bt_locator**
     - **str**
     - 
   * - **body**
     - `ModelProperty <../models/ModelProperty.html>`_
     - [optional] 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `ModelProperty <../models/ModelProperty.html>`_

`Back to top <#>`_

.. _update_build_parameter_specification_of_build_type:

update_build_parameter_specification_of_build_type
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    name = 'name_example' # str | 
    bt_locator = 'bt_locator_example' # str | 
    body = 'body_example' # str |  (optional)

    try:
        # Update build parameter specification.
        api_response = tc.build_type_api.update_build_parameter_specification_of_build_type(name, bt_locator, body=body)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildTypeApi->update_build_parameter_specification_of_build_type: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **name**
     - **str**
     - 
   * - **bt_locator**
     - **str**
     - 
   * - **body**
     - **str**
     - [optional] 

Return type:
    **str**

`Back to top <#>`_

.. _update_build_parameter_type_of_build_type:

update_build_parameter_type_of_build_type
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    name = 'name_example' # str | 
    bt_locator = 'bt_locator_example' # str | 
    body = dohq_teamcity.Type() # Type |  (optional)

    try:
        # Update type of build parameter.
        api_response = tc.build_type_api.update_build_parameter_type_of_build_type(name, bt_locator, body=body)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildTypeApi->update_build_parameter_type_of_build_type: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **name**
     - **str**
     - 
   * - **bt_locator**
     - **str**
     - 
   * - **body**
     - `Type <../models/Type.html>`_
     - [optional] 

Return type:
    `Type <../models/Type.html>`_

`Back to top <#>`_

.. _update_build_parameter_value_of_build_type:

update_build_parameter_value_of_build_type
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    name = 'name_example' # str | 
    bt_locator = 'bt_locator_example' # str | 
    body = 'body_example' # str |  (optional)

    try:
        # Update value of build parameter.
        api_response = tc.build_type_api.update_build_parameter_value_of_build_type(name, bt_locator, body=body)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildTypeApi->update_build_parameter_value_of_build_type: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **name**
     - **str**
     - 
   * - **bt_locator**
     - **str**
     - 
   * - **body**
     - **str**
     - [optional] 

Return type:
    **str**

`Back to top <#>`_

.. _update_build_parameters_of_build_type:

update_build_parameters_of_build_type
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    bt_locator = 'bt_locator_example' # str | 
    body = dohq_teamcity.Properties() # Properties |  (optional)
    fields = 'fields_example' # str |  (optional)

    try:
        # Update build parameters.
        api_response = tc.build_type_api.update_build_parameters_of_build_type(bt_locator, body=body, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildTypeApi->update_build_parameters_of_build_type: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **bt_locator**
     - **str**
     - 
   * - **body**
     - `Properties <../models/Properties.html>`_
     - [optional] 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `Properties <../models/Properties.html>`_

`Back to top <#>`_

.. _update_build_type_vcs_root:

update_build_type_vcs_root
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    bt_locator = 'bt_locator_example' # str | 
    vcs_root_locator = 'vcs_root_locator_example' # str | 
    body = dohq_teamcity.VcsRootEntry() # VcsRootEntry |  (optional)
    fields = 'fields_example' # str |  (optional)

    try:
        # Update a VCS root of the matching build configuration.
        api_response = tc.build_type_api.update_build_type_vcs_root(bt_locator, vcs_root_locator, body=body, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildTypeApi->update_build_type_vcs_root: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **bt_locator**
     - **str**
     - 
   * - **vcs_root_locator**
     - **str**
     - 
   * - **body**
     - `VcsRootEntry <../models/VcsRootEntry.html>`_
     - [optional] 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `VcsRootEntry <../models/VcsRootEntry.html>`_

`Back to top <#>`_

.. _update_build_type_vcs_root_checkout_rules:

update_build_type_vcs_root_checkout_rules
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    bt_locator = 'bt_locator_example' # str | 
    vcs_root_locator = 'vcs_root_locator_example' # str | 
    body = 'body_example' # str |  (optional)

    try:
        # Update checkout rules of a VCS root of the matching build configuration.
        api_response = tc.build_type_api.update_build_type_vcs_root_checkout_rules(bt_locator, vcs_root_locator, body=body)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildTypeApi->update_build_type_vcs_root_checkout_rules: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **bt_locator**
     - **str**
     - 
   * - **vcs_root_locator**
     - **str**
     - 
   * - **body**
     - **str**
     - [optional] 

Return type:
    **str**

`Back to top <#>`_

