dohq_teamcity.BuildApi
######################################

.. note::

   + All ``serve_*`` method have aliases with get: ``serve_something`` == ``get_something``
   + Some API have ``get`` method - default method to get object by locator (e.g ``agent_api.get('id:123')`` return ``Agent`` model by id
   + See more examples on page :doc:`/examples/api/BuildApi` and model examples
   + This is autogenerated page, don't change them directly, use template. Read more in :doc:`/development`

.. list-table::
   :widths: 20 80
   :header-rows: 1

   * - Method
     - HTTP request
   * - :ref:`add_build_vcs_label`
     - **POST** ``/app/rest/builds/{buildLocator}/vcsLabels``
   * - :ref:`add_log_message_to_build`
     - **POST** ``/app/rest/builds/{buildLocator}/log``
   * - :ref:`add_problem_to_build`
     - **POST** ``/app/rest/builds/{buildLocator}/problemOccurrences``
   * - :ref:`add_tags_to_build`
     - **POST** ``/app/rest/builds/{buildLocator}/tags``
   * - :ref:`add_tags_to_multiple_builds`
     - **POST** ``/app/rest/builds/multiple/{buildLocator}/tags``
   * - :ref:`cancel_build`
     - **POST** ``/app/rest/builds/{buildLocator}``
   * - :ref:`cancel_multiple`
     - **POST** ``/app/rest/builds/multiple/{buildLocator}``
   * - :ref:`delete_build`
     - **DELETE** ``/app/rest/builds/{buildLocator}``
   * - :ref:`delete_build_comment`
     - **DELETE** ``/app/rest/builds/{buildLocator}/comment``
   * - :ref:`delete_multiple_build_comments`
     - **DELETE** ``/app/rest/builds/multiple/{buildLocator}/comment``
   * - :ref:`delete_multiple_builds`
     - **DELETE** ``/app/rest/builds/multiple/{buildLocator}``
   * - :ref:`download_file_of_build`
     - **GET** ``/app/rest/builds/{buildLocator}/artifacts/files{path}``
   * - :ref:`get_aggregated_build_status`
     - **GET** ``/app/rest/builds/aggregated/{buildLocator}/status``
   * - :ref:`get_aggregated_build_status_icon`
     - **GET** ``/app/rest/builds/aggregated/{buildLocator}/statusIcon{suffix}``
   * - :ref:`get_all_builds`
     - **GET** ``/app/rest/builds``
   * - :ref:`get_artifact_dependency_changes`
     - **GET** ``/app/rest/builds/{buildLocator}/artifactDependencyChanges``
   * - :ref:`get_artifacts_directory`
     - **GET** ``/app/rest/builds/{buildLocator}/artifactsDirectory``
   * - :ref:`get_build`
     - **GET** ``/app/rest/builds/{buildLocator}``
   * - :ref:`get_build_actual_parameters`
     - **GET** ``/app/rest/builds/{buildLocator}/resulting-properties``
   * - :ref:`get_build_field`
     - **GET** ``/app/rest/builds/{buildLocator}/{field}``
   * - :ref:`get_build_finish_date`
     - **GET** ``/app/rest/builds/{buildLocator}/finishDate``
   * - :ref:`get_build_number`
     - **GET** ``/app/rest/builds/{buildLocator}/number``
   * - :ref:`get_build_pin_info`
     - **GET** ``/app/rest/builds/{buildLocator}/pinInfo``
   * - :ref:`get_build_problems`
     - **GET** ``/app/rest/builds/{buildLocator}/problemOccurrences``
   * - :ref:`get_build_related_issues`
     - **GET** ``/app/rest/builds/{buildLocator}/relatedIssues``
   * - :ref:`get_build_resolved`
     - **GET** ``/app/rest/builds/{buildLocator}/resolved/{value}``
   * - :ref:`get_build_resulting_properties`
     - **GET** ``/app/rest/builds/{buildLocator}/resulting-properties/{propertyName}``
   * - :ref:`get_build_source_file`
     - **GET** ``/app/rest/builds/{buildLocator}/sources/files/{fileName}``
   * - :ref:`get_build_statistic_value`
     - **GET** ``/app/rest/builds/{buildLocator}/statistics/{name}``
   * - :ref:`get_build_statistic_values`
     - **GET** ``/app/rest/builds/{buildLocator}/statistics``
   * - :ref:`get_build_status`
     - **GET** ``/app/rest/builds/{buildLocator}/status``
   * - :ref:`get_build_status_icon`
     - **GET** ``/app/rest/builds/{buildLocator}/statusIcon{suffix}``
   * - :ref:`get_build_status_text`
     - **GET** ``/app/rest/builds/{buildLocator}/statusText``
   * - :ref:`get_build_tags`
     - **GET** ``/app/rest/builds/{buildLocator}/tags``
   * - :ref:`get_build_test_occurrences`
     - **GET** ``/app/rest/builds/{buildLocator}/testOccurrences``
   * - :ref:`get_build_vcs_labels`
     - **GET** ``/app/rest/builds/{buildLocator}/vcsLabels``
   * - :ref:`get_canceled_info`
     - **GET** ``/app/rest/builds/{buildLocator}/canceledInfo``
   * - :ref:`get_file_metadata_of_build`
     - **GET** ``/app/rest/builds/{buildLocator}/artifacts/metadata{path}``
   * - :ref:`get_files_list_for_subpath_of_build`
     - **GET** ``/app/rest/builds/{buildLocator}/artifacts/{path}``
   * - :ref:`get_files_list_of_build`
     - **GET** ``/app/rest/builds/{buildLocator}/artifacts``
   * - :ref:`get_multiple_builds`
     - **GET** ``/app/rest/builds/multiple/{buildLocator}``
   * - :ref:`get_zipped_file_of_build`
     - **GET** ``/app/rest/builds/{buildLocator}/artifacts/archived{path}``
   * - :ref:`mark_build_as_running`
     - **PUT** ``/app/rest/builds/{buildLocator}/runningData``
   * - :ref:`pin_multiple_builds`
     - **PUT** ``/app/rest/builds/multiple/{buildLocator}/pinInfo``
   * - :ref:`remove_multiple_build_tags`
     - **DELETE** ``/app/rest/builds/multiple/{buildLocator}/tags``
   * - :ref:`reset_build_finish_properties`
     - **DELETE** ``/app/rest/builds/{buildLocator}/caches/finishProperties``
   * - :ref:`set_build_comment`
     - **PUT** ``/app/rest/builds/{buildLocator}/comment``
   * - :ref:`set_build_finish_date`
     - **PUT** ``/app/rest/builds/{buildLocator}/finishDate``
   * - :ref:`set_build_number`
     - **PUT** ``/app/rest/builds/{buildLocator}/number``
   * - :ref:`set_build_pin_info`
     - **PUT** ``/app/rest/builds/{buildLocator}/pinInfo``
   * - :ref:`set_build_status`
     - **POST** ``/app/rest/builds/{buildLocator}/status``
   * - :ref:`set_build_status_text`
     - **PUT** ``/app/rest/builds/{buildLocator}/statusText``
   * - :ref:`set_build_tags`
     - **PUT** ``/app/rest/builds/{buildLocator}/tags``
   * - :ref:`set_finished_time`
     - **PUT** ``/app/rest/builds/{buildLocator}/finish``
   * - :ref:`set_multiple_build_comments`
     - **PUT** ``/app/rest/builds/multiple/{buildLocator}/comment``

.. _add_build_vcs_label:

add_build_vcs_label
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    build_locator = 'build_locator_example' # str | 
    locator = 'locator_example' # str |  (optional)
    fields = 'fields_example' # str |  (optional)
    body = 'body_example' # str |  (optional)

    try:
        # Add a VCS label to the matching build.
        api_response = tc.build_api.add_build_vcs_label(build_locator, locator=locator, fields=fields, body=body)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildApi->add_build_vcs_label: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **build_locator**
     - **str**
     - 
   * - **locator**
     - **str**
     - [optional] 
   * - **fields**
     - **str**
     - [optional] 
   * - **body**
     - **str**
     - [optional] 

Return type:
    `VcsLabels <../models/VcsLabels.html>`_

`Back to top <#>`_

.. _add_log_message_to_build:

add_log_message_to_build
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    build_locator = 'build_locator_example' # str | 
    body = 'body_example' # str |  (optional)
    fields = 'fields_example' # str |  (optional)

    try:
        # Adds a message to the build log. Service messages are accepted.
        tc.build_api.add_log_message_to_build(build_locator, body=body, fields=fields)
    except ApiException as e:
        print("Exception when calling BuildApi->add_log_message_to_build: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **build_locator**
     - **str**
     - 
   * - **body**
     - **str**
     - [optional] 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    void (empty response body)

`Back to top <#>`_

.. _add_problem_to_build:

add_problem_to_build
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    build_locator = 'build_locator_example' # str | 
    body = 'body_example' # str |  (optional)
    fields = 'fields_example' # str |  (optional)

    try:
        # Add a build problem to the matching build.
        api_response = tc.build_api.add_problem_to_build(build_locator, body=body, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildApi->add_problem_to_build: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **build_locator**
     - **str**
     - 
   * - **body**
     - **str**
     - [optional] 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `ProblemOccurrence <../models/ProblemOccurrence.html>`_

`Back to top <#>`_

.. _add_tags_to_build:

add_tags_to_build
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    build_locator = 'build_locator_example' # str | 
    body = dohq_teamcity.Tags() # Tags |  (optional)
    fields = 'fields_example' # str |  (optional)

    try:
        # Add tags to the matching build.
        api_response = tc.build_api.add_tags_to_build(build_locator, body=body, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildApi->add_tags_to_build: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **build_locator**
     - **str**
     - 
   * - **body**
     - `Tags <../models/Tags.html>`_
     - [optional] 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `Tags <../models/Tags.html>`_

`Back to top <#>`_

.. _add_tags_to_multiple_builds:

add_tags_to_multiple_builds
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    build_locator = 'build_locator_example' # str | 
    body = dohq_teamcity.Tags() # Tags |  (optional)
    fields = 'fields_example' # str |  (optional)

    try:
        # Add tags to multiple matching builds.
        api_response = tc.build_api.add_tags_to_multiple_builds(build_locator, body=body, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildApi->add_tags_to_multiple_builds: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **build_locator**
     - **str**
     - 
   * - **body**
     - `Tags <../models/Tags.html>`_
     - [optional] 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `MultipleOperationResult <../models/MultipleOperationResult.html>`_

`Back to top <#>`_

.. _cancel_build:

cancel_build
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    build_locator = 'build_locator_example' # str | 
    body = dohq_teamcity.BuildCancelRequest() # BuildCancelRequest |  (optional)
    fields = 'fields_example' # str |  (optional)

    try:
        # cancelBuild
        api_response = tc.build_api.cancel_build(build_locator, body=body, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildApi->cancel_build: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **build_locator**
     - **str**
     - 
   * - **body**
     - `BuildCancelRequest <../models/BuildCancelRequest.html>`_
     - [optional] 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `Build <../models/Build.html>`_

`Back to top <#>`_

.. _cancel_multiple:

cancel_multiple
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    build_locator = 'build_locator_example' # str | 
    body = dohq_teamcity.BuildCancelRequest() # BuildCancelRequest |  (optional)
    fields = 'fields_example' # str |  (optional)

    try:
        # cancelMultipleBuilds
        api_response = tc.build_api.cancel_multiple(build_locator, body=body, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildApi->cancel_multiple: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **build_locator**
     - **str**
     - 
   * - **body**
     - `BuildCancelRequest <../models/BuildCancelRequest.html>`_
     - [optional] 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `MultipleOperationResult <../models/MultipleOperationResult.html>`_

`Back to top <#>`_

.. _delete_build:

delete_build
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    build_locator = 'build_locator_example' # str | 

    try:
        # Delete build matching the locator.
        tc.build_api.delete_build(build_locator)
    except ApiException as e:
        print("Exception when calling BuildApi->delete_build: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **build_locator**
     - **str**
     - 

Return type:
    void (empty response body)

`Back to top <#>`_

.. _delete_build_comment:

delete_build_comment
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    build_locator = 'build_locator_example' # str | 

    try:
        # Remove the build comment matching the locator.
        tc.build_api.delete_build_comment(build_locator)
    except ApiException as e:
        print("Exception when calling BuildApi->delete_build_comment: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **build_locator**
     - **str**
     - 

Return type:
    void (empty response body)

`Back to top <#>`_

.. _delete_multiple_build_comments:

delete_multiple_build_comments
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    build_locator = 'build_locator_example' # str | 
    fields = 'fields_example' # str |  (optional)

    try:
        # Delete comments of multiple matching builds.
        api_response = tc.build_api.delete_multiple_build_comments(build_locator, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildApi->delete_multiple_build_comments: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **build_locator**
     - **str**
     - 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `MultipleOperationResult <../models/MultipleOperationResult.html>`_

`Back to top <#>`_

.. _delete_multiple_builds:

delete_multiple_builds
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    build_locator = 'build_locator_example' # str | 
    fields = 'fields_example' # str |  (optional)

    try:
        # Delete multiple builds matching the locator.
        api_response = tc.build_api.delete_multiple_builds(build_locator, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildApi->delete_multiple_builds: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **build_locator**
     - **str**
     - 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `MultipleOperationResult <../models/MultipleOperationResult.html>`_

`Back to top <#>`_

.. _download_file_of_build:

download_file_of_build
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    path = 'path_example' # str | 
    build_locator = 'build_locator_example' # str | 
    resolve_parameters = true # bool |  (optional)
    log_build_usage = true # bool |  (optional)

    try:
        # Download specific file.
        tc.build_api.download_file_of_build(path, build_locator, resolve_parameters=resolve_parameters, log_build_usage=log_build_usage)
    except ApiException as e:
        print("Exception when calling BuildApi->download_file_of_build: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **path**
     - **str**
     - 
   * - **build_locator**
     - **str**
     - 
   * - **resolve_parameters**
     - **bool**
     - [optional] 
   * - **log_build_usage**
     - **bool**
     - [optional] 

Return type:
    void (empty response body)

`Back to top <#>`_

.. _get_aggregated_build_status:

get_aggregated_build_status
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    build_locator = 'build_locator_example' # str | 

    try:
        # Get the build status of aggregated matching builds.
        api_response = tc.build_api.get_aggregated_build_status(build_locator)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildApi->get_aggregated_build_status: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **build_locator**
     - **str**
     - 

Return type:
    **str**

`Back to top <#>`_

.. _get_aggregated_build_status_icon:

get_aggregated_build_status_icon
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    build_locator = 'build_locator_example' # str | 
    suffix = 'suffix_example' # str | 

    try:
        # Get the status icon (in specified format) of aggregated matching builds.
        tc.build_api.get_aggregated_build_status_icon(build_locator, suffix)
    except ApiException as e:
        print("Exception when calling BuildApi->get_aggregated_build_status_icon: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **build_locator**
     - **str**
     - 
   * - **suffix**
     - **str**
     - 

Return type:
    void (empty response body)

`Back to top <#>`_

.. _get_all_builds:

get_all_builds
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    locator = 'locator_example' # str |  (optional)
    fields = 'fields_example' # str |  (optional)

    try:
        # Get all builds.
        api_response = tc.build_api.get_all_builds(locator=locator, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildApi->get_all_builds: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **locator**
     - **str**
     - [optional] 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `Builds <../models/Builds.html>`_

`Back to top <#>`_

.. _get_artifact_dependency_changes:

get_artifact_dependency_changes
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    build_locator = 'build_locator_example' # str | 
    fields = 'fields_example' # str |  (optional)

    try:
        # Get artifact dependency changes of the matching build.
        api_response = tc.build_api.get_artifact_dependency_changes(build_locator, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildApi->get_artifact_dependency_changes: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **build_locator**
     - **str**
     - 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `BuildChanges <../models/BuildChanges.html>`_

`Back to top <#>`_

.. _get_artifacts_directory:

get_artifacts_directory
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    build_locator = 'build_locator_example' # str | 

    try:
        # Get the artifacts' directory of the matching build.
        api_response = tc.build_api.get_artifacts_directory(build_locator)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildApi->get_artifacts_directory: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **build_locator**
     - **str**
     - 

Return type:
    **str**

`Back to top <#>`_

.. _get_build:

get_build
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    build_locator = 'build_locator_example' # str | 
    fields = 'fields_example' # str |  (optional)

    try:
        # Get build matching the locator.
        api_response = tc.build_api.get_build(build_locator, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildApi->get_build: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **build_locator**
     - **str**
     - 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `Build <../models/Build.html>`_

`Back to top <#>`_

.. _get_build_actual_parameters:

get_build_actual_parameters
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    build_locator = 'build_locator_example' # str | 
    fields = 'fields_example' # str |  (optional)

    try:
        # Get actual build parameters of the matching build.
        api_response = tc.build_api.get_build_actual_parameters(build_locator, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildApi->get_build_actual_parameters: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **build_locator**
     - **str**
     - 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `Properties <../models/Properties.html>`_

`Back to top <#>`_

.. _get_build_field:

get_build_field
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    build_locator = 'build_locator_example' # str | 
    field = 'field_example' # str | 

    try:
        # Get a field of the matching build.
        api_response = tc.build_api.get_build_field(build_locator, field)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildApi->get_build_field: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **build_locator**
     - **str**
     - 
   * - **field**
     - **str**
     - 

Return type:
    **str**

`Back to top <#>`_

.. _get_build_finish_date:

get_build_finish_date
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    build_locator = 'build_locator_example' # str | 

    try:
        # Get the finish date of the matching build.
        api_response = tc.build_api.get_build_finish_date(build_locator)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildApi->get_build_finish_date: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **build_locator**
     - **str**
     - 

Return type:
    **str**

`Back to top <#>`_

.. _get_build_number:

get_build_number
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    build_locator = 'build_locator_example' # str | 

    try:
        # Get the number of the matching build.
        api_response = tc.build_api.get_build_number(build_locator)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildApi->get_build_number: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **build_locator**
     - **str**
     - 

Return type:
    **str**

`Back to top <#>`_

.. _get_build_pin_info:

get_build_pin_info
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    build_locator = 'build_locator_example' # str | 
    fields = 'fields_example' # str |  (optional)

    try:
        # Check if the matching build is pinned.
        api_response = tc.build_api.get_build_pin_info(build_locator, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildApi->get_build_pin_info: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **build_locator**
     - **str**
     - 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `PinInfo <../models/PinInfo.html>`_

`Back to top <#>`_

.. _get_build_problems:

get_build_problems
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    build_locator = 'build_locator_example' # str | 
    fields = 'fields_example' # str |  (optional)

    try:
        # Get build problems of the matching build.
        api_response = tc.build_api.get_build_problems(build_locator, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildApi->get_build_problems: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **build_locator**
     - **str**
     - 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `ProblemOccurrences <../models/ProblemOccurrences.html>`_

`Back to top <#>`_

.. _get_build_related_issues:

get_build_related_issues
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    build_locator = 'build_locator_example' # str | 
    fields = 'fields_example' # str |  (optional)

    try:
        # Get related issues of the matching build.
        api_response = tc.build_api.get_build_related_issues(build_locator, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildApi->get_build_related_issues: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **build_locator**
     - **str**
     - 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `IssuesUsages <../models/IssuesUsages.html>`_

`Back to top <#>`_

.. _get_build_resolved:

get_build_resolved
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    build_locator = 'build_locator_example' # str | 
    value = 'value_example' # str | 

    try:
        # Get the resolvement status of the matching build.
        api_response = tc.build_api.get_build_resolved(build_locator, value)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildApi->get_build_resolved: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **build_locator**
     - **str**
     - 
   * - **value**
     - **str**
     - 

Return type:
    **str**

`Back to top <#>`_

.. _get_build_resulting_properties:

get_build_resulting_properties
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    build_locator = 'build_locator_example' # str | 
    property_name = 'property_name_example' # str | 

    try:
        # Update a build parameter of the matching build.
        api_response = tc.build_api.get_build_resulting_properties(build_locator, property_name)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildApi->get_build_resulting_properties: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **build_locator**
     - **str**
     - 
   * - **property_name**
     - **str**
     - 

Return type:
    **str**

`Back to top <#>`_

.. _get_build_source_file:

get_build_source_file
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    build_locator = 'build_locator_example' # str | 
    file_name = 'file_name_example' # str | 

    try:
        # Get a source file of the matching build.
        tc.build_api.get_build_source_file(build_locator, file_name)
    except ApiException as e:
        print("Exception when calling BuildApi->get_build_source_file: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **build_locator**
     - **str**
     - 
   * - **file_name**
     - **str**
     - 

Return type:
    void (empty response body)

`Back to top <#>`_

.. _get_build_statistic_value:

get_build_statistic_value
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    build_locator = 'build_locator_example' # str | 
    name = 'name_example' # str | 

    try:
        # Get a statistical value of the matching build.
        api_response = tc.build_api.get_build_statistic_value(build_locator, name)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildApi->get_build_statistic_value: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **build_locator**
     - **str**
     - 
   * - **name**
     - **str**
     - 

Return type:
    **str**

`Back to top <#>`_

.. _get_build_statistic_values:

get_build_statistic_values
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    build_locator = 'build_locator_example' # str | 
    fields = 'fields_example' # str |  (optional)

    try:
        # Get all statistical values of the matching build.
        api_response = tc.build_api.get_build_statistic_values(build_locator, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildApi->get_build_statistic_values: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **build_locator**
     - **str**
     - 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `Properties <../models/Properties.html>`_

`Back to top <#>`_

.. _get_build_status:

get_build_status
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    build_locator = 'build_locator_example' # str | 

    try:
        # Get status of the matching build.
        api_response = tc.build_api.get_build_status(build_locator)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildApi->get_build_status: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **build_locator**
     - **str**
     - 

Return type:
    **str**

`Back to top <#>`_

.. _get_build_status_icon:

get_build_status_icon
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    build_locator = 'build_locator_example' # str | 
    suffix = 'suffix_example' # str | 

    try:
        # Get the status icon (in specified format) of the matching build.
        tc.build_api.get_build_status_icon(build_locator, suffix)
    except ApiException as e:
        print("Exception when calling BuildApi->get_build_status_icon: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **build_locator**
     - **str**
     - 
   * - **suffix**
     - **str**
     - 

Return type:
    void (empty response body)

`Back to top <#>`_

.. _get_build_status_text:

get_build_status_text
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    build_locator = 'build_locator_example' # str | 

    try:
        # Get the build status text of the matching build.
        api_response = tc.build_api.get_build_status_text(build_locator)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildApi->get_build_status_text: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **build_locator**
     - **str**
     - 

Return type:
    **str**

`Back to top <#>`_

.. _get_build_tags:

get_build_tags
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    build_locator = 'build_locator_example' # str | 
    locator = 'locator_example' # str |  (optional)
    fields = 'fields_example' # str |  (optional)

    try:
        # Get tags of the matching build.
        api_response = tc.build_api.get_build_tags(build_locator, locator=locator, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildApi->get_build_tags: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **build_locator**
     - **str**
     - 
   * - **locator**
     - **str**
     - [optional] 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `Tags <../models/Tags.html>`_

`Back to top <#>`_

.. _get_build_test_occurrences:

get_build_test_occurrences
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    build_locator = 'build_locator_example' # str | 
    fields = 'fields_example' # str |  (optional)

    try:
        # Get test occurrences of the matching build.
        api_response = tc.build_api.get_build_test_occurrences(build_locator, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildApi->get_build_test_occurrences: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **build_locator**
     - **str**
     - 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `TestOccurrences <../models/TestOccurrences.html>`_

`Back to top <#>`_

.. _get_build_vcs_labels:

get_build_vcs_labels
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    build_locator = 'build_locator_example' # str | 
    fields = 'fields_example' # str |  (optional)

    try:
        # Get VCS labels of the matching build.
        api_response = tc.build_api.get_build_vcs_labels(build_locator, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildApi->get_build_vcs_labels: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **build_locator**
     - **str**
     - 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `VcsLabels <../models/VcsLabels.html>`_

`Back to top <#>`_

.. _get_canceled_info:

get_canceled_info
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    build_locator = 'build_locator_example' # str | 
    fields = 'fields_example' # str |  (optional)

    try:
        # Check if the matching build is canceled.
        api_response = tc.build_api.get_canceled_info(build_locator, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildApi->get_canceled_info: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **build_locator**
     - **str**
     - 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `Comment <../models/Comment.html>`_

`Back to top <#>`_

.. _get_file_metadata_of_build:

get_file_metadata_of_build
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    path = 'path_example' # str | 
    build_locator = 'build_locator_example' # str | 
    fields = 'fields_example' # str |  (optional)
    resolve_parameters = true # bool |  (optional)
    log_build_usage = true # bool |  (optional)

    try:
        # Get metadata of specific file.
        api_response = tc.build_api.get_file_metadata_of_build(path, build_locator, fields=fields, resolve_parameters=resolve_parameters, log_build_usage=log_build_usage)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildApi->get_file_metadata_of_build: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **path**
     - **str**
     - 
   * - **build_locator**
     - **str**
     - 
   * - **fields**
     - **str**
     - [optional] 
   * - **resolve_parameters**
     - **bool**
     - [optional] 
   * - **log_build_usage**
     - **bool**
     - [optional] 

Return type:
    `file <../models/file.html>`_

`Back to top <#>`_

.. _get_files_list_for_subpath_of_build:

get_files_list_for_subpath_of_build
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    path = 'path_example' # str | 
    build_locator = 'build_locator_example' # str | 
    base_path = 'base_path_example' # str |  (optional)
    locator = 'locator_example' # str |  (optional)
    fields = 'fields_example' # str |  (optional)
    resolve_parameters = true # bool |  (optional)
    log_build_usage = true # bool |  (optional)

    try:
        # List files under this path.
        api_response = tc.build_api.get_files_list_for_subpath_of_build(path, build_locator, base_path=base_path, locator=locator, fields=fields, resolve_parameters=resolve_parameters, log_build_usage=log_build_usage)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildApi->get_files_list_for_subpath_of_build: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **path**
     - **str**
     - 
   * - **build_locator**
     - **str**
     - 
   * - **base_path**
     - **str**
     - [optional] 
   * - **locator**
     - **str**
     - [optional] 
   * - **fields**
     - **str**
     - [optional] 
   * - **resolve_parameters**
     - **bool**
     - [optional] 
   * - **log_build_usage**
     - **bool**
     - [optional] 

Return type:
    `Files <../models/Files.html>`_

`Back to top <#>`_

.. _get_files_list_of_build:

get_files_list_of_build
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    build_locator = 'build_locator_example' # str | 
    base_path = 'base_path_example' # str |  (optional)
    locator = 'locator_example' # str |  (optional)
    fields = 'fields_example' # str |  (optional)
    resolve_parameters = true # bool |  (optional)
    log_build_usage = true # bool |  (optional)

    try:
        # List all files.
        api_response = tc.build_api.get_files_list_of_build(build_locator, base_path=base_path, locator=locator, fields=fields, resolve_parameters=resolve_parameters, log_build_usage=log_build_usage)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildApi->get_files_list_of_build: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **build_locator**
     - **str**
     - 
   * - **base_path**
     - **str**
     - [optional] 
   * - **locator**
     - **str**
     - [optional] 
   * - **fields**
     - **str**
     - [optional] 
   * - **resolve_parameters**
     - **bool**
     - [optional] 
   * - **log_build_usage**
     - **bool**
     - [optional] 

Return type:
    `Files <../models/Files.html>`_

`Back to top <#>`_

.. _get_multiple_builds:

get_multiple_builds
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    build_locator = 'build_locator_example' # str | 
    fields = 'fields_example' # str |  (optional)

    try:
        # Get multiple builds matching the locator.
        api_response = tc.build_api.get_multiple_builds(build_locator, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildApi->get_multiple_builds: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **build_locator**
     - **str**
     - 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `Builds <../models/Builds.html>`_

`Back to top <#>`_

.. _get_zipped_file_of_build:

get_zipped_file_of_build
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    path = 'path_example' # str | 
    build_locator = 'build_locator_example' # str | 
    base_path = 'base_path_example' # str |  (optional)
    locator = 'locator_example' # str |  (optional)
    name = 'name_example' # str |  (optional)
    resolve_parameters = true # bool |  (optional)
    log_build_usage = true # bool |  (optional)

    try:
        # Get specific file zipped.
        tc.build_api.get_zipped_file_of_build(path, build_locator, base_path=base_path, locator=locator, name=name, resolve_parameters=resolve_parameters, log_build_usage=log_build_usage)
    except ApiException as e:
        print("Exception when calling BuildApi->get_zipped_file_of_build: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **path**
     - **str**
     - 
   * - **build_locator**
     - **str**
     - 
   * - **base_path**
     - **str**
     - [optional] 
   * - **locator**
     - **str**
     - [optional] 
   * - **name**
     - **str**
     - [optional] 
   * - **resolve_parameters**
     - **bool**
     - [optional] 
   * - **log_build_usage**
     - **bool**
     - [optional] 

Return type:
    void (empty response body)

`Back to top <#>`_

.. _mark_build_as_running:

mark_build_as_running
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    build_locator = 'build_locator_example' # str | 
    body = 'body_example' # str |  (optional)
    fields = 'fields_example' # str |  (optional)

    try:
        # Starts the queued build as an agent-less build and returns the corresponding running build.
        api_response = tc.build_api.mark_build_as_running(build_locator, body=body, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildApi->mark_build_as_running: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **build_locator**
     - **str**
     - 
   * - **body**
     - **str**
     - [optional] 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `Build <../models/Build.html>`_

`Back to top <#>`_

.. _pin_multiple_builds:

pin_multiple_builds
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    build_locator = 'build_locator_example' # str | 
    body = dohq_teamcity.PinInfo() # PinInfo |  (optional)
    fields = 'fields_example' # str |  (optional)

    try:
        # Pin multiple matching builds.
        api_response = tc.build_api.pin_multiple_builds(build_locator, body=body, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildApi->pin_multiple_builds: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **build_locator**
     - **str**
     - 
   * - **body**
     - `PinInfo <../models/PinInfo.html>`_
     - [optional] 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `MultipleOperationResult <../models/MultipleOperationResult.html>`_

`Back to top <#>`_

.. _remove_multiple_build_tags:

remove_multiple_build_tags
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    build_locator = 'build_locator_example' # str | 
    body = dohq_teamcity.Tags() # Tags |  (optional)
    fields = 'fields_example' # str |  (optional)

    try:
        # Remove tags from multiple matching builds.
        api_response = tc.build_api.remove_multiple_build_tags(build_locator, body=body, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildApi->remove_multiple_build_tags: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **build_locator**
     - **str**
     - 
   * - **body**
     - `Tags <../models/Tags.html>`_
     - [optional] 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `MultipleOperationResult <../models/MultipleOperationResult.html>`_

`Back to top <#>`_

.. _reset_build_finish_properties:

reset_build_finish_properties
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    build_locator = 'build_locator_example' # str | 

    try:
        # Remove build parameters from the matching build.
        tc.build_api.reset_build_finish_properties(build_locator)
    except ApiException as e:
        print("Exception when calling BuildApi->reset_build_finish_properties: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **build_locator**
     - **str**
     - 

Return type:
    void (empty response body)

`Back to top <#>`_

.. _set_build_comment:

set_build_comment
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    build_locator = 'build_locator_example' # str | 
    body = 'body_example' # str |  (optional)

    try:
        # Update the comment on the matching build.
        tc.build_api.set_build_comment(build_locator, body=body)
    except ApiException as e:
        print("Exception when calling BuildApi->set_build_comment: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **build_locator**
     - **str**
     - 
   * - **body**
     - **str**
     - [optional] 

Return type:
    void (empty response body)

`Back to top <#>`_

.. _set_build_finish_date:

set_build_finish_date
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    build_locator = 'build_locator_example' # str | 
    body = 'body_example' # str |  (optional)

    try:
        # Marks the running build as finished by passing agent the current time of the build to finish.
        api_response = tc.build_api.set_build_finish_date(build_locator, body=body)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildApi->set_build_finish_date: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **build_locator**
     - **str**
     - 
   * - **body**
     - **str**
     - [optional] 

Return type:
    **str**

`Back to top <#>`_

.. _set_build_number:

set_build_number
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    build_locator = 'build_locator_example' # str | 
    body = 'body_example' # str |  (optional)

    try:
        # Update the number of the matching build.
        api_response = tc.build_api.set_build_number(build_locator, body=body)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildApi->set_build_number: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **build_locator**
     - **str**
     - 
   * - **body**
     - **str**
     - [optional] 

Return type:
    **str**

`Back to top <#>`_

.. _set_build_pin_info:

set_build_pin_info
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    build_locator = 'build_locator_example' # str | 
    body = dohq_teamcity.PinInfo() # PinInfo |  (optional)
    fields = 'fields_example' # str |  (optional)

    try:
        # Update the pin info of the matching build.
        api_response = tc.build_api.set_build_pin_info(build_locator, body=body, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildApi->set_build_pin_info: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **build_locator**
     - **str**
     - 
   * - **body**
     - `PinInfo <../models/PinInfo.html>`_
     - [optional] 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `PinInfo <../models/PinInfo.html>`_

`Back to top <#>`_

.. _set_build_status:

set_build_status
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    build_locator = 'build_locator_example' # str | 
    fields = 'fields_example' # str |  (optional)
    body = dohq_teamcity.BuildStatusUpdate() # BuildStatusUpdate |  (optional)

    try:
        # Change status of the build.
        tc.build_api.set_build_status(build_locator, fields=fields, body=body)
    except ApiException as e:
        print("Exception when calling BuildApi->set_build_status: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **build_locator**
     - **str**
     - 
   * - **fields**
     - **str**
     - [optional] 
   * - **body**
     - `BuildStatusUpdate <../models/BuildStatusUpdate.html>`_
     - [optional] 

Return type:
    void (empty response body)

`Back to top <#>`_

.. _set_build_status_text:

set_build_status_text
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    build_locator = 'build_locator_example' # str | 
    body = 'body_example' # str |  (optional)

    try:
        # Update the build status of the matching build.
        api_response = tc.build_api.set_build_status_text(build_locator, body=body)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildApi->set_build_status_text: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **build_locator**
     - **str**
     - 
   * - **body**
     - **str**
     - [optional] 

Return type:
    **str**

`Back to top <#>`_

.. _set_build_tags:

set_build_tags
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    build_locator = 'build_locator_example' # str | 
    locator = 'locator_example' # str |  (optional)
    body = dohq_teamcity.Tags() # Tags |  (optional)
    fields = 'fields_example' # str |  (optional)

    try:
        # Update tags of the matching build.
        api_response = tc.build_api.set_build_tags(build_locator, locator=locator, body=body, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildApi->set_build_tags: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **build_locator**
     - **str**
     - 
   * - **locator**
     - **str**
     - [optional] 
   * - **body**
     - `Tags <../models/Tags.html>`_
     - [optional] 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `Tags <../models/Tags.html>`_

`Back to top <#>`_

.. _set_finished_time:

set_finished_time
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    build_locator = 'build_locator_example' # str | 

    try:
        # Marks the running build as finished by passing agent the current time of the build to finish.
        api_response = tc.build_api.set_finished_time(build_locator)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildApi->set_finished_time: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **build_locator**
     - **str**
     - 

Return type:
    **str**

`Back to top <#>`_

.. _set_multiple_build_comments:

set_multiple_build_comments
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    build_locator = 'build_locator_example' # str | 
    body = 'body_example' # str |  (optional)
    fields = 'fields_example' # str |  (optional)

    try:
        # Update comments in multiple matching builds.
        api_response = tc.build_api.set_multiple_build_comments(build_locator, body=body, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildApi->set_multiple_build_comments: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **build_locator**
     - **str**
     - 
   * - **body**
     - **str**
     - [optional] 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `MultipleOperationResult <../models/MultipleOperationResult.html>`_

`Back to top <#>`_

