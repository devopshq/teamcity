dohq_teamcity.AgentPoolApi
######################################

.. note::

   + All ``serve_*`` method have aliases with get: ``serve_something`` == ``get_something``
   + Some API have ``get`` method - default method to get object by locator (e.g ``agent_api.get('id:123')`` return ``Agent`` model by id
   + See more examples on page :doc:`/examples/api/AgentPoolApi` and model examples
   + This is autogenerated page, don't change them directly, use template. Read more in :doc:`/development`

.. list-table::
   :widths: 20 80
   :header-rows: 1

   * - Method
     - HTTP request
   * - :ref:`add_agent_to_agent_pool`
     - **POST** ``/app/rest/agentPools/{agentPoolLocator}/agents``
   * - :ref:`add_project_to_agent_pool`
     - **POST** ``/app/rest/agentPools/{agentPoolLocator}/projects``
   * - :ref:`create_agent_pool`
     - **POST** ``/app/rest/agentPools``
   * - :ref:`delete_agent_pool`
     - **DELETE** ``/app/rest/agentPools/{agentPoolLocator}``
   * - :ref:`delete_all_projects_from_agent_pool`
     - **DELETE** ``/app/rest/agentPools/{agentPoolLocator}/projects``
   * - :ref:`delete_project_from_agent_pool`
     - **DELETE** ``/app/rest/agentPools/{agentPoolLocator}/projects/{projectLocator}``
   * - :ref:`get_agent_pool_of_agent_pool`
     - **GET** ``/app/rest/agentPools/{agentPoolLocator}``
   * - :ref:`get_all_agent_pools`
     - **GET** ``/app/rest/agentPools``
   * - :ref:`get_all_agents_from_agent_pool`
     - **GET** ``/app/rest/agentPools/{agentPoolLocator}/agents``
   * - :ref:`get_all_projects_from_agent_pool`
     - **GET** ``/app/rest/agentPools/{agentPoolLocator}/projects``
   * - :ref:`get_field_from_agent_pool`
     - **GET** ``/app/rest/agentPools/{agentPoolLocator}/{field}``
   * - :ref:`set_agent_pool_field`
     - **PUT** ``/app/rest/agentPools/{agentPoolLocator}/{field}``
   * - :ref:`set_agent_pool_projects`
     - **PUT** ``/app/rest/agentPools/{agentPoolLocator}/projects``

.. _add_agent_to_agent_pool:

add_agent_to_agent_pool
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    agent_pool_locator = 'agent_pool_locator_example' # str | 
    body = dohq_teamcity.Agent() # Agent |  (optional)
    fields = 'fields_example' # str |  (optional)

    try:
        # Assign the agent to the matching agent pool.
        api_response = tc.agent_pool_api.add_agent_to_agent_pool(agent_pool_locator, body=body, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling AgentPoolApi->add_agent_to_agent_pool: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **agent_pool_locator**
     - **str**
     - 
   * - **body**
     - `Agent <../models/Agent.html>`_
     - [optional] 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `Agent <../models/Agent.html>`_

`Back to top <#>`_

.. _add_project_to_agent_pool:

add_project_to_agent_pool
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    agent_pool_locator = 'agent_pool_locator_example' # str | 
    body = dohq_teamcity.Project() # Project |  (optional)

    try:
        # Assign the project to the matching agent pool.
        api_response = tc.agent_pool_api.add_project_to_agent_pool(agent_pool_locator, body=body)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling AgentPoolApi->add_project_to_agent_pool: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **agent_pool_locator**
     - **str**
     - 
   * - **body**
     - `Project <../models/Project.html>`_
     - [optional] 

Return type:
    `Project <../models/Project.html>`_

`Back to top <#>`_

.. _create_agent_pool:

create_agent_pool
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    body = dohq_teamcity.AgentPool() # AgentPool |  (optional)

    try:
        # Create a new agent pool.
        api_response = tc.agent_pool_api.create_agent_pool(body=body)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling AgentPoolApi->create_agent_pool: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **body**
     - `AgentPool <../models/AgentPool.html>`_
     - [optional] 

Return type:
    `AgentPool <../models/AgentPool.html>`_

`Back to top <#>`_

.. _delete_agent_pool:

delete_agent_pool
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    agent_pool_locator = 'agent_pool_locator_example' # str | 

    try:
        # Delete the agent pool matching the locator.
        tc.agent_pool_api.delete_agent_pool(agent_pool_locator)
    except ApiException as e:
        print("Exception when calling AgentPoolApi->delete_agent_pool: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **agent_pool_locator**
     - **str**
     - 

Return type:
    void (empty response body)

`Back to top <#>`_

.. _delete_all_projects_from_agent_pool:

delete_all_projects_from_agent_pool
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    agent_pool_locator = 'agent_pool_locator_example' # str | 

    try:
        # Unassign all projects from the matching agent pool.
        tc.agent_pool_api.delete_all_projects_from_agent_pool(agent_pool_locator)
    except ApiException as e:
        print("Exception when calling AgentPoolApi->delete_all_projects_from_agent_pool: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **agent_pool_locator**
     - **str**
     - 

Return type:
    void (empty response body)

`Back to top <#>`_

.. _delete_project_from_agent_pool:

delete_project_from_agent_pool
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    agent_pool_locator = 'agent_pool_locator_example' # str | 
    project_locator = 'project_locator_example' # str | 

    try:
        # Unassign the project from the matching agent pool.
        tc.agent_pool_api.delete_project_from_agent_pool(agent_pool_locator, project_locator)
    except ApiException as e:
        print("Exception when calling AgentPoolApi->delete_project_from_agent_pool: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **agent_pool_locator**
     - **str**
     - 
   * - **project_locator**
     - **str**
     - 

Return type:
    void (empty response body)

`Back to top <#>`_

.. _get_agent_pool_of_agent_pool:

get_agent_pool_of_agent_pool
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    agent_pool_locator = 'agent_pool_locator_example' # str | 
    fields = 'fields_example' # str |  (optional)

    try:
        # Get the agent pool matching the locator.
        api_response = tc.agent_pool_api.get_agent_pool_of_agent_pool(agent_pool_locator, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling AgentPoolApi->get_agent_pool_of_agent_pool: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **agent_pool_locator**
     - **str**
     - 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `AgentPool <../models/AgentPool.html>`_

`Back to top <#>`_

.. _get_all_agent_pools:

get_all_agent_pools
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    locator = 'locator_example' # str |  (optional)
    fields = 'fields_example' # str |  (optional)

    try:
        # Get all agent pools.
        api_response = tc.agent_pool_api.get_all_agent_pools(locator=locator, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling AgentPoolApi->get_all_agent_pools: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **locator**
     - **str**
     - [optional] 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `AgentPools <../models/AgentPools.html>`_

`Back to top <#>`_

.. _get_all_agents_from_agent_pool:

get_all_agents_from_agent_pool
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    agent_pool_locator = 'agent_pool_locator_example' # str | 
    locator = 'locator_example' # str |  (optional)
    fields = 'fields_example' # str |  (optional)

    try:
        # Get the agent of the matching agent pool.
        api_response = tc.agent_pool_api.get_all_agents_from_agent_pool(agent_pool_locator, locator=locator, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling AgentPoolApi->get_all_agents_from_agent_pool: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **agent_pool_locator**
     - **str**
     - 
   * - **locator**
     - **str**
     - [optional] 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `Agents <../models/Agents.html>`_

`Back to top <#>`_

.. _get_all_projects_from_agent_pool:

get_all_projects_from_agent_pool
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    agent_pool_locator = 'agent_pool_locator_example' # str | 
    fields = 'fields_example' # str |  (optional)

    try:
        # Get all projects of the matching agent pool.
        api_response = tc.agent_pool_api.get_all_projects_from_agent_pool(agent_pool_locator, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling AgentPoolApi->get_all_projects_from_agent_pool: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **agent_pool_locator**
     - **str**
     - 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `Projects <../models/Projects.html>`_

`Back to top <#>`_

.. _get_field_from_agent_pool:

get_field_from_agent_pool
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    agent_pool_locator = 'agent_pool_locator_example' # str | 
    field = 'field_example' # str | 

    try:
        # Get a field of the matching agent pool.
        api_response = tc.agent_pool_api.get_field_from_agent_pool(agent_pool_locator, field)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling AgentPoolApi->get_field_from_agent_pool: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **agent_pool_locator**
     - **str**
     - 
   * - **field**
     - **str**
     - 

Return type:
    **str**

`Back to top <#>`_

.. _set_agent_pool_field:

set_agent_pool_field
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    agent_pool_locator = 'agent_pool_locator_example' # str | 
    field = 'field_example' # str | 
    body = 'body_example' # str |  (optional)

    try:
        # Update a field of the matching agent pool.
        api_response = tc.agent_pool_api.set_agent_pool_field(agent_pool_locator, field, body=body)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling AgentPoolApi->set_agent_pool_field: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **agent_pool_locator**
     - **str**
     - 
   * - **field**
     - **str**
     - 
   * - **body**
     - **str**
     - [optional] 

Return type:
    **str**

`Back to top <#>`_

.. _set_agent_pool_projects:

set_agent_pool_projects
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    agent_pool_locator = 'agent_pool_locator_example' # str | 
    body = dohq_teamcity.Projects() # Projects |  (optional)

    try:
        # Update projects of the matching agent pool.
        api_response = tc.agent_pool_api.set_agent_pool_projects(agent_pool_locator, body=body)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling AgentPoolApi->set_agent_pool_projects: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **agent_pool_locator**
     - **str**
     - 
   * - **body**
     - `Projects <../models/Projects.html>`_
     - [optional] 

Return type:
    `Projects <../models/Projects.html>`_

`Back to top <#>`_

