dohq_teamcity.GroupApi
######################################

.. note::

   + All ``serve_*`` method have aliases with get: ``serve_something`` == ``get_something``
   + Some API have ``get`` method - default method to get object by locator (e.g ``agent_api.get('id:123')`` return ``Agent`` model by id
   + See more examples on page :doc:`/examples/api/GroupApi` and model examples
   + This is autogenerated page, don't change them directly, use template. Read more in :doc:`/development`

.. list-table::
   :widths: 20 80
   :header-rows: 1

   * - Method
     - HTTP request
   * - :ref:`add_group`
     - **POST** ``/app/rest/userGroups``
   * - :ref:`add_role_at_scope_to_group`
     - **POST** ``/app/rest/userGroups/{groupLocator}/roles/{roleId}/{scope}``
   * - :ref:`add_role_to_group`
     - **POST** ``/app/rest/userGroups/{groupLocator}/roles``
   * - :ref:`delete_group`
     - **DELETE** ``/app/rest/userGroups/{groupLocator}``
   * - :ref:`get_all_groups`
     - **GET** ``/app/rest/userGroups``
   * - :ref:`get_group_parent_groups`
     - **GET** ``/app/rest/userGroups/{groupLocator}/parent-groups``
   * - :ref:`get_group_properties`
     - **GET** ``/app/rest/userGroups/{groupLocator}/properties``
   * - :ref:`get_group_property`
     - **GET** ``/app/rest/userGroups/{groupLocator}/properties/{name}``
   * - :ref:`get_group_role_at_scope`
     - **GET** ``/app/rest/userGroups/{groupLocator}/roles/{roleId}/{scope}``
   * - :ref:`get_group_roles`
     - **GET** ``/app/rest/userGroups/{groupLocator}/roles``
   * - :ref:`get_user_group_of_group`
     - **GET** ``/app/rest/userGroups/{groupLocator}``
   * - :ref:`remove_group_property`
     - **DELETE** ``/app/rest/userGroups/{groupLocator}/properties/{name}``
   * - :ref:`remove_role_at_scope_from_group`
     - **DELETE** ``/app/rest/userGroups/{groupLocator}/roles/{roleId}/{scope}``
   * - :ref:`set_group_parent_groups`
     - **PUT** ``/app/rest/userGroups/{groupLocator}/parent-groups``
   * - :ref:`set_group_property`
     - **PUT** ``/app/rest/userGroups/{groupLocator}/properties/{name}``
   * - :ref:`set_group_roles`
     - **PUT** ``/app/rest/userGroups/{groupLocator}/roles``

.. _add_group:

add_group
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    body = dohq_teamcity.Group() # Group |  (optional)
    fields = 'fields_example' # str |  (optional)

    try:
        # Add a new user group.
        api_response = tc.group_api.add_group(body=body, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling GroupApi->add_group: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **body**
     - `Group <../models/Group.html>`_
     - [optional] 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `Group <../models/Group.html>`_

`Back to top <#>`_

.. _add_role_at_scope_to_group:

add_role_at_scope_to_group
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    group_locator = 'group_locator_example' # str | 
    role_id = 'role_id_example' # str | 
    scope = 'scope_example' # str | 

    try:
        # Add a role with the specific scope to the matching user group.
        api_response = tc.group_api.add_role_at_scope_to_group(group_locator, role_id, scope)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling GroupApi->add_role_at_scope_to_group: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **group_locator**
     - **str**
     - 
   * - **role_id**
     - **str**
     - 
   * - **scope**
     - **str**
     - 

Return type:
    `Role <../models/Role.html>`_

`Back to top <#>`_

.. _add_role_to_group:

add_role_to_group
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    group_locator = 'group_locator_example' # str | 
    body = dohq_teamcity.Role() # Role |  (optional)

    try:
        # Add a role to the matching user group.
        api_response = tc.group_api.add_role_to_group(group_locator, body=body)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling GroupApi->add_role_to_group: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **group_locator**
     - **str**
     - 
   * - **body**
     - `Role <../models/Role.html>`_
     - [optional] 

Return type:
    `Role <../models/Role.html>`_

`Back to top <#>`_

.. _delete_group:

delete_group
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    group_locator = 'group_locator_example' # str | 

    try:
        # Delete user group matching the locator.
        tc.group_api.delete_group(group_locator)
    except ApiException as e:
        print("Exception when calling GroupApi->delete_group: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **group_locator**
     - **str**
     - 

Return type:
    void (empty response body)

`Back to top <#>`_

.. _get_all_groups:

get_all_groups
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    fields = 'fields_example' # str |  (optional)

    try:
        # Get all user groups.
        api_response = tc.group_api.get_all_groups(fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling GroupApi->get_all_groups: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **fields**
     - **str**
     - [optional] 

Return type:
    `Groups <../models/Groups.html>`_

`Back to top <#>`_

.. _get_group_parent_groups:

get_group_parent_groups
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    group_locator = 'group_locator_example' # str | 
    fields = 'fields_example' # str |  (optional)

    try:
        # Get parent groups of the matching user group.
        api_response = tc.group_api.get_group_parent_groups(group_locator, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling GroupApi->get_group_parent_groups: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **group_locator**
     - **str**
     - 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `Groups <../models/Groups.html>`_

`Back to top <#>`_

.. _get_group_properties:

get_group_properties
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    group_locator = 'group_locator_example' # str | 
    fields = 'fields_example' # str |  (optional)

    try:
        # Get properties of the matching user group.
        api_response = tc.group_api.get_group_properties(group_locator, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling GroupApi->get_group_properties: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **group_locator**
     - **str**
     - 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `Properties <../models/Properties.html>`_

`Back to top <#>`_

.. _get_group_property:

get_group_property
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    group_locator = 'group_locator_example' # str | 
    name = 'name_example' # str | 

    try:
        # Get a property of the matching user group.
        api_response = tc.group_api.get_group_property(group_locator, name)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling GroupApi->get_group_property: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **group_locator**
     - **str**
     - 
   * - **name**
     - **str**
     - 

Return type:
    **str**

`Back to top <#>`_

.. _get_group_role_at_scope:

get_group_role_at_scope
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    group_locator = 'group_locator_example' # str | 
    role_id = 'role_id_example' # str | 
    scope = 'scope_example' # str | 

    try:
        # Get a role with the specific scope of the matching user group.
        api_response = tc.group_api.get_group_role_at_scope(group_locator, role_id, scope)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling GroupApi->get_group_role_at_scope: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **group_locator**
     - **str**
     - 
   * - **role_id**
     - **str**
     - 
   * - **scope**
     - **str**
     - 

Return type:
    `Role <../models/Role.html>`_

`Back to top <#>`_

.. _get_group_roles:

get_group_roles
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    group_locator = 'group_locator_example' # str | 

    try:
        # Get all roles of the matching user group.
        api_response = tc.group_api.get_group_roles(group_locator)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling GroupApi->get_group_roles: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **group_locator**
     - **str**
     - 

Return type:
    `Roles <../models/Roles.html>`_

`Back to top <#>`_

.. _get_user_group_of_group:

get_user_group_of_group
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    group_locator = 'group_locator_example' # str | 
    fields = 'fields_example' # str |  (optional)

    try:
        # Get user group matching the locator.
        api_response = tc.group_api.get_user_group_of_group(group_locator, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling GroupApi->get_user_group_of_group: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **group_locator**
     - **str**
     - 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `Group <../models/Group.html>`_

`Back to top <#>`_

.. _remove_group_property:

remove_group_property
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    group_locator = 'group_locator_example' # str | 
    name = 'name_example' # str | 

    try:
        # Remove a property of the matching user group.
        tc.group_api.remove_group_property(group_locator, name)
    except ApiException as e:
        print("Exception when calling GroupApi->remove_group_property: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **group_locator**
     - **str**
     - 
   * - **name**
     - **str**
     - 

Return type:
    void (empty response body)

`Back to top <#>`_

.. _remove_role_at_scope_from_group:

remove_role_at_scope_from_group
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    group_locator = 'group_locator_example' # str | 
    role_id = 'role_id_example' # str | 
    scope = 'scope_example' # str | 

    try:
        # Remove a role with the specific scope from the matching user group.
        tc.group_api.remove_role_at_scope_from_group(group_locator, role_id, scope)
    except ApiException as e:
        print("Exception when calling GroupApi->remove_role_at_scope_from_group: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **group_locator**
     - **str**
     - 
   * - **role_id**
     - **str**
     - 
   * - **scope**
     - **str**
     - 

Return type:
    void (empty response body)

`Back to top <#>`_

.. _set_group_parent_groups:

set_group_parent_groups
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    group_locator = 'group_locator_example' # str | 
    body = dohq_teamcity.Groups() # Groups |  (optional)
    fields = 'fields_example' # str |  (optional)

    try:
        # Update parent groups of the matching user group.
        api_response = tc.group_api.set_group_parent_groups(group_locator, body=body, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling GroupApi->set_group_parent_groups: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **group_locator**
     - **str**
     - 
   * - **body**
     - `Groups <../models/Groups.html>`_
     - [optional] 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `Groups <../models/Groups.html>`_

`Back to top <#>`_

.. _set_group_property:

set_group_property
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    group_locator = 'group_locator_example' # str | 
    name = 'name_example' # str | 
    body = 'body_example' # str |  (optional)

    try:
        # Update a property of the matching user group.
        api_response = tc.group_api.set_group_property(group_locator, name, body=body)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling GroupApi->set_group_property: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **group_locator**
     - **str**
     - 
   * - **name**
     - **str**
     - 
   * - **body**
     - **str**
     - [optional] 

Return type:
    **str**

`Back to top <#>`_

.. _set_group_roles:

set_group_roles
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    group_locator = 'group_locator_example' # str | 
    body = dohq_teamcity.Roles() # Roles |  (optional)

    try:
        # Update roles of the matching user group.
        api_response = tc.group_api.set_group_roles(group_locator, body=body)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling GroupApi->set_group_roles: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **group_locator**
     - **str**
     - 
   * - **body**
     - `Roles <../models/Roles.html>`_
     - [optional] 

Return type:
    `Roles <../models/Roles.html>`_

`Back to top <#>`_

