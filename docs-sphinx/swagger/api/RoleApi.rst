dohq_teamcity.RoleApi
######################################

.. note::

   + All ``serve_*`` method have aliases with get: ``serve_something`` == ``get_something``
   + Some API have ``get`` method - default method to get object by locator (e.g ``agent_api.get('id:123')`` return ``Agent`` model by id
   + See more examples on page :doc:`/examples/api/RoleApi` and model examples
   + This is autogenerated page, don't change them directly, use template. Read more in :doc:`/development`

.. list-table::
   :widths: 20 80
   :header-rows: 1

   * - Method
     - HTTP request
   * - :ref:`add_included_role`
     - **PUT** ``/app/rest/roles/id:{roleId}/included/{includedId}``
   * - :ref:`add_permission`
     - **PUT** ``/app/rest/roles/id:{roleId}/permissions/{permissionId}``
   * - :ref:`create_role`
     - **POST** ``/app/rest/roles``
   * - :ref:`delete_role`
     - **DELETE** ``/app/rest/roles/id:{id}``
   * - :ref:`get_role`
     - **GET** ``/app/rest/roles/id:{id}``
   * - :ref:`get_roles`
     - **GET** ``/app/rest/roles``
   * - :ref:`remove_included_role`
     - **DELETE** ``/app/rest/roles/id:{roleId}/included/{includedId}``
   * - :ref:`remove_permission`
     - **DELETE** ``/app/rest/roles/id:{roleId}/permissions/{permissionId}``

.. _add_included_role:

add_included_role
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    role_id = 'role_id_example' # str | 
    included_id = 'included_id_example' # str | 
    fields = 'fields_example' # str |  (optional)

    try:
        # Add an included role.
        api_response = tc.role_api.add_included_role(role_id, included_id, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling RoleApi->add_included_role: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **role_id**
     - **str**
     - 
   * - **included_id**
     - **str**
     - 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `Role <../models/Role.html>`_

`Back to top <#>`_

.. _add_permission:

add_permission
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    role_id = 'role_id_example' # str | 
    permission_id = 'permission_id_example' # str | 
    fields = 'fields_example' # str |  (optional)

    try:
        # Add a permission to a role.
        api_response = tc.role_api.add_permission(role_id, permission_id, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling RoleApi->add_permission: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **role_id**
     - **str**
     - 
   * - **permission_id**
     - **str**
     - 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `Role <../models/Role.html>`_

`Back to top <#>`_

.. _create_role:

create_role
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    body = dohq_teamcity.Role() # Role |  (optional)
    fields = 'fields_example' # str |  (optional)

    try:
        # Create a new role.
        api_response = tc.role_api.create_role(body=body, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling RoleApi->create_role: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **body**
     - `Role <../models/Role.html>`_
     - [optional] 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `Role <../models/Role.html>`_

`Back to top <#>`_

.. _delete_role:

delete_role
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    id = 'id_example' # str | 

    try:
        # Delete a role matching the id.
        tc.role_api.delete_role(id)
    except ApiException as e:
        print("Exception when calling RoleApi->delete_role: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **id**
     - **str**
     - 

Return type:
    void (empty response body)

`Back to top <#>`_

.. _get_role:

get_role
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    id = 'id_example' # str | 
    fields = 'fields_example' # str |  (optional)

    try:
        # Get a role with specified id.
        api_response = tc.role_api.get_role(id, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling RoleApi->get_role: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **id**
     - **str**
     - 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `Role <../models/Role.html>`_

`Back to top <#>`_

.. _get_roles:

get_roles
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    fields = 'fields_example' # str |  (optional)

    try:
        # Get all roles.
        api_response = tc.role_api.get_roles(fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling RoleApi->get_roles: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **fields**
     - **str**
     - [optional] 

Return type:
    `Roles <../models/Roles.html>`_

`Back to top <#>`_

.. _remove_included_role:

remove_included_role
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    role_id = 'role_id_example' # str | 
    included_id = 'included_id_example' # str | 
    fields = 'fields_example' # str |  (optional)

    try:
        # Remove an included role.
        api_response = tc.role_api.remove_included_role(role_id, included_id, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling RoleApi->remove_included_role: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **role_id**
     - **str**
     - 
   * - **included_id**
     - **str**
     - 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `Role <../models/Role.html>`_

`Back to top <#>`_

.. _remove_permission:

remove_permission
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    role_id = 'role_id_example' # str | 
    permission_id = 'permission_id_example' # str | 
    fields = 'fields_example' # str |  (optional)

    try:
        # Remove a permission from a role.
        api_response = tc.role_api.remove_permission(role_id, permission_id, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling RoleApi->remove_permission: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **role_id**
     - **str**
     - 
   * - **permission_id**
     - **str**
     - 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `Role <../models/Role.html>`_

`Back to top <#>`_

