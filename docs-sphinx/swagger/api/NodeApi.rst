dohq_teamcity.NodeApi
######################################

.. note::

   + All ``serve_*`` method have aliases with get: ``serve_something`` == ``get_something``
   + Some API have ``get`` method - default method to get object by locator (e.g ``agent_api.get('id:123')`` return ``Agent`` model by id
   + See more examples on page :doc:`/examples/api/NodeApi` and model examples
   + This is autogenerated page, don't change them directly, use template. Read more in :doc:`/development`

.. list-table::
   :widths: 20 80
   :header-rows: 1

   * - Method
     - HTTP request
   * - :ref:`change_node_responsibility`
     - **PUT** ``/app/rest/server/nodes/{nodeLocator}/enabledResponsibilities/{name}``
   * - :ref:`get_all_nodes`
     - **GET** ``/app/rest/server/nodes``
   * - :ref:`get_disabled_responsibilities`
     - **GET** ``/app/rest/server/nodes/{nodeLocator}/disabledResponsibilities``
   * - :ref:`get_effective_responsibilities`
     - **GET** ``/app/rest/server/nodes/{nodeLocator}/effectiveResponsibilities``
   * - :ref:`get_enabled_responsibilities`
     - **GET** ``/app/rest/server/nodes/{nodeLocator}/enabledResponsibilities``
   * - :ref:`get_node`
     - **GET** ``/app/rest/server/nodes/{nodeLocator}``

.. _change_node_responsibility:

change_node_responsibility
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    node_locator = 'node_locator_example' # str | 
    name = 'name_example' # str | 
    body = 'body_example' # str |  (optional)

    try:
        # Enables or disables responsibility for a node.
        api_response = tc.node_api.change_node_responsibility(node_locator, name, body=body)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling NodeApi->change_node_responsibility: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **node_locator**
     - **str**
     - 
   * - **name**
     - **str**
     - 
   * - **body**
     - **str**
     - [optional] 

Return type:
    `EnabledResponsibilities <../models/EnabledResponsibilities.html>`_

`Back to top <#>`_

.. _get_all_nodes:

get_all_nodes
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    locator = 'locator_example' # str |  (optional)
    fields = 'fields_example' # str |  (optional)

    try:
        # Get all TeamCity nodes.
        api_response = tc.node_api.get_all_nodes(locator=locator, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling NodeApi->get_all_nodes: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **locator**
     - **str**
     - [optional] 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `Nodes <../models/Nodes.html>`_

`Back to top <#>`_

.. _get_disabled_responsibilities:

get_disabled_responsibilities
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    node_locator = 'node_locator_example' # str | 
    fields = 'fields_example' # str |  (optional)

    try:
        # Get all effective responsibilities for a node matching the locator.
        api_response = tc.node_api.get_disabled_responsibilities(node_locator, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling NodeApi->get_disabled_responsibilities: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **node_locator**
     - **str**
     - 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `DisabledResponsibilities <../models/DisabledResponsibilities.html>`_

`Back to top <#>`_

.. _get_effective_responsibilities:

get_effective_responsibilities
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    node_locator = 'node_locator_example' # str | 
    fields = 'fields_example' # str |  (optional)

    try:
        # Get all effective responsibilities for a node matching the locator.
        api_response = tc.node_api.get_effective_responsibilities(node_locator, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling NodeApi->get_effective_responsibilities: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **node_locator**
     - **str**
     - 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `EffectiveResponsibilities <../models/EffectiveResponsibilities.html>`_

`Back to top <#>`_

.. _get_enabled_responsibilities:

get_enabled_responsibilities
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    node_locator = 'node_locator_example' # str | 
    fields = 'fields_example' # str |  (optional)

    try:
        # Get all enabled responsibilities for a node matching the locator.
        api_response = tc.node_api.get_enabled_responsibilities(node_locator, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling NodeApi->get_enabled_responsibilities: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **node_locator**
     - **str**
     - 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `EnabledResponsibilities <../models/EnabledResponsibilities.html>`_

`Back to top <#>`_

.. _get_node:

get_node
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

    node_locator = 'node_locator_example' # str | 
    fields = 'fields_example' # str |  (optional)

    try:
        # Get a node matching the locator.
        api_response = tc.node_api.get_node(node_locator, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling NodeApi->get_node: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **node_locator**
     - **str**
     - 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `Node <../models/Node.html>`_

`Back to top <#>`_

